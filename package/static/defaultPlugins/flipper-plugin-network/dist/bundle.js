"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod2) => function __require() {
  return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
  isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
  mod2
));
var __toCommonJS = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);

// plugins/public/node_modules/@protobufjs/aspromise/index.js
var require_aspromise = __commonJS({
  "plugins/public/node_modules/@protobufjs/aspromise/index.js"(exports2, module2) {
    "use strict";
    module2.exports = asPromise;
    function asPromise(fn, ctx) {
      var params = new Array(arguments.length - 1), offset = 0, index = 2, pending = true;
      while (index < arguments.length)
        params[offset++] = arguments[index++];
      return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err2) {
          if (pending) {
            pending = false;
            if (err2)
              reject(err2);
            else {
              var params2 = new Array(arguments.length - 1), offset2 = 0;
              while (offset2 < params2.length)
                params2[offset2++] = arguments[offset2];
              resolve.apply(null, params2);
            }
          }
        };
        try {
          fn.apply(ctx || null, params);
        } catch (err2) {
          if (pending) {
            pending = false;
            reject(err2);
          }
        }
      });
    }
  }
});

// plugins/public/node_modules/@protobufjs/base64/index.js
var require_base64 = __commonJS({
  "plugins/public/node_modules/@protobufjs/base64/index.js"(exports2) {
    "use strict";
    var base64 = exports2;
    base64.length = function length(string) {
      var p = string.length;
      if (!p)
        return 0;
      var n = 0;
      while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
      return Math.ceil(string.length * 3) / 4 - n;
    };
    var b64 = new Array(64);
    var s64 = new Array(123);
    for (i = 0; i < 64; )
      s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;
    var i;
    base64.encode = function encode2(buffer, start, end) {
      var parts = null, chunk = [];
      var i2 = 0, j = 0, t;
      while (start < end) {
        var b = buffer[start++];
        switch (j) {
          case 0:
            chunk[i2++] = b64[b >> 2];
            t = (b & 3) << 4;
            j = 1;
            break;
          case 1:
            chunk[i2++] = b64[t | b >> 4];
            t = (b & 15) << 2;
            j = 2;
            break;
          case 2:
            chunk[i2++] = b64[t | b >> 6];
            chunk[i2++] = b64[b & 63];
            j = 0;
            break;
        }
        if (i2 > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i2 = 0;
        }
      }
      if (j) {
        chunk[i2++] = b64[t];
        chunk[i2++] = 61;
        if (j === 1)
          chunk[i2++] = 61;
      }
      if (parts) {
        if (i2)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i2)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i2));
    };
    var invalidEncoding = "invalid encoding";
    base64.decode = function decode2(string, buffer, offset) {
      var start = offset;
      var j = 0, t;
      for (var i2 = 0; i2 < string.length; ) {
        var c = string.charCodeAt(i2++);
        if (c === 61 && j > 1)
          break;
        if ((c = s64[c]) === void 0)
          throw Error(invalidEncoding);
        switch (j) {
          case 0:
            t = c;
            j = 1;
            break;
          case 1:
            buffer[offset++] = t << 2 | (c & 48) >> 4;
            t = c;
            j = 2;
            break;
          case 2:
            buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
            t = c;
            j = 3;
            break;
          case 3:
            buffer[offset++] = (t & 3) << 6 | c;
            j = 0;
            break;
        }
      }
      if (j === 1)
        throw Error(invalidEncoding);
      return offset - start;
    };
    base64.test = function test(string) {
      return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
    };
  }
});

// plugins/public/node_modules/@protobufjs/eventemitter/index.js
var require_eventemitter = __commonJS({
  "plugins/public/node_modules/@protobufjs/eventemitter/index.js"(exports2, module2) {
    "use strict";
    module2.exports = EventEmitter;
    function EventEmitter() {
      this._listeners = {};
    }
    EventEmitter.prototype.on = function on(evt, fn, ctx) {
      (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn,
        ctx: ctx || this
      });
      return this;
    };
    EventEmitter.prototype.off = function off(evt, fn) {
      if (evt === void 0)
        this._listeners = {};
      else {
        if (fn === void 0)
          this._listeners[evt] = [];
        else {
          var listeners = this._listeners[evt];
          for (var i = 0; i < listeners.length; )
            if (listeners[i].fn === fn)
              listeners.splice(i, 1);
            else
              ++i;
        }
      }
      return this;
    };
    EventEmitter.prototype.emit = function emit(evt) {
      var listeners = this._listeners[evt];
      if (listeners) {
        var args = [], i = 1;
        for (; i < arguments.length; )
          args.push(arguments[i++]);
        for (i = 0; i < listeners.length; )
          listeners[i].fn.apply(listeners[i++].ctx, args);
      }
      return this;
    };
  }
});

// plugins/public/node_modules/@protobufjs/float/index.js
var require_float = __commonJS({
  "plugins/public/node_modules/@protobufjs/float/index.js"(exports2, module2) {
    "use strict";
    module2.exports = factory(factory);
    function factory(exports3) {
      if (typeof Float32Array !== "undefined")
        (function() {
          var f32 = new Float32Array([-0]), f8b = new Uint8Array(f32.buffer), le = f8b[3] === 128;
          function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
          }
          function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
          }
          exports3.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
          exports3.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;
          function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
          }
          function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
          }
          exports3.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
          exports3.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;
        })();
      else
        (function() {
          function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0)
              writeUint(1 / val > 0 ? 0 : 2147483648, buf, pos);
            else if (isNaN(val))
              writeUint(2143289344, buf, pos);
            else if (val > 34028234663852886e22)
              writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 11754943508222875e-54)
              writeUint((sign << 31 | Math.round(val / 1401298464324817e-60)) >>> 0, buf, pos);
            else {
              var exponent = Math.floor(Math.log(val) / Math.LN2), mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
              writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
          }
          exports3.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
          exports3.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);
          function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos), sign = (uint >> 31) * 2 + 1, exponent = uint >>> 23 & 255, mantissa = uint & 8388607;
            return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 1401298464324817e-60 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
          }
          exports3.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
          exports3.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
        })();
      if (typeof Float64Array !== "undefined")
        (function() {
          var f64 = new Float64Array([-0]), f8b = new Uint8Array(f64.buffer), le = f8b[7] === 128;
          function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
          }
          function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
          }
          exports3.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
          exports3.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;
          function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
          }
          function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
          }
          exports3.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
          exports3.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;
        })();
      else
        (function() {
          function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0) {
              writeUint(0, buf, pos + off0);
              writeUint(1 / val > 0 ? 0 : 2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
              writeUint(0, buf, pos + off0);
              writeUint(2146959360, buf, pos + off1);
            } else if (val > 17976931348623157e292) {
              writeUint(0, buf, pos + off0);
              writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
              var mantissa;
              if (val < 22250738585072014e-324) {
                mantissa = val / 5e-324;
                writeUint(mantissa >>> 0, buf, pos + off0);
                writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
              } else {
                var exponent = Math.floor(Math.log(val) / Math.LN2);
                if (exponent === 1024)
                  exponent = 1023;
                mantissa = val * Math.pow(2, -exponent);
                writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
              }
            }
          }
          exports3.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
          exports3.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);
          function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0), hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1, exponent = hi >>> 20 & 2047, mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
          }
          exports3.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
          exports3.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
        })();
      return exports3;
    }
    function writeUintLE(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    function writeUintBE(val, buf, pos) {
      buf[pos] = val >>> 24;
      buf[pos + 1] = val >>> 16 & 255;
      buf[pos + 2] = val >>> 8 & 255;
      buf[pos + 3] = val & 255;
    }
    function readUintLE(buf, pos) {
      return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
    }
    function readUintBE(buf, pos) {
      return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
    }
  }
});

// plugins/public/node_modules/@protobufjs/inquire/index.js
var require_inquire = __commonJS({
  "plugins/public/node_modules/@protobufjs/inquire/index.js"(exports, module) {
    "use strict";
    module.exports = inquire;
    function inquire(moduleName) {
      try {
        var mod = eval("quire".replace(/^/, "re"))(moduleName);
        if (mod && (mod.length || Object.keys(mod).length))
          return mod;
      } catch (e) {
      }
      return null;
    }
  }
});

// plugins/public/node_modules/@protobufjs/utf8/index.js
var require_utf8 = __commonJS({
  "plugins/public/node_modules/@protobufjs/utf8/index.js"(exports2) {
    "use strict";
    var utf8 = exports2;
    utf8.length = function utf8_length(string) {
      var len = 0, c = 0;
      for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
          len += 1;
        else if (c < 2048)
          len += 2;
        else if ((c & 64512) === 55296 && (string.charCodeAt(i + 1) & 64512) === 56320) {
          ++i;
          len += 4;
        } else
          len += 3;
      }
      return len;
    };
    utf8.read = function utf8_read(buffer, start, end) {
      var len = end - start;
      if (len < 1)
        return "";
      var parts = null, chunk = [], i = 0, t;
      while (start < end) {
        t = buffer[start++];
        if (t < 128)
          chunk[i++] = t;
        else if (t > 191 && t < 224)
          chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
          t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 65536;
          chunk[i++] = 55296 + (t >> 10);
          chunk[i++] = 56320 + (t & 1023);
        } else
          chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i = 0;
        }
      }
      if (parts) {
        if (i)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i));
    };
    utf8.write = function utf8_write(string, buffer, offset) {
      var start = offset, c1, c2;
      for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
          buffer[offset++] = c1;
        } else if (c1 < 2048) {
          buffer[offset++] = c1 >> 6 | 192;
          buffer[offset++] = c1 & 63 | 128;
        } else if ((c1 & 64512) === 55296 && ((c2 = string.charCodeAt(i + 1)) & 64512) === 56320) {
          c1 = 65536 + ((c1 & 1023) << 10) + (c2 & 1023);
          ++i;
          buffer[offset++] = c1 >> 18 | 240;
          buffer[offset++] = c1 >> 12 & 63 | 128;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        } else {
          buffer[offset++] = c1 >> 12 | 224;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        }
      }
      return offset - start;
    };
  }
});

// plugins/public/node_modules/@protobufjs/pool/index.js
var require_pool = __commonJS({
  "plugins/public/node_modules/@protobufjs/pool/index.js"(exports2, module2) {
    "use strict";
    module2.exports = pool;
    function pool(alloc, slice, size) {
      var SIZE = size || 8192;
      var MAX = SIZE >>> 1;
      var slab = null;
      var offset = SIZE;
      return function pool_alloc(size2) {
        if (size2 < 1 || size2 > MAX)
          return alloc(size2);
        if (offset + size2 > SIZE) {
          slab = alloc(SIZE);
          offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size2);
        if (offset & 7)
          offset = (offset | 7) + 1;
        return buf;
      };
    }
  }
});

// plugins/public/node_modules/protobufjs/src/util/longbits.js
var require_longbits = __commonJS({
  "plugins/public/node_modules/protobufjs/src/util/longbits.js"(exports2, module2) {
    "use strict";
    module2.exports = LongBits;
    var util = require_minimal();
    function LongBits(lo, hi) {
      this.lo = lo >>> 0;
      this.hi = hi >>> 0;
    }
    var zero2 = LongBits.zero = new LongBits(0, 0);
    zero2.toNumber = function() {
      return 0;
    };
    zero2.zzEncode = zero2.zzDecode = function() {
      return this;
    };
    zero2.length = function() {
      return 1;
    };
    var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
    LongBits.fromNumber = function fromNumber(value) {
      if (value === 0)
        return zero2;
      var sign = value < 0;
      if (sign)
        value = -value;
      var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;
      if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
          lo = 0;
          if (++hi > 4294967295)
            hi = 0;
        }
      }
      return new LongBits(lo, hi);
    };
    LongBits.from = function from(value) {
      if (typeof value === "number")
        return LongBits.fromNumber(value);
      if (util.isString(value)) {
        if (util.Long)
          value = util.Long.fromString(value);
        else
          return LongBits.fromNumber(parseInt(value, 10));
      }
      return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero2;
    };
    LongBits.prototype.toNumber = function toNumber(unsigned) {
      if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0, hi = ~this.hi >>> 0;
        if (!lo)
          hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
      }
      return this.lo + this.hi * 4294967296;
    };
    LongBits.prototype.toLong = function toLong(unsigned) {
      return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
    };
    var charCodeAt = String.prototype.charCodeAt;
    LongBits.fromHash = function fromHash(hash) {
      if (hash === zeroHash)
        return zero2;
      return new LongBits(
        (charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0,
        (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0
      );
    };
    LongBits.prototype.toHash = function toHash() {
      return String.fromCharCode(
        this.lo & 255,
        this.lo >>> 8 & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24,
        this.hi & 255,
        this.hi >>> 8 & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
      );
    };
    LongBits.prototype.zzEncode = function zzEncode() {
      var mask = this.hi >> 31;
      this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
      this.lo = (this.lo << 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.zzDecode = function zzDecode() {
      var mask = -(this.lo & 1);
      this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
      this.hi = (this.hi >>> 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.length = function length() {
      var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
      return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
    };
  }
});

// plugins/public/node_modules/protobufjs/src/util/minimal.js
var require_minimal = __commonJS({
  "plugins/public/node_modules/protobufjs/src/util/minimal.js"(exports2) {
    "use strict";
    var util = exports2;
    util.asPromise = require_aspromise();
    util.base64 = require_base64();
    util.EventEmitter = require_eventemitter();
    util.float = require_float();
    util.inquire = require_inquire();
    util.utf8 = require_utf8();
    util.pool = require_pool();
    util.LongBits = require_longbits();
    util.isNode = Boolean(typeof global !== "undefined" && global && global.process && global.process.versions && global.process.versions.node);
    util.global = util.isNode && global || typeof window !== "undefined" && window || typeof self !== "undefined" && self || exports2;
    util.emptyArray = Object.freeze ? Object.freeze([]) : [];
    util.emptyObject = Object.freeze ? Object.freeze({}) : {};
    util.isInteger = Number.isInteger || function isInteger(value) {
      return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
    };
    util.isString = function isString(value) {
      return typeof value === "string" || value instanceof String;
    };
    util.isObject = function isObject(value) {
      return value && typeof value === "object";
    };
    util.isset = util.isSet = function isSet(obj, prop) {
      var value = obj[prop];
      if (value != null && obj.hasOwnProperty(prop))
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
      return false;
    };
    util.Buffer = function() {
      try {
        var Buffer3 = util.inquire("buffer").Buffer;
        return Buffer3.prototype.utf8Write ? Buffer3 : null;
      } catch (e) {
        return null;
      }
    }();
    util._Buffer_from = null;
    util._Buffer_allocUnsafe = null;
    util.newBuffer = function newBuffer(sizeOrArray) {
      return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
    };
    util.Array = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    util.Long = util.global.dcodeIO && util.global.dcodeIO.Long || util.global.Long || util.inquire("long");
    util.key2Re = /^true|false|0|1$/;
    util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
    util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
    util.longToHash = function longToHash(value) {
      return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
    };
    util.longFromHash = function longFromHash(hash, unsigned) {
      var bits = util.LongBits.fromHash(hash);
      if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
      return bits.toNumber(Boolean(unsigned));
    };
    function merge(dst, src, ifNotSet) {
      for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === void 0 || !ifNotSet)
          dst[keys[i]] = src[keys[i]];
      return dst;
    }
    util.merge = merge;
    util.lcFirst = function lcFirst(str) {
      return str.charAt(0).toLowerCase() + str.substring(1);
    };
    function newError(name) {
      function CustomError(message2, properties) {
        if (!(this instanceof CustomError))
          return new CustomError(message2, properties);
        Object.defineProperty(this, "message", { get: function() {
          return message2;
        } });
        if (Error.captureStackTrace)
          Error.captureStackTrace(this, CustomError);
        else
          Object.defineProperty(this, "stack", { value: new Error().stack || "" });
        if (properties)
          merge(this, properties);
      }
      (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;
      Object.defineProperty(CustomError.prototype, "name", { get: function() {
        return name;
      } });
      CustomError.prototype.toString = function toString2() {
        return this.name + ": " + this.message;
      };
      return CustomError;
    }
    util.newError = newError;
    util.ProtocolError = newError("ProtocolError");
    util.oneOfGetter = function getOneOf(fieldNames) {
      var fieldMap = {};
      for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;
      return function() {
        for (var keys = Object.keys(this), i2 = keys.length - 1; i2 > -1; --i2)
          if (fieldMap[keys[i2]] === 1 && this[keys[i2]] !== void 0 && this[keys[i2]] !== null)
            return keys[i2];
      };
    };
    util.oneOfSetter = function setOneOf(fieldNames) {
      return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
          if (fieldNames[i] !== name)
            delete this[fieldNames[i]];
      };
    };
    util.toJSONOptions = {
      longs: String,
      enums: String,
      bytes: String,
      json: true
    };
    util._configure = function() {
      var Buffer3 = util.Buffer;
      if (!Buffer3) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
      }
      util._Buffer_from = Buffer3.from !== Uint8Array.from && Buffer3.from || function Buffer_from(value, encoding) {
        return new Buffer3(value, encoding);
      };
      util._Buffer_allocUnsafe = Buffer3.allocUnsafe || function Buffer_allocUnsafe(size) {
        return new Buffer3(size);
      };
    };
  }
});

// plugins/public/node_modules/protobufjs/src/writer.js
var require_writer = __commonJS({
  "plugins/public/node_modules/protobufjs/src/writer.js"(exports2, module2) {
    "use strict";
    module2.exports = Writer;
    var util = require_minimal();
    var BufferWriter;
    var LongBits = util.LongBits;
    var base64 = util.base64;
    var utf8 = util.utf8;
    function Op(fn, len, val) {
      this.fn = fn;
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    function noop() {
    }
    function State(writer) {
      this.head = writer.head;
      this.tail = writer.tail;
      this.len = writer.len;
      this.next = writer.states;
    }
    function Writer() {
      this.len = 0;
      this.head = new Op(noop, 0, 0);
      this.tail = this.head;
      this.states = null;
    }
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
          return new BufferWriter();
        })();
      } : function create_array() {
        return new Writer();
      };
    };
    Writer.create = create();
    Writer.alloc = function alloc(size) {
      return new util.Array(size);
    };
    if (util.Array !== Array)
      Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);
    Writer.prototype._push = function push(fn, len, val) {
      this.tail = this.tail.next = new Op(fn, len, val);
      this.len += len;
      return this;
    };
    function writeByte(val, buf, pos) {
      buf[pos] = val & 255;
    }
    function writeVarint32(val, buf, pos) {
      while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
      }
      buf[pos] = val;
    }
    function VarintOp(len, val) {
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    VarintOp.prototype = Object.create(Op.prototype);
    VarintOp.prototype.fn = writeVarint32;
    Writer.prototype.uint32 = function write_uint32(value) {
      this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5,
        value
      )).len;
      return this;
    };
    Writer.prototype.int32 = function write_int32(value) {
      return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) : this.uint32(value);
    };
    Writer.prototype.sint32 = function write_sint32(value) {
      return this.uint32((value << 1 ^ value >> 31) >>> 0);
    };
    function writeVarint64(val, buf, pos) {
      while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
      }
      while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
      }
      buf[pos++] = val.lo;
    }
    Writer.prototype.uint64 = function write_uint64(value) {
      var bits = LongBits.from(value);
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.int64 = Writer.prototype.uint64;
    Writer.prototype.sint64 = function write_sint64(value) {
      var bits = LongBits.from(value).zzEncode();
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.bool = function write_bool(value) {
      return this._push(writeByte, 1, value ? 1 : 0);
    };
    function writeFixed32(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    Writer.prototype.fixed32 = function write_fixed32(value) {
      return this._push(writeFixed32, 4, value >>> 0);
    };
    Writer.prototype.sfixed32 = Writer.prototype.fixed32;
    Writer.prototype.fixed64 = function write_fixed64(value) {
      var bits = LongBits.from(value);
      return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
    };
    Writer.prototype.sfixed64 = Writer.prototype.fixed64;
    Writer.prototype.float = function write_float(value) {
      return this._push(util.float.writeFloatLE, 4, value);
    };
    Writer.prototype.double = function write_double(value) {
      return this._push(util.float.writeDoubleLE, 8, value);
    };
    var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
      buf.set(val, pos);
    } : function writeBytes_for(val, buf, pos) {
      for (var i = 0; i < val.length; ++i)
        buf[pos + i] = val[i];
    };
    Writer.prototype.bytes = function write_bytes(value) {
      var len = value.length >>> 0;
      if (!len)
        return this._push(writeByte, 1, 0);
      if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
      }
      return this.uint32(len)._push(writeBytes, len, value);
    };
    Writer.prototype.string = function write_string(value) {
      var len = utf8.length(value);
      return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
    };
    Writer.prototype.fork = function fork() {
      this.states = new State(this);
      this.head = this.tail = new Op(noop, 0, 0);
      this.len = 0;
      return this;
    };
    Writer.prototype.reset = function reset() {
      if (this.states) {
        this.head = this.states.head;
        this.tail = this.states.tail;
        this.len = this.states.len;
        this.states = this.states.next;
      } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len = 0;
      }
      return this;
    };
    Writer.prototype.ldelim = function ldelim() {
      var head = this.head, tail = this.tail, len = this.len;
      this.reset().uint32(len);
      if (len) {
        this.tail.next = head.next;
        this.tail = tail;
        this.len += len;
      }
      return this;
    };
    Writer.prototype.finish = function finish() {
      var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;
      while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
      }
      return buf;
    };
    Writer._configure = function(BufferWriter_) {
      BufferWriter = BufferWriter_;
      Writer.create = create();
      BufferWriter._configure();
    };
  }
});

// plugins/public/node_modules/protobufjs/src/writer_buffer.js
var require_writer_buffer = __commonJS({
  "plugins/public/node_modules/protobufjs/src/writer_buffer.js"(exports2, module2) {
    "use strict";
    module2.exports = BufferWriter;
    var Writer = require_writer();
    (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
    var util = require_minimal();
    function BufferWriter() {
      Writer.call(this);
    }
    BufferWriter._configure = function() {
      BufferWriter.alloc = util._Buffer_allocUnsafe;
      BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos);
      } : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy)
          val.copy(buf, pos, 0, val.length);
        else
          for (var i = 0; i < val.length; )
            buf[pos++] = val[i++];
      };
    };
    BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
      if (util.isString(value))
        value = util._Buffer_from(value, "base64");
      var len = value.length >>> 0;
      this.uint32(len);
      if (len)
        this._push(BufferWriter.writeBytesBuffer, len, value);
      return this;
    };
    function writeStringBuffer(val, buf, pos) {
      if (val.length < 40)
        util.utf8.write(val, buf, pos);
      else if (buf.utf8Write)
        buf.utf8Write(val, pos);
      else
        buf.write(val, pos);
    }
    BufferWriter.prototype.string = function write_string_buffer(value) {
      var len = util.Buffer.byteLength(value);
      this.uint32(len);
      if (len)
        this._push(writeStringBuffer, len, value);
      return this;
    };
    BufferWriter._configure();
  }
});

// plugins/public/node_modules/protobufjs/src/reader.js
var require_reader = __commonJS({
  "plugins/public/node_modules/protobufjs/src/reader.js"(exports2, module2) {
    "use strict";
    module2.exports = Reader;
    var util = require_minimal();
    var BufferReader;
    var LongBits = util.LongBits;
    var utf8 = util.utf8;
    function indexOutOfRange(reader, writeLength) {
      return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
    }
    function Reader(buffer) {
      this.buf = buffer;
      this.pos = 0;
      this.len = buffer.length;
    }
    var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
      if (buffer instanceof Uint8Array || Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    } : function create_array2(buffer) {
      if (Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    };
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup(buffer) {
        return (Reader.create = function create_buffer(buffer2) {
          return util.Buffer.isBuffer(buffer2) ? new BufferReader(buffer2) : create_array(buffer2);
        })(buffer);
      } : create_array;
    };
    Reader.create = create();
    Reader.prototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;
    Reader.prototype.uint32 = function read_uint32_setup() {
      var value = 4294967295;
      return function read_uint32() {
        value = (this.buf[this.pos] & 127) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        if ((this.pos += 5) > this.len) {
          this.pos = this.len;
          throw indexOutOfRange(this, 10);
        }
        return value;
      };
    }();
    Reader.prototype.int32 = function read_int32() {
      return this.uint32() | 0;
    };
    Reader.prototype.sint32 = function read_sint32() {
      var value = this.uint32();
      return value >>> 1 ^ -(value & 1) | 0;
    };
    function readLongVarint() {
      var bits = new LongBits(0, 0);
      var i = 0;
      if (this.len - this.pos > 4) {
        for (; i < 4; ++i) {
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
        if (this.buf[this.pos++] < 128)
          return bits;
        i = 0;
      } else {
        for (; i < 3; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
      }
      if (this.len - this.pos > 4) {
        for (; i < 5; ++i) {
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      } else {
        for (; i < 5; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      }
      throw Error("invalid varint encoding");
    }
    Reader.prototype.bool = function read_bool() {
      return this.uint32() !== 0;
    };
    function readFixed32_end(buf, end) {
      return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
    }
    Reader.prototype.fixed32 = function read_fixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4);
    };
    Reader.prototype.sfixed32 = function read_sfixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4) | 0;
    };
    function readFixed64() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);
      return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
    }
    Reader.prototype.float = function read_float() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readFloatLE(this.buf, this.pos);
      this.pos += 4;
      return value;
    };
    Reader.prototype.double = function read_double() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readDoubleLE(this.buf, this.pos);
      this.pos += 8;
      return value;
    };
    Reader.prototype.bytes = function read_bytes() {
      var length = this.uint32(), start = this.pos, end = this.pos + length;
      if (end > this.len)
        throw indexOutOfRange(this, length);
      this.pos += length;
      if (Array.isArray(this.buf))
        return this.buf.slice(start, end);
      return start === end ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);
    };
    Reader.prototype.string = function read_string() {
      var bytes = this.bytes();
      return utf8.read(bytes, 0, bytes.length);
    };
    Reader.prototype.skip = function skip(length) {
      if (typeof length === "number") {
        if (this.pos + length > this.len)
          throw indexOutOfRange(this, length);
        this.pos += length;
      } else {
        do {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
      }
      return this;
    };
    Reader.prototype.skipType = function(wireType) {
      switch (wireType) {
        case 0:
          this.skip();
          break;
        case 1:
          this.skip(8);
          break;
        case 2:
          this.skip(this.uint32());
          break;
        case 3:
          while ((wireType = this.uint32() & 7) !== 4) {
            this.skipType(wireType);
          }
          break;
        case 5:
          this.skip(4);
          break;
        default:
          throw Error("invalid wire type " + wireType + " at offset " + this.pos);
      }
      return this;
    };
    Reader._configure = function(BufferReader_) {
      BufferReader = BufferReader_;
      Reader.create = create();
      BufferReader._configure();
      var fn = util.Long ? "toLong" : "toNumber";
      util.merge(Reader.prototype, {
        int64: function read_int64() {
          return readLongVarint.call(this)[fn](false);
        },
        uint64: function read_uint64() {
          return readLongVarint.call(this)[fn](true);
        },
        sint64: function read_sint64() {
          return readLongVarint.call(this).zzDecode()[fn](false);
        },
        fixed64: function read_fixed64() {
          return readFixed64.call(this)[fn](true);
        },
        sfixed64: function read_sfixed64() {
          return readFixed64.call(this)[fn](false);
        }
      });
    };
  }
});

// plugins/public/node_modules/protobufjs/src/reader_buffer.js
var require_reader_buffer = __commonJS({
  "plugins/public/node_modules/protobufjs/src/reader_buffer.js"(exports2, module2) {
    "use strict";
    module2.exports = BufferReader;
    var Reader = require_reader();
    (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
    var util = require_minimal();
    function BufferReader(buffer) {
      Reader.call(this, buffer);
    }
    BufferReader._configure = function() {
      if (util.Buffer)
        BufferReader.prototype._slice = util.Buffer.prototype.slice;
    };
    BufferReader.prototype.string = function read_string_buffer() {
      var len = this.uint32();
      return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
    };
    BufferReader._configure();
  }
});

// plugins/public/node_modules/protobufjs/src/rpc/service.js
var require_service = __commonJS({
  "plugins/public/node_modules/protobufjs/src/rpc/service.js"(exports2, module2) {
    "use strict";
    module2.exports = Service;
    var util = require_minimal();
    (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
    function Service(rpcImpl, requestDelimited, responseDelimited) {
      if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");
      util.EventEmitter.call(this);
      this.rpcImpl = rpcImpl;
      this.requestDelimited = Boolean(requestDelimited);
      this.responseDelimited = Boolean(responseDelimited);
    }
    Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
      if (!request)
        throw TypeError("request must be specified");
      var self2 = this;
      if (!callback)
        return util.asPromise(rpcCall, self2, method, requestCtor, responseCtor, request);
      if (!self2.rpcImpl) {
        setTimeout(function() {
          callback(Error("already ended"));
        }, 0);
        return void 0;
      }
      try {
        return self2.rpcImpl(
          method,
          requestCtor[self2.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
          function rpcCallback(err2, response) {
            if (err2) {
              self2.emit("error", err2, method);
              return callback(err2);
            }
            if (response === null) {
              self2.end(true);
              return void 0;
            }
            if (!(response instanceof responseCtor)) {
              try {
                response = responseCtor[self2.responseDelimited ? "decodeDelimited" : "decode"](response);
              } catch (err3) {
                self2.emit("error", err3, method);
                return callback(err3);
              }
            }
            self2.emit("data", response, method);
            return callback(null, response);
          }
        );
      } catch (err2) {
        self2.emit("error", err2, method);
        setTimeout(function() {
          callback(err2);
        }, 0);
        return void 0;
      }
    };
    Service.prototype.end = function end(endedByRPC) {
      if (this.rpcImpl) {
        if (!endedByRPC)
          this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
      }
      return this;
    };
  }
});

// plugins/public/node_modules/protobufjs/src/rpc.js
var require_rpc = __commonJS({
  "plugins/public/node_modules/protobufjs/src/rpc.js"(exports2) {
    "use strict";
    var rpc = exports2;
    rpc.Service = require_service();
  }
});

// plugins/public/node_modules/protobufjs/src/roots.js
var require_roots = __commonJS({
  "plugins/public/node_modules/protobufjs/src/roots.js"(exports2, module2) {
    "use strict";
    module2.exports = {};
  }
});

// plugins/public/node_modules/protobufjs/src/index-minimal.js
var require_index_minimal = __commonJS({
  "plugins/public/node_modules/protobufjs/src/index-minimal.js"(exports2) {
    "use strict";
    var protobuf2 = exports2;
    protobuf2.build = "minimal";
    protobuf2.Writer = require_writer();
    protobuf2.BufferWriter = require_writer_buffer();
    protobuf2.Reader = require_reader();
    protobuf2.BufferReader = require_reader_buffer();
    protobuf2.util = require_minimal();
    protobuf2.rpc = require_rpc();
    protobuf2.roots = require_roots();
    protobuf2.configure = configure;
    function configure() {
      protobuf2.util._configure();
      protobuf2.Writer._configure(protobuf2.BufferWriter);
      protobuf2.Reader._configure(protobuf2.BufferReader);
    }
    configure();
  }
});

// plugins/public/node_modules/@protobufjs/codegen/index.js
var require_codegen = __commonJS({
  "plugins/public/node_modules/@protobufjs/codegen/index.js"(exports2, module2) {
    "use strict";
    module2.exports = codegen;
    function codegen(functionParams, functionName) {
      if (typeof functionParams === "string") {
        functionName = functionParams;
        functionParams = void 0;
      }
      var body = [];
      function Codegen(formatStringOrScope) {
        if (typeof formatStringOrScope !== "string") {
          var source = toString2();
          if (codegen.verbose)
            console.log("codegen: " + source);
          source = "return " + source;
          if (formatStringOrScope) {
            var scopeKeys = Object.keys(formatStringOrScope), scopeParams = new Array(scopeKeys.length + 1), scopeValues = new Array(scopeKeys.length), scopeOffset = 0;
            while (scopeOffset < scopeKeys.length) {
              scopeParams[scopeOffset] = scopeKeys[scopeOffset];
              scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];
            }
            scopeParams[scopeOffset] = source;
            return Function.apply(null, scopeParams).apply(null, scopeValues);
          }
          return Function(source)();
        }
        var formatParams = new Array(arguments.length - 1), formatOffset = 0;
        while (formatOffset < formatParams.length)
          formatParams[formatOffset] = arguments[++formatOffset];
        formatOffset = 0;
        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {
          var value = formatParams[formatOffset++];
          switch ($1) {
            case "d":
            case "f":
              return String(Number(value));
            case "i":
              return String(Math.floor(value));
            case "j":
              return JSON.stringify(value);
            case "s":
              return String(value);
          }
          return "%";
        });
        if (formatOffset !== formatParams.length)
          throw Error("parameter count mismatch");
        body.push(formatStringOrScope);
        return Codegen;
      }
      function toString2(functionNameOverride) {
        return "function " + (functionNameOverride || functionName || "") + "(" + (functionParams && functionParams.join(",") || "") + "){\n  " + body.join("\n  ") + "\n}";
      }
      Codegen.toString = toString2;
      return Codegen;
    }
    codegen.verbose = false;
  }
});

// plugins/public/node_modules/@protobufjs/fetch/index.js
var require_fetch = __commonJS({
  "plugins/public/node_modules/@protobufjs/fetch/index.js"(exports2, module2) {
    "use strict";
    module2.exports = fetch;
    var asPromise = require_aspromise();
    var inquire2 = require_inquire();
    var fs = inquire2("fs");
    function fetch(filename, options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = {};
      } else if (!options)
        options = {};
      if (!callback)
        return asPromise(fetch, this, filename, options);
      if (!options.xhr && fs && fs.readFile)
        return fs.readFile(filename, function fetchReadFileCallback(err2, contents) {
          return err2 && typeof XMLHttpRequest !== "undefined" ? fetch.xhr(filename, options, callback) : err2 ? callback(err2) : callback(null, options.binary ? contents : contents.toString("utf8"));
        });
      return fetch.xhr(filename, options, callback);
    }
    fetch.xhr = function fetch_xhr(filename, options, callback) {
      var xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function fetchOnReadyStateChange() {
        if (xhr.readyState !== 4)
          return void 0;
        if (xhr.status !== 0 && xhr.status !== 200)
          return callback(Error("status " + xhr.status));
        if (options.binary) {
          var buffer = xhr.response;
          if (!buffer) {
            buffer = [];
            for (var i = 0; i < xhr.responseText.length; ++i)
              buffer.push(xhr.responseText.charCodeAt(i) & 255);
          }
          return callback(null, typeof Uint8Array !== "undefined" ? new Uint8Array(buffer) : buffer);
        }
        return callback(null, xhr.responseText);
      };
      if (options.binary) {
        if ("overrideMimeType" in xhr)
          xhr.overrideMimeType("text/plain; charset=x-user-defined");
        xhr.responseType = "arraybuffer";
      }
      xhr.open("GET", filename);
      xhr.send();
    };
  }
});

// plugins/public/node_modules/@protobufjs/path/index.js
var require_path = __commonJS({
  "plugins/public/node_modules/@protobufjs/path/index.js"(exports2) {
    "use strict";
    var path = exports2;
    var isAbsolute = path.isAbsolute = function isAbsolute2(path2) {
      return /^(?:\/|\w+:)/.test(path2);
    };
    var normalize = path.normalize = function normalize2(path2) {
      path2 = path2.replace(/\\/g, "/").replace(/\/{2,}/g, "/");
      var parts = path2.split("/"), absolute = isAbsolute(path2), prefix = "";
      if (absolute)
        prefix = parts.shift() + "/";
      for (var i = 0; i < parts.length; ) {
        if (parts[i] === "..") {
          if (i > 0 && parts[i - 1] !== "..")
            parts.splice(--i, 2);
          else if (absolute)
            parts.splice(i, 1);
          else
            ++i;
        } else if (parts[i] === ".")
          parts.splice(i, 1);
        else
          ++i;
      }
      return prefix + parts.join("/");
    };
    path.resolve = function resolve(originPath, includePath, alreadyNormalized) {
      if (!alreadyNormalized)
        includePath = normalize(includePath);
      if (isAbsolute(includePath))
        return includePath;
      if (!alreadyNormalized)
        originPath = normalize(originPath);
      return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize(originPath + "/" + includePath) : includePath;
    };
  }
});

// plugins/public/node_modules/protobufjs/src/types.js
var require_types = __commonJS({
  "plugins/public/node_modules/protobufjs/src/types.js"(exports2) {
    "use strict";
    var types = exports2;
    var util = require_util();
    var s = [
      "double",
      "float",
      "int32",
      "uint32",
      "sint32",
      "fixed32",
      "sfixed32",
      "int64",
      "uint64",
      "sint64",
      "fixed64",
      "sfixed64",
      "bool",
      "string",
      "bytes"
    ];
    function bake(values, offset) {
      var i = 0, o = {};
      offset |= 0;
      while (i < values.length)
        o[s[i + offset]] = values[i++];
      return o;
    }
    types.basic = bake([
      1,
      5,
      0,
      0,
      0,
      5,
      5,
      0,
      0,
      0,
      1,
      1,
      0,
      2,
      2
    ]);
    types.defaults = bake([
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      false,
      "",
      util.emptyArray,
      null
    ]);
    types.long = bake([
      0,
      0,
      0,
      1,
      1
    ], 7);
    types.mapKey = bake([
      0,
      0,
      0,
      5,
      5,
      0,
      0,
      0,
      1,
      1,
      0,
      2
    ], 2);
    types.packed = bake([
      1,
      5,
      0,
      0,
      0,
      5,
      5,
      0,
      0,
      0,
      1,
      1,
      0
    ]);
  }
});

// plugins/public/node_modules/protobufjs/src/field.js
var require_field = __commonJS({
  "plugins/public/node_modules/protobufjs/src/field.js"(exports2, module2) {
    "use strict";
    module2.exports = Field;
    var ReflectionObject = require_object();
    ((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = "Field";
    var Enum = require_enum();
    var types = require_types();
    var util = require_util();
    var Type2;
    var ruleRe = /^required|optional|repeated$/;
    Field.fromJSON = function fromJSON(name, json) {
      return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);
    };
    function Field(name, id, type, rule, extend, options, comment) {
      if (util.isObject(rule)) {
        comment = extend;
        options = rule;
        rule = extend = void 0;
      } else if (util.isObject(extend)) {
        comment = options;
        options = extend;
        extend = void 0;
      }
      ReflectionObject.call(this, name, options);
      if (!util.isInteger(id) || id < 0)
        throw TypeError("id must be a non-negative integer");
      if (!util.isString(type))
        throw TypeError("type must be a string");
      if (rule !== void 0 && !ruleRe.test(rule = rule.toString().toLowerCase()))
        throw TypeError("rule must be a string rule");
      if (extend !== void 0 && !util.isString(extend))
        throw TypeError("extend must be a string");
      this.rule = rule && rule !== "optional" ? rule : void 0;
      this.type = type;
      this.id = id;
      this.extend = extend || void 0;
      this.required = rule === "required";
      this.optional = !this.required;
      this.repeated = rule === "repeated";
      this.map = false;
      this.message = null;
      this.partOf = null;
      this.typeDefault = null;
      this.defaultValue = null;
      this.long = util.Long ? types.long[type] !== void 0 : false;
      this.bytes = type === "bytes";
      this.resolvedType = null;
      this.extensionField = null;
      this.declaringField = null;
      this._packed = null;
      this.comment = comment;
    }
    Object.defineProperty(Field.prototype, "packed", {
      get: function() {
        if (this._packed === null)
          this._packed = this.getOption("packed") !== false;
        return this._packed;
      }
    });
    Field.prototype.setOption = function setOption(name, value, ifNotSet) {
      if (name === "packed")
        this._packed = null;
      return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);
    };
    Field.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "rule",
        this.rule !== "optional" && this.rule || void 0,
        "type",
        this.type,
        "id",
        this.id,
        "extend",
        this.extend,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    Field.prototype.resolve = function resolve() {
      if (this.resolved)
        return this;
      if ((this.typeDefault = types.defaults[this.type]) === void 0) {
        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
        if (this.resolvedType instanceof Type2)
          this.typeDefault = null;
        else
          this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]];
      }
      if (this.options && this.options["default"] != null) {
        this.typeDefault = this.options["default"];
        if (this.resolvedType instanceof Enum && typeof this.typeDefault === "string")
          this.typeDefault = this.resolvedType.values[this.typeDefault];
      }
      if (this.options) {
        if (this.options.packed === true || this.options.packed !== void 0 && this.resolvedType && !(this.resolvedType instanceof Enum))
          delete this.options.packed;
        if (!Object.keys(this.options).length)
          this.options = void 0;
      }
      if (this.long) {
        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === "u");
        if (Object.freeze)
          Object.freeze(this.typeDefault);
      } else if (this.bytes && typeof this.typeDefault === "string") {
        var buf;
        if (util.base64.test(this.typeDefault))
          util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);
        else
          util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);
        this.typeDefault = buf;
      }
      if (this.map)
        this.defaultValue = util.emptyObject;
      else if (this.repeated)
        this.defaultValue = util.emptyArray;
      else
        this.defaultValue = this.typeDefault;
      if (this.parent instanceof Type2)
        this.parent.ctor.prototype[this.name] = this.defaultValue;
      return ReflectionObject.prototype.resolve.call(this);
    };
    Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {
      if (typeof fieldType === "function")
        fieldType = util.decorateType(fieldType).name;
      else if (fieldType && typeof fieldType === "object")
        fieldType = util.decorateEnum(fieldType).name;
      return function fieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, { "default": defaultValue }));
      };
    };
    Field._configure = function configure(Type_) {
      Type2 = Type_;
    };
  }
});

// plugins/public/node_modules/protobufjs/src/namespace.js
var require_namespace = __commonJS({
  "plugins/public/node_modules/protobufjs/src/namespace.js"(exports2, module2) {
    "use strict";
    module2.exports = Namespace;
    var ReflectionObject = require_object();
    ((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = "Namespace";
    var Field = require_field();
    var util = require_util();
    var Type2;
    var Service;
    var Enum;
    Namespace.fromJSON = function fromJSON(name, json) {
      return new Namespace(name, json.options).addJSON(json.nested);
    };
    function arrayToJSON(array, toJSONOptions) {
      if (!(array && array.length))
        return void 0;
      var obj = {};
      for (var i = 0; i < array.length; ++i)
        obj[array[i].name] = array[i].toJSON(toJSONOptions);
      return obj;
    }
    Namespace.arrayToJSON = arrayToJSON;
    Namespace.isReservedId = function isReservedId(reserved, id) {
      if (reserved) {
        for (var i = 0; i < reserved.length; ++i)
          if (typeof reserved[i] !== "string" && reserved[i][0] <= id && reserved[i][1] > id)
            return true;
      }
      return false;
    };
    Namespace.isReservedName = function isReservedName(reserved, name) {
      if (reserved) {
        for (var i = 0; i < reserved.length; ++i)
          if (reserved[i] === name)
            return true;
      }
      return false;
    };
    function Namespace(name, options) {
      ReflectionObject.call(this, name, options);
      this.nested = void 0;
      this._nestedArray = null;
    }
    function clearCache(namespace) {
      namespace._nestedArray = null;
      return namespace;
    }
    Object.defineProperty(Namespace.prototype, "nestedArray", {
      get: function() {
        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));
      }
    });
    Namespace.prototype.toJSON = function toJSON(toJSONOptions) {
      return util.toObject([
        "options",
        this.options,
        "nested",
        arrayToJSON(this.nestedArray, toJSONOptions)
      ]);
    };
    Namespace.prototype.addJSON = function addJSON(nestedJson) {
      var ns = this;
      if (nestedJson) {
        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {
          nested = nestedJson[names[i]];
          ns.add(
            (nested.fields !== void 0 ? Type2.fromJSON : nested.values !== void 0 ? Enum.fromJSON : nested.methods !== void 0 ? Service.fromJSON : nested.id !== void 0 ? Field.fromJSON : Namespace.fromJSON)(names[i], nested)
          );
        }
      }
      return this;
    };
    Namespace.prototype.get = function get(name) {
      return this.nested && this.nested[name] || null;
    };
    Namespace.prototype.getEnum = function getEnum(name) {
      if (this.nested && this.nested[name] instanceof Enum)
        return this.nested[name].values;
      throw Error("no such enum: " + name);
    };
    Namespace.prototype.add = function add(object) {
      if (!(object instanceof Field && object.extend !== void 0 || object instanceof Type2 || object instanceof Enum || object instanceof Service || object instanceof Namespace))
        throw TypeError("object must be a valid nested object");
      if (!this.nested)
        this.nested = {};
      else {
        var prev = this.get(object.name);
        if (prev) {
          if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type2 || prev instanceof Service)) {
            var nested = prev.nestedArray;
            for (var i = 0; i < nested.length; ++i)
              object.add(nested[i]);
            this.remove(prev);
            if (!this.nested)
              this.nested = {};
            object.setOptions(prev.options, true);
          } else
            throw Error("duplicate name '" + object.name + "' in " + this);
        }
      }
      this.nested[object.name] = object;
      object.onAdd(this);
      return clearCache(this);
    };
    Namespace.prototype.remove = function remove(object) {
      if (!(object instanceof ReflectionObject))
        throw TypeError("object must be a ReflectionObject");
      if (object.parent !== this)
        throw Error(object + " is not a member of " + this);
      delete this.nested[object.name];
      if (!Object.keys(this.nested).length)
        this.nested = void 0;
      object.onRemove(this);
      return clearCache(this);
    };
    Namespace.prototype.define = function define(path, json) {
      if (util.isString(path))
        path = path.split(".");
      else if (!Array.isArray(path))
        throw TypeError("illegal path");
      if (path && path.length && path[0] === "")
        throw Error("path must be relative");
      var ptr = this;
      while (path.length > 0) {
        var part = path.shift();
        if (ptr.nested && ptr.nested[part]) {
          ptr = ptr.nested[part];
          if (!(ptr instanceof Namespace))
            throw Error("path conflicts with non-namespace objects");
        } else
          ptr.add(ptr = new Namespace(part));
      }
      if (json)
        ptr.addJSON(json);
      return ptr;
    };
    Namespace.prototype.resolveAll = function resolveAll() {
      var nested = this.nestedArray, i = 0;
      while (i < nested.length)
        if (nested[i] instanceof Namespace)
          nested[i++].resolveAll();
        else
          nested[i++].resolve();
      return this.resolve();
    };
    Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {
      if (typeof filterTypes === "boolean") {
        parentAlreadyChecked = filterTypes;
        filterTypes = void 0;
      } else if (filterTypes && !Array.isArray(filterTypes))
        filterTypes = [filterTypes];
      if (util.isString(path) && path.length) {
        if (path === ".")
          return this.root;
        path = path.split(".");
      } else if (!path.length)
        return this;
      if (path[0] === "")
        return this.root.lookup(path.slice(1), filterTypes);
      var found = this.get(path[0]);
      if (found) {
        if (path.length === 1) {
          if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)
            return found;
        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))
          return found;
      } else
        for (var i = 0; i < this.nestedArray.length; ++i)
          if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))
            return found;
      if (this.parent === null || parentAlreadyChecked)
        return null;
      return this.parent.lookup(path, filterTypes);
    };
    Namespace.prototype.lookupType = function lookupType(path) {
      var found = this.lookup(path, [Type2]);
      if (!found)
        throw Error("no such type: " + path);
      return found;
    };
    Namespace.prototype.lookupEnum = function lookupEnum(path) {
      var found = this.lookup(path, [Enum]);
      if (!found)
        throw Error("no such Enum '" + path + "' in " + this);
      return found;
    };
    Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {
      var found = this.lookup(path, [Type2, Enum]);
      if (!found)
        throw Error("no such Type or Enum '" + path + "' in " + this);
      return found;
    };
    Namespace.prototype.lookupService = function lookupService(path) {
      var found = this.lookup(path, [Service]);
      if (!found)
        throw Error("no such Service '" + path + "' in " + this);
      return found;
    };
    Namespace._configure = function(Type_, Service_, Enum_) {
      Type2 = Type_;
      Service = Service_;
      Enum = Enum_;
    };
  }
});

// plugins/public/node_modules/protobufjs/src/oneof.js
var require_oneof = __commonJS({
  "plugins/public/node_modules/protobufjs/src/oneof.js"(exports2, module2) {
    "use strict";
    module2.exports = OneOf;
    var ReflectionObject = require_object();
    ((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";
    var Field = require_field();
    var util = require_util();
    function OneOf(name, fieldNames, options, comment) {
      if (!Array.isArray(fieldNames)) {
        options = fieldNames;
        fieldNames = void 0;
      }
      ReflectionObject.call(this, name, options);
      if (!(fieldNames === void 0 || Array.isArray(fieldNames)))
        throw TypeError("fieldNames must be an Array");
      this.oneof = fieldNames || [];
      this.fieldsArray = [];
      this.comment = comment;
    }
    OneOf.fromJSON = function fromJSON(name, json) {
      return new OneOf(name, json.oneof, json.options, json.comment);
    };
    OneOf.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        this.options,
        "oneof",
        this.oneof,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    function addFieldsToParent(oneof) {
      if (oneof.parent) {
        for (var i = 0; i < oneof.fieldsArray.length; ++i)
          if (!oneof.fieldsArray[i].parent)
            oneof.parent.add(oneof.fieldsArray[i]);
      }
    }
    OneOf.prototype.add = function add(field) {
      if (!(field instanceof Field))
        throw TypeError("field must be a Field");
      if (field.parent && field.parent !== this.parent)
        field.parent.remove(field);
      this.oneof.push(field.name);
      this.fieldsArray.push(field);
      field.partOf = this;
      addFieldsToParent(this);
      return this;
    };
    OneOf.prototype.remove = function remove(field) {
      if (!(field instanceof Field))
        throw TypeError("field must be a Field");
      var index = this.fieldsArray.indexOf(field);
      if (index < 0)
        throw Error(field + " is not a member of " + this);
      this.fieldsArray.splice(index, 1);
      index = this.oneof.indexOf(field.name);
      if (index > -1)
        this.oneof.splice(index, 1);
      field.partOf = null;
      return this;
    };
    OneOf.prototype.onAdd = function onAdd(parent) {
      ReflectionObject.prototype.onAdd.call(this, parent);
      var self2 = this;
      for (var i = 0; i < this.oneof.length; ++i) {
        var field = parent.get(this.oneof[i]);
        if (field && !field.partOf) {
          field.partOf = self2;
          self2.fieldsArray.push(field);
        }
      }
      addFieldsToParent(this);
    };
    OneOf.prototype.onRemove = function onRemove(parent) {
      for (var i = 0, field; i < this.fieldsArray.length; ++i)
        if ((field = this.fieldsArray[i]).parent)
          field.parent.remove(field);
      ReflectionObject.prototype.onRemove.call(this, parent);
    };
    OneOf.d = function decorateOneOf() {
      var fieldNames = new Array(arguments.length), index = 0;
      while (index < arguments.length)
        fieldNames[index] = arguments[index++];
      return function oneOfDecorator(prototype, oneofName) {
        util.decorateType(prototype.constructor).add(new OneOf(oneofName, fieldNames));
        Object.defineProperty(prototype, oneofName, {
          get: util.oneOfGetter(fieldNames),
          set: util.oneOfSetter(fieldNames)
        });
      };
    };
  }
});

// plugins/public/node_modules/protobufjs/src/mapfield.js
var require_mapfield = __commonJS({
  "plugins/public/node_modules/protobufjs/src/mapfield.js"(exports2, module2) {
    "use strict";
    module2.exports = MapField;
    var Field = require_field();
    ((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = "MapField";
    var types = require_types();
    var util = require_util();
    function MapField(name, id, keyType, type, options, comment) {
      Field.call(this, name, id, type, void 0, void 0, options, comment);
      if (!util.isString(keyType))
        throw TypeError("keyType must be a string");
      this.keyType = keyType;
      this.resolvedKeyType = null;
      this.map = true;
    }
    MapField.fromJSON = function fromJSON(name, json) {
      return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);
    };
    MapField.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "keyType",
        this.keyType,
        "type",
        this.type,
        "id",
        this.id,
        "extend",
        this.extend,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    MapField.prototype.resolve = function resolve() {
      if (this.resolved)
        return this;
      if (types.mapKey[this.keyType] === void 0)
        throw Error("invalid key type: " + this.keyType);
      return Field.prototype.resolve.call(this);
    };
    MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {
      if (typeof fieldValueType === "function")
        fieldValueType = util.decorateType(fieldValueType).name;
      else if (fieldValueType && typeof fieldValueType === "object")
        fieldValueType = util.decorateEnum(fieldValueType).name;
      return function mapFieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor).add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));
      };
    };
  }
});

// plugins/public/node_modules/protobufjs/src/method.js
var require_method = __commonJS({
  "plugins/public/node_modules/protobufjs/src/method.js"(exports2, module2) {
    "use strict";
    module2.exports = Method;
    var ReflectionObject = require_object();
    ((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = "Method";
    var util = require_util();
    function Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {
      if (util.isObject(requestStream)) {
        options = requestStream;
        requestStream = responseStream = void 0;
      } else if (util.isObject(responseStream)) {
        options = responseStream;
        responseStream = void 0;
      }
      if (!(type === void 0 || util.isString(type)))
        throw TypeError("type must be a string");
      if (!util.isString(requestType))
        throw TypeError("requestType must be a string");
      if (!util.isString(responseType))
        throw TypeError("responseType must be a string");
      ReflectionObject.call(this, name, options);
      this.type = type || "rpc";
      this.requestType = requestType;
      this.requestStream = requestStream ? true : void 0;
      this.responseType = responseType;
      this.responseStream = responseStream ? true : void 0;
      this.resolvedRequestType = null;
      this.resolvedResponseType = null;
      this.comment = comment;
      this.parsedOptions = parsedOptions;
    }
    Method.fromJSON = function fromJSON(name, json) {
      return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);
    };
    Method.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "type",
        this.type !== "rpc" && this.type || void 0,
        "requestType",
        this.requestType,
        "requestStream",
        this.requestStream,
        "responseType",
        this.responseType,
        "responseStream",
        this.responseStream,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : void 0,
        "parsedOptions",
        this.parsedOptions
      ]);
    };
    Method.prototype.resolve = function resolve() {
      if (this.resolved)
        return this;
      this.resolvedRequestType = this.parent.lookupType(this.requestType);
      this.resolvedResponseType = this.parent.lookupType(this.responseType);
      return ReflectionObject.prototype.resolve.call(this);
    };
  }
});

// plugins/public/node_modules/protobufjs/src/service.js
var require_service2 = __commonJS({
  "plugins/public/node_modules/protobufjs/src/service.js"(exports2, module2) {
    "use strict";
    module2.exports = Service;
    var Namespace = require_namespace();
    ((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = "Service";
    var Method = require_method();
    var util = require_util();
    var rpc = require_rpc();
    function Service(name, options) {
      Namespace.call(this, name, options);
      this.methods = {};
      this._methodsArray = null;
    }
    Service.fromJSON = function fromJSON(name, json) {
      var service = new Service(name, json.options);
      if (json.methods)
        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)
          service.add(Method.fromJSON(names[i], json.methods[names[i]]));
      if (json.nested)
        service.addJSON(json.nested);
      service.comment = json.comment;
      return service;
    };
    Service.prototype.toJSON = function toJSON(toJSONOptions) {
      var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        inherited && inherited.options || void 0,
        "methods",
        Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || {},
        "nested",
        inherited && inherited.nested || void 0,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    Object.defineProperty(Service.prototype, "methodsArray", {
      get: function() {
        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));
      }
    });
    function clearCache(service) {
      service._methodsArray = null;
      return service;
    }
    Service.prototype.get = function get(name) {
      return this.methods[name] || Namespace.prototype.get.call(this, name);
    };
    Service.prototype.resolveAll = function resolveAll() {
      var methods = this.methodsArray;
      for (var i = 0; i < methods.length; ++i)
        methods[i].resolve();
      return Namespace.prototype.resolve.call(this);
    };
    Service.prototype.add = function add(object) {
      if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);
      if (object instanceof Method) {
        this.methods[object.name] = object;
        object.parent = this;
        return clearCache(this);
      }
      return Namespace.prototype.add.call(this, object);
    };
    Service.prototype.remove = function remove(object) {
      if (object instanceof Method) {
        if (this.methods[object.name] !== object)
          throw Error(object + " is not a member of " + this);
        delete this.methods[object.name];
        object.parent = null;
        return clearCache(this);
      }
      return Namespace.prototype.remove.call(this, object);
    };
    Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {
      var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);
      for (var i = 0, method; i < this.methodsArray.length; ++i) {
        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\w_]/g, "");
        rpcService[methodName] = util.codegen(["r", "c"], util.isReserved(methodName) ? methodName + "_" : methodName)("return this.rpcCall(m,q,s,r,c)")({
          m: method,
          q: method.resolvedRequestType.ctor,
          s: method.resolvedResponseType.ctor
        });
      }
      return rpcService;
    };
  }
});

// plugins/public/node_modules/protobufjs/src/message.js
var require_message = __commonJS({
  "plugins/public/node_modules/protobufjs/src/message.js"(exports2, module2) {
    "use strict";
    module2.exports = Message;
    var util = require_minimal();
    function Message(properties) {
      if (properties)
        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          this[keys[i]] = properties[keys[i]];
    }
    Message.create = function create(properties) {
      return this.$type.create(properties);
    };
    Message.encode = function encode2(message2, writer) {
      return this.$type.encode(message2, writer);
    };
    Message.encodeDelimited = function encodeDelimited(message2, writer) {
      return this.$type.encodeDelimited(message2, writer);
    };
    Message.decode = function decode2(reader) {
      return this.$type.decode(reader);
    };
    Message.decodeDelimited = function decodeDelimited(reader) {
      return this.$type.decodeDelimited(reader);
    };
    Message.verify = function verify(message2) {
      return this.$type.verify(message2);
    };
    Message.fromObject = function fromObject(object) {
      return this.$type.fromObject(object);
    };
    Message.toObject = function toObject(message2, options) {
      return this.$type.toObject(message2, options);
    };
    Message.prototype.toJSON = function toJSON() {
      return this.$type.toObject(this, util.toJSONOptions);
    };
  }
});

// plugins/public/node_modules/protobufjs/src/decoder.js
var require_decoder = __commonJS({
  "plugins/public/node_modules/protobufjs/src/decoder.js"(exports2, module2) {
    "use strict";
    module2.exports = decoder;
    var Enum = require_enum();
    var types = require_types();
    var util = require_util();
    function missing(field) {
      return "missing required '" + field.name + "'";
    }
    function decoder(mtype) {
      var gen = util.codegen(["r", "l"], mtype.name + "$decode")("if(!(r instanceof Reader))")("r=Reader.create(r)")("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function(field2) {
        return field2.map;
      }).length ? ",k,value" : ""))("while(r.pos<c){")("var t=r.uint32()");
      if (mtype.group)
        gen("if((t&7)===4)")("break");
      gen("switch(t>>>3){");
      var i = 0;
      for (; i < mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(), type = field.resolvedType instanceof Enum ? "int32" : field.type, ref = "m" + util.safeProp(field.name);
        gen("case %i:", field.id);
        if (field.map) {
          gen("if(%s===util.emptyObject)", ref)("%s={}", ref)("var c2 = r.uint32()+r.pos");
          if (types.defaults[field.keyType] !== void 0)
            gen("k=%j", types.defaults[field.keyType]);
          else
            gen("k=null");
          if (types.defaults[type] !== void 0)
            gen("value=%j", types.defaults[type]);
          else
            gen("value=null");
          gen("while(r.pos<c2){")("var tag2=r.uint32()")("switch(tag2>>>3){")("case 1: k=r.%s(); break", field.keyType)("case 2:");
          if (types.basic[type] === void 0)
            gen("value=types[%i].decode(r,r.uint32())", i);
          else
            gen("value=r.%s()", type);
          gen("break")("default:")("r.skipType(tag2&7)")("break")("}")("}");
          if (types.long[field.keyType] !== void 0)
            gen('%s[typeof k==="object"?util.longToHash(k):k]=value', ref);
          else
            gen("%s[k]=value", ref);
        } else if (field.repeated) {
          gen("if(!(%s&&%s.length))", ref, ref)("%s=[]", ref);
          if (types.packed[type] !== void 0)
            gen("if((t&7)===2){")("var c2=r.uint32()+r.pos")("while(r.pos<c2)")("%s.push(r.%s())", ref, type)("}else");
          if (types.basic[type] === void 0)
            gen(field.resolvedType.group ? "%s.push(types[%i].decode(r))" : "%s.push(types[%i].decode(r,r.uint32()))", ref, i);
          else
            gen("%s.push(r.%s())", ref, type);
        } else if (types.basic[type] === void 0)
          gen(field.resolvedType.group ? "%s=types[%i].decode(r)" : "%s=types[%i].decode(r,r.uint32())", ref, i);
        else
          gen("%s=r.%s()", ref, type);
        gen("break");
      }
      gen("default:")("r.skipType(t&7)")("break")("}")("}");
      for (i = 0; i < mtype._fieldsArray.length; ++i) {
        var rfield = mtype._fieldsArray[i];
        if (rfield.required)
          gen("if(!m.hasOwnProperty(%j))", rfield.name)("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
      }
      return gen("return m");
    }
  }
});

// plugins/public/node_modules/protobufjs/src/verifier.js
var require_verifier = __commonJS({
  "plugins/public/node_modules/protobufjs/src/verifier.js"(exports2, module2) {
    "use strict";
    module2.exports = verifier;
    var Enum = require_enum();
    var util = require_util();
    function invalid(field, expected) {
      return field.name + ": " + expected + (field.repeated && expected !== "array" ? "[]" : field.map && expected !== "object" ? "{k:" + field.keyType + "}" : "") + " expected";
    }
    function genVerifyValue(gen, field, fieldIndex, ref) {
      if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) {
          gen("switch(%s){", ref)("default:")("return%j", invalid(field, "enum value"));
          for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j)
            gen("case %i:", field.resolvedType.values[keys[j]]);
          gen("break")("}");
        } else {
          gen("{")("var e=types[%i].verify(%s);", fieldIndex, ref)("if(e)")("return%j+e", field.name + ".")("}");
        }
      } else {
        switch (field.type) {
          case "int32":
          case "uint32":
          case "sint32":
          case "fixed32":
          case "sfixed32":
            gen("if(!util.isInteger(%s))", ref)("return%j", invalid(field, "integer"));
            break;
          case "int64":
          case "uint64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", ref, ref, ref, ref)("return%j", invalid(field, "integer|Long"));
            break;
          case "float":
          case "double":
            gen('if(typeof %s!=="number")', ref)("return%j", invalid(field, "number"));
            break;
          case "bool":
            gen('if(typeof %s!=="boolean")', ref)("return%j", invalid(field, "boolean"));
            break;
          case "string":
            gen("if(!util.isString(%s))", ref)("return%j", invalid(field, "string"));
            break;
          case "bytes":
            gen('if(!(%s&&typeof %s.length==="number"||util.isString(%s)))', ref, ref, ref)("return%j", invalid(field, "buffer"));
            break;
        }
      }
      return gen;
    }
    function genVerifyKey(gen, field, ref) {
      switch (field.keyType) {
        case "int32":
        case "uint32":
        case "sint32":
        case "fixed32":
        case "sfixed32":
          gen("if(!util.key32Re.test(%s))", ref)("return%j", invalid(field, "integer key"));
          break;
        case "int64":
        case "uint64":
        case "sint64":
        case "fixed64":
        case "sfixed64":
          gen("if(!util.key64Re.test(%s))", ref)("return%j", invalid(field, "integer|Long key"));
          break;
        case "bool":
          gen("if(!util.key2Re.test(%s))", ref)("return%j", invalid(field, "boolean key"));
          break;
      }
      return gen;
    }
    function verifier(mtype) {
      var gen = util.codegen(["m"], mtype.name + "$verify")('if(typeof m!=="object"||m===null)')("return%j", "object expected");
      var oneofs = mtype.oneofsArray, seenFirstField = {};
      if (oneofs.length)
        gen("var p={}");
      for (var i = 0; i < mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(), ref = "m" + util.safeProp(field.name);
        if (field.optional)
          gen("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name);
        if (field.map) {
          gen("if(!util.isObject(%s))", ref)("return%j", invalid(field, "object"))("var k=Object.keys(%s)", ref)("for(var i=0;i<k.length;++i){");
          genVerifyKey(gen, field, "k[i]");
          genVerifyValue(gen, field, i, ref + "[k[i]]")("}");
        } else if (field.repeated) {
          gen("if(!Array.isArray(%s))", ref)("return%j", invalid(field, "array"))("for(var i=0;i<%s.length;++i){", ref);
          genVerifyValue(gen, field, i, ref + "[i]")("}");
        } else {
          if (field.partOf) {
            var oneofProp = util.safeProp(field.partOf.name);
            if (seenFirstField[field.partOf.name] === 1)
              gen("if(p%s===1)", oneofProp)("return%j", field.partOf.name + ": multiple values");
            seenFirstField[field.partOf.name] = 1;
            gen("p%s=1", oneofProp);
          }
          genVerifyValue(gen, field, i, ref);
        }
        if (field.optional)
          gen("}");
      }
      return gen("return null");
    }
  }
});

// plugins/public/node_modules/protobufjs/src/converter.js
var require_converter = __commonJS({
  "plugins/public/node_modules/protobufjs/src/converter.js"(exports2) {
    "use strict";
    var converter = exports2;
    var Enum = require_enum();
    var util = require_util();
    function genValuePartial_fromObject(gen, field, fieldIndex, prop) {
      if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) {
          gen("switch(d%s){", prop);
          for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {
            if (field.repeated && values[keys[i]] === field.typeDefault)
              gen("default:");
            gen("case%j:", keys[i])("case %i:", values[keys[i]])("m%s=%j", prop, values[keys[i]])("break");
          }
          gen("}");
        } else
          gen('if(typeof d%s!=="object")', prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop);
      } else {
        var isUnsigned = false;
        switch (field.type) {
          case "double":
          case "float":
            gen("m%s=Number(d%s)", prop, prop);
            break;
          case "uint32":
          case "fixed32":
            gen("m%s=d%s>>>0", prop, prop);
            break;
          case "int32":
          case "sint32":
          case "sfixed32":
            gen("m%s=d%s|0", prop, prop);
            break;
          case "uint64":
            isUnsigned = true;
          case "int64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen("if(util.Long)")("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)('else if(typeof d%s==="string")', prop)("m%s=parseInt(d%s,10)", prop, prop)('else if(typeof d%s==="number")', prop)("m%s=d%s", prop, prop)('else if(typeof d%s==="object")', prop)("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
            break;
          case "bytes":
            gen('if(typeof d%s==="string")', prop)("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)("else if(d%s.length)", prop)("m%s=d%s", prop, prop);
            break;
          case "string":
            gen("m%s=String(d%s)", prop, prop);
            break;
          case "bool":
            gen("m%s=Boolean(d%s)", prop, prop);
            break;
        }
      }
      return gen;
    }
    converter.fromObject = function fromObject(mtype) {
      var fields = mtype.fieldsArray;
      var gen = util.codegen(["d"], mtype.name + "$fromObject")("if(d instanceof this.ctor)")("return d");
      if (!fields.length)
        return gen("return new this.ctor");
      gen("var m=new this.ctor");
      for (var i = 0; i < fields.length; ++i) {
        var field = fields[i].resolve(), prop = util.safeProp(field.name);
        if (field.map) {
          gen("if(d%s){", prop)('if(typeof d%s!=="object")', prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s={}", prop)("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
          genValuePartial_fromObject(gen, field, i, prop + "[ks[i]]")("}")("}");
        } else if (field.repeated) {
          gen("if(d%s){", prop)("if(!Array.isArray(d%s))", prop)("throw TypeError(%j)", field.fullName + ": array expected")("m%s=[]", prop)("for(var i=0;i<d%s.length;++i){", prop);
          genValuePartial_fromObject(gen, field, i, prop + "[i]")("}")("}");
        } else {
          if (!(field.resolvedType instanceof Enum))
            gen("if(d%s!=null){", prop);
          genValuePartial_fromObject(gen, field, i, prop);
          if (!(field.resolvedType instanceof Enum))
            gen("}");
        }
      }
      return gen("return m");
    };
    function genValuePartial_toObject(gen, field, fieldIndex, prop) {
      if (field.resolvedType) {
        if (field.resolvedType instanceof Enum)
          gen("d%s=o.enums===String?types[%i].values[m%s]:m%s", prop, fieldIndex, prop, prop);
        else
          gen("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop);
      } else {
        var isUnsigned = false;
        switch (field.type) {
          case "double":
          case "float":
            gen("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
            break;
          case "uint64":
            isUnsigned = true;
          case "int64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen('if(typeof m%s==="number")', prop)("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)("else")("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true" : "", prop);
            break;
          case "bytes":
            gen("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
            break;
          default:
            gen("d%s=m%s", prop, prop);
            break;
        }
      }
      return gen;
    }
    converter.toObject = function toObject(mtype) {
      var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
      if (!fields.length)
        return util.codegen()("return {}");
      var gen = util.codegen(["m", "o"], mtype.name + "$toObject")("if(!o)")("o={}")("var d={}");
      var repeatedFields = [], mapFields = [], normalFields = [], i = 0;
      for (; i < fields.length; ++i)
        if (!fields[i].partOf)
          (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);
      if (repeatedFields.length) {
        gen("if(o.arrays||o.defaults){");
        for (i = 0; i < repeatedFields.length; ++i)
          gen("d%s=[]", util.safeProp(repeatedFields[i].name));
        gen("}");
      }
      if (mapFields.length) {
        gen("if(o.objects||o.defaults){");
        for (i = 0; i < mapFields.length; ++i)
          gen("d%s={}", util.safeProp(mapFields[i].name));
        gen("}");
      }
      if (normalFields.length) {
        gen("if(o.defaults){");
        for (i = 0; i < normalFields.length; ++i) {
          var field = normalFields[i], prop = util.safeProp(field.name);
          if (field.resolvedType instanceof Enum)
            gen("d%s=o.enums===String?%j:%j", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);
          else if (field.long)
            gen("if(util.Long){")("var n=new util.Long(%i,%i,%j)", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)("}else")("d%s=o.longs===String?%j:%i", prop, field.typeDefault.toString(), field.typeDefault.toNumber());
          else if (field.bytes) {
            var arrayDefault = "[" + Array.prototype.slice.call(field.typeDefault).join(",") + "]";
            gen("if(o.bytes===String)d%s=%j", prop, String.fromCharCode.apply(String, field.typeDefault))("else{")("d%s=%s", prop, arrayDefault)("if(o.bytes!==Array)d%s=util.newBuffer(d%s)", prop, prop)("}");
          } else
            gen("d%s=%j", prop, field.typeDefault);
        }
        gen("}");
      }
      var hasKs2 = false;
      for (i = 0; i < fields.length; ++i) {
        var field = fields[i], index = mtype._fieldsArray.indexOf(field), prop = util.safeProp(field.name);
        if (field.map) {
          if (!hasKs2) {
            hasKs2 = true;
            gen("var ks2");
          }
          gen("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)("d%s={}", prop)("for(var j=0;j<ks2.length;++j){");
          genValuePartial_toObject(gen, field, index, prop + "[ks2[j]]")("}");
        } else if (field.repeated) {
          gen("if(m%s&&m%s.length){", prop, prop)("d%s=[]", prop)("for(var j=0;j<m%s.length;++j){", prop);
          genValuePartial_toObject(gen, field, index, prop + "[j]")("}");
        } else {
          gen("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field.name);
          genValuePartial_toObject(gen, field, index, prop);
          if (field.partOf)
            gen("if(o.oneofs)")("d%s=%j", util.safeProp(field.partOf.name), field.name);
        }
        gen("}");
      }
      return gen("return d");
    };
  }
});

// plugins/public/node_modules/protobufjs/src/wrappers.js
var require_wrappers = __commonJS({
  "plugins/public/node_modules/protobufjs/src/wrappers.js"(exports2) {
    "use strict";
    var wrappers = exports2;
    var Message = require_message();
    wrappers[".google.protobuf.Any"] = {
      fromObject: function(object) {
        if (object && object["@type"]) {
          var name = object["@type"].substring(object["@type"].lastIndexOf("/") + 1);
          var type = this.lookup(name);
          if (type) {
            var type_url = object["@type"].charAt(0) === "." ? object["@type"].substr(1) : object["@type"];
            if (type_url.indexOf("/") === -1) {
              type_url = "/" + type_url;
            }
            return this.create({
              type_url,
              value: type.encode(type.fromObject(object)).finish()
            });
          }
        }
        return this.fromObject(object);
      },
      toObject: function(message2, options) {
        var googleApi = "type.googleapis.com/";
        var prefix = "";
        var name = "";
        if (options && options.json && message2.type_url && message2.value) {
          name = message2.type_url.substring(message2.type_url.lastIndexOf("/") + 1);
          prefix = message2.type_url.substring(0, message2.type_url.lastIndexOf("/") + 1);
          var type = this.lookup(name);
          if (type)
            message2 = type.decode(message2.value);
        }
        if (!(message2 instanceof this.ctor) && message2 instanceof Message) {
          var object = message2.$type.toObject(message2, options);
          var messageName = message2.$type.fullName[0] === "." ? message2.$type.fullName.substr(1) : message2.$type.fullName;
          if (prefix === "") {
            prefix = googleApi;
          }
          name = prefix + messageName;
          object["@type"] = name;
          return object;
        }
        return this.toObject(message2, options);
      }
    };
  }
});

// plugins/public/node_modules/protobufjs/src/type.js
var require_type = __commonJS({
  "plugins/public/node_modules/protobufjs/src/type.js"(exports2, module2) {
    "use strict";
    module2.exports = Type2;
    var Namespace = require_namespace();
    ((Type2.prototype = Object.create(Namespace.prototype)).constructor = Type2).className = "Type";
    var Enum = require_enum();
    var OneOf = require_oneof();
    var Field = require_field();
    var MapField = require_mapfield();
    var Service = require_service2();
    var Message = require_message();
    var Reader = require_reader();
    var Writer = require_writer();
    var util = require_util();
    var encoder = require_encoder();
    var decoder = require_decoder();
    var verifier = require_verifier();
    var converter = require_converter();
    var wrappers = require_wrappers();
    function Type2(name, options) {
      Namespace.call(this, name, options);
      this.fields = {};
      this.oneofs = void 0;
      this.extensions = void 0;
      this.reserved = void 0;
      this.group = void 0;
      this._fieldsById = null;
      this._fieldsArray = null;
      this._oneofsArray = null;
      this._ctor = null;
    }
    Object.defineProperties(Type2.prototype, {
      fieldsById: {
        get: function() {
          if (this._fieldsById)
            return this._fieldsById;
          this._fieldsById = {};
          for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {
            var field = this.fields[names[i]], id = field.id;
            if (this._fieldsById[id])
              throw Error("duplicate id " + id + " in " + this);
            this._fieldsById[id] = field;
          }
          return this._fieldsById;
        }
      },
      fieldsArray: {
        get: function() {
          return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
        }
      },
      oneofsArray: {
        get: function() {
          return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
        }
      },
      ctor: {
        get: function() {
          return this._ctor || (this.ctor = Type2.generateConstructor(this)());
        },
        set: function(ctor) {
          var prototype = ctor.prototype;
          if (!(prototype instanceof Message)) {
            (ctor.prototype = new Message()).constructor = ctor;
            util.merge(ctor.prototype, prototype);
          }
          ctor.$type = ctor.prototype.$type = this;
          util.merge(ctor, Message, true);
          this._ctor = ctor;
          var i = 0;
          for (; i < this.fieldsArray.length; ++i)
            this._fieldsArray[i].resolve();
          var ctorProperties = {};
          for (i = 0; i < this.oneofsArray.length; ++i)
            ctorProperties[this._oneofsArray[i].resolve().name] = {
              get: util.oneOfGetter(this._oneofsArray[i].oneof),
              set: util.oneOfSetter(this._oneofsArray[i].oneof)
            };
          if (i)
            Object.defineProperties(ctor.prototype, ctorProperties);
        }
      }
    });
    Type2.generateConstructor = function generateConstructor(mtype) {
      var gen = util.codegen(["p"], mtype.name);
      for (var i = 0, field; i < mtype.fieldsArray.length; ++i)
        if ((field = mtype._fieldsArray[i]).map)
          gen("this%s={}", util.safeProp(field.name));
        else if (field.repeated)
          gen("this%s=[]", util.safeProp(field.name));
      return gen("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)")("this[ks[i]]=p[ks[i]]");
    };
    function clearCache(type) {
      type._fieldsById = type._fieldsArray = type._oneofsArray = null;
      delete type.encode;
      delete type.decode;
      delete type.verify;
      return type;
    }
    Type2.fromJSON = function fromJSON(name, json) {
      var type = new Type2(name, json.options);
      type.extensions = json.extensions;
      type.reserved = json.reserved;
      var names = Object.keys(json.fields), i = 0;
      for (; i < names.length; ++i)
        type.add(
          (typeof json.fields[names[i]].keyType !== "undefined" ? MapField.fromJSON : Field.fromJSON)(names[i], json.fields[names[i]])
        );
      if (json.oneofs)
        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)
          type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
      if (json.nested)
        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {
          var nested = json.nested[names[i]];
          type.add(
            (nested.id !== void 0 ? Field.fromJSON : nested.fields !== void 0 ? Type2.fromJSON : nested.values !== void 0 ? Enum.fromJSON : nested.methods !== void 0 ? Service.fromJSON : Namespace.fromJSON)(names[i], nested)
          );
        }
      if (json.extensions && json.extensions.length)
        type.extensions = json.extensions;
      if (json.reserved && json.reserved.length)
        type.reserved = json.reserved;
      if (json.group)
        type.group = true;
      if (json.comment)
        type.comment = json.comment;
      return type;
    };
    Type2.prototype.toJSON = function toJSON(toJSONOptions) {
      var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        inherited && inherited.options || void 0,
        "oneofs",
        Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),
        "fields",
        Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) {
          return !obj.declaringField;
        }), toJSONOptions) || {},
        "extensions",
        this.extensions && this.extensions.length ? this.extensions : void 0,
        "reserved",
        this.reserved && this.reserved.length ? this.reserved : void 0,
        "group",
        this.group || void 0,
        "nested",
        inherited && inherited.nested || void 0,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    Type2.prototype.resolveAll = function resolveAll() {
      var fields = this.fieldsArray, i = 0;
      while (i < fields.length)
        fields[i++].resolve();
      var oneofs = this.oneofsArray;
      i = 0;
      while (i < oneofs.length)
        oneofs[i++].resolve();
      return Namespace.prototype.resolveAll.call(this);
    };
    Type2.prototype.get = function get(name) {
      return this.fields[name] || this.oneofs && this.oneofs[name] || this.nested && this.nested[name] || null;
    };
    Type2.prototype.add = function add(object) {
      if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);
      if (object instanceof Field && object.extend === void 0) {
        if (this._fieldsById ? this._fieldsById[object.id] : this.fieldsById[object.id])
          throw Error("duplicate id " + object.id + " in " + this);
        if (this.isReservedId(object.id))
          throw Error("id " + object.id + " is reserved in " + this);
        if (this.isReservedName(object.name))
          throw Error("name '" + object.name + "' is reserved in " + this);
        if (object.parent)
          object.parent.remove(object);
        this.fields[object.name] = object;
        object.message = this;
        object.onAdd(this);
        return clearCache(this);
      }
      if (object instanceof OneOf) {
        if (!this.oneofs)
          this.oneofs = {};
        this.oneofs[object.name] = object;
        object.onAdd(this);
        return clearCache(this);
      }
      return Namespace.prototype.add.call(this, object);
    };
    Type2.prototype.remove = function remove(object) {
      if (object instanceof Field && object.extend === void 0) {
        if (!this.fields || this.fields[object.name] !== object)
          throw Error(object + " is not a member of " + this);
        delete this.fields[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
      }
      if (object instanceof OneOf) {
        if (!this.oneofs || this.oneofs[object.name] !== object)
          throw Error(object + " is not a member of " + this);
        delete this.oneofs[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
      }
      return Namespace.prototype.remove.call(this, object);
    };
    Type2.prototype.isReservedId = function isReservedId(id) {
      return Namespace.isReservedId(this.reserved, id);
    };
    Type2.prototype.isReservedName = function isReservedName(name) {
      return Namespace.isReservedName(this.reserved, name);
    };
    Type2.prototype.create = function create(properties) {
      return new this.ctor(properties);
    };
    Type2.prototype.setup = function setup() {
      var fullName = this.fullName, types = [];
      for (var i = 0; i < this.fieldsArray.length; ++i)
        types.push(this._fieldsArray[i].resolve().resolvedType);
      this.encode = encoder(this)({
        Writer,
        types,
        util
      });
      this.decode = decoder(this)({
        Reader,
        types,
        util
      });
      this.verify = verifier(this)({
        types,
        util
      });
      this.fromObject = converter.fromObject(this)({
        types,
        util
      });
      this.toObject = converter.toObject(this)({
        types,
        util
      });
      var wrapper = wrappers[fullName];
      if (wrapper) {
        var originalThis = Object.create(this);
        originalThis.fromObject = this.fromObject;
        this.fromObject = wrapper.fromObject.bind(originalThis);
        originalThis.toObject = this.toObject;
        this.toObject = wrapper.toObject.bind(originalThis);
      }
      return this;
    };
    Type2.prototype.encode = function encode_setup(message2, writer) {
      return this.setup().encode(message2, writer);
    };
    Type2.prototype.encodeDelimited = function encodeDelimited(message2, writer) {
      return this.encode(message2, writer && writer.len ? writer.fork() : writer).ldelim();
    };
    Type2.prototype.decode = function decode_setup(reader, length) {
      return this.setup().decode(reader, length);
    };
    Type2.prototype.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof Reader))
        reader = Reader.create(reader);
      return this.decode(reader, reader.uint32());
    };
    Type2.prototype.verify = function verify_setup(message2) {
      return this.setup().verify(message2);
    };
    Type2.prototype.fromObject = function fromObject(object) {
      return this.setup().fromObject(object);
    };
    Type2.prototype.toObject = function toObject(message2, options) {
      return this.setup().toObject(message2, options);
    };
    Type2.d = function decorateType(typeName) {
      return function typeDecorator(target) {
        util.decorateType(target, typeName);
      };
    };
  }
});

// plugins/public/node_modules/protobufjs/src/root.js
var require_root = __commonJS({
  "plugins/public/node_modules/protobufjs/src/root.js"(exports2, module2) {
    "use strict";
    module2.exports = Root;
    var Namespace = require_namespace();
    ((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = "Root";
    var Field = require_field();
    var Enum = require_enum();
    var OneOf = require_oneof();
    var util = require_util();
    var Type2;
    var parse;
    var common2;
    function Root(options) {
      Namespace.call(this, "", options);
      this.deferred = [];
      this.files = [];
    }
    Root.fromJSON = function fromJSON(json, root) {
      if (!root)
        root = new Root();
      if (json.options)
        root.setOptions(json.options);
      return root.addJSON(json.nested);
    };
    Root.prototype.resolvePath = util.path.resolve;
    Root.prototype.fetch = util.fetch;
    function SYNC2() {
    }
    Root.prototype.load = function load(filename, options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = void 0;
      }
      var self2 = this;
      if (!callback)
        return util.asPromise(load, self2, filename, options);
      var sync = callback === SYNC2;
      function finish(err2, root) {
        if (!callback)
          return;
        var cb = callback;
        callback = null;
        if (sync)
          throw err2;
        cb(err2, root);
      }
      function getBundledFileName(filename2) {
        var idx = filename2.lastIndexOf("google/protobuf/");
        if (idx > -1) {
          var altname = filename2.substring(idx);
          if (altname in common2)
            return altname;
        }
        return null;
      }
      function process(filename2, source) {
        try {
          if (util.isString(source) && source.charAt(0) === "{")
            source = JSON.parse(source);
          if (!util.isString(source))
            self2.setOptions(source.options).addJSON(source.nested);
          else {
            parse.filename = filename2;
            var parsed = parse(source, self2, options), resolved2, i2 = 0;
            if (parsed.imports) {
              for (; i2 < parsed.imports.length; ++i2)
                if (resolved2 = getBundledFileName(parsed.imports[i2]) || self2.resolvePath(filename2, parsed.imports[i2]))
                  fetch(resolved2);
            }
            if (parsed.weakImports) {
              for (i2 = 0; i2 < parsed.weakImports.length; ++i2)
                if (resolved2 = getBundledFileName(parsed.weakImports[i2]) || self2.resolvePath(filename2, parsed.weakImports[i2]))
                  fetch(resolved2, true);
            }
          }
        } catch (err2) {
          finish(err2);
        }
        if (!sync && !queued)
          finish(null, self2);
      }
      function fetch(filename2, weak) {
        if (self2.files.indexOf(filename2) > -1)
          return;
        self2.files.push(filename2);
        if (filename2 in common2) {
          if (sync)
            process(filename2, common2[filename2]);
          else {
            ++queued;
            setTimeout(function() {
              --queued;
              process(filename2, common2[filename2]);
            });
          }
          return;
        }
        if (sync) {
          var source;
          try {
            source = util.fs.readFileSync(filename2).toString("utf8");
          } catch (err2) {
            if (!weak)
              finish(err2);
            return;
          }
          process(filename2, source);
        } else {
          ++queued;
          self2.fetch(filename2, function(err2, source2) {
            --queued;
            if (!callback)
              return;
            if (err2) {
              if (!weak)
                finish(err2);
              else if (!queued)
                finish(null, self2);
              return;
            }
            process(filename2, source2);
          });
        }
      }
      var queued = 0;
      if (util.isString(filename))
        filename = [filename];
      for (var i = 0, resolved; i < filename.length; ++i)
        if (resolved = self2.resolvePath("", filename[i]))
          fetch(resolved);
      if (sync)
        return self2;
      if (!queued)
        finish(null, self2);
      return void 0;
    };
    Root.prototype.loadSync = function loadSync(filename, options) {
      if (!util.isNode)
        throw Error("not supported");
      return this.load(filename, options, SYNC2);
    };
    Root.prototype.resolveAll = function resolveAll() {
      if (this.deferred.length)
        throw Error("unresolvable extensions: " + this.deferred.map(function(field) {
          return "'extend " + field.extend + "' in " + field.parent.fullName;
        }).join(", "));
      return Namespace.prototype.resolveAll.call(this);
    };
    var exposeRe = /^[A-Z]/;
    function tryHandleExtension(root, field) {
      var extendedType = field.parent.lookup(field.extend);
      if (extendedType) {
        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, void 0, field.options);
        sisterField.declaringField = field;
        field.extensionField = sisterField;
        extendedType.add(sisterField);
        return true;
      }
      return false;
    }
    Root.prototype._handleAdd = function _handleAdd(object) {
      if (object instanceof Field) {
        if (object.extend !== void 0 && !object.extensionField) {
          if (!tryHandleExtension(this, object))
            this.deferred.push(object);
        }
      } else if (object instanceof Enum) {
        if (exposeRe.test(object.name))
          object.parent[object.name] = object.values;
      } else if (!(object instanceof OneOf)) {
        if (object instanceof Type2)
          for (var i = 0; i < this.deferred.length; )
            if (tryHandleExtension(this, this.deferred[i]))
              this.deferred.splice(i, 1);
            else
              ++i;
        for (var j = 0; j < object.nestedArray.length; ++j)
          this._handleAdd(object._nestedArray[j]);
        if (exposeRe.test(object.name))
          object.parent[object.name] = object;
      }
    };
    Root.prototype._handleRemove = function _handleRemove(object) {
      if (object instanceof Field) {
        if (object.extend !== void 0) {
          if (object.extensionField) {
            object.extensionField.parent.remove(object.extensionField);
            object.extensionField = null;
          } else {
            var index = this.deferred.indexOf(object);
            if (index > -1)
              this.deferred.splice(index, 1);
          }
        }
      } else if (object instanceof Enum) {
        if (exposeRe.test(object.name))
          delete object.parent[object.name];
      } else if (object instanceof Namespace) {
        for (var i = 0; i < object.nestedArray.length; ++i)
          this._handleRemove(object._nestedArray[i]);
        if (exposeRe.test(object.name))
          delete object.parent[object.name];
      }
    };
    Root._configure = function(Type_, parse_, common_) {
      Type2 = Type_;
      parse = parse_;
      common2 = common_;
    };
  }
});

// plugins/public/node_modules/protobufjs/src/util.js
var require_util = __commonJS({
  "plugins/public/node_modules/protobufjs/src/util.js"(exports2, module2) {
    "use strict";
    var util = module2.exports = require_minimal();
    var roots = require_roots();
    var Type2;
    var Enum;
    util.codegen = require_codegen();
    util.fetch = require_fetch();
    util.path = require_path();
    util.fs = util.inquire("fs");
    util.toArray = function toArray(object) {
      if (object) {
        var keys = Object.keys(object), array = new Array(keys.length), index = 0;
        while (index < keys.length)
          array[index] = object[keys[index++]];
        return array;
      }
      return [];
    };
    util.toObject = function toObject(array) {
      var object = {}, index = 0;
      while (index < array.length) {
        var key = array[index++], val = array[index++];
        if (val !== void 0)
          object[key] = val;
      }
      return object;
    };
    var safePropBackslashRe = /\\/g;
    var safePropQuoteRe = /"/g;
    util.isReserved = function isReserved(name) {
      return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);
    };
    util.safeProp = function safeProp(prop) {
      if (!/^[$\w_]+$/.test(prop) || util.isReserved(prop))
        return '["' + prop.replace(safePropBackslashRe, "\\\\").replace(safePropQuoteRe, '\\"') + '"]';
      return "." + prop;
    };
    util.ucFirst = function ucFirst(str) {
      return str.charAt(0).toUpperCase() + str.substring(1);
    };
    var camelCaseRe = /_([a-z])/g;
    util.camelCase = function camelCase(str) {
      return str.substring(0, 1) + str.substring(1).replace(camelCaseRe, function($0, $1) {
        return $1.toUpperCase();
      });
    };
    util.compareFieldsById = function compareFieldsById(a, b) {
      return a.id - b.id;
    };
    util.decorateType = function decorateType(ctor, typeName) {
      if (ctor.$type) {
        if (typeName && ctor.$type.name !== typeName) {
          util.decorateRoot.remove(ctor.$type);
          ctor.$type.name = typeName;
          util.decorateRoot.add(ctor.$type);
        }
        return ctor.$type;
      }
      if (!Type2)
        Type2 = require_type();
      var type = new Type2(typeName || ctor.name);
      util.decorateRoot.add(type);
      type.ctor = ctor;
      Object.defineProperty(ctor, "$type", { value: type, enumerable: false });
      Object.defineProperty(ctor.prototype, "$type", { value: type, enumerable: false });
      return type;
    };
    var decorateEnumIndex = 0;
    util.decorateEnum = function decorateEnum(object) {
      if (object.$type)
        return object.$type;
      if (!Enum)
        Enum = require_enum();
      var enm = new Enum("Enum" + decorateEnumIndex++, object);
      util.decorateRoot.add(enm);
      Object.defineProperty(object, "$type", { value: enm, enumerable: false });
      return enm;
    };
    util.setProperty = function setProperty(dst, path, value) {
      function setProp(dst2, path2, value2) {
        var part = path2.shift();
        if (path2.length > 0) {
          dst2[part] = setProp(dst2[part] || {}, path2, value2);
        } else {
          var prevValue = dst2[part];
          if (prevValue)
            value2 = [].concat(prevValue).concat(value2);
          dst2[part] = value2;
        }
        return dst2;
      }
      if (typeof dst !== "object")
        throw TypeError("dst must be an object");
      if (!path)
        throw TypeError("path must be specified");
      path = path.split(".");
      return setProp(dst, path, value);
    };
    Object.defineProperty(util, "decorateRoot", {
      get: function() {
        return roots["decorated"] || (roots["decorated"] = new (require_root())());
      }
    });
  }
});

// plugins/public/node_modules/protobufjs/src/object.js
var require_object = __commonJS({
  "plugins/public/node_modules/protobufjs/src/object.js"(exports2, module2) {
    "use strict";
    module2.exports = ReflectionObject;
    ReflectionObject.className = "ReflectionObject";
    var util = require_util();
    var Root;
    function ReflectionObject(name, options) {
      if (!util.isString(name))
        throw TypeError("name must be a string");
      if (options && !util.isObject(options))
        throw TypeError("options must be an object");
      this.options = options;
      this.parsedOptions = null;
      this.name = name;
      this.parent = null;
      this.resolved = false;
      this.comment = null;
      this.filename = null;
    }
    Object.defineProperties(ReflectionObject.prototype, {
      root: {
        get: function() {
          var ptr = this;
          while (ptr.parent !== null)
            ptr = ptr.parent;
          return ptr;
        }
      },
      fullName: {
        get: function() {
          var path = [this.name], ptr = this.parent;
          while (ptr) {
            path.unshift(ptr.name);
            ptr = ptr.parent;
          }
          return path.join(".");
        }
      }
    });
    ReflectionObject.prototype.toJSON = function toJSON() {
      throw Error();
    };
    ReflectionObject.prototype.onAdd = function onAdd(parent) {
      if (this.parent && this.parent !== parent)
        this.parent.remove(this);
      this.parent = parent;
      this.resolved = false;
      var root = parent.root;
      if (root instanceof Root)
        root._handleAdd(this);
    };
    ReflectionObject.prototype.onRemove = function onRemove(parent) {
      var root = parent.root;
      if (root instanceof Root)
        root._handleRemove(this);
      this.parent = null;
      this.resolved = false;
    };
    ReflectionObject.prototype.resolve = function resolve() {
      if (this.resolved)
        return this;
      if (this.root instanceof Root)
        this.resolved = true;
      return this;
    };
    ReflectionObject.prototype.getOption = function getOption(name) {
      if (this.options)
        return this.options[name];
      return void 0;
    };
    ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {
      if (!ifNotSet || !this.options || this.options[name] === void 0)
        (this.options || (this.options = {}))[name] = value;
      return this;
    };
    ReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {
      if (!this.parsedOptions) {
        this.parsedOptions = [];
      }
      var parsedOptions = this.parsedOptions;
      if (propName) {
        var opt = parsedOptions.find(function(opt2) {
          return Object.prototype.hasOwnProperty.call(opt2, name);
        });
        if (opt) {
          var newValue = opt[name];
          util.setProperty(newValue, propName, value);
        } else {
          opt = {};
          opt[name] = util.setProperty({}, propName, value);
          parsedOptions.push(opt);
        }
      } else {
        var newOpt = {};
        newOpt[name] = value;
        parsedOptions.push(newOpt);
      }
      return this;
    };
    ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {
      if (options)
        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)
          this.setOption(keys[i], options[keys[i]], ifNotSet);
      return this;
    };
    ReflectionObject.prototype.toString = function toString2() {
      var className = this.constructor.className, fullName = this.fullName;
      if (fullName.length)
        return className + " " + fullName;
      return className;
    };
    ReflectionObject._configure = function(Root_) {
      Root = Root_;
    };
  }
});

// plugins/public/node_modules/protobufjs/src/enum.js
var require_enum = __commonJS({
  "plugins/public/node_modules/protobufjs/src/enum.js"(exports2, module2) {
    "use strict";
    module2.exports = Enum;
    var ReflectionObject = require_object();
    ((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = "Enum";
    var Namespace = require_namespace();
    var util = require_util();
    function Enum(name, values, options, comment, comments) {
      ReflectionObject.call(this, name, options);
      if (values && typeof values !== "object")
        throw TypeError("values must be an object");
      this.valuesById = {};
      this.values = Object.create(this.valuesById);
      this.comment = comment;
      this.comments = comments || {};
      this.reserved = void 0;
      if (values) {
        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)
          if (typeof values[keys[i]] === "number")
            this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];
      }
    }
    Enum.fromJSON = function fromJSON(name, json) {
      var enm = new Enum(name, json.values, json.options, json.comment, json.comments);
      enm.reserved = json.reserved;
      return enm;
    };
    Enum.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        this.options,
        "values",
        this.values,
        "reserved",
        this.reserved && this.reserved.length ? this.reserved : void 0,
        "comment",
        keepComments ? this.comment : void 0,
        "comments",
        keepComments ? this.comments : void 0
      ]);
    };
    Enum.prototype.add = function add(name, id, comment) {
      if (!util.isString(name))
        throw TypeError("name must be a string");
      if (!util.isInteger(id))
        throw TypeError("id must be an integer");
      if (this.values[name] !== void 0)
        throw Error("duplicate name '" + name + "' in " + this);
      if (this.isReservedId(id))
        throw Error("id " + id + " is reserved in " + this);
      if (this.isReservedName(name))
        throw Error("name '" + name + "' is reserved in " + this);
      if (this.valuesById[id] !== void 0) {
        if (!(this.options && this.options.allow_alias))
          throw Error("duplicate id " + id + " in " + this);
        this.values[name] = id;
      } else
        this.valuesById[this.values[name] = id] = name;
      this.comments[name] = comment || null;
      return this;
    };
    Enum.prototype.remove = function remove(name) {
      if (!util.isString(name))
        throw TypeError("name must be a string");
      var val = this.values[name];
      if (val == null)
        throw Error("name '" + name + "' does not exist in " + this);
      delete this.valuesById[val];
      delete this.values[name];
      delete this.comments[name];
      return this;
    };
    Enum.prototype.isReservedId = function isReservedId(id) {
      return Namespace.isReservedId(this.reserved, id);
    };
    Enum.prototype.isReservedName = function isReservedName(name) {
      return Namespace.isReservedName(this.reserved, name);
    };
  }
});

// plugins/public/node_modules/protobufjs/src/encoder.js
var require_encoder = __commonJS({
  "plugins/public/node_modules/protobufjs/src/encoder.js"(exports2, module2) {
    "use strict";
    module2.exports = encoder;
    var Enum = require_enum();
    var types = require_types();
    var util = require_util();
    function genTypePartial(gen, field, fieldIndex, ref) {
      return field.resolvedType.group ? gen("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0) : gen("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", fieldIndex, ref, (field.id << 3 | 2) >>> 0);
    }
    function encoder(mtype) {
      var gen = util.codegen(["m", "w"], mtype.name + "$encode")("if(!w)")("w=Writer.create()");
      var i, ref;
      var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
      for (var i = 0; i < fields.length; ++i) {
        var field = fields[i].resolve(), index = mtype._fieldsArray.indexOf(field), type = field.resolvedType instanceof Enum ? "int32" : field.type, wireType = types.basic[type];
        ref = "m" + util.safeProp(field.name);
        if (field.map) {
          gen("if(%s!=null&&Object.hasOwnProperty.call(m,%j)){", ref, field.name)("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", ref)("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);
          if (wireType === void 0)
            gen("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", index, ref);
          else
            gen(".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | wireType, type, ref);
          gen("}")("}");
        } else if (field.repeated) {
          gen("if(%s!=null&&%s.length){", ref, ref);
          if (field.packed && types.packed[type] !== void 0) {
            gen("w.uint32(%i).fork()", (field.id << 3 | 2) >>> 0)("for(var i=0;i<%s.length;++i)", ref)("w.%s(%s[i])", type, ref)("w.ldelim()");
          } else {
            gen("for(var i=0;i<%s.length;++i)", ref);
            if (wireType === void 0)
              genTypePartial(gen, field, index, ref + "[i]");
            else
              gen("w.uint32(%i).%s(%s[i])", (field.id << 3 | wireType) >>> 0, type, ref);
          }
          gen("}");
        } else {
          if (field.optional)
            gen("if(%s!=null&&Object.hasOwnProperty.call(m,%j))", ref, field.name);
          if (wireType === void 0)
            genTypePartial(gen, field, index, ref);
          else
            gen("w.uint32(%i).%s(%s)", (field.id << 3 | wireType) >>> 0, type, ref);
        }
      }
      return gen("return w");
    }
  }
});

// plugins/public/node_modules/protobufjs/src/index-light.js
var require_index_light = __commonJS({
  "plugins/public/node_modules/protobufjs/src/index-light.js"(exports2, module2) {
    "use strict";
    var protobuf2 = module2.exports = require_index_minimal();
    protobuf2.build = "light";
    function load(filename, root, callback) {
      if (typeof root === "function") {
        callback = root;
        root = new protobuf2.Root();
      } else if (!root)
        root = new protobuf2.Root();
      return root.load(filename, callback);
    }
    protobuf2.load = load;
    function loadSync(filename, root) {
      if (!root)
        root = new protobuf2.Root();
      return root.loadSync(filename);
    }
    protobuf2.loadSync = loadSync;
    protobuf2.encoder = require_encoder();
    protobuf2.decoder = require_decoder();
    protobuf2.verifier = require_verifier();
    protobuf2.converter = require_converter();
    protobuf2.ReflectionObject = require_object();
    protobuf2.Namespace = require_namespace();
    protobuf2.Root = require_root();
    protobuf2.Enum = require_enum();
    protobuf2.Type = require_type();
    protobuf2.Field = require_field();
    protobuf2.OneOf = require_oneof();
    protobuf2.MapField = require_mapfield();
    protobuf2.Service = require_service2();
    protobuf2.Method = require_method();
    protobuf2.Message = require_message();
    protobuf2.wrappers = require_wrappers();
    protobuf2.types = require_types();
    protobuf2.util = require_util();
    protobuf2.ReflectionObject._configure(protobuf2.Root);
    protobuf2.Namespace._configure(protobuf2.Type, protobuf2.Service, protobuf2.Enum);
    protobuf2.Root._configure(protobuf2.Type);
    protobuf2.Field._configure(protobuf2.Type);
  }
});

// plugins/public/node_modules/protobufjs/src/tokenize.js
var require_tokenize = __commonJS({
  "plugins/public/node_modules/protobufjs/src/tokenize.js"(exports2, module2) {
    "use strict";
    module2.exports = tokenize;
    var delimRe = /[\s{}=;:[\],'"()<>]/g;
    var stringDoubleRe = /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g;
    var stringSingleRe = /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g;
    var setCommentRe = /^ *[*/]+ */;
    var setCommentAltRe = /^\s*\*?\/*/;
    var setCommentSplitRe = /\n/g;
    var whitespaceRe = /\s/;
    var unescapeRe = /\\(.?)/g;
    var unescapeMap = {
      "0": "\0",
      "r": "\r",
      "n": "\n",
      "t": "	"
    };
    function unescape(str) {
      return str.replace(unescapeRe, function($0, $1) {
        switch ($1) {
          case "\\":
          case "":
            return $1;
          default:
            return unescapeMap[$1] || "";
        }
      });
    }
    tokenize.unescape = unescape;
    function tokenize(source, alternateCommentMode) {
      source = source.toString();
      var offset = 0, length = source.length, line = 1, commentType = null, commentText = null, commentLine = 0, commentLineEmpty = false, commentIsLeading = false;
      var stack = [];
      var stringDelim = null;
      function illegal(subject) {
        return Error("illegal " + subject + " (line " + line + ")");
      }
      function readString() {
        var re = stringDelim === "'" ? stringSingleRe : stringDoubleRe;
        re.lastIndex = offset - 1;
        var match = re.exec(source);
        if (!match)
          throw illegal("string");
        offset = re.lastIndex;
        push(stringDelim);
        stringDelim = null;
        return unescape(match[1]);
      }
      function charAt(pos) {
        return source.charAt(pos);
      }
      function setComment(start, end, isLeading) {
        commentType = source.charAt(start++);
        commentLine = line;
        commentLineEmpty = false;
        commentIsLeading = isLeading;
        var lookback;
        if (alternateCommentMode) {
          lookback = 2;
        } else {
          lookback = 3;
        }
        var commentOffset = start - lookback, c;
        do {
          if (--commentOffset < 0 || (c = source.charAt(commentOffset)) === "\n") {
            commentLineEmpty = true;
            break;
          }
        } while (c === " " || c === "	");
        var lines = source.substring(start, end).split(setCommentSplitRe);
        for (var i = 0; i < lines.length; ++i)
          lines[i] = lines[i].replace(alternateCommentMode ? setCommentAltRe : setCommentRe, "").trim();
        commentText = lines.join("\n").trim();
      }
      function isDoubleSlashCommentLine(startOffset) {
        var endOffset = findEndOfLine(startOffset);
        var lineText = source.substring(startOffset, endOffset);
        var isComment = /^\s*\/{1,2}/.test(lineText);
        return isComment;
      }
      function findEndOfLine(cursor) {
        var endOffset = cursor;
        while (endOffset < length && charAt(endOffset) !== "\n") {
          endOffset++;
        }
        return endOffset;
      }
      function next() {
        if (stack.length > 0)
          return stack.shift();
        if (stringDelim)
          return readString();
        var repeat, prev, curr, start, isDoc, isLeadingComment = offset === 0;
        do {
          if (offset === length)
            return null;
          repeat = false;
          while (whitespaceRe.test(curr = charAt(offset))) {
            if (curr === "\n") {
              isLeadingComment = true;
              ++line;
            }
            if (++offset === length)
              return null;
          }
          if (charAt(offset) === "/") {
            if (++offset === length) {
              throw illegal("comment");
            }
            if (charAt(offset) === "/") {
              if (!alternateCommentMode) {
                isDoc = charAt(start = offset + 1) === "/";
                while (charAt(++offset) !== "\n") {
                  if (offset === length) {
                    return null;
                  }
                }
                ++offset;
                if (isDoc) {
                  setComment(start, offset - 1, isLeadingComment);
                }
                ++line;
                repeat = true;
              } else {
                start = offset;
                isDoc = false;
                if (isDoubleSlashCommentLine(offset)) {
                  isDoc = true;
                  do {
                    offset = findEndOfLine(offset);
                    if (offset === length) {
                      break;
                    }
                    offset++;
                  } while (isDoubleSlashCommentLine(offset));
                } else {
                  offset = Math.min(length, findEndOfLine(offset) + 1);
                }
                if (isDoc) {
                  setComment(start, offset, isLeadingComment);
                }
                line++;
                repeat = true;
              }
            } else if ((curr = charAt(offset)) === "*") {
              start = offset + 1;
              isDoc = alternateCommentMode || charAt(start) === "*";
              do {
                if (curr === "\n") {
                  ++line;
                }
                if (++offset === length) {
                  throw illegal("comment");
                }
                prev = curr;
                curr = charAt(offset);
              } while (prev !== "*" || curr !== "/");
              ++offset;
              if (isDoc) {
                setComment(start, offset - 2, isLeadingComment);
              }
              repeat = true;
            } else {
              return "/";
            }
          }
        } while (repeat);
        var end = offset;
        delimRe.lastIndex = 0;
        var delim = delimRe.test(charAt(end++));
        if (!delim)
          while (end < length && !delimRe.test(charAt(end)))
            ++end;
        var token = source.substring(offset, offset = end);
        if (token === '"' || token === "'")
          stringDelim = token;
        return token;
      }
      function push(token) {
        stack.push(token);
      }
      function peek() {
        if (!stack.length) {
          var token = next();
          if (token === null)
            return null;
          push(token);
        }
        return stack[0];
      }
      function skip(expected, optional) {
        var actual = peek(), equals = actual === expected;
        if (equals) {
          next();
          return true;
        }
        if (!optional)
          throw illegal("token '" + actual + "', '" + expected + "' expected");
        return false;
      }
      function cmnt(trailingLine) {
        var ret = null;
        if (trailingLine === void 0) {
          if (commentLine === line - 1 && (alternateCommentMode || commentType === "*" || commentLineEmpty)) {
            ret = commentIsLeading ? commentText : null;
          }
        } else {
          if (commentLine < trailingLine) {
            peek();
          }
          if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === "/")) {
            ret = commentIsLeading ? null : commentText;
          }
        }
        return ret;
      }
      return Object.defineProperty({
        next,
        peek,
        push,
        skip,
        cmnt
      }, "line", {
        get: function() {
          return line;
        }
      });
    }
  }
});

// plugins/public/node_modules/protobufjs/src/parse.js
var require_parse = __commonJS({
  "plugins/public/node_modules/protobufjs/src/parse.js"(exports2, module2) {
    "use strict";
    module2.exports = parse;
    parse.filename = null;
    parse.defaults = { keepCase: false };
    var tokenize = require_tokenize();
    var Root = require_root();
    var Type2 = require_type();
    var Field = require_field();
    var MapField = require_mapfield();
    var OneOf = require_oneof();
    var Enum = require_enum();
    var Service = require_service2();
    var Method = require_method();
    var types = require_types();
    var util = require_util();
    var base10Re = /^[1-9][0-9]*$/;
    var base10NegRe = /^-?[1-9][0-9]*$/;
    var base16Re = /^0[x][0-9a-fA-F]+$/;
    var base16NegRe = /^-?0[x][0-9a-fA-F]+$/;
    var base8Re = /^0[0-7]+$/;
    var base8NegRe = /^-?0[0-7]+$/;
    var numberRe = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/;
    var nameRe = /^[a-zA-Z_][a-zA-Z_0-9]*$/;
    var typeRefRe = /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\.[a-zA-Z_][a-zA-Z_0-9]*)*$/;
    var fqTypeRefRe = /^(?:\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;
    function parse(source, root, options) {
      if (!(root instanceof Root)) {
        options = root;
        root = new Root();
      }
      if (!options)
        options = parse.defaults;
      var preferTrailingComment = options.preferTrailingComment || false;
      var tn = tokenize(source, options.alternateCommentMode || false), next = tn.next, push = tn.push, peek = tn.peek, skip = tn.skip, cmnt = tn.cmnt;
      var head = true, pkg, imports, weakImports, syntax, isProto3 = false;
      var ptr = root;
      var applyCase = options.keepCase ? function(name) {
        return name;
      } : util.camelCase;
      function illegal(token2, name, insideTryCatch) {
        var filename = parse.filename;
        if (!insideTryCatch)
          parse.filename = null;
        return Error("illegal " + (name || "token") + " '" + token2 + "' (" + (filename ? filename + ", " : "") + "line " + tn.line + ")");
      }
      function readString() {
        var values = [], token2;
        do {
          if ((token2 = next()) !== '"' && token2 !== "'")
            throw illegal(token2);
          values.push(next());
          skip(token2);
          token2 = peek();
        } while (token2 === '"' || token2 === "'");
        return values.join("");
      }
      function readValue(acceptTypeRef) {
        var token2 = next();
        switch (token2) {
          case "'":
          case '"':
            push(token2);
            return readString();
          case "true":
          case "TRUE":
            return true;
          case "false":
          case "FALSE":
            return false;
        }
        try {
          return parseNumber(token2, true);
        } catch (e) {
          if (acceptTypeRef && typeRefRe.test(token2))
            return token2;
          throw illegal(token2, "value");
        }
      }
      function readRanges(target, acceptStrings) {
        var token2, start;
        do {
          if (acceptStrings && ((token2 = peek()) === '"' || token2 === "'"))
            target.push(readString());
          else
            target.push([start = parseId(next()), skip("to", true) ? parseId(next()) : start]);
        } while (skip(",", true));
        skip(";");
      }
      function parseNumber(token2, insideTryCatch) {
        var sign = 1;
        if (token2.charAt(0) === "-") {
          sign = -1;
          token2 = token2.substring(1);
        }
        switch (token2) {
          case "inf":
          case "INF":
          case "Inf":
            return sign * Infinity;
          case "nan":
          case "NAN":
          case "Nan":
          case "NaN":
            return NaN;
          case "0":
            return 0;
        }
        if (base10Re.test(token2))
          return sign * parseInt(token2, 10);
        if (base16Re.test(token2))
          return sign * parseInt(token2, 16);
        if (base8Re.test(token2))
          return sign * parseInt(token2, 8);
        if (numberRe.test(token2))
          return sign * parseFloat(token2);
        throw illegal(token2, "number", insideTryCatch);
      }
      function parseId(token2, acceptNegative) {
        switch (token2) {
          case "max":
          case "MAX":
          case "Max":
            return 536870911;
          case "0":
            return 0;
        }
        if (!acceptNegative && token2.charAt(0) === "-")
          throw illegal(token2, "id");
        if (base10NegRe.test(token2))
          return parseInt(token2, 10);
        if (base16NegRe.test(token2))
          return parseInt(token2, 16);
        if (base8NegRe.test(token2))
          return parseInt(token2, 8);
        throw illegal(token2, "id");
      }
      function parsePackage() {
        if (pkg !== void 0)
          throw illegal("package");
        pkg = next();
        if (!typeRefRe.test(pkg))
          throw illegal(pkg, "name");
        ptr = ptr.define(pkg);
        skip(";");
      }
      function parseImport() {
        var token2 = peek();
        var whichImports;
        switch (token2) {
          case "weak":
            whichImports = weakImports || (weakImports = []);
            next();
            break;
          case "public":
            next();
          default:
            whichImports = imports || (imports = []);
            break;
        }
        token2 = readString();
        skip(";");
        whichImports.push(token2);
      }
      function parseSyntax() {
        skip("=");
        syntax = readString();
        isProto3 = syntax === "proto3";
        if (!isProto3 && syntax !== "proto2")
          throw illegal(syntax, "syntax");
        skip(";");
      }
      function parseCommon(parent, token2) {
        switch (token2) {
          case "option":
            parseOption(parent, token2);
            skip(";");
            return true;
          case "message":
            parseType(parent, token2);
            return true;
          case "enum":
            parseEnum(parent, token2);
            return true;
          case "service":
            parseService(parent, token2);
            return true;
          case "extend":
            parseExtension(parent, token2);
            return true;
        }
        return false;
      }
      function ifBlock(obj, fnIf, fnElse) {
        var trailingLine = tn.line;
        if (obj) {
          if (typeof obj.comment !== "string") {
            obj.comment = cmnt();
          }
          obj.filename = parse.filename;
        }
        if (skip("{", true)) {
          var token2;
          while ((token2 = next()) !== "}")
            fnIf(token2);
          skip(";", true);
        } else {
          if (fnElse)
            fnElse();
          skip(";");
          if (obj && (typeof obj.comment !== "string" || preferTrailingComment))
            obj.comment = cmnt(trailingLine) || obj.comment;
        }
      }
      function parseType(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "type name");
        var type = new Type2(token2);
        ifBlock(type, function parseType_block(token3) {
          if (parseCommon(type, token3))
            return;
          switch (token3) {
            case "map":
              parseMapField(type, token3);
              break;
            case "required":
            case "optional":
            case "repeated":
              parseField(type, token3);
              break;
            case "oneof":
              parseOneOf(type, token3);
              break;
            case "extensions":
              readRanges(type.extensions || (type.extensions = []));
              break;
            case "reserved":
              readRanges(type.reserved || (type.reserved = []), true);
              break;
            default:
              if (!isProto3 || !typeRefRe.test(token3))
                throw illegal(token3);
              push(token3);
              parseField(type, "optional");
              break;
          }
        });
        parent.add(type);
      }
      function parseField(parent, rule, extend) {
        var type = next();
        if (type === "group") {
          parseGroup(parent, rule);
          return;
        }
        if (!typeRefRe.test(type))
          throw illegal(type, "type");
        var name = next();
        if (!nameRe.test(name))
          throw illegal(name, "name");
        name = applyCase(name);
        skip("=");
        var field = new Field(name, parseId(next()), type, rule, extend);
        ifBlock(field, function parseField_block(token2) {
          if (token2 === "option") {
            parseOption(field, token2);
            skip(";");
          } else
            throw illegal(token2);
        }, function parseField_line() {
          parseInlineOptions(field);
        });
        parent.add(field);
        if (!isProto3 && field.repeated && (types.packed[type] !== void 0 || types.basic[type] === void 0))
          field.setOption("packed", false, true);
      }
      function parseGroup(parent, rule) {
        var name = next();
        if (!nameRe.test(name))
          throw illegal(name, "name");
        var fieldName = util.lcFirst(name);
        if (name === fieldName)
          name = util.ucFirst(name);
        skip("=");
        var id = parseId(next());
        var type = new Type2(name);
        type.group = true;
        var field = new Field(fieldName, id, name, rule);
        field.filename = parse.filename;
        ifBlock(type, function parseGroup_block(token2) {
          switch (token2) {
            case "option":
              parseOption(type, token2);
              skip(";");
              break;
            case "required":
            case "optional":
            case "repeated":
              parseField(type, token2);
              break;
            default:
              throw illegal(token2);
          }
        });
        parent.add(type).add(field);
      }
      function parseMapField(parent) {
        skip("<");
        var keyType = next();
        if (types.mapKey[keyType] === void 0)
          throw illegal(keyType, "type");
        skip(",");
        var valueType = next();
        if (!typeRefRe.test(valueType))
          throw illegal(valueType, "type");
        skip(">");
        var name = next();
        if (!nameRe.test(name))
          throw illegal(name, "name");
        skip("=");
        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);
        ifBlock(field, function parseMapField_block(token2) {
          if (token2 === "option") {
            parseOption(field, token2);
            skip(";");
          } else
            throw illegal(token2);
        }, function parseMapField_line() {
          parseInlineOptions(field);
        });
        parent.add(field);
      }
      function parseOneOf(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "name");
        var oneof = new OneOf(applyCase(token2));
        ifBlock(oneof, function parseOneOf_block(token3) {
          if (token3 === "option") {
            parseOption(oneof, token3);
            skip(";");
          } else {
            push(token3);
            parseField(oneof, "optional");
          }
        });
        parent.add(oneof);
      }
      function parseEnum(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "name");
        var enm = new Enum(token2);
        ifBlock(enm, function parseEnum_block(token3) {
          switch (token3) {
            case "option":
              parseOption(enm, token3);
              skip(";");
              break;
            case "reserved":
              readRanges(enm.reserved || (enm.reserved = []), true);
              break;
            default:
              parseEnumValue(enm, token3);
          }
        });
        parent.add(enm);
      }
      function parseEnumValue(parent, token2) {
        if (!nameRe.test(token2))
          throw illegal(token2, "name");
        skip("=");
        var value = parseId(next(), true), dummy = {};
        ifBlock(dummy, function parseEnumValue_block(token3) {
          if (token3 === "option") {
            parseOption(dummy, token3);
            skip(";");
          } else
            throw illegal(token3);
        }, function parseEnumValue_line() {
          parseInlineOptions(dummy);
        });
        parent.add(token2, value, dummy.comment);
      }
      function parseOption(parent, token2) {
        var isCustom = skip("(", true);
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2, "name");
        var name = token2;
        var option = name;
        var propName;
        if (isCustom) {
          skip(")");
          name = "(" + name + ")";
          option = name;
          token2 = peek();
          if (fqTypeRefRe.test(token2)) {
            propName = token2.substr(1);
            name += token2;
            next();
          }
        }
        skip("=");
        var optionValue = parseOptionValue(parent, name);
        setParsedOption(parent, option, optionValue, propName);
      }
      function parseOptionValue(parent, name) {
        if (skip("{", true)) {
          var result = {};
          while (!skip("}", true)) {
            if (!nameRe.test(token = next()))
              throw illegal(token, "name");
            var value;
            var propName = token;
            if (peek() === "{")
              value = parseOptionValue(parent, name + "." + token);
            else {
              skip(":");
              if (peek() === "{")
                value = parseOptionValue(parent, name + "." + token);
              else {
                value = readValue(true);
                setOption(parent, name + "." + token, value);
              }
            }
            var prevValue = result[propName];
            if (prevValue)
              value = [].concat(prevValue).concat(value);
            result[propName] = value;
            skip(",", true);
          }
          return result;
        }
        var simpleValue = readValue(true);
        setOption(parent, name, simpleValue);
        return simpleValue;
      }
      function setOption(parent, name, value) {
        if (parent.setOption)
          parent.setOption(name, value);
      }
      function setParsedOption(parent, name, value, propName) {
        if (parent.setParsedOption)
          parent.setParsedOption(name, value, propName);
      }
      function parseInlineOptions(parent) {
        if (skip("[", true)) {
          do {
            parseOption(parent, "option");
          } while (skip(",", true));
          skip("]");
        }
        return parent;
      }
      function parseService(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "service name");
        var service = new Service(token2);
        ifBlock(service, function parseService_block(token3) {
          if (parseCommon(service, token3))
            return;
          if (token3 === "rpc")
            parseMethod(service, token3);
          else
            throw illegal(token3);
        });
        parent.add(service);
      }
      function parseMethod(parent, token2) {
        var commentText = cmnt();
        var type = token2;
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "name");
        var name = token2, requestType, requestStream, responseType, responseStream;
        skip("(");
        if (skip("stream", true))
          requestStream = true;
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2);
        requestType = token2;
        skip(")");
        skip("returns");
        skip("(");
        if (skip("stream", true))
          responseStream = true;
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2);
        responseType = token2;
        skip(")");
        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);
        method.comment = commentText;
        ifBlock(method, function parseMethod_block(token3) {
          if (token3 === "option") {
            parseOption(method, token3);
            skip(";");
          } else
            throw illegal(token3);
        });
        parent.add(method);
      }
      function parseExtension(parent, token2) {
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2, "reference");
        var reference = token2;
        ifBlock(null, function parseExtension_block(token3) {
          switch (token3) {
            case "required":
            case "repeated":
            case "optional":
              parseField(parent, token3, reference);
              break;
            default:
              if (!isProto3 || !typeRefRe.test(token3))
                throw illegal(token3);
              push(token3);
              parseField(parent, "optional", reference);
              break;
          }
        });
      }
      var token;
      while ((token = next()) !== null) {
        switch (token) {
          case "package":
            if (!head)
              throw illegal(token);
            parsePackage();
            break;
          case "import":
            if (!head)
              throw illegal(token);
            parseImport();
            break;
          case "syntax":
            if (!head)
              throw illegal(token);
            parseSyntax();
            break;
          case "option":
            parseOption(ptr, token);
            skip(";");
            break;
          default:
            if (parseCommon(ptr, token)) {
              head = false;
              continue;
            }
            throw illegal(token);
        }
      }
      parse.filename = null;
      return {
        "package": pkg,
        "imports": imports,
        weakImports,
        syntax,
        root
      };
    }
  }
});

// plugins/public/node_modules/protobufjs/src/common.js
var require_common = __commonJS({
  "plugins/public/node_modules/protobufjs/src/common.js"(exports2, module2) {
    "use strict";
    module2.exports = common2;
    var commonRe = /\/|\./;
    function common2(name, json) {
      if (!commonRe.test(name)) {
        name = "google/protobuf/" + name + ".proto";
        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };
      }
      common2[name] = json;
    }
    common2("any", {
      Any: {
        fields: {
          type_url: {
            type: "string",
            id: 1
          },
          value: {
            type: "bytes",
            id: 2
          }
        }
      }
    });
    var timeType;
    common2("duration", {
      Duration: timeType = {
        fields: {
          seconds: {
            type: "int64",
            id: 1
          },
          nanos: {
            type: "int32",
            id: 2
          }
        }
      }
    });
    common2("timestamp", {
      Timestamp: timeType
    });
    common2("empty", {
      Empty: {
        fields: {}
      }
    });
    common2("struct", {
      Struct: {
        fields: {
          fields: {
            keyType: "string",
            type: "Value",
            id: 1
          }
        }
      },
      Value: {
        oneofs: {
          kind: {
            oneof: [
              "nullValue",
              "numberValue",
              "stringValue",
              "boolValue",
              "structValue",
              "listValue"
            ]
          }
        },
        fields: {
          nullValue: {
            type: "NullValue",
            id: 1
          },
          numberValue: {
            type: "double",
            id: 2
          },
          stringValue: {
            type: "string",
            id: 3
          },
          boolValue: {
            type: "bool",
            id: 4
          },
          structValue: {
            type: "Struct",
            id: 5
          },
          listValue: {
            type: "ListValue",
            id: 6
          }
        }
      },
      NullValue: {
        values: {
          NULL_VALUE: 0
        }
      },
      ListValue: {
        fields: {
          values: {
            rule: "repeated",
            type: "Value",
            id: 1
          }
        }
      }
    });
    common2("wrappers", {
      DoubleValue: {
        fields: {
          value: {
            type: "double",
            id: 1
          }
        }
      },
      FloatValue: {
        fields: {
          value: {
            type: "float",
            id: 1
          }
        }
      },
      Int64Value: {
        fields: {
          value: {
            type: "int64",
            id: 1
          }
        }
      },
      UInt64Value: {
        fields: {
          value: {
            type: "uint64",
            id: 1
          }
        }
      },
      Int32Value: {
        fields: {
          value: {
            type: "int32",
            id: 1
          }
        }
      },
      UInt32Value: {
        fields: {
          value: {
            type: "uint32",
            id: 1
          }
        }
      },
      BoolValue: {
        fields: {
          value: {
            type: "bool",
            id: 1
          }
        }
      },
      StringValue: {
        fields: {
          value: {
            type: "string",
            id: 1
          }
        }
      },
      BytesValue: {
        fields: {
          value: {
            type: "bytes",
            id: 1
          }
        }
      }
    });
    common2("field_mask", {
      FieldMask: {
        fields: {
          paths: {
            rule: "repeated",
            type: "string",
            id: 1
          }
        }
      }
    });
    common2.get = function get(file) {
      return common2[file] || null;
    };
  }
});

// plugins/public/node_modules/protobufjs/src/index.js
var require_src = __commonJS({
  "plugins/public/node_modules/protobufjs/src/index.js"(exports2, module2) {
    "use strict";
    var protobuf2 = module2.exports = require_index_light();
    protobuf2.build = "full";
    protobuf2.tokenize = require_tokenize();
    protobuf2.parse = require_parse();
    protobuf2.common = require_common();
    protobuf2.Root._configure(protobuf2.Type, protobuf2.parse, protobuf2.common);
  }
});

// plugins/public/node_modules/protobufjs/index.js
var require_protobufjs = __commonJS({
  "plugins/public/node_modules/protobufjs/index.js"(exports2, module2) {
    "use strict";
    module2.exports = require_src();
  }
});

// plugins/public/node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "plugins/public/node_modules/base64-js/index.js"(exports2) {
    "use strict";
    exports2.byteLength = byteLength;
    exports2.toByteArray = toByteArray;
    exports2.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    var i;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1)
        validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i2;
      for (i2 = 0; i2 < len2; i2 += 4) {
        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i2 = start; i2 < end; i2 += 3) {
        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});

// plugins/public/node_modules/ieee754/index.js
var require_ieee754 = __commonJS({
  "plugins/public/node_modules/ieee754/index.js"(exports2) {
    exports2.read = function(buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
      }
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
      }
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };
    exports2.write = function(buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
      }
      e = e << mLen | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
      }
      buffer[offset + i - d] |= s * 128;
    };
  }
});

// plugins/public/node_modules/buffer/index.js
var require_buffer = __commonJS({
  "plugins/public/node_modules/buffer/index.js"(exports2) {
    "use strict";
    var base64 = require_base64_js();
    var ieee754 = require_ieee754();
    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports2.Buffer = Buffer3;
    exports2.SlowBuffer = SlowBuffer;
    exports2.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports2.kMaxLength = K_MAX_LENGTH;
    Buffer3.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer3.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
    }
    function typedArraySupport() {
      try {
        const arr = new Uint8Array(1);
        const proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e) {
        return false;
      }
    }
    Object.defineProperty(Buffer3.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer3.isBuffer(this))
          return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer3.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer3.isBuffer(this))
          return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
      }
      const buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer3.prototype);
      return buf;
    }
    function Buffer3(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          );
        }
        return allocUnsafe(arg);
      }
      return from(arg, encodingOrOffset, length);
    }
    Buffer3.poolSize = 8192;
    function from(value, encodingOrOffset, length) {
      if (typeof value === "string") {
        return fromString(value, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof value === "number") {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        );
      }
      const valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer3.from(valueOf, encodingOrOffset, length);
      }
      const b = fromObject(value);
      if (b)
        return b;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer3.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
      }
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
      );
    }
    Buffer3.from = function(value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length);
    };
    Object.setPrototypeOf(Buffer3.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer3, Uint8Array);
    function assertSize(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
    }
    function alloc(size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
      }
      return createBuffer(size);
    }
    Buffer3.alloc = function(size, fill, encoding) {
      return alloc(size, fill, encoding);
    };
    function allocUnsafe(size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0);
    }
    Buffer3.allocUnsafe = function(size) {
      return allocUnsafe(size);
    };
    Buffer3.allocUnsafeSlow = function(size) {
      return allocUnsafe(size);
    };
    function fromString(string, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer3.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      const length = byteLength(string, encoding) | 0;
      let buf = createBuffer(length);
      const actual = buf.write(string, encoding);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array) {
      const length = array.length < 0 ? 0 : checked(array.length) | 0;
      const buf = createBuffer(length);
      for (let i = 0; i < length; i += 1) {
        buf[i] = array[i] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      let buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new Uint8Array(array);
      } else if (length === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }
      Object.setPrototypeOf(buf, Buffer3.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer3.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer3.alloc(+length);
    }
    Buffer3.isBuffer = function isBuffer(b) {
      return b != null && b._isBuffer === true && b !== Buffer3.prototype;
    };
    Buffer3.compare = function compare(a, b) {
      if (isInstance(a, Uint8Array))
        a = Buffer3.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array))
        b = Buffer3.from(b, b.offset, b.byteLength);
      if (!Buffer3.isBuffer(a) || !Buffer3.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        );
      }
      if (a === b)
        return 0;
      let x = a.length;
      let y = b.length;
      for (let i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    Buffer3.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer3.concat = function concat(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer3.alloc(0);
      }
      let i;
      if (length === void 0) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }
      const buffer = Buffer3.allocUnsafe(length);
      let pos = 0;
      for (i = 0; i < list.length; ++i) {
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer.length) {
            if (!Buffer3.isBuffer(buf))
              buf = Buffer3.from(buf);
            buf.copy(buffer, pos);
          } else {
            Uint8Array.prototype.set.call(
              buffer,
              buf,
              pos
            );
          }
        } else if (!Buffer3.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer, pos);
        }
        pos += buf.length;
      }
      return buffer;
    };
    function byteLength(string, encoding) {
      if (Buffer3.isBuffer(string)) {
        return string.length;
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength;
      }
      if (typeof string !== "string") {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
        );
      }
      const len = string.length;
      const mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len === 0)
        return 0;
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
            return utf8ToBytes(string).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length;
            }
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer3.byteLength = byteLength;
    function slowToString(encoding, start, end) {
      let loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding)
        encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer3.prototype._isBuffer = true;
    function swap(b, n, m) {
      const i = b[n];
      b[n] = b[m];
      b[m] = i;
    }
    Buffer3.prototype.swap16 = function swap16() {
      const len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (let i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this;
    };
    Buffer3.prototype.swap32 = function swap32() {
      const len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (let i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this;
    };
    Buffer3.prototype.swap64 = function swap64() {
      const len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (let i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this;
    };
    Buffer3.prototype.toString = function toString2() {
      const length = this.length;
      if (length === 0)
        return "";
      if (arguments.length === 0)
        return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer3.prototype.toLocaleString = Buffer3.prototype.toString;
    Buffer3.prototype.equals = function equals(b) {
      if (!Buffer3.isBuffer(b))
        throw new TypeError("Argument must be a Buffer");
      if (this === b)
        return true;
      return Buffer3.compare(this, b) === 0;
    };
    Buffer3.prototype.inspect = function inspect() {
      let str = "";
      const max = exports2.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max)
        str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer3.prototype[customInspectSymbol] = Buffer3.prototype.inspect;
    }
    Buffer3.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer3.from(target, target.offset, target.byteLength);
      }
      if (!Buffer3.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
        );
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target)
        return 0;
      let x = thisEnd - thisStart;
      let y = end - start;
      const len = Math.min(x, y);
      const thisCopy = this.slice(thisStart, thisEnd);
      const targetCopy = target.slice(start, end);
      for (let i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
      if (buffer.length === 0)
        return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer.length - 1;
      }
      if (byteOffset < 0)
        byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir)
          return -1;
        else
          byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir)
          byteOffset = 0;
        else
          return -1;
      }
      if (typeof val === "string") {
        val = Buffer3.from(val, encoding);
      }
      if (Buffer3.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      let indexSize = 1;
      let arrLength = arr.length;
      let valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i2) {
        if (indexSize === 1) {
          return buf[i2];
        } else {
          return buf.readUInt16BE(i2 * indexSize);
        }
      }
      let i;
      if (dir) {
        let foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1)
              foundIndex = i;
            if (i - foundIndex + 1 === valLength)
              return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1)
              i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength)
          byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          let found = true;
          for (let j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break;
            }
          }
          if (found)
            return i;
        }
      }
      return -1;
    }
    Buffer3.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer3.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer3.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string, offset, length) {
      offset = Number(offset) || 0;
      const remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      const strLen = string.length;
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      let i;
      for (i = 0; i < length; ++i) {
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed))
          return i;
        buf[offset + i] = parsed;
      }
      return i;
    }
    function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length);
    }
    function base64Write(buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length);
    }
    function ucs2Write(buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
    }
    Buffer3.prototype.write = function write(string, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === void 0)
            encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      const remaining = this.length - offset;
      if (length === void 0 || length > remaining)
        length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding)
        encoding = "utf8";
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string, offset, length);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string, offset, length);
          case "base64":
            return base64Write(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string, offset, length);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer3.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
      } else {
        return base64.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      const res = [];
      let i = start;
      while (i < end) {
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
          let secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      const len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      let res = "";
      let i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      const len = buf.length;
      if (!start || start < 0)
        start = 0;
      if (!end || end < 0 || end > len)
        end = len;
      let out = "";
      for (let i = start; i < end; ++i) {
        out += hexSliceLookupTable[buf[i]];
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      const bytes = buf.slice(start, end);
      let res = "";
      for (let i = 0; i < bytes.length - 1; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res;
    }
    Buffer3.prototype.slice = function slice(start, end) {
      const len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0)
          start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0)
          end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start)
        end = start;
      const newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer3.prototype);
      return newBuf;
    };
    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0)
        throw new RangeError("offset is not uint");
      if (offset + ext > length)
        throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer3.prototype.readUintLE = Buffer3.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      let val = this[offset];
      let mul = 1;
      let i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      return val;
    };
    Buffer3.prototype.readUintBE = Buffer3.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
      }
      let val = this[offset + --byteLength2];
      let mul = 1;
      while (byteLength2 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength2] * mul;
      }
      return val;
    };
    Buffer3.prototype.readUint8 = Buffer3.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer3.prototype.readUint16LE = Buffer3.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer3.prototype.readUint16BE = Buffer3.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer3.prototype.readUint32LE = Buffer3.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer3.prototype.readUint32BE = Buffer3.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer3.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
      const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
      return BigInt(lo) + (BigInt(hi) << BigInt(32));
    });
    Buffer3.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
      return (BigInt(hi) << BigInt(32)) + BigInt(lo);
    });
    Buffer3.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      let val = this[offset];
      let mul = 1;
      let i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer3.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      let i = byteLength2;
      let mul = 1;
      let val = this[offset + --i];
      while (i > 0 && (mul *= 256)) {
        val += this[offset + --i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer3.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128))
        return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer3.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      const val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer3.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      const val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer3.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer3.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer3.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
      return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
    });
    Buffer3.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = (first << 24) + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
    });
    Buffer3.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
    };
    Buffer3.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
    };
    Buffer3.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
    };
    Buffer3.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max, min) {
      if (!Buffer3.isBuffer(buf))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max || value < min)
        throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
    }
    Buffer3.prototype.writeUintLE = Buffer3.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      let mul = 1;
      let i = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer3.prototype.writeUintBE = Buffer3.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      let i = byteLength2 - 1;
      let mul = 1;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer3.prototype.writeUint8 = Buffer3.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 255, 0);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer3.prototype.writeUint16LE = Buffer3.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer3.prototype.writeUint16BE = Buffer3.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer3.prototype.writeUint32LE = Buffer3.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 255;
      return offset + 4;
    };
    Buffer3.prototype.writeUint32BE = Buffer3.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    function wrtBigUInt64LE(buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      return offset;
    }
    function wrtBigUInt64BE(buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset + 7] = lo;
      lo = lo >> 8;
      buf[offset + 6] = lo;
      lo = lo >> 8;
      buf[offset + 5] = lo;
      lo = lo >> 8;
      buf[offset + 4] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset + 3] = hi;
      hi = hi >> 8;
      buf[offset + 2] = hi;
      hi = hi >> 8;
      buf[offset + 1] = hi;
      hi = hi >> 8;
      buf[offset] = hi;
      return offset + 8;
    }
    Buffer3.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer3.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer3.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      let i = 0;
      let mul = 1;
      let sub = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer3.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      let i = byteLength2 - 1;
      let mul = 1;
      let sub = 0;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer3.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 127, -128);
      if (value < 0)
        value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer3.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer3.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer3.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
      return offset + 4;
    };
    Buffer3.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0)
        value = 4294967295 + value + 1;
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    Buffer3.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    Buffer3.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function checkIEEE754(buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
      if (offset < 0)
        throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer3.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer3.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer3.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer3.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer3.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer3.isBuffer(target))
        throw new TypeError("argument should be a Buffer");
      if (!start)
        start = 0;
      if (!end && end !== 0)
        end = this.length;
      if (targetStart >= target.length)
        targetStart = target.length;
      if (!targetStart)
        targetStart = 0;
      if (end > 0 && end < start)
        end = start;
      if (end === start)
        return 0;
      if (target.length === 0 || this.length === 0)
        return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length)
        throw new RangeError("Index out of range");
      if (end < 0)
        throw new RangeError("sourceEnd out of bounds");
      if (end > this.length)
        end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      const len = end - start;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }
      return len;
    };
    Buffer3.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer3.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val.length === 1) {
          const code = val.charCodeAt(0);
          if (encoding === "utf8" && code < 128 || encoding === "latin1") {
            val = code;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val)
        val = 0;
      let i;
      if (typeof val === "number") {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        const bytes = Buffer3.isBuffer(val) ? val : Buffer3.from(val, encoding);
        const len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }
      return this;
    };
    var errors = {};
    function E(sym, getMessage, Base) {
      errors[sym] = class NodeError extends Base {
        constructor() {
          super();
          Object.defineProperty(this, "message", {
            value: getMessage.apply(this, arguments),
            writable: true,
            configurable: true
          });
          this.name = `${this.name} [${sym}]`;
          this.stack;
          delete this.name;
        }
        get code() {
          return sym;
        }
        set code(value) {
          Object.defineProperty(this, "code", {
            configurable: true,
            enumerable: true,
            value,
            writable: true
          });
        }
        toString() {
          return `${this.name} [${sym}]: ${this.message}`;
        }
      };
    }
    E(
      "ERR_BUFFER_OUT_OF_BOUNDS",
      function(name) {
        if (name) {
          return `${name} is outside of buffer bounds`;
        }
        return "Attempt to access memory outside buffer bounds";
      },
      RangeError
    );
    E(
      "ERR_INVALID_ARG_TYPE",
      function(name, actual) {
        return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
      },
      TypeError
    );
    E(
      "ERR_OUT_OF_RANGE",
      function(str, range, input) {
        let msg = `The value of "${str}" is out of range.`;
        let received = input;
        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
          received = addNumericalSeparator(String(input));
        } else if (typeof input === "bigint") {
          received = String(input);
          if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
            received = addNumericalSeparator(received);
          }
          received += "n";
        }
        msg += ` It must be ${range}. Received ${received}`;
        return msg;
      },
      RangeError
    );
    function addNumericalSeparator(val) {
      let res = "";
      let i = val.length;
      const start = val[0] === "-" ? 1 : 0;
      for (; i >= start + 4; i -= 3) {
        res = `_${val.slice(i - 3, i)}${res}`;
      }
      return `${val.slice(0, i)}${res}`;
    }
    function checkBounds(buf, offset, byteLength2) {
      validateNumber(offset, "offset");
      if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
        boundsError(offset, buf.length - (byteLength2 + 1));
      }
    }
    function checkIntBI(value, min, max, buf, offset, byteLength2) {
      if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength2 > 3) {
          if (min === 0 || min === BigInt(0)) {
            range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
          } else {
            range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
          }
        } else {
          range = `>= ${min}${n} and <= ${max}${n}`;
        }
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
      }
      checkBounds(buf, offset, byteLength2);
    }
    function validateNumber(value, name) {
      if (typeof value !== "number") {
        throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
      }
    }
    function boundsError(value, length, type) {
      if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
      }
      if (length < 0) {
        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
      }
      throw new errors.ERR_OUT_OF_RANGE(
        type || "offset",
        `>= ${type ? 1 : 0} and <= ${length}`,
        value
      );
    }
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2)
        return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes(string, units) {
      units = units || Infinity;
      let codePoint;
      const length = string.length;
      let leadSurrogate = null;
      const bytes = [];
      for (let i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            } else if (i + 1 === length) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0)
            break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0)
            break;
          bytes.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0)
            break;
          bytes.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0)
            break;
          bytes.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str) {
      const byteArray = [];
      for (let i = 0; i < str.length; ++i) {
        byteArray.push(str.charCodeAt(i) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units) {
      let c, hi, lo;
      const byteArray = [];
      for (let i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0)
          break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base64.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset, length) {
      let i;
      for (i = 0; i < length; ++i) {
        if (i + offset >= dst.length || i >= src.length)
          break;
        dst[i + offset] = src[i];
      }
      return i;
    }
    function isInstance(obj, type) {
      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    var hexSliceLookupTable = function() {
      const alphabet = "0123456789abcdef";
      const table = new Array(256);
      for (let i = 0; i < 16; ++i) {
        const i16 = i * 16;
        for (let j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i] + alphabet[j];
        }
      }
      return table;
    }();
    function defineBigIntMethod(fn) {
      return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
    }
    function BufferBigIntNotDefined() {
      throw new Error("BigInt not supported");
    }
  }
});

// plugins/public/node_modules/brotli/dec/streams.js
var require_streams = __commonJS({
  "plugins/public/node_modules/brotli/dec/streams.js"(exports2) {
    function BrotliInput(buffer) {
      this.buffer = buffer;
      this.pos = 0;
    }
    BrotliInput.prototype.read = function(buf, i, count) {
      if (this.pos + count > this.buffer.length) {
        count = this.buffer.length - this.pos;
      }
      for (var p = 0; p < count; p++)
        buf[i + p] = this.buffer[this.pos + p];
      this.pos += count;
      return count;
    };
    exports2.BrotliInput = BrotliInput;
    function BrotliOutput(buf) {
      this.buffer = buf;
      this.pos = 0;
    }
    BrotliOutput.prototype.write = function(buf, count) {
      if (this.pos + count > this.buffer.length)
        throw new Error("Output buffer is not large enough");
      this.buffer.set(buf.subarray(0, count), this.pos);
      this.pos += count;
      return count;
    };
    exports2.BrotliOutput = BrotliOutput;
  }
});

// plugins/public/node_modules/brotli/dec/bit_reader.js
var require_bit_reader = __commonJS({
  "plugins/public/node_modules/brotli/dec/bit_reader.js"(exports2, module2) {
    var BROTLI_READ_SIZE = 4096;
    var BROTLI_IBUF_SIZE = 2 * BROTLI_READ_SIZE + 32;
    var BROTLI_IBUF_MASK = 2 * BROTLI_READ_SIZE - 1;
    var kBitMask = new Uint32Array([
      0,
      1,
      3,
      7,
      15,
      31,
      63,
      127,
      255,
      511,
      1023,
      2047,
      4095,
      8191,
      16383,
      32767,
      65535,
      131071,
      262143,
      524287,
      1048575,
      2097151,
      4194303,
      8388607,
      16777215
    ]);
    function BrotliBitReader(input) {
      this.buf_ = new Uint8Array(BROTLI_IBUF_SIZE);
      this.input_ = input;
      this.reset();
    }
    BrotliBitReader.READ_SIZE = BROTLI_READ_SIZE;
    BrotliBitReader.IBUF_MASK = BROTLI_IBUF_MASK;
    BrotliBitReader.prototype.reset = function() {
      this.buf_ptr_ = 0;
      this.val_ = 0;
      this.pos_ = 0;
      this.bit_pos_ = 0;
      this.bit_end_pos_ = 0;
      this.eos_ = 0;
      this.readMoreInput();
      for (var i = 0; i < 4; i++) {
        this.val_ |= this.buf_[this.pos_] << 8 * i;
        ++this.pos_;
      }
      return this.bit_end_pos_ > 0;
    };
    BrotliBitReader.prototype.readMoreInput = function() {
      if (this.bit_end_pos_ > 256) {
        return;
      } else if (this.eos_) {
        if (this.bit_pos_ > this.bit_end_pos_)
          throw new Error("Unexpected end of input " + this.bit_pos_ + " " + this.bit_end_pos_);
      } else {
        var dst = this.buf_ptr_;
        var bytes_read = this.input_.read(this.buf_, dst, BROTLI_READ_SIZE);
        if (bytes_read < 0) {
          throw new Error("Unexpected end of input");
        }
        if (bytes_read < BROTLI_READ_SIZE) {
          this.eos_ = 1;
          for (var p = 0; p < 32; p++)
            this.buf_[dst + bytes_read + p] = 0;
        }
        if (dst === 0) {
          for (var p = 0; p < 32; p++)
            this.buf_[(BROTLI_READ_SIZE << 1) + p] = this.buf_[p];
          this.buf_ptr_ = BROTLI_READ_SIZE;
        } else {
          this.buf_ptr_ = 0;
        }
        this.bit_end_pos_ += bytes_read << 3;
      }
    };
    BrotliBitReader.prototype.fillBitWindow = function() {
      while (this.bit_pos_ >= 8) {
        this.val_ >>>= 8;
        this.val_ |= this.buf_[this.pos_ & BROTLI_IBUF_MASK] << 24;
        ++this.pos_;
        this.bit_pos_ = this.bit_pos_ - 8 >>> 0;
        this.bit_end_pos_ = this.bit_end_pos_ - 8 >>> 0;
      }
    };
    BrotliBitReader.prototype.readBits = function(n_bits) {
      if (32 - this.bit_pos_ < n_bits) {
        this.fillBitWindow();
      }
      var val = this.val_ >>> this.bit_pos_ & kBitMask[n_bits];
      this.bit_pos_ += n_bits;
      return val;
    };
    module2.exports = BrotliBitReader;
  }
});

// plugins/public/node_modules/brotli/dec/dictionary.bin.js
var require_dictionary_bin = __commonJS({
  "plugins/public/node_modules/brotli/dec/dictionary.bin.js"(exports2, module2) {
    module2.exports = "";
  }
});

// plugins/public/node_modules/brotli/dec/dictionary-browser.js
var require_dictionary_browser = __commonJS({
  "plugins/public/node_modules/brotli/dec/dictionary-browser.js"(exports2) {
    var base64 = require_base64_js();
    exports2.init = function() {
      var BrotliDecompressBuffer = require_decode().BrotliDecompressBuffer;
      var compressed = base64.toByteArray(require_dictionary_bin());
      return BrotliDecompressBuffer(compressed);
    };
  }
});

// plugins/public/node_modules/brotli/dec/dictionary.js
var require_dictionary = __commonJS({
  "plugins/public/node_modules/brotli/dec/dictionary.js"(exports2) {
    var data = require_dictionary_browser();
    exports2.init = function() {
      exports2.dictionary = data.init();
    };
    exports2.offsetsByLength = new Uint32Array([
      0,
      0,
      0,
      0,
      0,
      4096,
      9216,
      21504,
      35840,
      44032,
      53248,
      63488,
      74752,
      87040,
      93696,
      100864,
      104704,
      106752,
      108928,
      113536,
      115968,
      118528,
      119872,
      121280,
      122016
    ]);
    exports2.sizeBitsByLength = new Uint8Array([
      0,
      0,
      0,
      0,
      10,
      10,
      11,
      11,
      10,
      10,
      10,
      10,
      10,
      9,
      9,
      8,
      7,
      7,
      8,
      7,
      7,
      6,
      6,
      5,
      5
    ]);
    exports2.minDictionaryWordLength = 4;
    exports2.maxDictionaryWordLength = 24;
  }
});

// plugins/public/node_modules/brotli/dec/huffman.js
var require_huffman = __commonJS({
  "plugins/public/node_modules/brotli/dec/huffman.js"(exports2) {
    function HuffmanCode(bits, value) {
      this.bits = bits;
      this.value = value;
    }
    exports2.HuffmanCode = HuffmanCode;
    var MAX_LENGTH = 15;
    function GetNextKey(key, len) {
      var step = 1 << len - 1;
      while (key & step) {
        step >>= 1;
      }
      return (key & step - 1) + step;
    }
    function ReplicateValue(table, i, step, end, code) {
      do {
        end -= step;
        table[i + end] = new HuffmanCode(code.bits, code.value);
      } while (end > 0);
    }
    function NextTableBitSize(count, len, root_bits) {
      var left = 1 << len - root_bits;
      while (len < MAX_LENGTH) {
        left -= count[len];
        if (left <= 0)
          break;
        ++len;
        left <<= 1;
      }
      return len - root_bits;
    }
    exports2.BrotliBuildHuffmanTable = function(root_table, table, root_bits, code_lengths, code_lengths_size) {
      var start_table = table;
      var code;
      var len;
      var symbol;
      var key;
      var step;
      var low;
      var mask;
      var table_bits;
      var table_size;
      var total_size;
      var sorted;
      var count = new Int32Array(MAX_LENGTH + 1);
      var offset = new Int32Array(MAX_LENGTH + 1);
      sorted = new Int32Array(code_lengths_size);
      for (symbol = 0; symbol < code_lengths_size; symbol++) {
        count[code_lengths[symbol]]++;
      }
      offset[1] = 0;
      for (len = 1; len < MAX_LENGTH; len++) {
        offset[len + 1] = offset[len] + count[len];
      }
      for (symbol = 0; symbol < code_lengths_size; symbol++) {
        if (code_lengths[symbol] !== 0) {
          sorted[offset[code_lengths[symbol]]++] = symbol;
        }
      }
      table_bits = root_bits;
      table_size = 1 << table_bits;
      total_size = table_size;
      if (offset[MAX_LENGTH] === 1) {
        for (key = 0; key < total_size; ++key) {
          root_table[table + key] = new HuffmanCode(0, sorted[0] & 65535);
        }
        return total_size;
      }
      key = 0;
      symbol = 0;
      for (len = 1, step = 2; len <= root_bits; ++len, step <<= 1) {
        for (; count[len] > 0; --count[len]) {
          code = new HuffmanCode(len & 255, sorted[symbol++] & 65535);
          ReplicateValue(root_table, table + key, step, table_size, code);
          key = GetNextKey(key, len);
        }
      }
      mask = total_size - 1;
      low = -1;
      for (len = root_bits + 1, step = 2; len <= MAX_LENGTH; ++len, step <<= 1) {
        for (; count[len] > 0; --count[len]) {
          if ((key & mask) !== low) {
            table += table_size;
            table_bits = NextTableBitSize(count, len, root_bits);
            table_size = 1 << table_bits;
            total_size += table_size;
            low = key & mask;
            root_table[start_table + low] = new HuffmanCode(table_bits + root_bits & 255, table - start_table - low & 65535);
          }
          code = new HuffmanCode(len - root_bits & 255, sorted[symbol++] & 65535);
          ReplicateValue(root_table, table + (key >> root_bits), step, table_size, code);
          key = GetNextKey(key, len);
        }
      }
      return total_size;
    };
  }
});

// plugins/public/node_modules/brotli/dec/context.js
var require_context = __commonJS({
  "plugins/public/node_modules/brotli/dec/context.js"(exports2) {
    exports2.lookup = new Uint8Array([
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      4,
      4,
      0,
      0,
      4,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      8,
      12,
      16,
      12,
      12,
      20,
      12,
      16,
      24,
      28,
      12,
      12,
      32,
      12,
      36,
      12,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      32,
      32,
      24,
      40,
      28,
      12,
      12,
      48,
      52,
      52,
      52,
      48,
      52,
      52,
      52,
      48,
      52,
      52,
      52,
      52,
      52,
      48,
      52,
      52,
      52,
      52,
      52,
      48,
      52,
      52,
      52,
      52,
      52,
      24,
      12,
      28,
      12,
      12,
      12,
      56,
      60,
      60,
      60,
      56,
      60,
      60,
      60,
      56,
      60,
      60,
      60,
      60,
      60,
      56,
      60,
      60,
      60,
      60,
      60,
      56,
      60,
      60,
      60,
      60,
      60,
      24,
      12,
      28,
      12,
      0,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      1,
      1,
      1,
      1,
      1,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      7,
      0,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      56,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      4,
      4,
      4,
      4,
      5,
      5,
      5,
      5,
      6,
      6,
      6,
      6,
      7,
      7,
      7,
      7,
      8,
      8,
      8,
      8,
      9,
      9,
      9,
      9,
      10,
      10,
      10,
      10,
      11,
      11,
      11,
      11,
      12,
      12,
      12,
      12,
      13,
      13,
      13,
      13,
      14,
      14,
      14,
      14,
      15,
      15,
      15,
      15,
      16,
      16,
      16,
      16,
      17,
      17,
      17,
      17,
      18,
      18,
      18,
      18,
      19,
      19,
      19,
      19,
      20,
      20,
      20,
      20,
      21,
      21,
      21,
      21,
      22,
      22,
      22,
      22,
      23,
      23,
      23,
      23,
      24,
      24,
      24,
      24,
      25,
      25,
      25,
      25,
      26,
      26,
      26,
      26,
      27,
      27,
      27,
      27,
      28,
      28,
      28,
      28,
      29,
      29,
      29,
      29,
      30,
      30,
      30,
      30,
      31,
      31,
      31,
      31,
      32,
      32,
      32,
      32,
      33,
      33,
      33,
      33,
      34,
      34,
      34,
      34,
      35,
      35,
      35,
      35,
      36,
      36,
      36,
      36,
      37,
      37,
      37,
      37,
      38,
      38,
      38,
      38,
      39,
      39,
      39,
      39,
      40,
      40,
      40,
      40,
      41,
      41,
      41,
      41,
      42,
      42,
      42,
      42,
      43,
      43,
      43,
      43,
      44,
      44,
      44,
      44,
      45,
      45,
      45,
      45,
      46,
      46,
      46,
      46,
      47,
      47,
      47,
      47,
      48,
      48,
      48,
      48,
      49,
      49,
      49,
      49,
      50,
      50,
      50,
      50,
      51,
      51,
      51,
      51,
      52,
      52,
      52,
      52,
      53,
      53,
      53,
      53,
      54,
      54,
      54,
      54,
      55,
      55,
      55,
      55,
      56,
      56,
      56,
      56,
      57,
      57,
      57,
      57,
      58,
      58,
      58,
      58,
      59,
      59,
      59,
      59,
      60,
      60,
      60,
      60,
      61,
      61,
      61,
      61,
      62,
      62,
      62,
      62,
      63,
      63,
      63,
      63,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]);
    exports2.lookupOffsets = new Uint16Array([
      1024,
      1536,
      1280,
      1536,
      0,
      256,
      768,
      512
    ]);
  }
});

// plugins/public/node_modules/brotli/dec/prefix.js
var require_prefix = __commonJS({
  "plugins/public/node_modules/brotli/dec/prefix.js"(exports2) {
    function PrefixCodeRange(offset, nbits) {
      this.offset = offset;
      this.nbits = nbits;
    }
    exports2.kBlockLengthPrefixCode = [
      new PrefixCodeRange(1, 2),
      new PrefixCodeRange(5, 2),
      new PrefixCodeRange(9, 2),
      new PrefixCodeRange(13, 2),
      new PrefixCodeRange(17, 3),
      new PrefixCodeRange(25, 3),
      new PrefixCodeRange(33, 3),
      new PrefixCodeRange(41, 3),
      new PrefixCodeRange(49, 4),
      new PrefixCodeRange(65, 4),
      new PrefixCodeRange(81, 4),
      new PrefixCodeRange(97, 4),
      new PrefixCodeRange(113, 5),
      new PrefixCodeRange(145, 5),
      new PrefixCodeRange(177, 5),
      new PrefixCodeRange(209, 5),
      new PrefixCodeRange(241, 6),
      new PrefixCodeRange(305, 6),
      new PrefixCodeRange(369, 7),
      new PrefixCodeRange(497, 8),
      new PrefixCodeRange(753, 9),
      new PrefixCodeRange(1265, 10),
      new PrefixCodeRange(2289, 11),
      new PrefixCodeRange(4337, 12),
      new PrefixCodeRange(8433, 13),
      new PrefixCodeRange(16625, 24)
    ];
    exports2.kInsertLengthPrefixCode = [
      new PrefixCodeRange(0, 0),
      new PrefixCodeRange(1, 0),
      new PrefixCodeRange(2, 0),
      new PrefixCodeRange(3, 0),
      new PrefixCodeRange(4, 0),
      new PrefixCodeRange(5, 0),
      new PrefixCodeRange(6, 1),
      new PrefixCodeRange(8, 1),
      new PrefixCodeRange(10, 2),
      new PrefixCodeRange(14, 2),
      new PrefixCodeRange(18, 3),
      new PrefixCodeRange(26, 3),
      new PrefixCodeRange(34, 4),
      new PrefixCodeRange(50, 4),
      new PrefixCodeRange(66, 5),
      new PrefixCodeRange(98, 5),
      new PrefixCodeRange(130, 6),
      new PrefixCodeRange(194, 7),
      new PrefixCodeRange(322, 8),
      new PrefixCodeRange(578, 9),
      new PrefixCodeRange(1090, 10),
      new PrefixCodeRange(2114, 12),
      new PrefixCodeRange(6210, 14),
      new PrefixCodeRange(22594, 24)
    ];
    exports2.kCopyLengthPrefixCode = [
      new PrefixCodeRange(2, 0),
      new PrefixCodeRange(3, 0),
      new PrefixCodeRange(4, 0),
      new PrefixCodeRange(5, 0),
      new PrefixCodeRange(6, 0),
      new PrefixCodeRange(7, 0),
      new PrefixCodeRange(8, 0),
      new PrefixCodeRange(9, 0),
      new PrefixCodeRange(10, 1),
      new PrefixCodeRange(12, 1),
      new PrefixCodeRange(14, 2),
      new PrefixCodeRange(18, 2),
      new PrefixCodeRange(22, 3),
      new PrefixCodeRange(30, 3),
      new PrefixCodeRange(38, 4),
      new PrefixCodeRange(54, 4),
      new PrefixCodeRange(70, 5),
      new PrefixCodeRange(102, 5),
      new PrefixCodeRange(134, 6),
      new PrefixCodeRange(198, 7),
      new PrefixCodeRange(326, 8),
      new PrefixCodeRange(582, 9),
      new PrefixCodeRange(1094, 10),
      new PrefixCodeRange(2118, 24)
    ];
    exports2.kInsertRangeLut = [
      0,
      0,
      8,
      8,
      0,
      16,
      8,
      16,
      16
    ];
    exports2.kCopyRangeLut = [
      0,
      8,
      0,
      8,
      16,
      0,
      16,
      8,
      16
    ];
  }
});

// plugins/public/node_modules/brotli/dec/transform.js
var require_transform = __commonJS({
  "plugins/public/node_modules/brotli/dec/transform.js"(exports2) {
    var BrotliDictionary = require_dictionary();
    var kIdentity = 0;
    var kOmitLast1 = 1;
    var kOmitLast2 = 2;
    var kOmitLast3 = 3;
    var kOmitLast4 = 4;
    var kOmitLast5 = 5;
    var kOmitLast6 = 6;
    var kOmitLast7 = 7;
    var kOmitLast8 = 8;
    var kOmitLast9 = 9;
    var kUppercaseFirst = 10;
    var kUppercaseAll = 11;
    var kOmitFirst1 = 12;
    var kOmitFirst2 = 13;
    var kOmitFirst3 = 14;
    var kOmitFirst4 = 15;
    var kOmitFirst5 = 16;
    var kOmitFirst6 = 17;
    var kOmitFirst7 = 18;
    var kOmitFirst9 = 20;
    function Transform(prefix, transform, suffix) {
      this.prefix = new Uint8Array(prefix.length);
      this.transform = transform;
      this.suffix = new Uint8Array(suffix.length);
      for (var i = 0; i < prefix.length; i++)
        this.prefix[i] = prefix.charCodeAt(i);
      for (var i = 0; i < suffix.length; i++)
        this.suffix[i] = suffix.charCodeAt(i);
    }
    var kTransforms = [
      new Transform("", kIdentity, ""),
      new Transform("", kIdentity, " "),
      new Transform(" ", kIdentity, " "),
      new Transform("", kOmitFirst1, ""),
      new Transform("", kUppercaseFirst, " "),
      new Transform("", kIdentity, " the "),
      new Transform(" ", kIdentity, ""),
      new Transform("s ", kIdentity, " "),
      new Transform("", kIdentity, " of "),
      new Transform("", kUppercaseFirst, ""),
      new Transform("", kIdentity, " and "),
      new Transform("", kOmitFirst2, ""),
      new Transform("", kOmitLast1, ""),
      new Transform(", ", kIdentity, " "),
      new Transform("", kIdentity, ", "),
      new Transform(" ", kUppercaseFirst, " "),
      new Transform("", kIdentity, " in "),
      new Transform("", kIdentity, " to "),
      new Transform("e ", kIdentity, " "),
      new Transform("", kIdentity, '"'),
      new Transform("", kIdentity, "."),
      new Transform("", kIdentity, '">'),
      new Transform("", kIdentity, "\n"),
      new Transform("", kOmitLast3, ""),
      new Transform("", kIdentity, "]"),
      new Transform("", kIdentity, " for "),
      new Transform("", kOmitFirst3, ""),
      new Transform("", kOmitLast2, ""),
      new Transform("", kIdentity, " a "),
      new Transform("", kIdentity, " that "),
      new Transform(" ", kUppercaseFirst, ""),
      new Transform("", kIdentity, ". "),
      new Transform(".", kIdentity, ""),
      new Transform(" ", kIdentity, ", "),
      new Transform("", kOmitFirst4, ""),
      new Transform("", kIdentity, " with "),
      new Transform("", kIdentity, "'"),
      new Transform("", kIdentity, " from "),
      new Transform("", kIdentity, " by "),
      new Transform("", kOmitFirst5, ""),
      new Transform("", kOmitFirst6, ""),
      new Transform(" the ", kIdentity, ""),
      new Transform("", kOmitLast4, ""),
      new Transform("", kIdentity, ". The "),
      new Transform("", kUppercaseAll, ""),
      new Transform("", kIdentity, " on "),
      new Transform("", kIdentity, " as "),
      new Transform("", kIdentity, " is "),
      new Transform("", kOmitLast7, ""),
      new Transform("", kOmitLast1, "ing "),
      new Transform("", kIdentity, "\n	"),
      new Transform("", kIdentity, ":"),
      new Transform(" ", kIdentity, ". "),
      new Transform("", kIdentity, "ed "),
      new Transform("", kOmitFirst9, ""),
      new Transform("", kOmitFirst7, ""),
      new Transform("", kOmitLast6, ""),
      new Transform("", kIdentity, "("),
      new Transform("", kUppercaseFirst, ", "),
      new Transform("", kOmitLast8, ""),
      new Transform("", kIdentity, " at "),
      new Transform("", kIdentity, "ly "),
      new Transform(" the ", kIdentity, " of "),
      new Transform("", kOmitLast5, ""),
      new Transform("", kOmitLast9, ""),
      new Transform(" ", kUppercaseFirst, ", "),
      new Transform("", kUppercaseFirst, '"'),
      new Transform(".", kIdentity, "("),
      new Transform("", kUppercaseAll, " "),
      new Transform("", kUppercaseFirst, '">'),
      new Transform("", kIdentity, '="'),
      new Transform(" ", kIdentity, "."),
      new Transform(".com/", kIdentity, ""),
      new Transform(" the ", kIdentity, " of the "),
      new Transform("", kUppercaseFirst, "'"),
      new Transform("", kIdentity, ". This "),
      new Transform("", kIdentity, ","),
      new Transform(".", kIdentity, " "),
      new Transform("", kUppercaseFirst, "("),
      new Transform("", kUppercaseFirst, "."),
      new Transform("", kIdentity, " not "),
      new Transform(" ", kIdentity, '="'),
      new Transform("", kIdentity, "er "),
      new Transform(" ", kUppercaseAll, " "),
      new Transform("", kIdentity, "al "),
      new Transform(" ", kUppercaseAll, ""),
      new Transform("", kIdentity, "='"),
      new Transform("", kUppercaseAll, '"'),
      new Transform("", kUppercaseFirst, ". "),
      new Transform(" ", kIdentity, "("),
      new Transform("", kIdentity, "ful "),
      new Transform(" ", kUppercaseFirst, ". "),
      new Transform("", kIdentity, "ive "),
      new Transform("", kIdentity, "less "),
      new Transform("", kUppercaseAll, "'"),
      new Transform("", kIdentity, "est "),
      new Transform(" ", kUppercaseFirst, "."),
      new Transform("", kUppercaseAll, '">'),
      new Transform(" ", kIdentity, "='"),
      new Transform("", kUppercaseFirst, ","),
      new Transform("", kIdentity, "ize "),
      new Transform("", kUppercaseAll, "."),
      new Transform("\xC2\xA0", kIdentity, ""),
      new Transform(" ", kIdentity, ","),
      new Transform("", kUppercaseFirst, '="'),
      new Transform("", kUppercaseAll, '="'),
      new Transform("", kIdentity, "ous "),
      new Transform("", kUppercaseAll, ", "),
      new Transform("", kUppercaseFirst, "='"),
      new Transform(" ", kUppercaseFirst, ","),
      new Transform(" ", kUppercaseAll, '="'),
      new Transform(" ", kUppercaseAll, ", "),
      new Transform("", kUppercaseAll, ","),
      new Transform("", kUppercaseAll, "("),
      new Transform("", kUppercaseAll, ". "),
      new Transform(" ", kUppercaseAll, "."),
      new Transform("", kUppercaseAll, "='"),
      new Transform(" ", kUppercaseAll, ". "),
      new Transform(" ", kUppercaseFirst, '="'),
      new Transform(" ", kUppercaseAll, "='"),
      new Transform(" ", kUppercaseFirst, "='")
    ];
    exports2.kTransforms = kTransforms;
    exports2.kNumTransforms = kTransforms.length;
    function ToUpperCase(p, i) {
      if (p[i] < 192) {
        if (p[i] >= 97 && p[i] <= 122) {
          p[i] ^= 32;
        }
        return 1;
      }
      if (p[i] < 224) {
        p[i + 1] ^= 32;
        return 2;
      }
      p[i + 2] ^= 5;
      return 3;
    }
    exports2.transformDictionaryWord = function(dst, idx, word, len, transform) {
      var prefix = kTransforms[transform].prefix;
      var suffix = kTransforms[transform].suffix;
      var t = kTransforms[transform].transform;
      var skip = t < kOmitFirst1 ? 0 : t - (kOmitFirst1 - 1);
      var i = 0;
      var start_idx = idx;
      var uppercase;
      if (skip > len) {
        skip = len;
      }
      var prefix_pos = 0;
      while (prefix_pos < prefix.length) {
        dst[idx++] = prefix[prefix_pos++];
      }
      word += skip;
      len -= skip;
      if (t <= kOmitLast9) {
        len -= t;
      }
      for (i = 0; i < len; i++) {
        dst[idx++] = BrotliDictionary.dictionary[word + i];
      }
      uppercase = idx - len;
      if (t === kUppercaseFirst) {
        ToUpperCase(dst, uppercase);
      } else if (t === kUppercaseAll) {
        while (len > 0) {
          var step = ToUpperCase(dst, uppercase);
          uppercase += step;
          len -= step;
        }
      }
      var suffix_pos = 0;
      while (suffix_pos < suffix.length) {
        dst[idx++] = suffix[suffix_pos++];
      }
      return idx - start_idx;
    };
  }
});

// plugins/public/node_modules/brotli/dec/decode.js
var require_decode = __commonJS({
  "plugins/public/node_modules/brotli/dec/decode.js"(exports2) {
    var BrotliInput = require_streams().BrotliInput;
    var BrotliOutput = require_streams().BrotliOutput;
    var BrotliBitReader = require_bit_reader();
    var BrotliDictionary = require_dictionary();
    var HuffmanCode = require_huffman().HuffmanCode;
    var BrotliBuildHuffmanTable = require_huffman().BrotliBuildHuffmanTable;
    var Context = require_context();
    var Prefix = require_prefix();
    var Transform = require_transform();
    var kDefaultCodeLength = 8;
    var kCodeLengthRepeatCode = 16;
    var kNumLiteralCodes = 256;
    var kNumInsertAndCopyCodes = 704;
    var kNumBlockLengthCodes = 26;
    var kLiteralContextBits = 6;
    var kDistanceContextBits = 2;
    var HUFFMAN_TABLE_BITS = 8;
    var HUFFMAN_TABLE_MASK = 255;
    var HUFFMAN_MAX_TABLE_SIZE = 1080;
    var CODE_LENGTH_CODES = 18;
    var kCodeLengthCodeOrder = new Uint8Array([
      1,
      2,
      3,
      4,
      0,
      5,
      17,
      6,
      16,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15
    ]);
    var NUM_DISTANCE_SHORT_CODES = 16;
    var kDistanceShortCodeIndexOffset = new Uint8Array([
      3,
      2,
      1,
      0,
      3,
      3,
      3,
      3,
      3,
      3,
      2,
      2,
      2,
      2,
      2,
      2
    ]);
    var kDistanceShortCodeValueOffset = new Int8Array([
      0,
      0,
      0,
      0,
      -1,
      1,
      -2,
      2,
      -3,
      3,
      -1,
      1,
      -2,
      2,
      -3,
      3
    ]);
    var kMaxHuffmanTableSize = new Uint16Array([
      256,
      402,
      436,
      468,
      500,
      534,
      566,
      598,
      630,
      662,
      694,
      726,
      758,
      790,
      822,
      854,
      886,
      920,
      952,
      984,
      1016,
      1048,
      1080
    ]);
    function DecodeWindowBits(br) {
      var n;
      if (br.readBits(1) === 0) {
        return 16;
      }
      n = br.readBits(3);
      if (n > 0) {
        return 17 + n;
      }
      n = br.readBits(3);
      if (n > 0) {
        return 8 + n;
      }
      return 17;
    }
    function DecodeVarLenUint8(br) {
      if (br.readBits(1)) {
        var nbits = br.readBits(3);
        if (nbits === 0) {
          return 1;
        } else {
          return br.readBits(nbits) + (1 << nbits);
        }
      }
      return 0;
    }
    function MetaBlockLength() {
      this.meta_block_length = 0;
      this.input_end = 0;
      this.is_uncompressed = 0;
      this.is_metadata = false;
    }
    function DecodeMetaBlockLength(br) {
      var out = new MetaBlockLength();
      var size_nibbles;
      var size_bytes;
      var i;
      out.input_end = br.readBits(1);
      if (out.input_end && br.readBits(1)) {
        return out;
      }
      size_nibbles = br.readBits(2) + 4;
      if (size_nibbles === 7) {
        out.is_metadata = true;
        if (br.readBits(1) !== 0)
          throw new Error("Invalid reserved bit");
        size_bytes = br.readBits(2);
        if (size_bytes === 0)
          return out;
        for (i = 0; i < size_bytes; i++) {
          var next_byte = br.readBits(8);
          if (i + 1 === size_bytes && size_bytes > 1 && next_byte === 0)
            throw new Error("Invalid size byte");
          out.meta_block_length |= next_byte << i * 8;
        }
      } else {
        for (i = 0; i < size_nibbles; ++i) {
          var next_nibble = br.readBits(4);
          if (i + 1 === size_nibbles && size_nibbles > 4 && next_nibble === 0)
            throw new Error("Invalid size nibble");
          out.meta_block_length |= next_nibble << i * 4;
        }
      }
      ++out.meta_block_length;
      if (!out.input_end && !out.is_metadata) {
        out.is_uncompressed = br.readBits(1);
      }
      return out;
    }
    function ReadSymbol(table, index, br) {
      var start_index = index;
      var nbits;
      br.fillBitWindow();
      index += br.val_ >>> br.bit_pos_ & HUFFMAN_TABLE_MASK;
      nbits = table[index].bits - HUFFMAN_TABLE_BITS;
      if (nbits > 0) {
        br.bit_pos_ += HUFFMAN_TABLE_BITS;
        index += table[index].value;
        index += br.val_ >>> br.bit_pos_ & (1 << nbits) - 1;
      }
      br.bit_pos_ += table[index].bits;
      return table[index].value;
    }
    function ReadHuffmanCodeLengths(code_length_code_lengths, num_symbols, code_lengths, br) {
      var symbol = 0;
      var prev_code_len = kDefaultCodeLength;
      var repeat = 0;
      var repeat_code_len = 0;
      var space = 32768;
      var table = [];
      for (var i = 0; i < 32; i++)
        table.push(new HuffmanCode(0, 0));
      BrotliBuildHuffmanTable(table, 0, 5, code_length_code_lengths, CODE_LENGTH_CODES);
      while (symbol < num_symbols && space > 0) {
        var p = 0;
        var code_len;
        br.readMoreInput();
        br.fillBitWindow();
        p += br.val_ >>> br.bit_pos_ & 31;
        br.bit_pos_ += table[p].bits;
        code_len = table[p].value & 255;
        if (code_len < kCodeLengthRepeatCode) {
          repeat = 0;
          code_lengths[symbol++] = code_len;
          if (code_len !== 0) {
            prev_code_len = code_len;
            space -= 32768 >> code_len;
          }
        } else {
          var extra_bits = code_len - 14;
          var old_repeat;
          var repeat_delta;
          var new_len = 0;
          if (code_len === kCodeLengthRepeatCode) {
            new_len = prev_code_len;
          }
          if (repeat_code_len !== new_len) {
            repeat = 0;
            repeat_code_len = new_len;
          }
          old_repeat = repeat;
          if (repeat > 0) {
            repeat -= 2;
            repeat <<= extra_bits;
          }
          repeat += br.readBits(extra_bits) + 3;
          repeat_delta = repeat - old_repeat;
          if (symbol + repeat_delta > num_symbols) {
            throw new Error("[ReadHuffmanCodeLengths] symbol + repeat_delta > num_symbols");
          }
          for (var x = 0; x < repeat_delta; x++)
            code_lengths[symbol + x] = repeat_code_len;
          symbol += repeat_delta;
          if (repeat_code_len !== 0) {
            space -= repeat_delta << 15 - repeat_code_len;
          }
        }
      }
      if (space !== 0) {
        throw new Error("[ReadHuffmanCodeLengths] space = " + space);
      }
      for (; symbol < num_symbols; symbol++)
        code_lengths[symbol] = 0;
    }
    function ReadHuffmanCode(alphabet_size, tables, table, br) {
      var table_size = 0;
      var simple_code_or_skip;
      var code_lengths = new Uint8Array(alphabet_size);
      br.readMoreInput();
      simple_code_or_skip = br.readBits(2);
      if (simple_code_or_skip === 1) {
        var i;
        var max_bits_counter = alphabet_size - 1;
        var max_bits = 0;
        var symbols = new Int32Array(4);
        var num_symbols = br.readBits(2) + 1;
        while (max_bits_counter) {
          max_bits_counter >>= 1;
          ++max_bits;
        }
        for (i = 0; i < num_symbols; ++i) {
          symbols[i] = br.readBits(max_bits) % alphabet_size;
          code_lengths[symbols[i]] = 2;
        }
        code_lengths[symbols[0]] = 1;
        switch (num_symbols) {
          case 1:
            break;
          case 3:
            if (symbols[0] === symbols[1] || symbols[0] === symbols[2] || symbols[1] === symbols[2]) {
              throw new Error("[ReadHuffmanCode] invalid symbols");
            }
            break;
          case 2:
            if (symbols[0] === symbols[1]) {
              throw new Error("[ReadHuffmanCode] invalid symbols");
            }
            code_lengths[symbols[1]] = 1;
            break;
          case 4:
            if (symbols[0] === symbols[1] || symbols[0] === symbols[2] || symbols[0] === symbols[3] || symbols[1] === symbols[2] || symbols[1] === symbols[3] || symbols[2] === symbols[3]) {
              throw new Error("[ReadHuffmanCode] invalid symbols");
            }
            if (br.readBits(1)) {
              code_lengths[symbols[2]] = 3;
              code_lengths[symbols[3]] = 3;
            } else {
              code_lengths[symbols[0]] = 2;
            }
            break;
        }
      } else {
        var i;
        var code_length_code_lengths = new Uint8Array(CODE_LENGTH_CODES);
        var space = 32;
        var num_codes = 0;
        var huff = [
          new HuffmanCode(2, 0),
          new HuffmanCode(2, 4),
          new HuffmanCode(2, 3),
          new HuffmanCode(3, 2),
          new HuffmanCode(2, 0),
          new HuffmanCode(2, 4),
          new HuffmanCode(2, 3),
          new HuffmanCode(4, 1),
          new HuffmanCode(2, 0),
          new HuffmanCode(2, 4),
          new HuffmanCode(2, 3),
          new HuffmanCode(3, 2),
          new HuffmanCode(2, 0),
          new HuffmanCode(2, 4),
          new HuffmanCode(2, 3),
          new HuffmanCode(4, 5)
        ];
        for (i = simple_code_or_skip; i < CODE_LENGTH_CODES && space > 0; ++i) {
          var code_len_idx = kCodeLengthCodeOrder[i];
          var p = 0;
          var v;
          br.fillBitWindow();
          p += br.val_ >>> br.bit_pos_ & 15;
          br.bit_pos_ += huff[p].bits;
          v = huff[p].value;
          code_length_code_lengths[code_len_idx] = v;
          if (v !== 0) {
            space -= 32 >> v;
            ++num_codes;
          }
        }
        if (!(num_codes === 1 || space === 0))
          throw new Error("[ReadHuffmanCode] invalid num_codes or space");
        ReadHuffmanCodeLengths(code_length_code_lengths, alphabet_size, code_lengths, br);
      }
      table_size = BrotliBuildHuffmanTable(tables, table, HUFFMAN_TABLE_BITS, code_lengths, alphabet_size);
      if (table_size === 0) {
        throw new Error("[ReadHuffmanCode] BuildHuffmanTable failed: ");
      }
      return table_size;
    }
    function ReadBlockLength(table, index, br) {
      var code;
      var nbits;
      code = ReadSymbol(table, index, br);
      nbits = Prefix.kBlockLengthPrefixCode[code].nbits;
      return Prefix.kBlockLengthPrefixCode[code].offset + br.readBits(nbits);
    }
    function TranslateShortCodes(code, ringbuffer, index) {
      var val;
      if (code < NUM_DISTANCE_SHORT_CODES) {
        index += kDistanceShortCodeIndexOffset[code];
        index &= 3;
        val = ringbuffer[index] + kDistanceShortCodeValueOffset[code];
      } else {
        val = code - NUM_DISTANCE_SHORT_CODES + 1;
      }
      return val;
    }
    function MoveToFront(v, index) {
      var value = v[index];
      var i = index;
      for (; i; --i)
        v[i] = v[i - 1];
      v[0] = value;
    }
    function InverseMoveToFrontTransform(v, v_len) {
      var mtf = new Uint8Array(256);
      var i;
      for (i = 0; i < 256; ++i) {
        mtf[i] = i;
      }
      for (i = 0; i < v_len; ++i) {
        var index = v[i];
        v[i] = mtf[index];
        if (index)
          MoveToFront(mtf, index);
      }
    }
    function HuffmanTreeGroup(alphabet_size, num_htrees) {
      this.alphabet_size = alphabet_size;
      this.num_htrees = num_htrees;
      this.codes = new Array(num_htrees + num_htrees * kMaxHuffmanTableSize[alphabet_size + 31 >>> 5]);
      this.htrees = new Uint32Array(num_htrees);
    }
    HuffmanTreeGroup.prototype.decode = function(br) {
      var i;
      var table_size;
      var next = 0;
      for (i = 0; i < this.num_htrees; ++i) {
        this.htrees[i] = next;
        table_size = ReadHuffmanCode(this.alphabet_size, this.codes, next, br);
        next += table_size;
      }
    };
    function DecodeContextMap(context_map_size, br) {
      var out = { num_htrees: null, context_map: null };
      var use_rle_for_zeros;
      var max_run_length_prefix = 0;
      var table;
      var i;
      br.readMoreInput();
      var num_htrees = out.num_htrees = DecodeVarLenUint8(br) + 1;
      var context_map = out.context_map = new Uint8Array(context_map_size);
      if (num_htrees <= 1) {
        return out;
      }
      use_rle_for_zeros = br.readBits(1);
      if (use_rle_for_zeros) {
        max_run_length_prefix = br.readBits(4) + 1;
      }
      table = [];
      for (i = 0; i < HUFFMAN_MAX_TABLE_SIZE; i++) {
        table[i] = new HuffmanCode(0, 0);
      }
      ReadHuffmanCode(num_htrees + max_run_length_prefix, table, 0, br);
      for (i = 0; i < context_map_size; ) {
        var code;
        br.readMoreInput();
        code = ReadSymbol(table, 0, br);
        if (code === 0) {
          context_map[i] = 0;
          ++i;
        } else if (code <= max_run_length_prefix) {
          var reps = 1 + (1 << code) + br.readBits(code);
          while (--reps) {
            if (i >= context_map_size) {
              throw new Error("[DecodeContextMap] i >= context_map_size");
            }
            context_map[i] = 0;
            ++i;
          }
        } else {
          context_map[i] = code - max_run_length_prefix;
          ++i;
        }
      }
      if (br.readBits(1)) {
        InverseMoveToFrontTransform(context_map, context_map_size);
      }
      return out;
    }
    function DecodeBlockType(max_block_type, trees2, tree_type, block_types, ringbuffers, indexes, br) {
      var ringbuffer = tree_type * 2;
      var index = tree_type;
      var type_code = ReadSymbol(trees2, tree_type * HUFFMAN_MAX_TABLE_SIZE, br);
      var block_type;
      if (type_code === 0) {
        block_type = ringbuffers[ringbuffer + (indexes[index] & 1)];
      } else if (type_code === 1) {
        block_type = ringbuffers[ringbuffer + (indexes[index] - 1 & 1)] + 1;
      } else {
        block_type = type_code - 2;
      }
      if (block_type >= max_block_type) {
        block_type -= max_block_type;
      }
      block_types[tree_type] = block_type;
      ringbuffers[ringbuffer + (indexes[index] & 1)] = block_type;
      ++indexes[index];
    }
    function CopyUncompressedBlockToOutput(output, len, pos, ringbuffer, ringbuffer_mask, br) {
      var rb_size = ringbuffer_mask + 1;
      var rb_pos = pos & ringbuffer_mask;
      var br_pos = br.pos_ & BrotliBitReader.IBUF_MASK;
      var nbytes;
      if (len < 8 || br.bit_pos_ + (len << 3) < br.bit_end_pos_) {
        while (len-- > 0) {
          br.readMoreInput();
          ringbuffer[rb_pos++] = br.readBits(8);
          if (rb_pos === rb_size) {
            output.write(ringbuffer, rb_size);
            rb_pos = 0;
          }
        }
        return;
      }
      if (br.bit_end_pos_ < 32) {
        throw new Error("[CopyUncompressedBlockToOutput] br.bit_end_pos_ < 32");
      }
      while (br.bit_pos_ < 32) {
        ringbuffer[rb_pos] = br.val_ >>> br.bit_pos_;
        br.bit_pos_ += 8;
        ++rb_pos;
        --len;
      }
      nbytes = br.bit_end_pos_ - br.bit_pos_ >> 3;
      if (br_pos + nbytes > BrotliBitReader.IBUF_MASK) {
        var tail = BrotliBitReader.IBUF_MASK + 1 - br_pos;
        for (var x = 0; x < tail; x++)
          ringbuffer[rb_pos + x] = br.buf_[br_pos + x];
        nbytes -= tail;
        rb_pos += tail;
        len -= tail;
        br_pos = 0;
      }
      for (var x = 0; x < nbytes; x++)
        ringbuffer[rb_pos + x] = br.buf_[br_pos + x];
      rb_pos += nbytes;
      len -= nbytes;
      if (rb_pos >= rb_size) {
        output.write(ringbuffer, rb_size);
        rb_pos -= rb_size;
        for (var x = 0; x < rb_pos; x++)
          ringbuffer[x] = ringbuffer[rb_size + x];
      }
      while (rb_pos + len >= rb_size) {
        nbytes = rb_size - rb_pos;
        if (br.input_.read(ringbuffer, rb_pos, nbytes) < nbytes) {
          throw new Error("[CopyUncompressedBlockToOutput] not enough bytes");
        }
        output.write(ringbuffer, rb_size);
        len -= nbytes;
        rb_pos = 0;
      }
      if (br.input_.read(ringbuffer, rb_pos, len) < len) {
        throw new Error("[CopyUncompressedBlockToOutput] not enough bytes");
      }
      br.reset();
    }
    function JumpToByteBoundary(br) {
      var new_bit_pos = br.bit_pos_ + 7 & ~7;
      var pad_bits = br.readBits(new_bit_pos - br.bit_pos_);
      return pad_bits == 0;
    }
    function BrotliDecompressedSize(buffer) {
      var input = new BrotliInput(buffer);
      var br = new BrotliBitReader(input);
      DecodeWindowBits(br);
      var out = DecodeMetaBlockLength(br);
      return out.meta_block_length;
    }
    exports2.BrotliDecompressedSize = BrotliDecompressedSize;
    function BrotliDecompressBuffer(buffer, output_size) {
      var input = new BrotliInput(buffer);
      if (output_size == null) {
        output_size = BrotliDecompressedSize(buffer);
      }
      var output_buffer = new Uint8Array(output_size);
      var output = new BrotliOutput(output_buffer);
      BrotliDecompress(input, output);
      if (output.pos < output.buffer.length) {
        output.buffer = output.buffer.subarray(0, output.pos);
      }
      return output.buffer;
    }
    exports2.BrotliDecompressBuffer = BrotliDecompressBuffer;
    function BrotliDecompress(input, output) {
      var i;
      var pos = 0;
      var input_end = 0;
      var window_bits = 0;
      var max_backward_distance;
      var max_distance = 0;
      var ringbuffer_size;
      var ringbuffer_mask;
      var ringbuffer;
      var ringbuffer_end;
      var dist_rb = [16, 15, 11, 4];
      var dist_rb_idx = 0;
      var prev_byte1 = 0;
      var prev_byte2 = 0;
      var hgroup = [new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0)];
      var block_type_trees;
      var block_len_trees;
      var br;
      var kRingBufferWriteAheadSlack = 128 + BrotliBitReader.READ_SIZE;
      br = new BrotliBitReader(input);
      window_bits = DecodeWindowBits(br);
      max_backward_distance = (1 << window_bits) - 16;
      ringbuffer_size = 1 << window_bits;
      ringbuffer_mask = ringbuffer_size - 1;
      ringbuffer = new Uint8Array(ringbuffer_size + kRingBufferWriteAheadSlack + BrotliDictionary.maxDictionaryWordLength);
      ringbuffer_end = ringbuffer_size;
      block_type_trees = [];
      block_len_trees = [];
      for (var x = 0; x < 3 * HUFFMAN_MAX_TABLE_SIZE; x++) {
        block_type_trees[x] = new HuffmanCode(0, 0);
        block_len_trees[x] = new HuffmanCode(0, 0);
      }
      while (!input_end) {
        var meta_block_remaining_len = 0;
        var is_uncompressed;
        var block_length = [1 << 28, 1 << 28, 1 << 28];
        var block_type = [0];
        var num_block_types = [1, 1, 1];
        var block_type_rb = [0, 1, 0, 1, 0, 1];
        var block_type_rb_index = [0];
        var distance_postfix_bits;
        var num_direct_distance_codes;
        var distance_postfix_mask;
        var num_distance_codes;
        var context_map = null;
        var context_modes = null;
        var num_literal_htrees;
        var dist_context_map = null;
        var num_dist_htrees;
        var context_offset = 0;
        var context_map_slice = null;
        var literal_htree_index = 0;
        var dist_context_offset = 0;
        var dist_context_map_slice = null;
        var dist_htree_index = 0;
        var context_lookup_offset1 = 0;
        var context_lookup_offset2 = 0;
        var context_mode;
        var htree_command;
        for (i = 0; i < 3; ++i) {
          hgroup[i].codes = null;
          hgroup[i].htrees = null;
        }
        br.readMoreInput();
        var _out = DecodeMetaBlockLength(br);
        meta_block_remaining_len = _out.meta_block_length;
        if (pos + meta_block_remaining_len > output.buffer.length) {
          var tmp = new Uint8Array(pos + meta_block_remaining_len);
          tmp.set(output.buffer);
          output.buffer = tmp;
        }
        input_end = _out.input_end;
        is_uncompressed = _out.is_uncompressed;
        if (_out.is_metadata) {
          JumpToByteBoundary(br);
          for (; meta_block_remaining_len > 0; --meta_block_remaining_len) {
            br.readMoreInput();
            br.readBits(8);
          }
          continue;
        }
        if (meta_block_remaining_len === 0) {
          continue;
        }
        if (is_uncompressed) {
          br.bit_pos_ = br.bit_pos_ + 7 & ~7;
          CopyUncompressedBlockToOutput(
            output,
            meta_block_remaining_len,
            pos,
            ringbuffer,
            ringbuffer_mask,
            br
          );
          pos += meta_block_remaining_len;
          continue;
        }
        for (i = 0; i < 3; ++i) {
          num_block_types[i] = DecodeVarLenUint8(br) + 1;
          if (num_block_types[i] >= 2) {
            ReadHuffmanCode(num_block_types[i] + 2, block_type_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
            ReadHuffmanCode(kNumBlockLengthCodes, block_len_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
            block_length[i] = ReadBlockLength(block_len_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
            block_type_rb_index[i] = 1;
          }
        }
        br.readMoreInput();
        distance_postfix_bits = br.readBits(2);
        num_direct_distance_codes = NUM_DISTANCE_SHORT_CODES + (br.readBits(4) << distance_postfix_bits);
        distance_postfix_mask = (1 << distance_postfix_bits) - 1;
        num_distance_codes = num_direct_distance_codes + (48 << distance_postfix_bits);
        context_modes = new Uint8Array(num_block_types[0]);
        for (i = 0; i < num_block_types[0]; ++i) {
          br.readMoreInput();
          context_modes[i] = br.readBits(2) << 1;
        }
        var _o1 = DecodeContextMap(num_block_types[0] << kLiteralContextBits, br);
        num_literal_htrees = _o1.num_htrees;
        context_map = _o1.context_map;
        var _o2 = DecodeContextMap(num_block_types[2] << kDistanceContextBits, br);
        num_dist_htrees = _o2.num_htrees;
        dist_context_map = _o2.context_map;
        hgroup[0] = new HuffmanTreeGroup(kNumLiteralCodes, num_literal_htrees);
        hgroup[1] = new HuffmanTreeGroup(kNumInsertAndCopyCodes, num_block_types[1]);
        hgroup[2] = new HuffmanTreeGroup(num_distance_codes, num_dist_htrees);
        for (i = 0; i < 3; ++i) {
          hgroup[i].decode(br);
        }
        context_map_slice = 0;
        dist_context_map_slice = 0;
        context_mode = context_modes[block_type[0]];
        context_lookup_offset1 = Context.lookupOffsets[context_mode];
        context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
        htree_command = hgroup[1].htrees[0];
        while (meta_block_remaining_len > 0) {
          var cmd_code;
          var range_idx;
          var insert_code;
          var copy_code;
          var insert_length;
          var copy_length;
          var distance_code;
          var distance;
          var context;
          var j;
          var copy_dst;
          br.readMoreInput();
          if (block_length[1] === 0) {
            DecodeBlockType(
              num_block_types[1],
              block_type_trees,
              1,
              block_type,
              block_type_rb,
              block_type_rb_index,
              br
            );
            block_length[1] = ReadBlockLength(block_len_trees, HUFFMAN_MAX_TABLE_SIZE, br);
            htree_command = hgroup[1].htrees[block_type[1]];
          }
          --block_length[1];
          cmd_code = ReadSymbol(hgroup[1].codes, htree_command, br);
          range_idx = cmd_code >> 6;
          if (range_idx >= 2) {
            range_idx -= 2;
            distance_code = -1;
          } else {
            distance_code = 0;
          }
          insert_code = Prefix.kInsertRangeLut[range_idx] + (cmd_code >> 3 & 7);
          copy_code = Prefix.kCopyRangeLut[range_idx] + (cmd_code & 7);
          insert_length = Prefix.kInsertLengthPrefixCode[insert_code].offset + br.readBits(Prefix.kInsertLengthPrefixCode[insert_code].nbits);
          copy_length = Prefix.kCopyLengthPrefixCode[copy_code].offset + br.readBits(Prefix.kCopyLengthPrefixCode[copy_code].nbits);
          prev_byte1 = ringbuffer[pos - 1 & ringbuffer_mask];
          prev_byte2 = ringbuffer[pos - 2 & ringbuffer_mask];
          for (j = 0; j < insert_length; ++j) {
            br.readMoreInput();
            if (block_length[0] === 0) {
              DecodeBlockType(
                num_block_types[0],
                block_type_trees,
                0,
                block_type,
                block_type_rb,
                block_type_rb_index,
                br
              );
              block_length[0] = ReadBlockLength(block_len_trees, 0, br);
              context_offset = block_type[0] << kLiteralContextBits;
              context_map_slice = context_offset;
              context_mode = context_modes[block_type[0]];
              context_lookup_offset1 = Context.lookupOffsets[context_mode];
              context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
            }
            context = Context.lookup[context_lookup_offset1 + prev_byte1] | Context.lookup[context_lookup_offset2 + prev_byte2];
            literal_htree_index = context_map[context_map_slice + context];
            --block_length[0];
            prev_byte2 = prev_byte1;
            prev_byte1 = ReadSymbol(hgroup[0].codes, hgroup[0].htrees[literal_htree_index], br);
            ringbuffer[pos & ringbuffer_mask] = prev_byte1;
            if ((pos & ringbuffer_mask) === ringbuffer_mask) {
              output.write(ringbuffer, ringbuffer_size);
            }
            ++pos;
          }
          meta_block_remaining_len -= insert_length;
          if (meta_block_remaining_len <= 0)
            break;
          if (distance_code < 0) {
            var context;
            br.readMoreInput();
            if (block_length[2] === 0) {
              DecodeBlockType(
                num_block_types[2],
                block_type_trees,
                2,
                block_type,
                block_type_rb,
                block_type_rb_index,
                br
              );
              block_length[2] = ReadBlockLength(block_len_trees, 2 * HUFFMAN_MAX_TABLE_SIZE, br);
              dist_context_offset = block_type[2] << kDistanceContextBits;
              dist_context_map_slice = dist_context_offset;
            }
            --block_length[2];
            context = (copy_length > 4 ? 3 : copy_length - 2) & 255;
            dist_htree_index = dist_context_map[dist_context_map_slice + context];
            distance_code = ReadSymbol(hgroup[2].codes, hgroup[2].htrees[dist_htree_index], br);
            if (distance_code >= num_direct_distance_codes) {
              var nbits;
              var postfix;
              var offset;
              distance_code -= num_direct_distance_codes;
              postfix = distance_code & distance_postfix_mask;
              distance_code >>= distance_postfix_bits;
              nbits = (distance_code >> 1) + 1;
              offset = (2 + (distance_code & 1) << nbits) - 4;
              distance_code = num_direct_distance_codes + (offset + br.readBits(nbits) << distance_postfix_bits) + postfix;
            }
          }
          distance = TranslateShortCodes(distance_code, dist_rb, dist_rb_idx);
          if (distance < 0) {
            throw new Error("[BrotliDecompress] invalid distance");
          }
          if (pos < max_backward_distance && max_distance !== max_backward_distance) {
            max_distance = pos;
          } else {
            max_distance = max_backward_distance;
          }
          copy_dst = pos & ringbuffer_mask;
          if (distance > max_distance) {
            if (copy_length >= BrotliDictionary.minDictionaryWordLength && copy_length <= BrotliDictionary.maxDictionaryWordLength) {
              var offset = BrotliDictionary.offsetsByLength[copy_length];
              var word_id = distance - max_distance - 1;
              var shift = BrotliDictionary.sizeBitsByLength[copy_length];
              var mask = (1 << shift) - 1;
              var word_idx = word_id & mask;
              var transform_idx = word_id >> shift;
              offset += word_idx * copy_length;
              if (transform_idx < Transform.kNumTransforms) {
                var len = Transform.transformDictionaryWord(ringbuffer, copy_dst, offset, copy_length, transform_idx);
                copy_dst += len;
                pos += len;
                meta_block_remaining_len -= len;
                if (copy_dst >= ringbuffer_end) {
                  output.write(ringbuffer, ringbuffer_size);
                  for (var _x = 0; _x < copy_dst - ringbuffer_end; _x++)
                    ringbuffer[_x] = ringbuffer[ringbuffer_end + _x];
                }
              } else {
                throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
              }
            } else {
              throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
            }
          } else {
            if (distance_code > 0) {
              dist_rb[dist_rb_idx & 3] = distance;
              ++dist_rb_idx;
            }
            if (copy_length > meta_block_remaining_len) {
              throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
            }
            for (j = 0; j < copy_length; ++j) {
              ringbuffer[pos & ringbuffer_mask] = ringbuffer[pos - distance & ringbuffer_mask];
              if ((pos & ringbuffer_mask) === ringbuffer_mask) {
                output.write(ringbuffer, ringbuffer_size);
              }
              ++pos;
              --meta_block_remaining_len;
            }
          }
          prev_byte1 = ringbuffer[pos - 1 & ringbuffer_mask];
          prev_byte2 = ringbuffer[pos - 2 & ringbuffer_mask];
        }
        pos &= 1073741823;
      }
      output.write(ringbuffer, pos & ringbuffer_mask);
    }
    exports2.BrotliDecompress = BrotliDecompress;
    BrotliDictionary.init();
  }
});

// plugins/public/node_modules/brotli/decompress.js
var require_decompress = __commonJS({
  "plugins/public/node_modules/brotli/decompress.js"(exports2, module2) {
    module2.exports = require_decode().BrotliDecompressBuffer;
  }
});

// plugins/public/node_modules/repeat-string/index.js
var require_repeat_string = __commonJS({
  "plugins/public/node_modules/repeat-string/index.js"(exports2, module2) {
    "use strict";
    var res = "";
    var cache;
    module2.exports = repeat;
    function repeat(str, num) {
      if (typeof str !== "string") {
        throw new TypeError("expected a string");
      }
      if (num === 1)
        return str;
      if (num === 2)
        return str + str;
      var max = str.length * num;
      if (cache !== str || typeof cache === "undefined") {
        cache = str;
        res = "";
      } else if (res.length >= max) {
        return res.substr(0, max);
      }
      while (max > res.length && num > 1) {
        if (num & 1) {
          res += str;
        }
        num >>= 1;
        str += str;
      }
      res += str;
      res = res.substr(0, max);
      return res;
    }
  }
});

// plugins/public/node_modules/xml-beautifier/dist/index.js
var require_dist = __commonJS({
  "plugins/public/node_modules/xml-beautifier/dist/index.js"(exports2, module2) {
    "use strict";
    var repeat = require_repeat_string();
    var splitOnTags = function splitOnTags2(str) {
      return str.split(/(<\/?[^>]+>)/g).filter(function(line) {
        return line.trim() !== "";
      });
    };
    var isTag = function isTag2(str) {
      return /<[^>!]+>/.test(str);
    };
    var isXMLDeclaration = function isXMLDeclaration2(str) {
      return /<\?[^?>]+\?>/.test(str);
    };
    var isClosingTag = function isClosingTag2(str) {
      return /<\/+[^>]+>/.test(str);
    };
    var isSelfClosingTag = function isSelfClosingTag2(str) {
      return /<[^>]+\/>/.test(str);
    };
    var isOpeningTag = function isOpeningTag2(str) {
      return isTag(str) && !isClosingTag(str) && !isSelfClosingTag(str) && !isXMLDeclaration(str);
    };
    module2.exports = function(xml, indent) {
      var depth = 0;
      indent = indent || "    ";
      return splitOnTags(xml).map(function(item) {
        item = item.replace(/^\s+|\s+$/g, "");
        if (isClosingTag(item)) {
          depth--;
        }
        var line = repeat(indent, depth) + item;
        if (isOpeningTag(item)) {
          depth++;
        }
        return line;
      }).join("\n");
    };
  }
});

// plugins/public/network/index.tsx
var network_exports = {};
__export(network_exports, {
  BodyOptions: () => BodyOptions,
  Component: () => Component2,
  plugin: () => plugin
});
module.exports = __toCommonJS(network_exports);
var import_react7 = __toESM(require("react"));
var import_antd4 = require("antd");
var import_flipper_plugin6 = require("flipper-plugin");

// plugins/public/network/ProtobufDefinitionsRepository.tsx
var import_protobufjs = __toESM(require_protobufjs());
var ProtobufDefinitionsRepository = class {
  constructor() {
    this.rawDefinitions = {};
    this.cachedDecodedDefinitions = {};
  }
  static getInstance() {
    if (!ProtobufDefinitionsRepository.instance) {
      ProtobufDefinitionsRepository.instance = new ProtobufDefinitionsRepository();
    }
    return ProtobufDefinitionsRepository.instance;
  }
  addDefinitions(baseUrl, definitions) {
    for (const d of definitions) {
      if (!baseUrl.endsWith("/") && d.path.substr(0, 1) != "/") {
        this.rawDefinitions[this.key(d.method, `${baseUrl}/${d.path}`)] = d;
      } else {
        this.rawDefinitions[this.key(d.method, baseUrl + d.path)] = d;
      }
    }
  }
  getResponseType(method, path) {
    const key = this.key(method, path);
    this.generateRoots(key);
    const messageFullName = this.rawDefinitions[key]?.responseMessageFullName;
    if (messageFullName) {
      return this.cachedDecodedDefinitions[key]?.responseRoot?.lookupType(
        messageFullName
      );
    } else {
      return void 0;
    }
  }
  getRequestType(method, path) {
    const key = this.key(method, path);
    this.generateRoots(key);
    const messageFullName = this.rawDefinitions[key]?.requestMessageFullName;
    if (messageFullName) {
      return this.cachedDecodedDefinitions[key]?.requestRoot?.lookupType(
        messageFullName
      );
    } else {
      return void 0;
    }
  }
  generateRoots(key) {
    if (key in this.cachedDecodedDefinitions) {
      return;
    }
    const rawDefinition = this.rawDefinitions[key];
    if (rawDefinition === void 0)
      return;
    let responseRoot = void 0;
    if (rawDefinition.responseDefinitions) {
      responseRoot = import_protobufjs.default.Root.fromJSON(rawDefinition.responseDefinitions);
    }
    let requestRoot = void 0;
    if (rawDefinition.requestDefinitions) {
      requestRoot = import_protobufjs.default.Root.fromJSON(rawDefinition.requestDefinitions);
    }
    this.cachedDecodedDefinitions[key] = { responseRoot, requestRoot };
  }
  key(method, path) {
    return `${method}::${path.split("?")[0]}`;
  }
};

// plugins/public/network/utils.tsx
var import_buffer = __toESM(require_buffer());
var import_decompress = __toESM(require_decompress());

// plugins/public/node_modules/pako/dist/pako.esm.mjs
var Z_FIXED = 4;
var Z_BINARY = 0;
var Z_TEXT = 1;
var Z_UNKNOWN = 2;
function zero(buf) {
  let len = buf.length;
  while (--len >= 0) {
    buf[len] = 0;
  }
}
var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES = 2;
var MIN_MATCH = 3;
var MAX_MATCH = 258;
var LENGTH_CODES = 29;
var LITERALS = 256;
var L_CODES = LITERALS + 1 + LENGTH_CODES;
var D_CODES = 30;
var BL_CODES = 19;
var HEAP_SIZE = 2 * L_CODES + 1;
var MAX_BITS = 15;
var Buf_size = 16;
var MAX_BL_BITS = 7;
var END_BLOCK = 256;
var REP_3_6 = 16;
var REPZ_3_10 = 17;
var REPZ_11_138 = 18;
var extra_lbits = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]);
var extra_dbits = new Uint8Array([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);
var extra_blbits = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]);
var bl_order = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
var DIST_CODE_LEN = 512;
var static_ltree = new Array((L_CODES + 2) * 2);
zero(static_ltree);
var static_dtree = new Array(D_CODES * 2);
zero(static_dtree);
var _dist_code = new Array(DIST_CODE_LEN);
zero(_dist_code);
var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
var base_length = new Array(LENGTH_CODES);
zero(base_length);
var base_dist = new Array(D_CODES);
zero(base_dist);
function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
  this.static_tree = static_tree;
  this.extra_bits = extra_bits;
  this.extra_base = extra_base;
  this.elems = elems;
  this.max_length = max_length;
  this.has_stree = static_tree && static_tree.length;
}
var static_l_desc;
var static_d_desc;
var static_bl_desc;
function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;
  this.max_code = 0;
  this.stat_desc = stat_desc;
}
var d_code = (dist) => {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
};
var put_short = (s, w) => {
  s.pending_buf[s.pending++] = w & 255;
  s.pending_buf[s.pending++] = w >>> 8 & 255;
};
var send_bits = (s, value, length) => {
  if (s.bi_valid > Buf_size - length) {
    s.bi_buf |= value << s.bi_valid & 65535;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> Buf_size - s.bi_valid;
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= value << s.bi_valid & 65535;
    s.bi_valid += length;
  }
};
var send_code = (s, c, tree) => {
  send_bits(s, tree[c * 2], tree[c * 2 + 1]);
};
var bi_reverse = (code, len) => {
  let res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
};
var bi_flush = (s) => {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;
  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 255;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
};
var gen_bitlen = (s, desc) => {
  const tree = desc.dyn_tree;
  const max_code = desc.max_code;
  const stree = desc.stat_desc.static_tree;
  const has_stree = desc.stat_desc.has_stree;
  const extra = desc.stat_desc.extra_bits;
  const base = desc.stat_desc.extra_base;
  const max_length = desc.stat_desc.max_length;
  let h;
  let n, m;
  let bits;
  let xbits;
  let f;
  let overflow = 0;
  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }
  tree[s.heap[s.heap_max] * 2 + 1] = 0;
  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1] = bits;
    if (n > max_code) {
      continue;
    }
    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2];
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1] + xbits);
    }
  }
  if (overflow === 0) {
    return;
  }
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) {
      bits--;
    }
    s.bl_count[bits]--;
    s.bl_count[bits + 1] += 2;
    s.bl_count[max_length]--;
    overflow -= 2;
  } while (overflow > 0);
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) {
        continue;
      }
      if (tree[m * 2 + 1] !== bits) {
        s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
        tree[m * 2 + 1] = bits;
      }
      n--;
    }
  }
};
var gen_codes = (tree, max_code, bl_count) => {
  const next_code = new Array(MAX_BITS + 1);
  let code = 0;
  let bits;
  let n;
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = code + bl_count[bits - 1] << 1;
  }
  for (n = 0; n <= max_code; n++) {
    let len = tree[n * 2 + 1];
    if (len === 0) {
      continue;
    }
    tree[n * 2] = bi_reverse(next_code[len]++, len);
  }
};
var tr_static_init = () => {
  let n;
  let bits;
  let length;
  let code;
  let dist;
  const bl_count = new Array(MAX_BITS + 1);
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < 1 << extra_lbits[code]; n++) {
      _length_code[length++] = code;
    }
  }
  _length_code[length - 1] = code;
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < 1 << extra_dbits[code]; n++) {
      _dist_code[dist++] = code;
    }
  }
  dist >>= 7;
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }
  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1] = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1] = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1] = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1] = 8;
    n++;
    bl_count[8]++;
  }
  gen_codes(static_ltree, L_CODES + 1, bl_count);
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1] = 5;
    static_dtree[n * 2] = bi_reverse(n, 5);
  }
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);
};
var init_block = (s) => {
  let n;
  for (n = 0; n < L_CODES; n++) {
    s.dyn_ltree[n * 2] = 0;
  }
  for (n = 0; n < D_CODES; n++) {
    s.dyn_dtree[n * 2] = 0;
  }
  for (n = 0; n < BL_CODES; n++) {
    s.bl_tree[n * 2] = 0;
  }
  s.dyn_ltree[END_BLOCK * 2] = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
};
var bi_windup = (s) => {
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
};
var copy_block = (s, buf, len, header) => {
  bi_windup(s);
  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
  s.pending_buf.set(s.window.subarray(buf, buf + len), s.pending);
  s.pending += len;
};
var smaller = (tree, n, m, depth) => {
  const _n2 = n * 2;
  const _m2 = m * 2;
  return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];
};
var pqdownheap = (s, tree, k) => {
  const v = s.heap[k];
  let j = k << 1;
  while (j <= s.heap_len) {
    if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    if (smaller(tree, v, s.heap[j], s.depth)) {
      break;
    }
    s.heap[k] = s.heap[j];
    k = j;
    j <<= 1;
  }
  s.heap[k] = v;
};
var compress_block = (s, ltree, dtree) => {
  let dist;
  let lc;
  let lx = 0;
  let code;
  let extra;
  if (s.last_lit !== 0) {
    do {
      dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
      lc = s.pending_buf[s.l_buf + lx];
      lx++;
      if (dist === 0) {
        send_code(s, lc, ltree);
      } else {
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree);
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);
        }
        dist--;
        code = d_code(dist);
        send_code(s, code, dtree);
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);
        }
      }
    } while (lx < s.last_lit);
  }
  send_code(s, END_BLOCK, ltree);
};
var build_tree = (s, desc) => {
  const tree = desc.dyn_tree;
  const stree = desc.stat_desc.static_tree;
  const has_stree = desc.stat_desc.has_stree;
  const elems = desc.stat_desc.elems;
  let n, m;
  let max_code = -1;
  let node;
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;
  for (n = 0; n < elems; n++) {
    if (tree[n * 2] !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;
    } else {
      tree[n * 2 + 1] = 0;
    }
  }
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
    tree[node * 2] = 1;
    s.depth[node] = 0;
    s.opt_len--;
    if (has_stree) {
      s.static_len -= stree[node * 2 + 1];
    }
  }
  desc.max_code = max_code;
  for (n = s.heap_len >> 1; n >= 1; n--) {
    pqdownheap(s, tree, n);
  }
  node = elems;
  do {
    n = s.heap[1];
    s.heap[1] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1);
    m = s.heap[1];
    s.heap[--s.heap_max] = n;
    s.heap[--s.heap_max] = m;
    tree[node * 2] = tree[n * 2] + tree[m * 2];
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1] = tree[m * 2 + 1] = node;
    s.heap[1] = node++;
    pqdownheap(s, tree, 1);
  } while (s.heap_len >= 2);
  s.heap[--s.heap_max] = s.heap[1];
  gen_bitlen(s, desc);
  gen_codes(tree, max_code, s.bl_count);
};
var scan_tree = (s, tree, max_code) => {
  let n;
  let prevlen = -1;
  let curlen;
  let nextlen = tree[0 * 2 + 1];
  let count = 0;
  let max_count = 7;
  let min_count = 4;
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1] = 65535;
  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1];
    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      s.bl_tree[curlen * 2] += count;
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        s.bl_tree[curlen * 2]++;
      }
      s.bl_tree[REP_3_6 * 2]++;
    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]++;
    } else {
      s.bl_tree[REPZ_11_138 * 2]++;
    }
    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};
var send_tree = (s, tree, max_code) => {
  let n;
  let prevlen = -1;
  let curlen;
  let nextlen = tree[0 * 2 + 1];
  let count = 0;
  let max_count = 7;
  let min_count = 4;
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1];
    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      do {
        send_code(s, curlen, s.bl_tree);
      } while (--count !== 0);
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);
    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);
    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }
    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};
var build_bl_tree = (s) => {
  let max_blindex;
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
  build_tree(s, s.bl_desc);
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {
      break;
    }
  }
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  return max_blindex;
};
var send_all_trees = (s, lcodes, dcodes, blcodes) => {
  let rank2;
  send_bits(s, lcodes - 257, 5);
  send_bits(s, dcodes - 1, 5);
  send_bits(s, blcodes - 4, 4);
  for (rank2 = 0; rank2 < blcodes; rank2++) {
    send_bits(s, s.bl_tree[bl_order[rank2] * 2 + 1], 3);
  }
  send_tree(s, s.dyn_ltree, lcodes - 1);
  send_tree(s, s.dyn_dtree, dcodes - 1);
};
var detect_data_type = (s) => {
  let black_mask = 4093624447;
  let n;
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if (black_mask & 1 && s.dyn_ltree[n * 2] !== 0) {
      return Z_BINARY;
    }
  }
  if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 || s.dyn_ltree[13 * 2] !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2] !== 0) {
      return Z_TEXT;
    }
  }
  return Z_BINARY;
};
var static_init_done = false;
var _tr_init = (s) => {
  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }
  s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
  s.bi_buf = 0;
  s.bi_valid = 0;
  init_block(s);
};
var _tr_stored_block = (s, buf, stored_len, last) => {
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
  copy_block(s, buf, stored_len, true);
};
var _tr_align = (s) => {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
};
var _tr_flush_block = (s, buf, stored_len, last) => {
  let opt_lenb, static_lenb;
  let max_blindex = 0;
  if (s.level > 0) {
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }
    build_tree(s, s.l_desc);
    build_tree(s, s.d_desc);
    max_blindex = build_bl_tree(s);
    opt_lenb = s.opt_len + 3 + 7 >>> 3;
    static_lenb = s.static_len + 3 + 7 >>> 3;
    if (static_lenb <= opt_lenb) {
      opt_lenb = static_lenb;
    }
  } else {
    opt_lenb = static_lenb = stored_len + 5;
  }
  if (stored_len + 4 <= opt_lenb && buf !== -1) {
    _tr_stored_block(s, buf, stored_len, last);
  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);
  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  init_block(s);
  if (last) {
    bi_windup(s);
  }
};
var _tr_tally = (s, dist, lc) => {
  s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 255;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 255;
  s.pending_buf[s.l_buf + s.last_lit] = lc & 255;
  s.last_lit++;
  if (dist === 0) {
    s.dyn_ltree[lc * 2]++;
  } else {
    s.matches++;
    dist--;
    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]++;
    s.dyn_dtree[d_code(dist) * 2]++;
  }
  return s.last_lit === s.lit_bufsize - 1;
};
var _tr_init_1 = _tr_init;
var _tr_stored_block_1 = _tr_stored_block;
var _tr_flush_block_1 = _tr_flush_block;
var _tr_tally_1 = _tr_tally;
var _tr_align_1 = _tr_align;
var trees = {
  _tr_init: _tr_init_1,
  _tr_stored_block: _tr_stored_block_1,
  _tr_flush_block: _tr_flush_block_1,
  _tr_tally: _tr_tally_1,
  _tr_align: _tr_align_1
};
var adler32 = (adler, buf, len, pos) => {
  let s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n = 0;
  while (len !== 0) {
    n = len > 2e3 ? 2e3 : len;
    len -= n;
    do {
      s1 = s1 + buf[pos++] | 0;
      s2 = s2 + s1 | 0;
    } while (--n);
    s1 %= 65521;
    s2 %= 65521;
  }
  return s1 | s2 << 16 | 0;
};
var adler32_1 = adler32;
var makeTable = () => {
  let c, table = [];
  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
    }
    table[n] = c;
  }
  return table;
};
var crcTable = new Uint32Array(makeTable());
var crc32 = (crc, buf, len, pos) => {
  const t = crcTable;
  const end = pos + len;
  crc ^= -1;
  for (let i = pos; i < end; i++) {
    crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255];
  }
  return crc ^ -1;
};
var crc32_1 = crc32;
var messages = {
  2: "need dictionary",
  1: "stream end",
  0: "",
  "-1": "file error",
  "-2": "stream error",
  "-3": "data error",
  "-4": "insufficient memory",
  "-5": "buffer error",
  "-6": "incompatible version"
};
var constants = {
  Z_NO_FLUSH: 0,
  Z_PARTIAL_FLUSH: 1,
  Z_SYNC_FLUSH: 2,
  Z_FULL_FLUSH: 3,
  Z_FINISH: 4,
  Z_BLOCK: 5,
  Z_TREES: 6,
  Z_OK: 0,
  Z_STREAM_END: 1,
  Z_NEED_DICT: 2,
  Z_ERRNO: -1,
  Z_STREAM_ERROR: -2,
  Z_DATA_ERROR: -3,
  Z_MEM_ERROR: -4,
  Z_BUF_ERROR: -5,
  Z_NO_COMPRESSION: 0,
  Z_BEST_SPEED: 1,
  Z_BEST_COMPRESSION: 9,
  Z_DEFAULT_COMPRESSION: -1,
  Z_FILTERED: 1,
  Z_HUFFMAN_ONLY: 2,
  Z_RLE: 3,
  Z_FIXED: 4,
  Z_DEFAULT_STRATEGY: 0,
  Z_BINARY: 0,
  Z_TEXT: 1,
  Z_UNKNOWN: 2,
  Z_DEFLATED: 8
};
var { _tr_init: _tr_init$1, _tr_stored_block: _tr_stored_block$1, _tr_flush_block: _tr_flush_block$1, _tr_tally: _tr_tally$1, _tr_align: _tr_align$1 } = trees;
var {
  Z_NO_FLUSH,
  Z_PARTIAL_FLUSH,
  Z_FULL_FLUSH,
  Z_FINISH,
  Z_BLOCK,
  Z_OK,
  Z_STREAM_END,
  Z_STREAM_ERROR,
  Z_DATA_ERROR,
  Z_BUF_ERROR,
  Z_DEFAULT_COMPRESSION,
  Z_FILTERED,
  Z_HUFFMAN_ONLY,
  Z_RLE,
  Z_FIXED: Z_FIXED$1,
  Z_DEFAULT_STRATEGY,
  Z_UNKNOWN: Z_UNKNOWN$1,
  Z_DEFLATED
} = constants;
var MAX_MEM_LEVEL = 9;
var MAX_WBITS = 15;
var DEF_MEM_LEVEL = 8;
var LENGTH_CODES$1 = 29;
var LITERALS$1 = 256;
var L_CODES$1 = LITERALS$1 + 1 + LENGTH_CODES$1;
var D_CODES$1 = 30;
var BL_CODES$1 = 19;
var HEAP_SIZE$1 = 2 * L_CODES$1 + 1;
var MAX_BITS$1 = 15;
var MIN_MATCH$1 = 3;
var MAX_MATCH$1 = 258;
var MIN_LOOKAHEAD = MAX_MATCH$1 + MIN_MATCH$1 + 1;
var PRESET_DICT = 32;
var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;
var BS_NEED_MORE = 1;
var BS_BLOCK_DONE = 2;
var BS_FINISH_STARTED = 3;
var BS_FINISH_DONE = 4;
var OS_CODE = 3;
var err = (strm, errorCode) => {
  strm.msg = messages[errorCode];
  return errorCode;
};
var rank = (f) => {
  return (f << 1) - (f > 4 ? 9 : 0);
};
var zero$1 = (buf) => {
  let len = buf.length;
  while (--len >= 0) {
    buf[len] = 0;
  }
};
var HASH_ZLIB = (s, prev, data) => (prev << s.hash_shift ^ data) & s.hash_mask;
var HASH = HASH_ZLIB;
var flush_pending = (strm) => {
  const s = strm.state;
  let len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) {
    return;
  }
  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
};
var flush_block_only = (s, last) => {
  _tr_flush_block$1(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
};
var put_byte = (s, b) => {
  s.pending_buf[s.pending++] = b;
};
var putShortMSB = (s, b) => {
  s.pending_buf[s.pending++] = b >>> 8 & 255;
  s.pending_buf[s.pending++] = b & 255;
};
var read_buf = (strm, buf, start, size) => {
  let len = strm.avail_in;
  if (len > size) {
    len = size;
  }
  if (len === 0) {
    return 0;
  }
  strm.avail_in -= len;
  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32_1(strm.adler, buf, len, start);
  } else if (strm.state.wrap === 2) {
    strm.adler = crc32_1(strm.adler, buf, len, start);
  }
  strm.next_in += len;
  strm.total_in += len;
  return len;
};
var longest_match = (s, cur_match) => {
  let chain_length = s.max_chain_length;
  let scan = s.strstart;
  let match;
  let len;
  let best_len = s.prev_length;
  let nice_match = s.nice_match;
  const limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0;
  const _win = s.window;
  const wmask = s.w_mask;
  const prev = s.prev;
  const strend = s.strstart + MAX_MATCH$1;
  let scan_end1 = _win[scan + best_len - 1];
  let scan_end = _win[scan + best_len];
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  if (nice_match > s.lookahead) {
    nice_match = s.lookahead;
  }
  do {
    match = cur_match;
    if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
      continue;
    }
    scan += 2;
    match++;
    do {
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
    len = MAX_MATCH$1 - (strend - scan);
    scan = strend - MAX_MATCH$1;
    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1 = _win[scan + best_len - 1];
      scan_end = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
};
var fill_window = (s) => {
  const _w_size = s.w_size;
  let p, n, m, more, str;
  do {
    more = s.window_size - s.lookahead - s.strstart;
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
      s.window.set(s.window.subarray(_w_size, _w_size + _w_size), 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      s.block_start -= _w_size;
      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = m >= _w_size ? m - _w_size : 0;
      } while (--n);
      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = m >= _w_size ? m - _w_size : 0;
      } while (--n);
      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;
    if (s.lookahead + s.insert >= MIN_MATCH$1) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];
      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
      while (s.insert) {
        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH$1 - 1]);
        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH$1) {
          break;
        }
      }
    }
  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
};
var deflate_stored = (s, flush) => {
  let max_block_size = 65535;
  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }
  for (; ; ) {
    if (s.lookahead <= 1) {
      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    s.strstart += s.lookahead;
    s.lookahead = 0;
    const max_start = s.block_start + max_block_size;
    if (s.strstart === 0 || s.strstart >= max_start) {
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
    if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.strstart > s.block_start) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_NEED_MORE;
};
var deflate_fast = (s, flush) => {
  let hash_head;
  let bflush;
  for (; ; ) {
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    hash_head = 0;
    if (s.lookahead >= MIN_MATCH$1) {
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
    }
    if (hash_head !== 0 && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
      s.match_length = longest_match(s, hash_head);
    }
    if (s.match_length >= MIN_MATCH$1) {
      bflush = _tr_tally$1(s, s.strstart - s.match_start, s.match_length - MIN_MATCH$1);
      s.lookahead -= s.match_length;
      if (s.match_length <= s.max_lazy_match && s.lookahead >= MIN_MATCH$1) {
        s.match_length--;
        do {
          s.strstart++;
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        } while (--s.match_length !== 0);
        s.strstart++;
      } else {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);
      }
    } else {
      bflush = _tr_tally$1(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = s.strstart < MIN_MATCH$1 - 1 ? s.strstart : MIN_MATCH$1 - 1;
  if (flush === Z_FINISH) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
};
var deflate_slow = (s, flush) => {
  let hash_head;
  let bflush;
  let max_insert;
  for (; ; ) {
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    hash_head = 0;
    if (s.lookahead >= MIN_MATCH$1) {
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
    }
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH$1 - 1;
    if (hash_head !== 0 && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
      s.match_length = longest_match(s, hash_head);
      if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH$1 && s.strstart - s.match_start > 4096)) {
        s.match_length = MIN_MATCH$1 - 1;
      }
    }
    if (s.prev_length >= MIN_MATCH$1 && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH$1;
      bflush = _tr_tally$1(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH$1);
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH$1 - 1;
      s.strstart++;
      if (bflush) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
    } else if (s.match_available) {
      bflush = _tr_tally$1(s, 0, s.window[s.strstart - 1]);
      if (bflush) {
        flush_block_only(s, false);
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  if (s.match_available) {
    bflush = _tr_tally$1(s, 0, s.window[s.strstart - 1]);
    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH$1 - 1 ? s.strstart : MIN_MATCH$1 - 1;
  if (flush === Z_FINISH) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
};
var deflate_rle = (s, flush) => {
  let bflush;
  let prev;
  let scan, strend;
  const _win = s.window;
  for (; ; ) {
    if (s.lookahead <= MAX_MATCH$1) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH$1 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH$1 && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH$1;
        do {
        } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
        s.match_length = MAX_MATCH$1 - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
    }
    if (s.match_length >= MIN_MATCH$1) {
      bflush = _tr_tally$1(s, 1, s.match_length - MIN_MATCH$1);
      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      bflush = _tr_tally$1(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
};
var deflate_huff = (s, flush) => {
  let bflush;
  for (; ; ) {
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;
      }
    }
    s.match_length = 0;
    bflush = _tr_tally$1(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
};
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}
var configuration_table = [
  new Config(0, 0, 0, 0, deflate_stored),
  new Config(4, 4, 8, 4, deflate_fast),
  new Config(4, 5, 16, 8, deflate_fast),
  new Config(4, 6, 32, 32, deflate_fast),
  new Config(4, 4, 16, 16, deflate_slow),
  new Config(8, 16, 32, 32, deflate_slow),
  new Config(8, 16, 128, 128, deflate_slow),
  new Config(8, 32, 128, 256, deflate_slow),
  new Config(32, 128, 258, 1024, deflate_slow),
  new Config(32, 258, 258, 4096, deflate_slow)
];
var lm_init = (s) => {
  s.window_size = 2 * s.w_size;
  zero$1(s.head);
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;
  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH$1 - 1;
  s.match_available = 0;
  s.ins_h = 0;
};
function DeflateState() {
  this.strm = null;
  this.status = 0;
  this.pending_buf = null;
  this.pending_buf_size = 0;
  this.pending_out = 0;
  this.pending = 0;
  this.wrap = 0;
  this.gzhead = null;
  this.gzindex = 0;
  this.method = Z_DEFLATED;
  this.last_flush = -1;
  this.w_size = 0;
  this.w_bits = 0;
  this.w_mask = 0;
  this.window = null;
  this.window_size = 0;
  this.prev = null;
  this.head = null;
  this.ins_h = 0;
  this.hash_size = 0;
  this.hash_bits = 0;
  this.hash_mask = 0;
  this.hash_shift = 0;
  this.block_start = 0;
  this.match_length = 0;
  this.prev_match = 0;
  this.match_available = 0;
  this.strstart = 0;
  this.match_start = 0;
  this.lookahead = 0;
  this.prev_length = 0;
  this.max_chain_length = 0;
  this.max_lazy_match = 0;
  this.level = 0;
  this.strategy = 0;
  this.good_match = 0;
  this.nice_match = 0;
  this.dyn_ltree = new Uint16Array(HEAP_SIZE$1 * 2);
  this.dyn_dtree = new Uint16Array((2 * D_CODES$1 + 1) * 2);
  this.bl_tree = new Uint16Array((2 * BL_CODES$1 + 1) * 2);
  zero$1(this.dyn_ltree);
  zero$1(this.dyn_dtree);
  zero$1(this.bl_tree);
  this.l_desc = null;
  this.d_desc = null;
  this.bl_desc = null;
  this.bl_count = new Uint16Array(MAX_BITS$1 + 1);
  this.heap = new Uint16Array(2 * L_CODES$1 + 1);
  zero$1(this.heap);
  this.heap_len = 0;
  this.heap_max = 0;
  this.depth = new Uint16Array(2 * L_CODES$1 + 1);
  zero$1(this.depth);
  this.l_buf = 0;
  this.lit_bufsize = 0;
  this.last_lit = 0;
  this.d_buf = 0;
  this.opt_len = 0;
  this.static_len = 0;
  this.matches = 0;
  this.insert = 0;
  this.bi_buf = 0;
  this.bi_valid = 0;
}
var deflateResetKeep = (strm) => {
  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }
  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN$1;
  const s = strm.state;
  s.pending = 0;
  s.pending_out = 0;
  if (s.wrap < 0) {
    s.wrap = -s.wrap;
  }
  s.status = s.wrap ? INIT_STATE : BUSY_STATE;
  strm.adler = s.wrap === 2 ? 0 : 1;
  s.last_flush = Z_NO_FLUSH;
  _tr_init$1(s);
  return Z_OK;
};
var deflateReset = (strm) => {
  const ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
};
var deflateSetHeader = (strm, head) => {
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }
  if (strm.state.wrap !== 2) {
    return Z_STREAM_ERROR;
  }
  strm.state.gzhead = head;
  return Z_OK;
};
var deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {
  if (!strm) {
    return Z_STREAM_ERROR;
  }
  let wrap = 1;
  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  } else if (windowBits > 15) {
    wrap = 2;
    windowBits -= 16;
  }
  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED$1) {
    return err(strm, Z_STREAM_ERROR);
  }
  if (windowBits === 8) {
    windowBits = 9;
  }
  const s = new DeflateState();
  strm.state = s;
  s.strm = strm;
  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;
  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH$1 - 1) / MIN_MATCH$1);
  s.window = new Uint8Array(s.w_size * 2);
  s.head = new Uint16Array(s.hash_size);
  s.prev = new Uint16Array(s.w_size);
  s.lit_bufsize = 1 << memLevel + 6;
  s.pending_buf_size = s.lit_bufsize * 4;
  s.pending_buf = new Uint8Array(s.pending_buf_size);
  s.d_buf = 1 * s.lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;
  s.level = level;
  s.strategy = strategy;
  s.method = method;
  return deflateReset(strm);
};
var deflateInit = (strm, level) => {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
};
var deflate = (strm, flush) => {
  let beg, val;
  if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }
  const s = strm.state;
  if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) {
    return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }
  s.strm = strm;
  const old_flush = s.last_flush;
  s.last_flush = flush;
  if (s.status === INIT_STATE) {
    if (s.wrap === 2) {
      strm.adler = 0;
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) {
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      } else {
        put_byte(
          s,
          (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 255);
        put_byte(s, s.gzhead.time >> 8 & 255);
        put_byte(s, s.gzhead.time >> 16 & 255);
        put_byte(s, s.gzhead.time >> 24 & 255);
        put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
        put_byte(s, s.gzhead.os & 255);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 255);
          put_byte(s, s.gzhead.extra.length >> 8 & 255);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    } else {
      let header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;
      let level_flags = -1;
      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= level_flags << 6;
      if (s.strstart !== 0) {
        header |= PRESET_DICT;
      }
      header += 31 - header % 31;
      s.status = BUSY_STATE;
      putShortMSB(s, header);
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 65535);
      }
      strm.adler = 1;
    }
  }
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra) {
      beg = s.pending;
      while (s.gzindex < (s.gzhead.extra.length & 65535)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 255);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    } else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name) {
      beg = s.pending;
      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 255;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    } else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment) {
      beg = s.pending;
      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 255;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    } else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 255);
        put_byte(s, strm.adler >> 8 & 255);
        strm.adler = 0;
        s.status = BUSY_STATE;
      }
    } else {
      s.status = BUSY_STATE;
    }
  }
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      s.last_flush = -1;
      return Z_OK;
    }
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }
  if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
    let bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);
    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
      }
      return Z_OK;
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        _tr_align$1(s);
      } else if (flush !== Z_BLOCK) {
        _tr_stored_block$1(s, 0, 0, false);
        if (flush === Z_FULL_FLUSH) {
          zero$1(s.head);
          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        return Z_OK;
      }
    }
  }
  if (flush !== Z_FINISH) {
    return Z_OK;
  }
  if (s.wrap <= 0) {
    return Z_STREAM_END;
  }
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 255);
    put_byte(s, strm.adler >> 8 & 255);
    put_byte(s, strm.adler >> 16 & 255);
    put_byte(s, strm.adler >> 24 & 255);
    put_byte(s, strm.total_in & 255);
    put_byte(s, strm.total_in >> 8 & 255);
    put_byte(s, strm.total_in >> 16 & 255);
    put_byte(s, strm.total_in >> 24 & 255);
  } else {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 65535);
  }
  flush_pending(strm);
  if (s.wrap > 0) {
    s.wrap = -s.wrap;
  }
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
};
var deflateEnd = (strm) => {
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }
  const status = strm.state.status;
  if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {
    return err(strm, Z_STREAM_ERROR);
  }
  strm.state = null;
  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
};
var deflateSetDictionary = (strm, dictionary) => {
  let dictLength = dictionary.length;
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }
  const s = strm.state;
  const wrap = s.wrap;
  if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {
    return Z_STREAM_ERROR;
  }
  if (wrap === 1) {
    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);
  }
  s.wrap = 0;
  if (dictLength >= s.w_size) {
    if (wrap === 0) {
      zero$1(s.head);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    let tmpDict = new Uint8Array(s.w_size);
    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  const avail = strm.avail_in;
  const next = strm.next_in;
  const input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH$1) {
    let str = s.strstart;
    let n = s.lookahead - (MIN_MATCH$1 - 1);
    do {
      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH$1 - 1]);
      s.prev[str & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH$1 - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH$1 - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
};
var deflateInit_1 = deflateInit;
var deflateInit2_1 = deflateInit2;
var deflateReset_1 = deflateReset;
var deflateResetKeep_1 = deflateResetKeep;
var deflateSetHeader_1 = deflateSetHeader;
var deflate_2 = deflate;
var deflateEnd_1 = deflateEnd;
var deflateSetDictionary_1 = deflateSetDictionary;
var deflateInfo = "pako deflate (from Nodeca project)";
var deflate_1 = {
  deflateInit: deflateInit_1,
  deflateInit2: deflateInit2_1,
  deflateReset: deflateReset_1,
  deflateResetKeep: deflateResetKeep_1,
  deflateSetHeader: deflateSetHeader_1,
  deflate: deflate_2,
  deflateEnd: deflateEnd_1,
  deflateSetDictionary: deflateSetDictionary_1,
  deflateInfo
};
var _has = (obj, key) => {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
var assign = function(obj) {
  const sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    const source = sources.shift();
    if (!source) {
      continue;
    }
    if (typeof source !== "object") {
      throw new TypeError(source + "must be non-object");
    }
    for (const p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }
  return obj;
};
var flattenChunks = (chunks) => {
  let len = 0;
  for (let i = 0, l = chunks.length; i < l; i++) {
    len += chunks[i].length;
  }
  const result = new Uint8Array(len);
  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
    let chunk = chunks[i];
    result.set(chunk, pos);
    pos += chunk.length;
  }
  return result;
};
var common = {
  assign,
  flattenChunks
};
var STR_APPLY_UIA_OK = true;
try {
  String.fromCharCode.apply(null, new Uint8Array(1));
} catch (__) {
  STR_APPLY_UIA_OK = false;
}
var _utf8len = new Uint8Array(256);
for (let q = 0; q < 256; q++) {
  _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;
}
_utf8len[254] = _utf8len[254] = 1;
var string2buf = (str) => {
  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 64512) === 56320) {
        c = 65536 + (c - 55296 << 10) + (c2 - 56320);
        m_pos++;
      }
    }
    buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;
  }
  buf = new Uint8Array(buf_len);
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 64512) === 56320) {
        c = 65536 + (c - 55296 << 10) + (c2 - 56320);
        m_pos++;
      }
    }
    if (c < 128) {
      buf[i++] = c;
    } else if (c < 2048) {
      buf[i++] = 192 | c >>> 6;
      buf[i++] = 128 | c & 63;
    } else if (c < 65536) {
      buf[i++] = 224 | c >>> 12;
      buf[i++] = 128 | c >>> 6 & 63;
      buf[i++] = 128 | c & 63;
    } else {
      buf[i++] = 240 | c >>> 18;
      buf[i++] = 128 | c >>> 12 & 63;
      buf[i++] = 128 | c >>> 6 & 63;
      buf[i++] = 128 | c & 63;
    }
  }
  return buf;
};
var buf2binstring = (buf, len) => {
  if (len < 65534) {
    if (buf.subarray && STR_APPLY_UIA_OK) {
      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
    }
  }
  let result = "";
  for (let i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
};
var buf2string = (buf, max) => {
  let i, out;
  const len = max || buf.length;
  const utf16buf = new Array(len * 2);
  for (out = 0, i = 0; i < len; ) {
    let c = buf[i++];
    if (c < 128) {
      utf16buf[out++] = c;
      continue;
    }
    let c_len = _utf8len[c];
    if (c_len > 4) {
      utf16buf[out++] = 65533;
      i += c_len - 1;
      continue;
    }
    c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7;
    while (c_len > 1 && i < len) {
      c = c << 6 | buf[i++] & 63;
      c_len--;
    }
    if (c_len > 1) {
      utf16buf[out++] = 65533;
      continue;
    }
    if (c < 65536) {
      utf16buf[out++] = c;
    } else {
      c -= 65536;
      utf16buf[out++] = 55296 | c >> 10 & 1023;
      utf16buf[out++] = 56320 | c & 1023;
    }
  }
  return buf2binstring(utf16buf, out);
};
var utf8border = (buf, max) => {
  max = max || buf.length;
  if (max > buf.length) {
    max = buf.length;
  }
  let pos = max - 1;
  while (pos >= 0 && (buf[pos] & 192) === 128) {
    pos--;
  }
  if (pos < 0) {
    return max;
  }
  if (pos === 0) {
    return max;
  }
  return pos + _utf8len[buf[pos]] > max ? pos : max;
};
var strings = {
  string2buf,
  buf2string,
  utf8border
};
function ZStream() {
  this.input = null;
  this.next_in = 0;
  this.avail_in = 0;
  this.total_in = 0;
  this.output = null;
  this.next_out = 0;
  this.avail_out = 0;
  this.total_out = 0;
  this.msg = "";
  this.state = null;
  this.data_type = 2;
  this.adler = 0;
}
var zstream = ZStream;
var toString = Object.prototype.toString;
var {
  Z_NO_FLUSH: Z_NO_FLUSH$1,
  Z_SYNC_FLUSH,
  Z_FULL_FLUSH: Z_FULL_FLUSH$1,
  Z_FINISH: Z_FINISH$1,
  Z_OK: Z_OK$1,
  Z_STREAM_END: Z_STREAM_END$1,
  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
  Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,
  Z_DEFLATED: Z_DEFLATED$1
} = constants;
function Deflate(options) {
  this.options = common.assign({
    level: Z_DEFAULT_COMPRESSION$1,
    method: Z_DEFLATED$1,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY$1
  }, options || {});
  let opt = this.options;
  if (opt.raw && opt.windowBits > 0) {
    opt.windowBits = -opt.windowBits;
  } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {
    opt.windowBits += 16;
  }
  this.err = 0;
  this.msg = "";
  this.ended = false;
  this.chunks = [];
  this.strm = new zstream();
  this.strm.avail_out = 0;
  let status = deflate_1.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );
  if (status !== Z_OK$1) {
    throw new Error(messages[status]);
  }
  if (opt.header) {
    deflate_1.deflateSetHeader(this.strm, opt.header);
  }
  if (opt.dictionary) {
    let dict;
    if (typeof opt.dictionary === "string") {
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === "[object ArrayBuffer]") {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }
    status = deflate_1.deflateSetDictionary(this.strm, dict);
    if (status !== Z_OK$1) {
      throw new Error(messages[status]);
    }
    this._dict_set = true;
  }
}
Deflate.prototype.push = function(data, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  let status, _flush_mode;
  if (this.ended) {
    return false;
  }
  if (flush_mode === ~~flush_mode)
    _flush_mode = flush_mode;
  else
    _flush_mode = flush_mode === true ? Z_FINISH$1 : Z_NO_FLUSH$1;
  if (typeof data === "string") {
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === "[object ArrayBuffer]") {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }
  strm.next_in = 0;
  strm.avail_in = strm.input.length;
  for (; ; ) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH$1) && strm.avail_out <= 6) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }
    status = deflate_1.deflate(strm, _flush_mode);
    if (status === Z_STREAM_END$1) {
      if (strm.next_out > 0) {
        this.onData(strm.output.subarray(0, strm.next_out));
      }
      status = deflate_1.deflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return status === Z_OK$1;
    }
    if (strm.avail_out === 0) {
      this.onData(strm.output);
      continue;
    }
    if (_flush_mode > 0 && strm.next_out > 0) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }
    if (strm.avail_in === 0)
      break;
  }
  return true;
};
Deflate.prototype.onData = function(chunk) {
  this.chunks.push(chunk);
};
Deflate.prototype.onEnd = function(status) {
  if (status === Z_OK$1) {
    this.result = common.flattenChunks(this.chunks);
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};
function deflate$1(input, options) {
  const deflator = new Deflate(options);
  deflator.push(input, true);
  if (deflator.err) {
    throw deflator.msg || messages[deflator.err];
  }
  return deflator.result;
}
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate$1(input, options);
}
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate$1(input, options);
}
var Deflate_1 = Deflate;
var deflate_2$1 = deflate$1;
var deflateRaw_1 = deflateRaw;
var gzip_1 = gzip;
var constants$1 = constants;
var deflate_1$1 = {
  Deflate: Deflate_1,
  deflate: deflate_2$1,
  deflateRaw: deflateRaw_1,
  gzip: gzip_1,
  constants: constants$1
};
var BAD = 30;
var TYPE = 12;
var inffast = function inflate_fast(strm, start) {
  let _in;
  let last;
  let _out;
  let beg;
  let end;
  let dmax;
  let wsize;
  let whave;
  let wnext;
  let s_window;
  let hold;
  let bits;
  let lcode;
  let dcode;
  let lmask;
  let dmask;
  let here;
  let op;
  let len;
  let dist;
  let from;
  let from_source;
  let input, output;
  const state = strm.state;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
  dmax = state.dmax;
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;
  top:
    do {
      if (bits < 15) {
        hold += input[_in++] << bits;
        bits += 8;
        hold += input[_in++] << bits;
        bits += 8;
      }
      here = lcode[hold & lmask];
      dolen:
        for (; ; ) {
          op = here >>> 24;
          hold >>>= op;
          bits -= op;
          op = here >>> 16 & 255;
          if (op === 0) {
            output[_out++] = here & 65535;
          } else if (op & 16) {
            len = here & 65535;
            op &= 15;
            if (op) {
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
              len += hold & (1 << op) - 1;
              hold >>>= op;
              bits -= op;
            }
            if (bits < 15) {
              hold += input[_in++] << bits;
              bits += 8;
              hold += input[_in++] << bits;
              bits += 8;
            }
            here = dcode[hold & dmask];
            dodist:
              for (; ; ) {
                op = here >>> 24;
                hold >>>= op;
                bits -= op;
                op = here >>> 16 & 255;
                if (op & 16) {
                  dist = here & 65535;
                  op &= 15;
                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;
                    if (bits < op) {
                      hold += input[_in++] << bits;
                      bits += 8;
                    }
                  }
                  dist += hold & (1 << op) - 1;
                  if (dist > dmax) {
                    strm.msg = "invalid distance too far back";
                    state.mode = BAD;
                    break top;
                  }
                  hold >>>= op;
                  bits -= op;
                  op = _out - beg;
                  if (dist > op) {
                    op = dist - op;
                    if (op > whave) {
                      if (state.sane) {
                        strm.msg = "invalid distance too far back";
                        state.mode = BAD;
                        break top;
                      }
                    }
                    from = 0;
                    from_source = s_window;
                    if (wnext === 0) {
                      from += wsize - op;
                      if (op < len) {
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = _out - dist;
                        from_source = output;
                      }
                    } else if (wnext < op) {
                      from += wsize + wnext - op;
                      op -= wnext;
                      if (op < len) {
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = 0;
                        if (wnext < len) {
                          op = wnext;
                          len -= op;
                          do {
                            output[_out++] = s_window[from++];
                          } while (--op);
                          from = _out - dist;
                          from_source = output;
                        }
                      }
                    } else {
                      from += wnext - op;
                      if (op < len) {
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = _out - dist;
                        from_source = output;
                      }
                    }
                    while (len > 2) {
                      output[_out++] = from_source[from++];
                      output[_out++] = from_source[from++];
                      output[_out++] = from_source[from++];
                      len -= 3;
                    }
                    if (len) {
                      output[_out++] = from_source[from++];
                      if (len > 1) {
                        output[_out++] = from_source[from++];
                      }
                    }
                  } else {
                    from = _out - dist;
                    do {
                      output[_out++] = output[from++];
                      output[_out++] = output[from++];
                      output[_out++] = output[from++];
                      len -= 3;
                    } while (len > 2);
                    if (len) {
                      output[_out++] = output[from++];
                      if (len > 1) {
                        output[_out++] = output[from++];
                      }
                    }
                  }
                } else if ((op & 64) === 0) {
                  here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
                  continue dodist;
                } else {
                  strm.msg = "invalid distance code";
                  state.mode = BAD;
                  break top;
                }
                break;
              }
          } else if ((op & 64) === 0) {
            here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
            continue dolen;
          } else if (op & 32) {
            state.mode = TYPE;
            break top;
          } else {
            strm.msg = "invalid literal/length code";
            state.mode = BAD;
            break top;
          }
          break;
        }
    } while (_in < last && _out < end);
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
  strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
  state.hold = hold;
  state.bits = bits;
  return;
};
var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
var CODES = 0;
var LENS = 1;
var DISTS = 2;
var lbase = new Uint16Array([
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  15,
  17,
  19,
  23,
  27,
  31,
  35,
  43,
  51,
  59,
  67,
  83,
  99,
  115,
  131,
  163,
  195,
  227,
  258,
  0,
  0
]);
var lext = new Uint8Array([
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  17,
  17,
  17,
  17,
  18,
  18,
  18,
  18,
  19,
  19,
  19,
  19,
  20,
  20,
  20,
  20,
  21,
  21,
  21,
  21,
  16,
  72,
  78
]);
var dbase = new Uint16Array([
  1,
  2,
  3,
  4,
  5,
  7,
  9,
  13,
  17,
  25,
  33,
  49,
  65,
  97,
  129,
  193,
  257,
  385,
  513,
  769,
  1025,
  1537,
  2049,
  3073,
  4097,
  6145,
  8193,
  12289,
  16385,
  24577,
  0,
  0
]);
var dext = new Uint8Array([
  16,
  16,
  16,
  16,
  17,
  17,
  18,
  18,
  19,
  19,
  20,
  20,
  21,
  21,
  22,
  22,
  23,
  23,
  24,
  24,
  25,
  25,
  26,
  26,
  27,
  27,
  28,
  28,
  29,
  29,
  64,
  64
]);
var inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) => {
  const bits = opts.bits;
  let len = 0;
  let sym = 0;
  let min = 0, max = 0;
  let root = 0;
  let curr = 0;
  let drop = 0;
  let left = 0;
  let used = 0;
  let huff = 0;
  let incr;
  let fill;
  let low;
  let mask;
  let next;
  let base = null;
  let base_index = 0;
  let end;
  const count = new Uint16Array(MAXBITS + 1);
  const offs = new Uint16Array(MAXBITS + 1);
  let extra = null;
  let extra_index = 0;
  let here_bits, here_op, here_val;
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) {
      break;
    }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {
    table[table_index++] = 1 << 24 | 64 << 16 | 0;
    table[table_index++] = 1 << 24 | 64 << 16 | 0;
    opts.bits = 1;
    return 0;
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) {
      break;
    }
  }
  if (root < min) {
    root = min;
  }
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;
  }
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }
  if (type === CODES) {
    base = extra = work;
    end = 19;
  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;
  } else {
    base = dbase;
    extra = dext;
    end = -1;
  }
  huff = 0;
  sym = 0;
  len = min;
  next = table_index;
  curr = root;
  drop = 0;
  low = -1;
  used = 1 << root;
  mask = used - 1;
  if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
    return 1;
  }
  for (; ; ) {
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    } else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    } else {
      here_op = 32 + 64;
      here_val = 0;
    }
    incr = 1 << len - drop;
    fill = 1 << curr;
    min = fill;
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
    } while (fill !== 0);
    incr = 1 << len - 1;
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }
    sym++;
    if (--count[len] === 0) {
      if (len === max) {
        break;
      }
      len = lens[lens_index + work[sym]];
    }
    if (len > root && (huff & mask) !== low) {
      if (drop === 0) {
        drop = root;
      }
      next += min;
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) {
          break;
        }
        curr++;
        left <<= 1;
      }
      used += 1 << curr;
      if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
        return 1;
      }
      low = huff & mask;
      table[low] = root << 24 | curr << 16 | next - table_index | 0;
    }
  }
  if (huff !== 0) {
    table[next + huff] = len - drop << 24 | 64 << 16 | 0;
  }
  opts.bits = root;
  return 0;
};
var inftrees = inflate_table;
var CODES$1 = 0;
var LENS$1 = 1;
var DISTS$1 = 2;
var {
  Z_FINISH: Z_FINISH$2,
  Z_BLOCK: Z_BLOCK$1,
  Z_TREES,
  Z_OK: Z_OK$2,
  Z_STREAM_END: Z_STREAM_END$2,
  Z_NEED_DICT,
  Z_STREAM_ERROR: Z_STREAM_ERROR$1,
  Z_DATA_ERROR: Z_DATA_ERROR$1,
  Z_MEM_ERROR,
  Z_BUF_ERROR: Z_BUF_ERROR$1,
  Z_DEFLATED: Z_DEFLATED$2
} = constants;
var HEAD = 1;
var FLAGS = 2;
var TIME = 3;
var OS = 4;
var EXLEN = 5;
var EXTRA = 6;
var NAME = 7;
var COMMENT = 8;
var HCRC = 9;
var DICTID = 10;
var DICT = 11;
var TYPE$1 = 12;
var TYPEDO = 13;
var STORED = 14;
var COPY_ = 15;
var COPY = 16;
var TABLE = 17;
var LENLENS = 18;
var CODELENS = 19;
var LEN_ = 20;
var LEN = 21;
var LENEXT = 22;
var DIST = 23;
var DISTEXT = 24;
var MATCH = 25;
var LIT = 26;
var CHECK = 27;
var LENGTH = 28;
var DONE = 29;
var BAD$1 = 30;
var MEM = 31;
var SYNC = 32;
var ENOUGH_LENS$1 = 852;
var ENOUGH_DISTS$1 = 592;
var MAX_WBITS$1 = 15;
var DEF_WBITS = MAX_WBITS$1;
var zswap32 = (q) => {
  return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((q & 65280) << 8) + ((q & 255) << 24);
};
function InflateState() {
  this.mode = 0;
  this.last = false;
  this.wrap = 0;
  this.havedict = false;
  this.flags = 0;
  this.dmax = 0;
  this.check = 0;
  this.total = 0;
  this.head = null;
  this.wbits = 0;
  this.wsize = 0;
  this.whave = 0;
  this.wnext = 0;
  this.window = null;
  this.hold = 0;
  this.bits = 0;
  this.length = 0;
  this.offset = 0;
  this.extra = 0;
  this.lencode = null;
  this.distcode = null;
  this.lenbits = 0;
  this.distbits = 0;
  this.ncode = 0;
  this.nlen = 0;
  this.ndist = 0;
  this.have = 0;
  this.next = null;
  this.lens = new Uint16Array(320);
  this.work = new Uint16Array(288);
  this.lendyn = null;
  this.distdyn = null;
  this.sane = 0;
  this.back = 0;
  this.was = 0;
}
var inflateResetKeep = (strm) => {
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1;
  }
  const state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = "";
  if (state.wrap) {
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null;
  state.hold = 0;
  state.bits = 0;
  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS$1);
  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS$1);
  state.sane = 1;
  state.back = -1;
  return Z_OK$2;
};
var inflateReset = (strm) => {
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1;
  }
  const state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);
};
var inflateReset2 = (strm, windowBits) => {
  let wrap;
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1;
  }
  const state = strm.state;
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  } else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR$1;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
};
var inflateInit2 = (strm, windowBits) => {
  if (!strm) {
    return Z_STREAM_ERROR$1;
  }
  const state = new InflateState();
  strm.state = state;
  state.window = null;
  const ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK$2) {
    strm.state = null;
  }
  return ret;
};
var inflateInit = (strm) => {
  return inflateInit2(strm, DEF_WBITS);
};
var virgin = true;
var lenfix;
var distfix;
var fixedtables = (state) => {
  if (virgin) {
    lenfix = new Int32Array(512);
    distfix = new Int32Array(32);
    let sym = 0;
    while (sym < 144) {
      state.lens[sym++] = 8;
    }
    while (sym < 256) {
      state.lens[sym++] = 9;
    }
    while (sym < 280) {
      state.lens[sym++] = 7;
    }
    while (sym < 288) {
      state.lens[sym++] = 8;
    }
    inftrees(LENS$1, state.lens, 0, 288, lenfix, 0, state.work, { bits: 9 });
    sym = 0;
    while (sym < 32) {
      state.lens[sym++] = 5;
    }
    inftrees(DISTS$1, state.lens, 0, 32, distfix, 0, state.work, { bits: 5 });
    virgin = false;
  }
  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
};
var updatewindow = (strm, src, end, copy) => {
  let dist;
  const state = strm.state;
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;
    state.window = new Uint8Array(state.wsize);
  }
  if (copy >= state.wsize) {
    state.window.set(src.subarray(end - state.wsize, end), 0);
    state.wnext = 0;
    state.whave = state.wsize;
  } else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
    copy -= dist;
    if (copy) {
      state.window.set(src.subarray(end - copy, end), 0);
      state.wnext = copy;
      state.whave = state.wsize;
    } else {
      state.wnext += dist;
      if (state.wnext === state.wsize) {
        state.wnext = 0;
      }
      if (state.whave < state.wsize) {
        state.whave += dist;
      }
    }
  }
  return 0;
};
var inflate = (strm, flush) => {
  let state;
  let input, output;
  let next;
  let put;
  let have, left;
  let hold;
  let bits;
  let _in, _out;
  let copy;
  let from;
  let from_source;
  let here = 0;
  let here_bits, here_op, here_val;
  let last_bits, last_op, last_val;
  let len;
  let ret;
  const hbuf = new Uint8Array(4);
  let opts;
  let n;
  const order = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
  if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
    return Z_STREAM_ERROR$1;
  }
  state = strm.state;
  if (state.mode === TYPE$1) {
    state.mode = TYPEDO;
  }
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  _in = have;
  _out = left;
  ret = Z_OK$2;
  inf_leave:
    for (; ; ) {
      switch (state.mode) {
        case HEAD:
          if (state.wrap === 0) {
            state.mode = TYPEDO;
            break;
          }
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state.wrap & 2 && hold === 35615) {
            state.check = 0;
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            state.check = crc32_1(state.check, hbuf, 2, 0);
            hold = 0;
            bits = 0;
            state.mode = FLAGS;
            break;
          }
          state.flags = 0;
          if (state.head) {
            state.head.done = false;
          }
          if (!(state.wrap & 1) || (((hold & 255) << 8) + (hold >> 8)) % 31) {
            strm.msg = "incorrect header check";
            state.mode = BAD$1;
            break;
          }
          if ((hold & 15) !== Z_DEFLATED$2) {
            strm.msg = "unknown compression method";
            state.mode = BAD$1;
            break;
          }
          hold >>>= 4;
          bits -= 4;
          len = (hold & 15) + 8;
          if (state.wbits === 0) {
            state.wbits = len;
          } else if (len > state.wbits) {
            strm.msg = "invalid window size";
            state.mode = BAD$1;
            break;
          }
          state.dmax = 1 << state.wbits;
          strm.adler = state.check = 1;
          state.mode = hold & 512 ? DICTID : TYPE$1;
          hold = 0;
          bits = 0;
          break;
        case FLAGS:
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.flags = hold;
          if ((state.flags & 255) !== Z_DEFLATED$2) {
            strm.msg = "unknown compression method";
            state.mode = BAD$1;
            break;
          }
          if (state.flags & 57344) {
            strm.msg = "unknown header flags set";
            state.mode = BAD$1;
            break;
          }
          if (state.head) {
            state.head.text = hold >> 8 & 1;
          }
          if (state.flags & 512) {
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            state.check = crc32_1(state.check, hbuf, 2, 0);
          }
          hold = 0;
          bits = 0;
          state.mode = TIME;
        case TIME:
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state.head) {
            state.head.time = hold;
          }
          if (state.flags & 512) {
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            hbuf[2] = hold >>> 16 & 255;
            hbuf[3] = hold >>> 24 & 255;
            state.check = crc32_1(state.check, hbuf, 4, 0);
          }
          hold = 0;
          bits = 0;
          state.mode = OS;
        case OS:
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state.head) {
            state.head.xflags = hold & 255;
            state.head.os = hold >> 8;
          }
          if (state.flags & 512) {
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            state.check = crc32_1(state.check, hbuf, 2, 0);
          }
          hold = 0;
          bits = 0;
          state.mode = EXLEN;
        case EXLEN:
          if (state.flags & 1024) {
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.length = hold;
            if (state.head) {
              state.head.extra_len = hold;
            }
            if (state.flags & 512) {
              hbuf[0] = hold & 255;
              hbuf[1] = hold >>> 8 & 255;
              state.check = crc32_1(state.check, hbuf, 2, 0);
            }
            hold = 0;
            bits = 0;
          } else if (state.head) {
            state.head.extra = null;
          }
          state.mode = EXTRA;
        case EXTRA:
          if (state.flags & 1024) {
            copy = state.length;
            if (copy > have) {
              copy = have;
            }
            if (copy) {
              if (state.head) {
                len = state.head.extra_len - state.length;
                if (!state.head.extra) {
                  state.head.extra = new Uint8Array(state.head.extra_len);
                }
                state.head.extra.set(
                  input.subarray(
                    next,
                    next + copy
                  ),
                  len
                );
              }
              if (state.flags & 512) {
                state.check = crc32_1(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              state.length -= copy;
            }
            if (state.length) {
              break inf_leave;
            }
          }
          state.length = 0;
          state.mode = NAME;
        case NAME:
          if (state.flags & 2048) {
            if (have === 0) {
              break inf_leave;
            }
            copy = 0;
            do {
              len = input[next + copy++];
              if (state.head && len && state.length < 65536) {
                state.head.name += String.fromCharCode(len);
              }
            } while (len && copy < have);
            if (state.flags & 512) {
              state.check = crc32_1(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) {
              break inf_leave;
            }
          } else if (state.head) {
            state.head.name = null;
          }
          state.length = 0;
          state.mode = COMMENT;
        case COMMENT:
          if (state.flags & 4096) {
            if (have === 0) {
              break inf_leave;
            }
            copy = 0;
            do {
              len = input[next + copy++];
              if (state.head && len && state.length < 65536) {
                state.head.comment += String.fromCharCode(len);
              }
            } while (len && copy < have);
            if (state.flags & 512) {
              state.check = crc32_1(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) {
              break inf_leave;
            }
          } else if (state.head) {
            state.head.comment = null;
          }
          state.mode = HCRC;
        case HCRC:
          if (state.flags & 512) {
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (hold !== (state.check & 65535)) {
              strm.msg = "header crc mismatch";
              state.mode = BAD$1;
              break;
            }
            hold = 0;
            bits = 0;
          }
          if (state.head) {
            state.head.hcrc = state.flags >> 9 & 1;
            state.head.done = true;
          }
          strm.adler = state.check = 0;
          state.mode = TYPE$1;
          break;
        case DICTID:
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          strm.adler = state.check = zswap32(hold);
          hold = 0;
          bits = 0;
          state.mode = DICT;
        case DICT:
          if (state.havedict === 0) {
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            return Z_NEED_DICT;
          }
          strm.adler = state.check = 1;
          state.mode = TYPE$1;
        case TYPE$1:
          if (flush === Z_BLOCK$1 || flush === Z_TREES) {
            break inf_leave;
          }
        case TYPEDO:
          if (state.last) {
            hold >>>= bits & 7;
            bits -= bits & 7;
            state.mode = CHECK;
            break;
          }
          while (bits < 3) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.last = hold & 1;
          hold >>>= 1;
          bits -= 1;
          switch (hold & 3) {
            case 0:
              state.mode = STORED;
              break;
            case 1:
              fixedtables(state);
              state.mode = LEN_;
              if (flush === Z_TREES) {
                hold >>>= 2;
                bits -= 2;
                break inf_leave;
              }
              break;
            case 2:
              state.mode = TABLE;
              break;
            case 3:
              strm.msg = "invalid block type";
              state.mode = BAD$1;
          }
          hold >>>= 2;
          bits -= 2;
          break;
        case STORED:
          hold >>>= bits & 7;
          bits -= bits & 7;
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {
            strm.msg = "invalid stored block lengths";
            state.mode = BAD$1;
            break;
          }
          state.length = hold & 65535;
          hold = 0;
          bits = 0;
          state.mode = COPY_;
          if (flush === Z_TREES) {
            break inf_leave;
          }
        case COPY_:
          state.mode = COPY;
        case COPY:
          copy = state.length;
          if (copy) {
            if (copy > have) {
              copy = have;
            }
            if (copy > left) {
              copy = left;
            }
            if (copy === 0) {
              break inf_leave;
            }
            output.set(input.subarray(next, next + copy), put);
            have -= copy;
            next += copy;
            left -= copy;
            put += copy;
            state.length -= copy;
            break;
          }
          state.mode = TYPE$1;
          break;
        case TABLE:
          while (bits < 14) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.nlen = (hold & 31) + 257;
          hold >>>= 5;
          bits -= 5;
          state.ndist = (hold & 31) + 1;
          hold >>>= 5;
          bits -= 5;
          state.ncode = (hold & 15) + 4;
          hold >>>= 4;
          bits -= 4;
          if (state.nlen > 286 || state.ndist > 30) {
            strm.msg = "too many length or distance symbols";
            state.mode = BAD$1;
            break;
          }
          state.have = 0;
          state.mode = LENLENS;
        case LENLENS:
          while (state.have < state.ncode) {
            while (bits < 3) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.lens[order[state.have++]] = hold & 7;
            hold >>>= 3;
            bits -= 3;
          }
          while (state.have < 19) {
            state.lens[order[state.have++]] = 0;
          }
          state.lencode = state.lendyn;
          state.lenbits = 7;
          opts = { bits: state.lenbits };
          ret = inftrees(CODES$1, state.lens, 0, 19, state.lencode, 0, state.work, opts);
          state.lenbits = opts.bits;
          if (ret) {
            strm.msg = "invalid code lengths set";
            state.mode = BAD$1;
            break;
          }
          state.have = 0;
          state.mode = CODELENS;
        case CODELENS:
          while (state.have < state.nlen + state.ndist) {
            for (; ; ) {
              here = state.lencode[hold & (1 << state.lenbits) - 1];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (here_val < 16) {
              hold >>>= here_bits;
              bits -= here_bits;
              state.lens[state.have++] = here_val;
            } else {
              if (here_val === 16) {
                n = here_bits + 2;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                if (state.have === 0) {
                  strm.msg = "invalid bit length repeat";
                  state.mode = BAD$1;
                  break;
                }
                len = state.lens[state.have - 1];
                copy = 3 + (hold & 3);
                hold >>>= 2;
                bits -= 2;
              } else if (here_val === 17) {
                n = here_bits + 3;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                len = 0;
                copy = 3 + (hold & 7);
                hold >>>= 3;
                bits -= 3;
              } else {
                n = here_bits + 7;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                len = 0;
                copy = 11 + (hold & 127);
                hold >>>= 7;
                bits -= 7;
              }
              if (state.have + copy > state.nlen + state.ndist) {
                strm.msg = "invalid bit length repeat";
                state.mode = BAD$1;
                break;
              }
              while (copy--) {
                state.lens[state.have++] = len;
              }
            }
          }
          if (state.mode === BAD$1) {
            break;
          }
          if (state.lens[256] === 0) {
            strm.msg = "invalid code -- missing end-of-block";
            state.mode = BAD$1;
            break;
          }
          state.lenbits = 9;
          opts = { bits: state.lenbits };
          ret = inftrees(LENS$1, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
          state.lenbits = opts.bits;
          if (ret) {
            strm.msg = "invalid literal/lengths set";
            state.mode = BAD$1;
            break;
          }
          state.distbits = 6;
          state.distcode = state.distdyn;
          opts = { bits: state.distbits };
          ret = inftrees(DISTS$1, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
          state.distbits = opts.bits;
          if (ret) {
            strm.msg = "invalid distances set";
            state.mode = BAD$1;
            break;
          }
          state.mode = LEN_;
          if (flush === Z_TREES) {
            break inf_leave;
          }
        case LEN_:
          state.mode = LEN;
        case LEN:
          if (have >= 6 && left >= 258) {
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            inffast(strm, _out);
            put = strm.next_out;
            output = strm.output;
            left = strm.avail_out;
            next = strm.next_in;
            input = strm.input;
            have = strm.avail_in;
            hold = state.hold;
            bits = state.bits;
            if (state.mode === TYPE$1) {
              state.back = -1;
            }
            break;
          }
          state.back = 0;
          for (; ; ) {
            here = state.lencode[hold & (1 << state.lenbits) - 1];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 255;
            here_val = here & 65535;
            if (here_bits <= bits) {
              break;
            }
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (here_op && (here_op & 240) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (; ; ) {
              here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (last_bits + here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            hold >>>= last_bits;
            bits -= last_bits;
            state.back += last_bits;
          }
          hold >>>= here_bits;
          bits -= here_bits;
          state.back += here_bits;
          state.length = here_val;
          if (here_op === 0) {
            state.mode = LIT;
            break;
          }
          if (here_op & 32) {
            state.back = -1;
            state.mode = TYPE$1;
            break;
          }
          if (here_op & 64) {
            strm.msg = "invalid literal/length code";
            state.mode = BAD$1;
            break;
          }
          state.extra = here_op & 15;
          state.mode = LENEXT;
        case LENEXT:
          if (state.extra) {
            n = state.extra;
            while (bits < n) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.length += hold & (1 << state.extra) - 1;
            hold >>>= state.extra;
            bits -= state.extra;
            state.back += state.extra;
          }
          state.was = state.length;
          state.mode = DIST;
        case DIST:
          for (; ; ) {
            here = state.distcode[hold & (1 << state.distbits) - 1];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 255;
            here_val = here & 65535;
            if (here_bits <= bits) {
              break;
            }
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if ((here_op & 240) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (; ; ) {
              here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (last_bits + here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            hold >>>= last_bits;
            bits -= last_bits;
            state.back += last_bits;
          }
          hold >>>= here_bits;
          bits -= here_bits;
          state.back += here_bits;
          if (here_op & 64) {
            strm.msg = "invalid distance code";
            state.mode = BAD$1;
            break;
          }
          state.offset = here_val;
          state.extra = here_op & 15;
          state.mode = DISTEXT;
        case DISTEXT:
          if (state.extra) {
            n = state.extra;
            while (bits < n) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.offset += hold & (1 << state.extra) - 1;
            hold >>>= state.extra;
            bits -= state.extra;
            state.back += state.extra;
          }
          if (state.offset > state.dmax) {
            strm.msg = "invalid distance too far back";
            state.mode = BAD$1;
            break;
          }
          state.mode = MATCH;
        case MATCH:
          if (left === 0) {
            break inf_leave;
          }
          copy = _out - left;
          if (state.offset > copy) {
            copy = state.offset - copy;
            if (copy > state.whave) {
              if (state.sane) {
                strm.msg = "invalid distance too far back";
                state.mode = BAD$1;
                break;
              }
            }
            if (copy > state.wnext) {
              copy -= state.wnext;
              from = state.wsize - copy;
            } else {
              from = state.wnext - copy;
            }
            if (copy > state.length) {
              copy = state.length;
            }
            from_source = state.window;
          } else {
            from_source = output;
            from = put - state.offset;
            copy = state.length;
          }
          if (copy > left) {
            copy = left;
          }
          left -= copy;
          state.length -= copy;
          do {
            output[put++] = from_source[from++];
          } while (--copy);
          if (state.length === 0) {
            state.mode = LEN;
          }
          break;
        case LIT:
          if (left === 0) {
            break inf_leave;
          }
          output[put++] = state.length;
          left--;
          state.mode = LEN;
          break;
        case CHECK:
          if (state.wrap) {
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold |= input[next++] << bits;
              bits += 8;
            }
            _out -= left;
            strm.total_out += _out;
            state.total += _out;
            if (_out) {
              strm.adler = state.check = state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out);
            }
            _out = left;
            if ((state.flags ? hold : zswap32(hold)) !== state.check) {
              strm.msg = "incorrect data check";
              state.mode = BAD$1;
              break;
            }
            hold = 0;
            bits = 0;
          }
          state.mode = LENGTH;
        case LENGTH:
          if (state.wrap && state.flags) {
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (hold !== (state.total & 4294967295)) {
              strm.msg = "incorrect length check";
              state.mode = BAD$1;
              break;
            }
            hold = 0;
            bits = 0;
          }
          state.mode = DONE;
        case DONE:
          ret = Z_STREAM_END$2;
          break inf_leave;
        case BAD$1:
          ret = Z_DATA_ERROR$1;
          break inf_leave;
        case MEM:
          return Z_MEM_ERROR;
        case SYNC:
        default:
          return Z_STREAM_ERROR$1;
      }
    }
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  if (state.wsize || _out !== strm.avail_out && state.mode < BAD$1 && (state.mode < CHECK || flush !== Z_FINISH$2)) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out))
      ;
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out);
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE$1 ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if ((_in === 0 && _out === 0 || flush === Z_FINISH$2) && ret === Z_OK$2) {
    ret = Z_BUF_ERROR$1;
  }
  return ret;
};
var inflateEnd = (strm) => {
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1;
  }
  let state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK$2;
};
var inflateGetHeader = (strm, head) => {
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1;
  }
  const state = strm.state;
  if ((state.wrap & 2) === 0) {
    return Z_STREAM_ERROR$1;
  }
  state.head = head;
  head.done = false;
  return Z_OK$2;
};
var inflateSetDictionary = (strm, dictionary) => {
  const dictLength = dictionary.length;
  let state;
  let dictid;
  let ret;
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1;
  }
  state = strm.state;
  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR$1;
  }
  if (state.mode === DICT) {
    dictid = 1;
    dictid = adler32_1(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR$1;
    }
  }
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  return Z_OK$2;
};
var inflateReset_1 = inflateReset;
var inflateReset2_1 = inflateReset2;
var inflateResetKeep_1 = inflateResetKeep;
var inflateInit_1 = inflateInit;
var inflateInit2_1 = inflateInit2;
var inflate_2 = inflate;
var inflateEnd_1 = inflateEnd;
var inflateGetHeader_1 = inflateGetHeader;
var inflateSetDictionary_1 = inflateSetDictionary;
var inflateInfo = "pako inflate (from Nodeca project)";
var inflate_1 = {
  inflateReset: inflateReset_1,
  inflateReset2: inflateReset2_1,
  inflateResetKeep: inflateResetKeep_1,
  inflateInit: inflateInit_1,
  inflateInit2: inflateInit2_1,
  inflate: inflate_2,
  inflateEnd: inflateEnd_1,
  inflateGetHeader: inflateGetHeader_1,
  inflateSetDictionary: inflateSetDictionary_1,
  inflateInfo
};
function GZheader() {
  this.text = 0;
  this.time = 0;
  this.xflags = 0;
  this.os = 0;
  this.extra = null;
  this.extra_len = 0;
  this.name = "";
  this.comment = "";
  this.hcrc = 0;
  this.done = false;
}
var gzheader = GZheader;
var toString$1 = Object.prototype.toString;
var {
  Z_NO_FLUSH: Z_NO_FLUSH$2,
  Z_FINISH: Z_FINISH$3,
  Z_OK: Z_OK$3,
  Z_STREAM_END: Z_STREAM_END$3,
  Z_NEED_DICT: Z_NEED_DICT$1,
  Z_STREAM_ERROR: Z_STREAM_ERROR$2,
  Z_DATA_ERROR: Z_DATA_ERROR$2,
  Z_MEM_ERROR: Z_MEM_ERROR$1
} = constants;
function Inflate(options) {
  this.options = common.assign({
    chunkSize: 1024 * 64,
    windowBits: 15,
    to: ""
  }, options || {});
  const opt = this.options;
  if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) {
      opt.windowBits = -15;
    }
  }
  if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {
    opt.windowBits += 32;
  }
  if (opt.windowBits > 15 && opt.windowBits < 48) {
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }
  this.err = 0;
  this.msg = "";
  this.ended = false;
  this.chunks = [];
  this.strm = new zstream();
  this.strm.avail_out = 0;
  let status = inflate_1.inflateInit2(
    this.strm,
    opt.windowBits
  );
  if (status !== Z_OK$3) {
    throw new Error(messages[status]);
  }
  this.header = new gzheader();
  inflate_1.inflateGetHeader(this.strm, this.header);
  if (opt.dictionary) {
    if (typeof opt.dictionary === "string") {
      opt.dictionary = strings.string2buf(opt.dictionary);
    } else if (toString$1.call(opt.dictionary) === "[object ArrayBuffer]") {
      opt.dictionary = new Uint8Array(opt.dictionary);
    }
    if (opt.raw) {
      status = inflate_1.inflateSetDictionary(this.strm, opt.dictionary);
      if (status !== Z_OK$3) {
        throw new Error(messages[status]);
      }
    }
  }
}
Inflate.prototype.push = function(data, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  const dictionary = this.options.dictionary;
  let status, _flush_mode, last_avail_out;
  if (this.ended)
    return false;
  if (flush_mode === ~~flush_mode)
    _flush_mode = flush_mode;
  else
    _flush_mode = flush_mode === true ? Z_FINISH$3 : Z_NO_FLUSH$2;
  if (toString$1.call(data) === "[object ArrayBuffer]") {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }
  strm.next_in = 0;
  strm.avail_in = strm.input.length;
  for (; ; ) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = inflate_1.inflate(strm, _flush_mode);
    if (status === Z_NEED_DICT$1 && dictionary) {
      status = inflate_1.inflateSetDictionary(strm, dictionary);
      if (status === Z_OK$3) {
        status = inflate_1.inflate(strm, _flush_mode);
      } else if (status === Z_DATA_ERROR$2) {
        status = Z_NEED_DICT$1;
      }
    }
    while (strm.avail_in > 0 && status === Z_STREAM_END$3 && strm.state.wrap > 0 && data[strm.next_in] !== 0) {
      inflate_1.inflateReset(strm);
      status = inflate_1.inflate(strm, _flush_mode);
    }
    switch (status) {
      case Z_STREAM_ERROR$2:
      case Z_DATA_ERROR$2:
      case Z_NEED_DICT$1:
      case Z_MEM_ERROR$1:
        this.onEnd(status);
        this.ended = true;
        return false;
    }
    last_avail_out = strm.avail_out;
    if (strm.next_out) {
      if (strm.avail_out === 0 || status === Z_STREAM_END$3) {
        if (this.options.to === "string") {
          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
          let tail = strm.next_out - next_out_utf8;
          let utf8str = strings.buf2string(strm.output, next_out_utf8);
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail)
            strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);
          this.onData(utf8str);
        } else {
          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
        }
      }
    }
    if (status === Z_OK$3 && last_avail_out === 0)
      continue;
    if (status === Z_STREAM_END$3) {
      status = inflate_1.inflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return true;
    }
    if (strm.avail_in === 0)
      break;
  }
  return true;
};
Inflate.prototype.onData = function(chunk) {
  this.chunks.push(chunk);
};
Inflate.prototype.onEnd = function(status) {
  if (status === Z_OK$3) {
    if (this.options.to === "string") {
      this.result = this.chunks.join("");
    } else {
      this.result = common.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};
function inflate$1(input, options) {
  const inflator = new Inflate(options);
  inflator.push(input);
  if (inflator.err)
    throw inflator.msg || messages[inflator.err];
  return inflator.result;
}
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate$1(input, options);
}
var Inflate_1 = Inflate;
var inflate_2$1 = inflate$1;
var inflateRaw_1 = inflateRaw;
var ungzip = inflate$1;
var constants$2 = constants;
var inflate_1$1 = {
  Inflate: Inflate_1,
  inflate: inflate_2$1,
  inflateRaw: inflateRaw_1,
  ungzip,
  constants: constants$2
};
var { Deflate: Deflate$1, deflate: deflate$2, deflateRaw: deflateRaw$1, gzip: gzip$1 } = deflate_1$1;
var { Inflate: Inflate$1, inflate: inflate$2, inflateRaw: inflateRaw$1, ungzip: ungzip$1 } = inflate_1$1;
var Deflate_1$1 = Deflate$1;
var deflate_1$2 = deflate$2;
var deflateRaw_1$1 = deflateRaw$1;
var gzip_1$1 = gzip$1;
var Inflate_1$1 = Inflate$1;
var inflate_1$2 = inflate$2;
var inflateRaw_1$1 = inflateRaw$1;
var ungzip_1 = ungzip$1;
var constants_1 = constants;
var pako = {
  Deflate: Deflate_1$1,
  deflate: deflate_1$2,
  deflateRaw: deflateRaw_1$1,
  gzip: gzip_1$1,
  Inflate: Inflate_1$1,
  inflate: inflate_1$2,
  inflateRaw: inflateRaw_1$1,
  ungzip: ungzip_1,
  constants: constants_1
};
var pako_esm_default = pako;

// plugins/public/node_modules/js-base64/base64.mjs
var version = "3.6.0";
var VERSION = version;
var _hasatob = typeof atob === "function";
var _hasbtoa = typeof btoa === "function";
var _hasBuffer = typeof Buffer === "function";
var _TD = typeof TextDecoder === "function" ? new TextDecoder() : void 0;
var _TE = typeof TextEncoder === "function" ? new TextEncoder() : void 0;
var b64ch = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
var b64chs = [...b64ch];
var b64tab = ((a) => {
  let tab = {};
  a.forEach((c, i) => tab[c] = i);
  return tab;
})(b64chs);
var b64re = /^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/;
var _fromCC = String.fromCharCode.bind(String);
var _U8Afrom = typeof Uint8Array.from === "function" ? Uint8Array.from.bind(Uint8Array) : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));
var _mkUriSafe = (src) => src.replace(/[+\/]/g, (m0) => m0 == "+" ? "-" : "_").replace(/=+$/m, "");
var _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\+\/]/g, "");
var btoaPolyfill = (bin) => {
  let u32, c0, c1, c2, asc = "";
  const pad = bin.length % 3;
  for (let i = 0; i < bin.length; ) {
    if ((c0 = bin.charCodeAt(i++)) > 255 || (c1 = bin.charCodeAt(i++)) > 255 || (c2 = bin.charCodeAt(i++)) > 255)
      throw new TypeError("invalid character found");
    u32 = c0 << 16 | c1 << 8 | c2;
    asc += b64chs[u32 >> 18 & 63] + b64chs[u32 >> 12 & 63] + b64chs[u32 >> 6 & 63] + b64chs[u32 & 63];
  }
  return pad ? asc.slice(0, pad - 3) + "===".substring(pad) : asc;
};
var _btoa = _hasbtoa ? (bin) => btoa(bin) : _hasBuffer ? (bin) => Buffer.from(bin, "binary").toString("base64") : btoaPolyfill;
var _fromUint8Array = _hasBuffer ? (u8a) => Buffer.from(u8a).toString("base64") : (u8a) => {
  const maxargs = 4096;
  let strs = [];
  for (let i = 0, l = u8a.length; i < l; i += maxargs) {
    strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));
  }
  return _btoa(strs.join(""));
};
var fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);
var cb_utob = (c) => {
  if (c.length < 2) {
    var cc = c.charCodeAt(0);
    return cc < 128 ? c : cc < 2048 ? _fromCC(192 | cc >>> 6) + _fromCC(128 | cc & 63) : _fromCC(224 | cc >>> 12 & 15) + _fromCC(128 | cc >>> 6 & 63) + _fromCC(128 | cc & 63);
  } else {
    var cc = 65536 + (c.charCodeAt(0) - 55296) * 1024 + (c.charCodeAt(1) - 56320);
    return _fromCC(240 | cc >>> 18 & 7) + _fromCC(128 | cc >>> 12 & 63) + _fromCC(128 | cc >>> 6 & 63) + _fromCC(128 | cc & 63);
  }
};
var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
var utob = (u) => u.replace(re_utob, cb_utob);
var _encode = _hasBuffer ? (s) => Buffer.from(s, "utf8").toString("base64") : _TE ? (s) => _fromUint8Array(_TE.encode(s)) : (s) => _btoa(utob(s));
var encode = (src, urlsafe = false) => urlsafe ? _mkUriSafe(_encode(src)) : _encode(src);
var encodeURI = (src) => encode(src, true);
var re_btou = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;
var cb_btou = (cccc) => {
  switch (cccc.length) {
    case 4:
      var cp = (7 & cccc.charCodeAt(0)) << 18 | (63 & cccc.charCodeAt(1)) << 12 | (63 & cccc.charCodeAt(2)) << 6 | 63 & cccc.charCodeAt(3), offset = cp - 65536;
      return _fromCC((offset >>> 10) + 55296) + _fromCC((offset & 1023) + 56320);
    case 3:
      return _fromCC((15 & cccc.charCodeAt(0)) << 12 | (63 & cccc.charCodeAt(1)) << 6 | 63 & cccc.charCodeAt(2));
    default:
      return _fromCC((31 & cccc.charCodeAt(0)) << 6 | 63 & cccc.charCodeAt(1));
  }
};
var btou = (b) => b.replace(re_btou, cb_btou);
var atobPolyfill = (asc) => {
  asc = asc.replace(/\s+/g, "");
  if (!b64re.test(asc))
    throw new TypeError("malformed base64.");
  asc += "==".slice(2 - (asc.length & 3));
  let u24, bin = "", r1, r2;
  for (let i = 0; i < asc.length; ) {
    u24 = b64tab[asc.charAt(i++)] << 18 | b64tab[asc.charAt(i++)] << 12 | (r1 = b64tab[asc.charAt(i++)]) << 6 | (r2 = b64tab[asc.charAt(i++)]);
    bin += r1 === 64 ? _fromCC(u24 >> 16 & 255) : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255) : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);
  }
  return bin;
};
var _atob = _hasatob ? (asc) => atob(_tidyB64(asc)) : _hasBuffer ? (asc) => Buffer.from(asc, "base64").toString("binary") : atobPolyfill;
var _toUint8Array = _hasBuffer ? (a) => _U8Afrom(Buffer.from(a, "base64")) : (a) => _U8Afrom(_atob(a), (c) => c.charCodeAt(0));
var toUint8Array = (a) => _toUint8Array(_unURI(a));
var _decode = _hasBuffer ? (a) => Buffer.from(a, "base64").toString("utf8") : _TD ? (a) => _TD.decode(_toUint8Array(a)) : (a) => btou(_atob(a));
var _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == "-" ? "+" : "/"));
var decode = (src) => _decode(_unURI(src));
var isValid = (src) => {
  if (typeof src !== "string")
    return false;
  const s = src.replace(/\s+/g, "").replace(/=+$/, "");
  return !/[^\s0-9a-zA-Z\+/]/.test(s) || !/[^\s0-9a-zA-Z\-_]/.test(s);
};
var _noEnum = (v) => {
  return {
    value: v,
    enumerable: false,
    writable: true,
    configurable: true
  };
};
var extendString = function() {
  const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));
  _add("fromBase64", function() {
    return decode(this);
  });
  _add("toBase64", function(urlsafe) {
    return encode(this, urlsafe);
  });
  _add("toBase64URI", function() {
    return encode(this, true);
  });
  _add("toBase64URL", function() {
    return encode(this, true);
  });
  _add("toUint8Array", function() {
    return toUint8Array(this);
  });
};
var extendUint8Array = function() {
  const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));
  _add("toBase64", function(urlsafe) {
    return fromUint8Array(this, urlsafe);
  });
  _add("toBase64URI", function() {
    return fromUint8Array(this, true);
  });
  _add("toBase64URL", function() {
    return fromUint8Array(this, true);
  });
};
var extendBuiltins = () => {
  extendString();
  extendUint8Array();
};
var gBase64 = {
  version,
  VERSION,
  atob: _atob,
  atobPolyfill,
  btoa: _btoa,
  btoaPolyfill,
  fromBase64: decode,
  toBase64: encode,
  encode,
  encodeURI,
  encodeURL: encodeURI,
  utob,
  btou,
  decode,
  isValid,
  fromUint8Array,
  toUint8Array,
  extendString,
  extendUint8Array,
  extendBuiltins
};

// plugins/public/network/utils.tsx
function getHeaderValue(headers, key) {
  if (!headers) {
    return "";
  }
  for (const header of headers) {
    if (header.key.toLowerCase() === key.toLowerCase()) {
      return header.value;
    }
  }
  return "";
}
var jsonContentTypeRegex = new RegExp("application/(json|.+\\+json)");
var binaryContentType = /^(application\/(zip|octet-stream|pdf))|(video|audio)|(image\/(png|webp|jpeg|gif|avif))$/;
function isTextual(headers, body) {
  const contentType = getHeaderValue(headers, "Content-Type");
  if (contentType) {
    if (contentType.startsWith("text/") || contentType.startsWith("application/x-www-form-urlencoded") || jsonContentTypeRegex.test(contentType) || contentType.startsWith("multipart/") || contentType.startsWith("message/") || contentType.startsWith("image/svg") || contentType.startsWith("application/xhtml+xml") || contentType.startsWith("application/xml")) {
      return true;
    }
    if (binaryContentType.test(contentType)) {
      return false;
    }
  }
  if ((body instanceof import_buffer.Buffer || body instanceof Uint8Array) && isValidUtf8(body)) {
    return true;
  }
  return false;
}
function isValidUtf8(data) {
  if (data[0] === 239 && data[1] === 187 && data[2] === 191) {
    return true;
  }
  const extraByteMap = [1, 1, 1, 1, 2, 2, 3, 0];
  const count = data.length;
  for (let index = 0; index < count; ) {
    let ch = data[index++];
    if (ch & 128) {
      let extra = extraByteMap[ch >> 3 & 7];
      if (!(ch & 64) || !extra || index + extra > count)
        return false;
      ch &= 63 >> extra;
      for (; extra > 0; extra -= 1) {
        const chx = data[index++];
        if ((chx & 192) != 128)
          return false;
        ch = ch << 6 | chx & 63;
      }
    }
  }
  return true;
}
function decodeBody(headers, data) {
  if (!data) {
    return void 0;
  }
  try {
    const contentEncoding = getHeaderValue(headers, "Content-Encoding");
    switch (contentEncoding) {
      case "gzip": {
        try {
          const dataArr = gBase64.toUint8Array(data);
          return isTextual(headers, dataArr) ? pako_esm_default.inflate(dataArr, { to: "string" }) : pako_esm_default.inflate(dataArr);
        } catch (e) {
          if (!`${e}`.includes("incorrect header check")) {
            throw e;
          }
          break;
        }
      }
      case "br": {
        const inflated = (0, import_decompress.default)(import_buffer.Buffer.from(gBase64.toUint8Array(data)));
        if (inflated.length === 0 && data.length > 0) {
          break;
        }
        return new TextDecoder().decode(inflated);
      }
    }
    const bytes = gBase64.toUint8Array(data);
    if (isTextual(headers, bytes)) {
      return gBase64.decode(data);
    } else {
      return bytes;
    }
  } catch (e) {
    console.warn(
      `Flipper failed to decode request/response body (size: ${data.length}): ${e}`
    );
    return void 0;
  }
}
function convertRequestToCurlCommand(request) {
  let command = `curl -v -X ${request.method}`;
  command += ` ${escapedString(request.url)}`;
  request.requestHeaders.forEach((header) => {
    const headerStr = `${header.key}: ${header.value}`;
    command += ` -H ${escapedString(headerStr)}`;
  });
  if (typeof request.requestData === "string") {
    command += ` -d ${escapedString(request.requestData)}`;
  }
  return command;
}
function bodyAsString(body) {
  if (body == void 0) {
    return "(empty)";
  }
  if (body instanceof Uint8Array) {
    return "(binary data)";
  }
  return body;
}
function bodyAsBinary(body) {
  if (body instanceof Uint8Array) {
    return body;
  }
  return void 0;
}
var queryToObj = (query) => {
  const params = new URLSearchParams(query);
  const obj = {};
  params.forEach((value, key) => {
    obj[key] = value;
  });
  return obj;
};
function escapeCharacter(x) {
  const code = x.charCodeAt(0);
  return code < 16 ? `\\u0${code.toString(16)}` : `\\u${code.toString(16)}`;
}
var needsEscapingRegex = /[\u0000-\u001f\u007f-\u009f!]/g;
function escapedString(str) {
  if (needsEscapingRegex.test(str) || str.includes("'")) {
    return `$'${str.replace(/\\/g, "\\\\").replace(/\'/g, "\\'").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(needsEscapingRegex, escapeCharacter)}'`;
  }
  return `'${str}'`;
}
function getResponseLength(response) {
  const lengthString = response.headers ? getHeaderValue(response.headers, "content-length") : void 0;
  if (lengthString) {
    return parseInt(lengthString, 10);
  } else if (response.data) {
    return import_buffer.Buffer.byteLength(response.data, "base64");
  }
  return 0;
}
function getRequestLength(request) {
  const lengthString = request.requestHeaders ? getHeaderValue(request.requestHeaders, "content-length") : void 0;
  if (lengthString) {
    return parseInt(lengthString, 10);
  } else if (request.requestData) {
    return import_buffer.Buffer.byteLength(request.requestData, "base64");
  }
  return 0;
}
function formatDuration(duration) {
  if (typeof duration === "number")
    return `${duration}ms`;
  return "";
}
function formatBytes(count) {
  if (typeof count !== "number") {
    return "";
  }
  if (count > 1024 * 1024) {
    return `${(count / (1024 * 1024)).toFixed(1)} MB`;
  }
  if (count > 1024) {
    return `${(count / 1024).toFixed(1)} kB`;
  }
  return `${count} B`;
}
function formatOperationName(requestData) {
  try {
    const parsedData = JSON.parse(requestData);
    return parsedData?.operationName;
  } catch (_err) {
    return "";
  }
}
function requestsToText(requests) {
  const request = requests[0];
  if (!request || !request.url) {
    return "<empty request>";
  }
  let copyText = `# HTTP request for ${request.domain} (ID: ${request.id})
  ## Request
  HTTP ${request.method} ${request.url}
  ${request.requestHeaders.map(
    ({ key, value }) => `${key}: ${String(value)}`
  ).join("\n")}`;
  if (request.requestData) {
    copyText += `

${request.requestData}`;
  }
  if (request.status) {
    copyText += `

  ## Response
  HTTP ${request.status} ${request.reason}
  ${request.responseHeaders?.map(
      ({ key, value }) => `${key}: ${String(value)}`
    ).join("\n") ?? ""}`;
  }
  if (request.responseData) {
    copyText += `

${request.responseData}`;
  }
  return copyText;
}

// plugins/public/network/RequestDetails.tsx
var import_react2 = __toESM(require("react"));
var import_react3 = require("react");
var import_xml_beautifier = __toESM(require_dist());
var import_flipper_plugin2 = require("flipper-plugin");
var import_antd = require("antd");

// plugins/public/network/KeyValueTable.tsx
var React = __toESM(require("react"));
var import_flipper_plugin = require("flipper-plugin");
var import_react = require("react");
var columns = [
  {
    key: "key",
    width: 160,
    title: "Key"
  },
  {
    key: "value",
    title: "Value",
    wrap: true
  }
];
function KeyValueTable({ items }) {
  const handleCopyRows = (0, import_react.useCallback)((rows) => {
    return rows.map(({ key, value }) => `${key}: ${value}`).join("\n");
  }, []);
  return /* @__PURE__ */ React.createElement(
    import_flipper_plugin.DataTable,
    {
      columns,
      records: items,
      enableSearchbar: false,
      scrollable: false,
      enableHorizontalScroll: false,
      onCopyRows: handleCopyRows
    }
  );
}

// plugins/public/network/RequestDetails.tsx
var import_icons = require("@ant-design/icons");
var { Text } = import_antd.Typography;
var RequestDetails = class extends import_react3.Component {
  constructor() {
    super(...arguments);
    this.urlColumns = (url) => {
      return [
        {
          key: "Full URL",
          value: url.href
        },
        {
          key: "Host",
          value: url.host
        },
        {
          key: "Path",
          value: url.pathname
        },
        {
          key: "Query String",
          value: url.search
        }
      ];
    };
  }
  render() {
    const { request, bodyFormat, onSelectFormat, onCopyText } = this.props;
    const url = new URL(request.url);
    const formattedText = bodyFormat == "formatted";
    return /* @__PURE__ */ import_react2.default.createElement(import_react2.default.Fragment, null, /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.Panel, { key: "request", title: "Request" }, /* @__PURE__ */ import_react2.default.createElement(KeyValueTable, { items: this.urlColumns(url) })), url.search ? /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.Panel, { title: "Request Query Parameters" }, /* @__PURE__ */ import_react2.default.createElement(QueryInspector, { queryParams: url.searchParams })) : null, request.requestHeaders.length > 0 ? /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.Panel, { key: "headers", title: "Request Headers" }, /* @__PURE__ */ import_react2.default.createElement(HeaderInspector, { headers: request.requestHeaders })) : null, request.requestData != null ? /* @__PURE__ */ import_react2.default.createElement(
      import_flipper_plugin2.Panel,
      {
        key: "requestData",
        title: "Request Body",
        extraActions: typeof request.requestData === "string" ? /* @__PURE__ */ import_react2.default.createElement(
          import_icons.CopyOutlined,
          {
            title: "Copy request body",
            onClick: (e) => {
              e.stopPropagation();
              onCopyText(request.requestData);
            }
          }
        ) : null,
        pad: true
      },
      /* @__PURE__ */ import_react2.default.createElement(
        RequestBodyInspector,
        {
          formattedText,
          request
        }
      )
    ) : null, request.status ? /* @__PURE__ */ import_react2.default.createElement(import_react2.default.Fragment, null, request.responseHeaders?.length ? /* @__PURE__ */ import_react2.default.createElement(
      import_flipper_plugin2.Panel,
      {
        key: "responseheaders",
        title: `Response Headers${request.responseIsMock ? " (Mocked)" : ""}`
      },
      /* @__PURE__ */ import_react2.default.createElement(HeaderInspector, { headers: request.responseHeaders })
    ) : null, /* @__PURE__ */ import_react2.default.createElement(
      import_flipper_plugin2.Panel,
      {
        key: "responsebody",
        title: `Response Body${request.responseIsMock ? " (Mocked)" : ""}`,
        extraActions: typeof request.responseData === "string" && request.responseData ? /* @__PURE__ */ import_react2.default.createElement(
          import_icons.CopyOutlined,
          {
            title: "Copy response body",
            onClick: (e) => {
              e.stopPropagation();
              onCopyText(request.responseData);
            }
          }
        ) : null,
        pad: true
      },
      /* @__PURE__ */ import_react2.default.createElement(
        ResponseBodyInspector,
        {
          formattedText,
          request
        }
      )
    )) : null, /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.Panel, { key: "options", title: "Options", collapsed: true, pad: true }, /* @__PURE__ */ import_react2.default.createElement(Text, null, "Body formatting:"), /* @__PURE__ */ import_react2.default.createElement(
      import_antd.Select,
      {
        value: bodyFormat,
        onChange: onSelectFormat,
        options: BodyOptions
      }
    )), request.insights ? /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.Panel, { key: "insights", title: "Insights", collapsed: true }, /* @__PURE__ */ import_react2.default.createElement(InsightsInspector, { insights: request.insights })) : null);
  }
};
var QueryInspector = class extends import_react3.Component {
  render() {
    const rows = [];
    this.props.queryParams.forEach((value, key) => {
      rows.push({
        key,
        value
      });
    });
    return rows.length > 0 ? /* @__PURE__ */ import_react2.default.createElement(KeyValueTable, { items: rows }) : null;
  }
};
var HeaderInspector = class extends import_react3.Component {
  render() {
    const computedHeaders = this.props.headers.reduce(
      (sum, header) => {
        return sum.set(header.key, header.value);
      },
      /* @__PURE__ */ new Map()
    );
    const rows = Array.from(computedHeaders.entries()).sort((a, b) => a[0] < b[0] ? -1 : a[0] == b[0] ? 0 : 1).map(([key, value]) => ({ key, value }));
    return rows.length > 0 ? /* @__PURE__ */ import_react2.default.createElement(KeyValueTable, { items: this.props.headers }) : null;
  }
};
var RequestBodyInspector = class extends import_react3.Component {
  render() {
    const { request, formattedText } = this.props;
    if (request.requestData == null || request.requestData === "") {
      return /* @__PURE__ */ import_react2.default.createElement(Empty, null);
    }
    const bodyFormatters = formattedText ? TextBodyFormatters : BodyFormatters;
    for (const formatter of bodyFormatters) {
      if (formatter.formatRequest) {
        try {
          const component = formatter.formatRequest(request);
          if (component) {
            return /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.Layout.Container, { gap: true }, component, /* @__PURE__ */ import_react2.default.createElement(FormattedBy, null, "Formatted by ", formatter.constructor.name));
          }
        } catch (e) {
          console.warn(
            `BodyFormatter exception from ${formatter.constructor.name}`,
            e.message
          );
        }
      }
    }
    return renderRawBody(request, "request");
  }
};
var ResponseBodyInspector = class extends import_react3.Component {
  render() {
    const { request, formattedText } = this.props;
    if (request.responseData == null || request.responseData === "") {
      return /* @__PURE__ */ import_react2.default.createElement(Empty, null);
    }
    const bodyFormatters = formattedText ? TextBodyFormatters : BodyFormatters;
    for (const formatter of bodyFormatters) {
      if (formatter.formatResponse) {
        try {
          const component = formatter.formatResponse(request);
          if (component) {
            return /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.Layout.Container, { gap: true }, component, /* @__PURE__ */ import_react2.default.createElement(FormattedBy, null, "Formatted by ", formatter.constructor.name));
          }
        } catch (e) {
          console.warn(
            `BodyFormatter exception from ${formatter.constructor.name}`,
            e.message
          );
        }
      }
    }
    return renderRawBody(request, "response");
  }
};
var FormattedBy = (0, import_flipper_plugin2.styled)(Text)({
  marginTop: 8,
  fontSize: "0.7em",
  textAlign: "center",
  display: "block",
  color: import_flipper_plugin2.theme.disabledColor
});
var Empty = () => /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.Layout.Container, { pad: true }, /* @__PURE__ */ import_react2.default.createElement(Text, null, "(empty)"));
function renderRawBody(request, mode) {
  const data = mode === "request" ? request.requestData : request.responseData;
  return /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.Layout.Container, { gap: true }, /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.CodeBlock, null, bodyAsString(data)));
}
var _ImageWithSize = class extends import_react3.Component {
  constructor(props) {
    super(props);
    this.state = {
      width: 0,
      height: 0
    };
  }
  componentDidMount() {
    const image = new Image();
    image.src = this.props.src;
    image.onload = () => {
      image.width;
      image.height;
      this.setState({
        width: image.width,
        height: image.height
      });
    };
  }
  render() {
    return /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.Layout.Container, { center: true }, /* @__PURE__ */ import_react2.default.createElement(_ImageWithSize.Image, { src: this.props.src }), /* @__PURE__ */ import_react2.default.createElement(Text, { type: "secondary" }, this.state.width, " x ", this.state.height));
  }
};
var ImageWithSize = _ImageWithSize;
ImageWithSize.Image = import_flipper_plugin2.styled.img({
  objectFit: "scale-down",
  maxWidth: "100%",
  marginBottom: 10
});
var ImageFormatter = class {
  formatResponse(request) {
    if (getHeaderValue(request.responseHeaders, "content-type").startsWith(
      "image/"
    )) {
      if (request.responseData) {
        const src = `data:${getHeaderValue(
          request.responseHeaders,
          "content-type"
        )};base64,${gBase64.fromUint8Array(
          bodyAsBinary(request.responseData)
        )}`;
        return /* @__PURE__ */ import_react2.default.createElement(ImageWithSize, { src });
      } else {
        return /* @__PURE__ */ import_react2.default.createElement(ImageWithSize, { src: request.url });
      }
    }
  }
};
var _VideoFormatter = class {
  constructor() {
    this.formatResponse = (request) => {
      const contentType = getHeaderValue(request.responseHeaders, "content-type");
      if (contentType.startsWith("video/")) {
        return /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.Layout.Container, { center: true }, /* @__PURE__ */ import_react2.default.createElement(_VideoFormatter.Video, { controls: true }, /* @__PURE__ */ import_react2.default.createElement("source", { src: request.url, type: contentType })));
      }
    };
  }
};
var VideoFormatter = _VideoFormatter;
VideoFormatter.Video = import_flipper_plugin2.styled.video({
  maxWidth: 500,
  maxHeight: 500
});
var JSONText = class extends import_react3.Component {
  render() {
    const jsonObject = this.props.children;
    return /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.CodeBlock, null, JSON.stringify(jsonObject, null, 2), "\n");
  }
};
var XMLText = class extends import_react3.Component {
  render() {
    const xmlPretty = (0, import_xml_beautifier.default)(this.props.body);
    return /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.CodeBlock, null, xmlPretty, "\n");
  }
};
var JSONTextFormatter = class {
  formatRequest(request) {
    return this.format(
      bodyAsString(request.requestData),
      getHeaderValue(request.requestHeaders, "content-type")
    );
  }
  formatResponse(request) {
    return this.format(
      bodyAsString(request.responseData),
      getHeaderValue(request.responseHeaders, "content-type")
    );
  }
  format(body, contentType) {
    if (contentType.startsWith("application/json") || contentType.startsWith("application/hal+json") || contentType.startsWith("text/javascript") || contentType.startsWith("application/x-fb-flatbuffer")) {
      try {
        const data = JSON.parse(body);
        return /* @__PURE__ */ import_react2.default.createElement(JSONText, null, data);
      } catch (SyntaxError) {
        return body.split("\n").map((json) => JSON.parse(json)).map((data, idx) => /* @__PURE__ */ import_react2.default.createElement(JSONText, { key: idx }, data));
      }
    }
  }
};
var XMLTextFormatter = class {
  formatRequest(request) {
    return this.format(
      bodyAsString(request.requestData),
      getHeaderValue(request.requestHeaders, "content-type")
    );
  }
  formatResponse(request) {
    return this.format(
      bodyAsString(request.responseData),
      getHeaderValue(request.responseHeaders, "content-type")
    );
  }
  format(body, contentType) {
    if (contentType.startsWith("text/html") || contentType.startsWith("text/xml") || contentType.startsWith("application/xml")) {
      return /* @__PURE__ */ import_react2.default.createElement(XMLText, { body });
    }
  }
};
var JSONFormatter = class {
  formatRequest(request) {
    return this.format(
      bodyAsString(request.requestData),
      getHeaderValue(request.requestHeaders, "content-type")
    );
  }
  formatResponse(request) {
    return this.format(
      bodyAsString(request.responseData),
      getHeaderValue(request.responseHeaders, "content-type")
    );
  }
  format(body, contentType) {
    if (contentType.startsWith("application/json") || contentType.startsWith("application/hal+json") || contentType.startsWith("text/javascript") || contentType.startsWith("application/x-fb-flatbuffer")) {
      try {
        const data = JSON.parse(body);
        return /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.DataInspector, { collapsed: true, expandRoot: true, data });
      } catch (SyntaxError) {
        const roots = body.split("\n");
        return /* @__PURE__ */ import_react2.default.createElement(
          import_flipper_plugin2.DataInspector,
          {
            collapsed: true,
            expandRoot: true,
            data: roots.map((json) => JSON.parse(json))
          }
        );
      }
    }
  }
};
var LogEventFormatter = class {
  formatRequest(request) {
    if (request.url.indexOf("logging_client_event") > 0) {
      const data = queryToObj(bodyAsString(request.requestData));
      if (typeof data.message === "string") {
        data.message = JSON.parse(data.message);
      }
      return /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.DataInspector, { expandRoot: true, data });
    }
  }
};
var GraphQLBatchFormatter = class {
  formatRequest(request) {
    if (request.url.indexOf("graphqlbatch") > 0) {
      const data = queryToObj(bodyAsString(request.requestData));
      if (typeof data.queries === "string") {
        data.queries = JSON.parse(data.queries);
      }
      return /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.DataInspector, { expandRoot: true, data });
    }
  }
};
var GraphQLFormatter = class {
  constructor() {
    this.format = (body, contentType) => {
      if (contentType.startsWith("application/json") || contentType.startsWith("application/hal+json") || contentType.startsWith("text/javascript") || contentType.startsWith("text/html") || contentType.startsWith("application/x-fb-flatbuffer")) {
        try {
          const data = JSON.parse(body);
          return /* @__PURE__ */ import_react2.default.createElement("div", null, this.parsedServerTimeForFirstFlush(data), /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.DataInspector, { collapsed: true, expandRoot: true, data }));
        } catch (SyntaxError) {
          const parsedResponses = body.replace(/}{/g, "}\r\n{").split("\n").filter((json) => json.length > 0).map((json) => JSON.parse(json));
          return /* @__PURE__ */ import_react2.default.createElement("div", null, this.parsedServerTimeForFirstFlush(parsedResponses), /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.DataInspector, { collapsed: true, expandRoot: true, data: parsedResponses }));
        }
      }
    };
  }
  parsedServerTimeForFirstFlush(data) {
    const firstResponse = Array.isArray(data) && data.length > 0 ? data[0] : data;
    if (!firstResponse) {
      return null;
    }
    const extensions = firstResponse["extensions"];
    if (!extensions) {
      return null;
    }
    const serverMetadata = extensions["server_metadata"];
    if (!serverMetadata) {
      return null;
    }
    const requestStartMs = serverMetadata["request_start_time_ms"];
    const timeAtFlushMs = serverMetadata["time_at_flush_ms"];
    return /* @__PURE__ */ import_react2.default.createElement(Text, { type: "secondary" }, `Server wall time for initial response (ms): ${timeAtFlushMs - requestStartMs}`);
  }
  formatRequest(request) {
    if (request.url.indexOf("graphql") > 0) {
      const decoded = request.requestData;
      if (!decoded) {
        return void 0;
      }
      const data = queryToObj(bodyAsString(decoded));
      if (typeof data.variables === "string") {
        data.variables = JSON.parse(data.variables);
      }
      if (typeof data.query_params === "string") {
        data.query_params = JSON.parse(data.query_params);
      }
      return /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.DataInspector, { expandRoot: true, data });
    }
  }
  formatResponse(request) {
    return this.format(
      bodyAsString(request.responseData),
      getHeaderValue(request.responseHeaders, "content-type")
    );
  }
};
var FormUrlencodedFormatter = class {
  constructor() {
    this.formatRequest = (request) => {
      const contentType = getHeaderValue(request.requestHeaders, "content-type");
      if (contentType.startsWith("application/x-www-form-urlencoded")) {
        const decoded = request.requestData;
        if (!decoded) {
          return void 0;
        }
        return /* @__PURE__ */ import_react2.default.createElement(import_flipper_plugin2.DataInspector, { expandRoot: true, data: queryToObj(bodyAsString(decoded)) });
      }
    };
  }
};
var BinaryFormatter = class {
  formatRequest(request) {
    if (getHeaderValue(request.requestHeaders, "content-type") === "application/octet-stream") {
      return "(binary data)";
    }
    return void 0;
  }
  formatResponse(request) {
    if (getHeaderValue(request.responseHeaders, "content-type") === "application/octet-stream") {
      return "(binary data)";
    }
    return void 0;
  }
};
var ProtobufFormatter = class {
  constructor() {
    this.protobufDefinitionRepository = ProtobufDefinitionsRepository.getInstance();
  }
  formatRequest(request) {
    if (getHeaderValue(request.requestHeaders, "content-type") === "application/x-protobuf") {
      const protobufDefinition = this.protobufDefinitionRepository.getRequestType(
        request.method,
        request.url
      );
      if (protobufDefinition == void 0) {
        return /* @__PURE__ */ import_react2.default.createElement(Text, null, "Could not locate protobuf definition for request body of", " ", request.url);
      }
      if (request.requestData) {
        const data = protobufDefinition.decode(
          bodyAsBinary(request.requestData)
        );
        return /* @__PURE__ */ import_react2.default.createElement(JSONText, null, data.toJSON());
      } else {
        return /* @__PURE__ */ import_react2.default.createElement(Text, null, "Could not locate request body data for ", request.url);
      }
    }
    return void 0;
  }
  formatResponse(request) {
    if (getHeaderValue(request.responseHeaders, "content-type") === "application/x-protobuf" || request.url.endsWith(".proto")) {
      const protobufDefinition = this.protobufDefinitionRepository.getResponseType(
        request.method,
        request.url
      );
      if (protobufDefinition == void 0) {
        return /* @__PURE__ */ import_react2.default.createElement(Text, null, "Could not locate protobuf definition for response body of", " ", request.url);
      }
      if (request.responseData) {
        const data = protobufDefinition.decode(
          bodyAsBinary(request.responseData)
        );
        return /* @__PURE__ */ import_react2.default.createElement(JSONText, null, data.toJSON());
      } else {
        return /* @__PURE__ */ import_react2.default.createElement(Text, null, "Could not locate response body data for ", request.url);
      }
    }
    return void 0;
  }
};
var BodyFormatters = [
  new ImageFormatter(),
  new VideoFormatter(),
  new LogEventFormatter(),
  new GraphQLBatchFormatter(),
  new GraphQLFormatter(),
  new JSONFormatter(),
  new FormUrlencodedFormatter(),
  new XMLTextFormatter(),
  new ProtobufFormatter(),
  new BinaryFormatter()
];
var TextBodyFormatters = [new JSONTextFormatter()];
var InsightsInspector = class extends import_react3.Component {
  constructor() {
    super(...arguments);
    this.formatRetries = (retry) => {
      const timesWord = retry.limit === 1 ? "time" : "times";
      return `${this.formatTime(retry.timeSpent)} (${retry.count} ${timesWord} out of ${retry.limit})`;
    };
  }
  formatTime(value) {
    return `${value} ms`;
  }
  formatSpeed(value) {
    return `${formatBytes(value)}/sec`;
  }
  buildRow(name, value, formatter) {
    return value ? {
      key: name,
      value: formatter(value)
    } : null;
  }
  render() {
    const insights = this.props.insights;
    const { buildRow, formatTime, formatSpeed, formatRetries } = this;
    const rows = [
      buildRow("Retries", insights.retries, formatRetries),
      buildRow("DNS lookup time", insights.dnsLookupTime, formatTime),
      buildRow("Connect time", insights.connectTime, formatTime),
      buildRow("SSL handshake time", insights.sslHandshakeTime, formatTime),
      buildRow("Pretransfer time", insights.preTransferTime, formatTime),
      buildRow("Redirect time", insights.redirectsTime, formatTime),
      buildRow("First byte wait time", insights.timeToFirstByte, formatTime),
      buildRow("Data transfer time", insights.transferTime, formatTime),
      buildRow("Post processing time", insights.postProcessingTime, formatTime),
      buildRow("Bytes transfered", insights.bytesTransfered, formatBytes),
      buildRow("Transfer speed", insights.transferSpeed, formatSpeed)
    ].filter((r) => r != null);
    return rows.length > 0 ? /* @__PURE__ */ import_react2.default.createElement(KeyValueTable, { items: rows }) : null;
  }
};

// plugins/public/network/chunks.tsx
function assembleChunksIfResponseIsComplete(partialResponseEntry) {
  const numChunks = partialResponseEntry?.initialResponse?.totalChunks;
  if (!numChunks || !partialResponseEntry?.initialResponse || Object.keys(partialResponseEntry.followupChunks).length + 1 < numChunks) {
    return;
  }
  const response = partialResponseEntry.initialResponse;
  const allChunks = response.data != null ? [
    response.data,
    ...Object.entries(partialResponseEntry.followupChunks).sort((a, b) => parseInt(a[0], 10) - parseInt(b[0], 10)).map(([_k, v]) => v)
  ] : [];
  const data = combineBase64Chunks(allChunks);
  return {
    ...response,
    data
  };
}
function combineBase64Chunks(chunks) {
  const byteArray = chunks.map((b64Chunk) => {
    return gBase64.toUint8Array(b64Chunk);
  });
  const size = byteArray.map((b) => b.byteLength).reduce((prev, curr) => prev + curr, 0);
  const buffer = new Uint8Array(size);
  let offset = 0;
  for (let i = 0; i < byteArray.length; i++) {
    buffer.set(byteArray[i], offset);
    offset += byteArray[i].byteLength;
  }
  return gBase64.fromUint8Array(buffer);
}

// plugins/public/network/index.tsx
var import_icons4 = require("@ant-design/icons");

// plugins/public/network/request-mocking/ManageMockResponsePanel.tsx
var import_react6 = __toESM(require("react"));

// plugins/public/network/request-mocking/MockResponseDetails.tsx
var import_react5 = __toESM(require("react"));

// plugins/public/network/request-mocking/NetworkRouteManager.tsx
var import_flipper_plugin3 = require("flipper-plugin");
var import_react4 = require("react");
var nullNetworkRouteManager = {
  addRoute() {
    return "";
  },
  modifyRoute(_id, _routeChange) {
  },
  removeRoute(_id) {
  },
  enableRoute(_id) {
  },
  copySelectedCalls() {
  },
  importRoutes() {
  },
  exportRoutes() {
  },
  clearRoutes() {
  }
};
var NetworkRouteContext = (0, import_react4.createContext)(
  nullNetworkRouteManager
);
function createNetworkManager(nextRouteId, routes, informClientMockChange, tableManagerRef) {
  return {
    addRoute() {
      const newNextRouteId = nextRouteId.get();
      routes.update((draft) => {
        draft[newNextRouteId.toString()] = {
          requestUrl: "",
          requestMethod: "GET",
          responseData: "",
          responseHeaders: {},
          responseStatus: "200",
          enabled: true
        };
      });
      nextRouteId.set(newNextRouteId + 1);
      return String(newNextRouteId);
    },
    modifyRoute(id, routeChange) {
      if (!routes.get().hasOwnProperty(id)) {
        return;
      }
      routes.update((draft) => {
        Object.assign(draft[id], routeChange);
      });
      informClientMockChange(routes.get());
    },
    removeRoute(id) {
      if (routes.get().hasOwnProperty(id)) {
        routes.update((draft) => {
          delete draft[id];
        });
      }
      informClientMockChange(routes.get());
    },
    enableRoute(id) {
      if (routes.get().hasOwnProperty(id)) {
        routes.update((draft) => {
          draft[id].enabled = !draft[id].enabled;
        });
      }
      informClientMockChange(routes.get());
    },
    copySelectedCalls() {
      tableManagerRef.current?.getSelectedItems().forEach((request) => {
        const headers = {};
        request.responseHeaders?.forEach((e) => {
          headers[e.key] = e;
        });
        const responseData = request && request.responseData ? request.responseData : "";
        const newNextRouteId = nextRouteId.get();
        routes.update((draft) => {
          draft[newNextRouteId.toString()] = {
            requestUrl: request.url,
            requestMethod: request.method,
            responseData,
            responseHeaders: headers,
            responseStatus: request.status?.toString() ?? "",
            enabled: true
          };
        });
        nextRouteId.set(newNextRouteId + 1);
      });
      informClientMockChange(routes.get());
    },
    importRoutes() {
      (0, import_flipper_plugin3.getFlipperLib)().importFile({
        extensions: [".json"]
      }).then((res) => {
        if (res) {
          if (res.encoding !== "utf-8" || typeof res.data !== "string") {
            return;
          }
          const importedRoutes = JSON.parse(res.data);
          importedRoutes?.forEach((importedRoute) => {
            if (importedRoute != null) {
              const newNextRouteId = nextRouteId.get();
              routes.update((draft) => {
                draft[newNextRouteId.toString()] = {
                  requestUrl: importedRoute.requestUrl,
                  requestMethod: importedRoute.requestMethod,
                  responseData: importedRoute.responseData,
                  responseHeaders: importedRoute.responseHeaders,
                  responseStatus: importedRoute.responseStatus,
                  enabled: true
                };
              });
              nextRouteId.set(newNextRouteId + 1);
            }
          });
          informClientMockChange(routes.get());
        }
      }).catch(
        (e) => console.error("[network] importRoutes dialogue failed:", e)
      );
    },
    exportRoutes() {
      (0, import_flipper_plugin3.getFlipperLib)().exportFile(JSON.stringify(Object.values(routes.get()), null, 2), {
        defaultPath: "NetworkPluginRoutesExport.json"
      }).catch(
        (e) => console.error("[network] exportRoutes saving failed:", e)
      );
    },
    clearRoutes() {
      routes.set({});
      informClientMockChange(routes.get());
    }
  };
}
function computeMockRoutes(routes) {
  const existedIdSet = {};
  const filteredRoutes = Object.entries(routes).reduce(
    (accRoutes, [id, route]) => {
      if (existedIdSet.hasOwnProperty(route.requestUrl)) {
        if (existedIdSet[route.requestUrl].hasOwnProperty(route.requestMethod)) {
          return accRoutes;
        }
        existedIdSet[route.requestUrl] = {
          ...existedIdSet[route.requestUrl],
          [route.requestMethod]: true
        };
        return Object.assign({ [id]: route }, accRoutes);
      } else {
        existedIdSet[route.requestUrl] = {
          [route.requestMethod]: true
        };
        return Object.assign({ [id]: route }, accRoutes);
      }
    },
    {}
  );
  return filteredRoutes;
}

// plugins/public/network/request-mocking/MockResponseDetails.tsx
var import_antd2 = require("antd");
var import_flipper_plugin4 = require("flipper-plugin");
var import_icons2 = require("@ant-design/icons");
function HeaderInput(props) {
  const [value, setValue] = (0, import_react5.useState)(props.initialValue);
  return /* @__PURE__ */ import_react5.default.createElement(
    import_antd2.Input,
    {
      type: "text",
      placeholder: "Name",
      value,
      onChange: (event) => {
        setValue(event.target.value);
        props.onUpdate(event.target.value);
      },
      style: props.style
    }
  );
}
function ResponseHeaders({
  routeId,
  route,
  networkRouteManager
}) {
  return /* @__PURE__ */ import_react5.default.createElement(import_flipper_plugin4.Layout.Container, { gap: true, style: { paddingRight: import_flipper_plugin4.theme.space.small } }, Object.entries(route.responseHeaders).map(([id, header]) => /* @__PURE__ */ import_react5.default.createElement(import_flipper_plugin4.Layout.Horizontal, { center: true, gap: true, key: id }, /* @__PURE__ */ import_react5.default.createElement(
    HeaderInput,
    {
      initialValue: header.key,
      onUpdate: (newValue) => {
        const newHeaders = (0, import_flipper_plugin4.produce)(
          route.responseHeaders,
          (draftHeaders) => {
            draftHeaders[id].key = newValue;
          }
        );
        networkRouteManager.modifyRoute(routeId, {
          responseHeaders: newHeaders
        });
      },
      style: { width: 300 }
    }
  ), /* @__PURE__ */ import_react5.default.createElement(
    HeaderInput,
    {
      initialValue: header.value,
      onUpdate: (newValue) => {
        const newHeaders = (0, import_flipper_plugin4.produce)(
          route.responseHeaders,
          (draftHeaders) => {
            draftHeaders[id].value = newValue;
          }
        );
        networkRouteManager.modifyRoute(routeId, {
          responseHeaders: newHeaders
        });
      }
    }
  ), /* @__PURE__ */ import_react5.default.createElement(
    import_flipper_plugin4.Layout.Container,
    {
      onClick: () => {
        const newHeaders = (0, import_flipper_plugin4.produce)(
          route.responseHeaders,
          (draftHeaders) => {
            delete draftHeaders[id];
          }
        );
        networkRouteManager.modifyRoute(routeId, {
          responseHeaders: newHeaders
        });
      }
    },
    /* @__PURE__ */ import_react5.default.createElement(import_icons2.CloseCircleOutlined, null)
  ))));
}
var httpMethods = [
  "GET",
  "POST",
  "PATCH",
  "HEAD",
  "PUT",
  "DELETE",
  "TRACE",
  "OPTIONS",
  "CONNECT"
].map((v) => ({ value: v, label: v }));
function MockResponseDetails({ id, route, isDuplicated }) {
  const networkRouteManager = (0, import_react5.useContext)(NetworkRouteContext);
  const [nextHeaderId, setNextHeaderId] = (0, import_react5.useState)(0);
  const { requestUrl, requestMethod, responseData, responseStatus } = route;
  let formattedResponse = "";
  try {
    formattedResponse = JSON.stringify(JSON.parse(responseData), null, 2);
  } catch (e) {
    formattedResponse = responseData;
  }
  return /* @__PURE__ */ import_react5.default.createElement(import_flipper_plugin4.Layout.Container, { gap: true }, /* @__PURE__ */ import_react5.default.createElement(import_flipper_plugin4.Layout.Horizontal, { gap: true }, /* @__PURE__ */ import_react5.default.createElement(
    import_antd2.Select,
    {
      value: requestMethod,
      options: httpMethods,
      onChange: (text) => networkRouteManager.modifyRoute(id, { requestMethod: text })
    }
  ), /* @__PURE__ */ import_react5.default.createElement(
    import_antd2.Input,
    {
      type: "text",
      placeholder: "URL",
      value: requestUrl,
      onChange: (event) => networkRouteManager.modifyRoute(id, {
        requestUrl: event.target.value
      }),
      style: { flex: 1 }
    }
  ), /* @__PURE__ */ import_react5.default.createElement(
    import_antd2.Input,
    {
      type: "text",
      placeholder: "STATUS",
      value: responseStatus,
      onChange: (event) => networkRouteManager.modifyRoute(id, {
        responseStatus: event.target.value
      }),
      style: { width: 100 }
    }
  )), isDuplicated && /* @__PURE__ */ import_react5.default.createElement(import_flipper_plugin4.Layout.Horizontal, { gap: true }, /* @__PURE__ */ import_react5.default.createElement(import_icons2.WarningOutlined, null), "Route is duplicated (Same URL and Method)"), /* @__PURE__ */ import_react5.default.createElement(import_flipper_plugin4.Layout.Container, { height: 500 }, /* @__PURE__ */ import_react5.default.createElement(import_flipper_plugin4.Tabs, { grow: true }, /* @__PURE__ */ import_react5.default.createElement(import_flipper_plugin4.Tab, { tab: "Data" }, /* @__PURE__ */ import_react5.default.createElement(
    import_antd2.Input.TextArea,
    {
      wrap: "soft",
      autoComplete: "off",
      spellCheck: false,
      value: formattedResponse,
      onChange: (event) => networkRouteManager.modifyRoute(id, {
        responseData: event.target.value
      }),
      style: { flex: 1 }
    }
  )), /* @__PURE__ */ import_react5.default.createElement(import_flipper_plugin4.Tab, { tab: "Headers" }, /* @__PURE__ */ import_react5.default.createElement(import_flipper_plugin4.Layout.Top, { gap: true }, /* @__PURE__ */ import_react5.default.createElement(import_flipper_plugin4.Layout.Horizontal, null, /* @__PURE__ */ import_react5.default.createElement(
    import_antd2.Button,
    {
      onClick: () => {
        const newHeaders = {
          ...route.responseHeaders,
          [nextHeaderId.toString()]: { key: "", value: "" }
        };
        setNextHeaderId(nextHeaderId + 1);
        networkRouteManager.modifyRoute(id, {
          responseHeaders: newHeaders
        });
      }
    },
    "Add Header"
  )), /* @__PURE__ */ import_react5.default.createElement(import_flipper_plugin4.Layout.ScrollContainer, null, /* @__PURE__ */ import_react5.default.createElement(
    ResponseHeaders,
    {
      routeId: id,
      route,
      networkRouteManager
    }
  )))))));
}

// plugins/public/network/request-mocking/ManageMockResponsePanel.tsx
var import_antd3 = require("antd");
var import_flipper_plugin5 = require("flipper-plugin");
var import_icons3 = require("@ant-design/icons");
var { Text: Text2 } = import_antd3.Typography;
function _duplicateIds(routes) {
  const idSet = {};
  return Object.entries(routes).reduce((acc, [id, route]) => {
    if (idSet.hasOwnProperty(route.requestUrl)) {
      if (idSet[route.requestUrl].hasOwnProperty(route.requestMethod)) {
        return acc.concat(id);
      }
      idSet[route.requestUrl] = {
        ...idSet[route.requestUrl],
        [route.requestMethod]: true
      };
      return acc;
    } else {
      idSet[route.requestUrl] = { [route.requestMethod]: true };
      return acc;
    }
  }, []);
}
function ManageMockResponsePanel(props) {
  const networkRouteManager = (0, import_react6.useContext)(NetworkRouteContext);
  const [selectedIdAtom] = (0, import_react6.useState)(() => (0, import_flipper_plugin5.createState)());
  const selectedId = (0, import_flipper_plugin5.useValue)(selectedIdAtom);
  (0, import_react6.useEffect)(() => {
    selectedIdAtom.update((selectedId2) => {
      const keys = Object.keys(props.routes);
      let returnValue = void 0;
      if (selectedId2 === void 0) {
        if (keys.length === 0) {
          returnValue = void 0;
        } else {
          returnValue = keys[0];
        }
      } else {
        if (keys.includes(selectedId2)) {
          returnValue = selectedId2;
        } else {
          returnValue = keys[0];
        }
      }
      return returnValue;
    });
  }, [props.routes, selectedIdAtom]);
  const duplicatedIds = (0, import_react6.useMemo)(
    () => _duplicateIds(props.routes),
    [props.routes]
  );
  const items = Object.entries(props.routes).map(
    ([id, route]) => ({
      id,
      route,
      title: route.requestUrl,
      isDuplicate: duplicatedIds.includes(id)
    })
  );
  const handleDelete = (0, import_react6.useCallback)(
    (id) => {
      import_antd3.Modal.confirm({
        title: "Are you sure you want to delete this item?",
        icon: "",
        onOk() {
          networkRouteManager.removeRoute(id);
          selectedIdAtom.set(void 0);
        },
        onCancel() {
        }
      });
    },
    [networkRouteManager, selectedIdAtom]
  );
  const handleToggle = (0, import_react6.useCallback)(
    (id) => {
      networkRouteManager.enableRoute(id);
    },
    [networkRouteManager]
  );
  const handleRender = (0, import_react6.useCallback)(
    (item) => /* @__PURE__ */ import_react6.default.createElement(RouteEntry, { item, onDelete: handleDelete, onToggle: handleToggle }),
    [handleDelete, handleToggle]
  );
  const handleSelect = (0, import_react6.useCallback)(
    (id) => {
      if (id) {
        selectedIdAtom.set(id);
      }
    },
    [selectedIdAtom]
  );
  return /* @__PURE__ */ import_react6.default.createElement(import_flipper_plugin5.Layout.Left, { resizable: true, style: { minHeight: 400 } }, /* @__PURE__ */ import_react6.default.createElement(import_flipper_plugin5.Layout.Top, null, /* @__PURE__ */ import_react6.default.createElement(import_flipper_plugin5.Toolbar, null, /* @__PURE__ */ import_react6.default.createElement(
    import_antd3.Button,
    {
      onClick: () => {
        const newId = networkRouteManager.addRoute();
        selectedIdAtom.set(newId);
      }
    },
    "Add Route"
  ), /* @__PURE__ */ import_react6.default.createElement(
    import_flipper_plugin5.NUX,
    {
      title: "It is now possible to select calls from the network call list and convert them into mock routes.",
      placement: "bottom"
    },
    /* @__PURE__ */ import_react6.default.createElement(
      import_antd3.Button,
      {
        onClick: () => {
          networkRouteManager.copySelectedCalls();
        }
      },
      "Copy Selected Calls"
    )
  ), /* @__PURE__ */ import_react6.default.createElement(import_antd3.Button, { onClick: networkRouteManager.importRoutes }, "Import"), /* @__PURE__ */ import_react6.default.createElement(import_antd3.Button, { onClick: networkRouteManager.exportRoutes }, "Export"), /* @__PURE__ */ import_react6.default.createElement(import_antd3.Button, { onClick: networkRouteManager.clearRoutes }, "Clear")), /* @__PURE__ */ import_react6.default.createElement(
    import_flipper_plugin5.DataList,
    {
      items,
      selection: selectedId,
      onRenderItem: handleRender,
      onSelect: handleSelect,
      scrollable: true
    }
  )), /* @__PURE__ */ import_react6.default.createElement(import_flipper_plugin5.Layout.Container, { gap: true, pad: true }, selectedId && props.routes.hasOwnProperty(selectedId) && /* @__PURE__ */ import_react6.default.createElement(
    MockResponseDetails,
    {
      id: selectedId,
      route: props.routes[selectedId],
      isDuplicated: duplicatedIds.includes(selectedId)
    }
  )));
}
var RouteEntry = ({
  item,
  onToggle,
  onDelete
}) => {
  const tip = item.route.enabled ? "Un-check to disable mock route" : "Check to enable mock route";
  return /* @__PURE__ */ import_react6.default.createElement(import_flipper_plugin5.Layout.Horizontal, { gap: true, center: true }, /* @__PURE__ */ import_react6.default.createElement(import_antd3.Tooltip, { title: tip, mouseEnterDelay: 1.1 }, /* @__PURE__ */ import_react6.default.createElement(
    import_antd3.Checkbox,
    {
      onClick: () => onToggle(item.id),
      checked: item.route.enabled
    }
  )), item.route.requestUrl.length === 0 ? /* @__PURE__ */ import_react6.default.createElement(Text2, { ellipsis: true }, "untitled") : /* @__PURE__ */ import_react6.default.createElement(Text2, { ellipsis: true }, item.route.requestUrl), /* @__PURE__ */ import_react6.default.createElement(import_antd3.Tooltip, { title: "Click to delete mock route", mouseEnterDelay: 1.1 }, /* @__PURE__ */ import_react6.default.createElement(import_flipper_plugin5.Layout.Horizontal, { onClick: () => onDelete(item.id) }, /* @__PURE__ */ import_react6.default.createElement(import_icons3.CloseCircleOutlined, null))), item.isDuplicate && /* @__PURE__ */ import_react6.default.createElement(import_icons3.WarningOutlined, null));
};

// plugins/public/network/index.tsx
var LOCALSTORAGE_MOCK_ROUTE_LIST_KEY = "__NETWORK_CACHED_MOCK_ROUTE_LIST";
var LOCALSTORAGE_RESPONSE_BODY_FORMAT_KEY = "__NETWORK_CACHED_RESPONSE_BODY_FORMAT";
var BodyOptions = ["formatted", "parsed"].map((value) => ({
  label: value,
  value
}));
function plugin(client) {
  const networkRouteManager = (0, import_flipper_plugin6.createState)(
    nullNetworkRouteManager
  );
  const routes = (0, import_flipper_plugin6.createState)({});
  const nextRouteId = (0, import_flipper_plugin6.createState)(0);
  const isMockResponseSupported = (0, import_flipper_plugin6.createState)(false);
  const showMockResponseDialog = (0, import_flipper_plugin6.createState)(false);
  const detailBodyFormat = (0, import_flipper_plugin6.createState)(
    localStorage.getItem(LOCALSTORAGE_RESPONSE_BODY_FORMAT_KEY) || "parsed"
  );
  const requests = (0, import_flipper_plugin6.createDataSource)([], {
    key: "id",
    indices: [["method"], ["status"]]
  });
  const selectedId = (0, import_flipper_plugin6.createState)(void 0);
  const tableManagerRef = (0, import_react7.createRef)();
  const partialResponses = (0, import_flipper_plugin6.createState)({});
  const customColumns = (0, import_flipper_plugin6.createState)([], {
    persist: "customColumns",
    persistToLocalStorage: true
  });
  const columns2 = (0, import_flipper_plugin6.createState)(baseColumns);
  client.onDeepLink((payload) => {
    const searchTermDelim = "searchTerm=";
    if (typeof payload !== "string") {
      return;
    } else if (payload.startsWith(searchTermDelim)) {
      tableManagerRef.current?.clearSelection();
      tableManagerRef.current?.setSearchExpression([
        {
          field: { label: "Row", key: "entireRow", useWholeRow: true },
          operator: import_flipper_plugin6.dataTablePowerSearchOperators.searializable_object_contains(),
          searchValue: payload.slice(searchTermDelim.length)
        }
      ]);
    } else {
      tableManagerRef.current?.setSearchExpression([]);
      tableManagerRef.current?.selectItemById(payload);
    }
  });
  client.addMenuEntry({
    action: "clear",
    handler: clearLogs,
    accelerator: "ctrl+l"
  });
  client.onConnect(() => {
    init();
  });
  client.onMessage("newRequest", (data) => {
    if (requests.has(data.id)) {
      console.warn(`Ignoring duplicate request with id ${data.id}:`, data);
    } else {
      requests.append(createRequestFromRequestInfo(data, customColumns.get()));
    }
  });
  function storeResponse(response) {
    const request = requests.getById(response.id);
    if (!request) {
      return;
    }
    requests.upsert(
      updateRequestWithResponseInfo(request, response, customColumns.get())
    );
  }
  client.onMessage("newResponse", (data) => {
    storeResponse(data);
  });
  client.onMessage("addProtobufDefinitions", (data) => {
    const repository = ProtobufDefinitionsRepository.getInstance();
    for (const [baseUrl, definitions] of Object.entries(data)) {
      repository.addDefinitions(baseUrl, definitions);
    }
  });
  client.onMessage("partialResponse", (data) => {
    const message2 = data;
    partialResponses.update((draft) => {
      if (!draft[message2.id]) {
        draft[message2.id] = {
          followupChunks: {}
        };
      }
      const entry = draft[message2.id];
      if (message2.index !== void 0 && message2.index > 0) {
        const chunk = message2;
        entry.followupChunks[chunk.index] = chunk.data;
      } else {
        entry.initialResponse = message2;
      }
    });
    const response = assembleChunksIfResponseIsComplete(
      partialResponses.get()[message2.id]
    );
    if (response) {
      storeResponse(response);
      partialResponses.update((draft) => {
        delete draft[response.id];
      });
    }
  });
  async function supportsMocks(device) {
    if (device.isArchived) {
      return isMockResponseSupported.get();
    } else {
      return client.supportsMethod("mockResponses");
    }
  }
  function init() {
    supportsMocks(client.device).then((result) => {
      const newRouteArray = JSON.parse(
        localStorage.getItem(
          LOCALSTORAGE_MOCK_ROUTE_LIST_KEY + client.appId
        ) || "[]"
      );
      const newRoutes = {};
      newRouteArray.forEach((value, index) => {
        newRoutes[index.toString()] = value;
      });
      (0, import_flipper_plugin6.batch)(() => {
        routes.set(newRoutes);
        isMockResponseSupported.set(result);
        showMockResponseDialog.set(false);
        nextRouteId.set(Object.keys(routes.get()).length);
      });
      informClientMockChange(routes.get());
    }).catch((e) => {
      if (client.device.connected.get()) {
        console.error("[network] Failed to init mocks:", e);
      }
    });
    networkRouteManager.set(
      createNetworkManager(
        nextRouteId,
        routes,
        informClientMockChange,
        tableManagerRef
      )
    );
  }
  function clearLogs() {
    requests.clear();
  }
  async function informClientMockChange(routes2) {
    const filteredRoutes = computeMockRoutes(routes2);
    if (isMockResponseSupported.get()) {
      const routesValuesArray = Object.values(filteredRoutes);
      localStorage.setItem(
        LOCALSTORAGE_MOCK_ROUTE_LIST_KEY + client.appId,
        JSON.stringify(routesValuesArray)
      );
      if (!client.device.isArchived) {
        try {
          await client.send("mockResponses", {
            routes: routesValuesArray.filter((e) => e.enabled).map((route) => ({
              requestUrl: route.requestUrl,
              method: route.requestMethod,
              data: route.responseData,
              headers: [...Object.values(route.responseHeaders)],
              status: route.responseStatus,
              enabled: route.enabled
            }))
          });
        } catch (e) {
          console.error("Failed to mock responses.", e);
        }
      }
    }
  }
  function addCustomColumn(column) {
    if (customColumns.get().find((c) => c.header === column.header && c.type === column.type)) {
      return;
    }
    customColumns.update((d) => {
      d.push(column);
    });
    addDataTableColumnConfig(column);
    for (let i = 0; i < requests.size; i++) {
      const request = requests.get(i);
      requests.update(i, {
        ...request,
        [`${column.type}_header_${column.header}`]: getHeaderValue(
          column.type === "request" ? request.requestHeaders : request.responseHeaders,
          column.header
        )
      });
    }
  }
  function addDataTableColumnConfig(column) {
    columns2.update((d) => {
      d.push({
        key: `${column.type}_header_${column.header}`,
        width: 200,
        title: `${column.header} (${column.type})`
      });
    });
  }
  client.onReady(() => {
    customColumns.get().forEach(addDataTableColumnConfig);
  });
  client.onExport(async (idler, onStatusMessage) => {
    const serializedRequests = [];
    for (let i = 0; i < requests.size; i++) {
      const request = requests.get(i);
      serializedRequests.push({
        ...request,
        requestTime: request.requestTime.getTime(),
        responseTime: request.responseTime?.getTime(),
        requestData: request.requestData instanceof Uint8Array ? [gBase64.fromUint8Array(request.requestData)] : request.requestData,
        responseData: request.responseData instanceof Uint8Array ? [gBase64.fromUint8Array(request.responseData)] : request.responseData
      });
      if (idler.isCancelled()) {
        return;
      }
      if (idler.shouldIdle()) {
        onStatusMessage(`Serializing request ${i + 1}/${requests.size}`);
        await idler.idle();
      }
    }
    return {
      isMockResponseSupported: isMockResponseSupported.get(),
      selectedId: selectedId.get(),
      requests2: serializedRequests,
      customColumns: customColumns.get()
    };
  });
  client.onImport((data) => {
    selectedId.set(data.selectedId);
    isMockResponseSupported.set(data.isMockResponseSupported);
    customColumns.set(data.customColumns);
    data.requests2.forEach((request) => {
      requests.append({
        ...request,
        requestTime: new Date(request.requestTime),
        responseTime: request.responseTime != null ? new Date(request.responseTime) : void 0,
        requestData: Array.isArray(request.requestData) ? gBase64.toUint8Array(request.requestData[0]) : request.requestData,
        responseData: Array.isArray(request.responseData) ? gBase64.toUint8Array(request.responseData[0]) : request.responseData
      });
    });
  });
  return {
    columns: columns2,
    routes,
    nextRouteId,
    isMockResponseSupported,
    showMockResponseDialog,
    detailBodyFormat,
    requests,
    partialResponses,
    networkRouteManager,
    clearLogs,
    onMockButtonPressed() {
      showMockResponseDialog.set(true);
    },
    onCloseButtonPressed() {
      showMockResponseDialog.set(false);
    },
    onSelectFormat(bodyFormat) {
      detailBodyFormat.set(bodyFormat);
      localStorage.setItem(LOCALSTORAGE_RESPONSE_BODY_FORMAT_KEY, bodyFormat);
    },
    selectedId,
    onSelect(request) {
      selectedId.set(request?.id);
    },
    init,
    tableManagerRef,
    onContextMenu(request) {
      return /* @__PURE__ */ import_react7.default.createElement(import_react7.default.Fragment, null, /* @__PURE__ */ import_react7.default.createElement(
        import_antd4.Menu.Item,
        {
          key: "curl",
          onClick: () => {
            if (!request) {
              return;
            }
            const command = convertRequestToCurlCommand(request);
            client.writeTextToClipboard(command);
          }
        },
        "Copy cURL command"
      ), /* @__PURE__ */ import_react7.default.createElement(
        import_antd4.Menu.Item,
        {
          key: "custom header",
          onClick: () => {
            showCustomColumnDialog(addCustomColumn);
          }
        },
        "Add header column",
        "\u2026"
      ));
    },
    onCopyText(text) {
      client.writeTextToClipboard(text);
      import_antd4.message.success("Text copied to clipboard");
    },
    addCustomColumn
  };
}
function showCustomColumnDialog(addCustomColumn) {
  function CustomColumnDialog({ unmount }) {
    const [form] = import_antd4.Form.useForm();
    return /* @__PURE__ */ import_react7.default.createElement(
      import_antd4.Modal,
      {
        title: "Add custom column",
        open: true,
        onOk: () => {
          const header = form.getFieldValue("header");
          const type = form.getFieldValue("type");
          if (header && type) {
            addCustomColumn({
              header,
              type
            });
            unmount();
          }
        },
        onCancel: unmount
      },
      /* @__PURE__ */ import_react7.default.createElement(
        import_antd4.Form,
        {
          layout: "vertical",
          form,
          initialValues: {
            type: "response",
            header: ""
          }
        },
        /* @__PURE__ */ import_react7.default.createElement(import_antd4.Form.Item, { label: "Header name", name: "header" }, /* @__PURE__ */ import_react7.default.createElement(import_antd4.Input, { placeholder: "Header name" })),
        /* @__PURE__ */ import_react7.default.createElement(import_antd4.Form.Item, { label: "Header type", name: "type" }, /* @__PURE__ */ import_react7.default.createElement(import_antd4.Radio.Group, null, /* @__PURE__ */ import_react7.default.createElement(import_antd4.Radio, { value: "request" }, "Request"), /* @__PURE__ */ import_react7.default.createElement(import_antd4.Radio, { value: "response" }, "Response")))
      )
    );
  }
  (0, import_flipper_plugin6.renderReactRoot)((unmount) => /* @__PURE__ */ import_react7.default.createElement(CustomColumnDialog, { unmount }));
}
function createRequestFromRequestInfo(data, customColumns) {
  let url = void 0;
  try {
    url = data.url ? new URL(data.url) : void 0;
  } catch (e) {
    console.warn(`Failed to parse url: '${data.url}'`, e);
  }
  const domain = getHeaderValue(data.headers, "X-FB-Friendly-Name") || (url ? url.pathname ? url.host + url.pathname : url.host : "<unknown>");
  const res = {
    id: data.id,
    requestTime: new Date(data.timestamp),
    method: data.method,
    url: data.url ?? "",
    domain,
    requestHeaders: data.headers,
    requestData: decodeBody(data.headers, data.data),
    status: "..."
  };
  customColumns.filter((c) => c.type === "request").forEach(({ header }) => {
    res[`request_header_${header}`] = getHeaderValue(
      data.headers,
      header
    );
  });
  return res;
}
function updateRequestWithResponseInfo(request, response, customColumns) {
  const res = {
    ...request,
    responseTime: new Date(response.timestamp),
    status: response.status.toString(),
    reason: response.reason,
    responseHeaders: response.headers,
    responseData: decodeBody(response.headers, response.data),
    responseIsMock: response.isMock,
    responseLength: getResponseLength(response),
    requestLength: getRequestLength(request),
    duration: response.timestamp - request.requestTime.getTime(),
    insights: response.insights ?? void 0
  };
  customColumns.filter((c) => c.type === "response").forEach(({ header }) => {
    res[`response_header_${header}`] = getHeaderValue(
      response.headers,
      header
    );
  });
  return res;
}
function Component2() {
  const instance = (0, import_flipper_plugin6.usePlugin)(plugin);
  const routes = (0, import_flipper_plugin6.useValue)(instance.routes);
  const isMockResponseSupported = (0, import_flipper_plugin6.useValue)(instance.isMockResponseSupported);
  const showMockResponseDialog = (0, import_flipper_plugin6.useValue)(instance.showMockResponseDialog);
  const networkRouteManager = (0, import_flipper_plugin6.useValue)(instance.networkRouteManager);
  const columns2 = (0, import_flipper_plugin6.useValue)(instance.columns);
  return /* @__PURE__ */ import_react7.default.createElement(NetworkRouteContext.Provider, { value: networkRouteManager }, /* @__PURE__ */ import_react7.default.createElement(
    import_flipper_plugin6.Layout.Container,
    {
      grow: true,
      key: columns2.length
    },
    /* @__PURE__ */ import_react7.default.createElement(
      import_flipper_plugin6.DataTable,
      {
        columns: columns2,
        dataSource: instance.requests,
        onRowStyle: getRowStyle,
        tableManagerRef: instance.tableManagerRef,
        onSelect: instance.onSelect,
        onCopyRows: requestsToText,
        onContextMenu: instance.onContextMenu,
        enableAutoScroll: true,
        extraActions: /* @__PURE__ */ import_react7.default.createElement(import_flipper_plugin6.Layout.Horizontal, { gap: true }, /* @__PURE__ */ import_react7.default.createElement(import_antd4.Button, { title: "Clear logs", onClick: instance.clearLogs }, /* @__PURE__ */ import_react7.default.createElement(import_icons4.DeleteOutlined, null)), isMockResponseSupported && /* @__PURE__ */ import_react7.default.createElement(import_antd4.Button, { onClick: instance.onMockButtonPressed }, "Mock"))
      }
    ),
    /* @__PURE__ */ import_react7.default.createElement(
      import_antd4.Modal,
      {
        open: showMockResponseDialog,
        onCancel: instance.onCloseButtonPressed,
        footer: null,
        title: "Mock Network Responses",
        width: 1200
      },
      /* @__PURE__ */ import_react7.default.createElement(ManageMockResponsePanel, { routes })
    ),
    /* @__PURE__ */ import_react7.default.createElement(import_flipper_plugin6.DetailSidebar, { width: 400 }, /* @__PURE__ */ import_react7.default.createElement(Sidebar, null))
  ));
}
function Sidebar() {
  const instance = (0, import_flipper_plugin6.usePlugin)(plugin);
  const selectedId = (0, import_flipper_plugin6.useValue)(instance.selectedId);
  const detailBodyFormat = (0, import_flipper_plugin6.useValue)(instance.detailBodyFormat);
  const request = instance.requests.getById(selectedId);
  if (!request) {
    return /* @__PURE__ */ import_react7.default.createElement(import_flipper_plugin6.Layout.Container, { pad: true, grow: true, center: true }, /* @__PURE__ */ import_react7.default.createElement(import_antd4.Typography.Text, { type: "secondary" }, "No request selected"));
  }
  return /* @__PURE__ */ import_react7.default.createElement(
    RequestDetails,
    {
      key: selectedId,
      request,
      bodyFormat: detailBodyFormat,
      onSelectFormat: instance.onSelectFormat,
      onCopyText: instance.onCopyText
    }
  );
}
var baseColumns = [
  {
    key: "requestTime",
    title: "Request Time",
    width: 120,
    powerSearchConfig: { type: "dateTime" }
  },
  {
    key: "responseTime",
    title: "Response Time",
    width: 120,
    visible: false,
    powerSearchConfig: { type: "dateTime" }
  },
  {
    key: "requestData",
    title: "GraphQL operation name",
    width: 120,
    visible: false,
    formatters: formatOperationName,
    powerSearchConfig: { type: "object" }
  },
  {
    key: "domain",
    powerSearchConfig: { type: "string" }
  },
  {
    key: "url",
    title: "Full URL",
    visible: false,
    powerSearchConfig: { type: "string" }
  },
  {
    key: "method",
    title: "Method",
    width: 70,
    powerSearchConfig: {
      type: "enum",
      inferEnumOptionsFromData: true
    }
  },
  {
    key: "status",
    title: "Status",
    width: 70,
    align: "right",
    powerSearchConfig: {
      type: "enum",
      inferEnumOptionsFromData: true
    }
  },
  {
    key: "requestLength",
    title: "Request Size",
    width: 100,
    formatters: formatBytes,
    align: "right",
    powerSearchConfig: { type: "float" }
  },
  {
    key: "responseLength",
    title: "Response Size",
    width: 100,
    formatters: formatBytes,
    align: "right",
    powerSearchConfig: { type: "float" }
  },
  {
    key: "duration",
    title: "Time",
    width: 100,
    formatters: formatDuration,
    align: "right",
    powerSearchConfig: { type: "float" }
  }
];
var mockingStyle = {
  color: import_flipper_plugin6.theme.warningColor
};
var errorStyle = {
  color: import_flipper_plugin6.theme.errorColor
};
function getRowStyle(row) {
  return row.responseIsMock ? mockingStyle : row.status && row.status !== "..." && parseInt(row.status, 10) >= 400 && parseInt(row.status, 10) < 600 ? errorStyle : void 0;
}
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/*!
 * repeat-string <https://github.com/jonschlinkert/repeat-string>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
/*! pako 2.0.3 https://github.com/nodeca/pako @license (MIT AND Zlib) */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vbm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL2FzcHJvbWlzZS9pbmRleC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvYmFzZTY0L2luZGV4LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy9ldmVudGVtaXR0ZXIvaW5kZXguanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL2Zsb2F0L2luZGV4LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy9pbnF1aXJlL2luZGV4LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy91dGY4L2luZGV4LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy9wb29sL2luZGV4LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy91dGlsL2xvbmdiaXRzLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy91dGlsL21pbmltYWwuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3dyaXRlci5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvd3JpdGVyX2J1ZmZlci5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcmVhZGVyLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9yZWFkZXJfYnVmZmVyLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9ycGMvc2VydmljZS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcnBjLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9yb290cy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvaW5kZXgtbWluaW1hbC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvY29kZWdlbi9pbmRleC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvZmV0Y2gvaW5kZXguanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL3BhdGgvaW5kZXguanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3R5cGVzLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9maWVsZC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvbmFtZXNwYWNlLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9vbmVvZi5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvbWFwZmllbGQuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL21ldGhvZC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvc2VydmljZS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvbWVzc2FnZS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvZGVjb2Rlci5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvdmVyaWZpZXIuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL2NvbnZlcnRlci5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvd3JhcHBlcnMuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3R5cGUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3Jvb3QuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3V0aWwuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL29iamVjdC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvZW51bS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvZW5jb2Rlci5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvaW5kZXgtbGlnaHQuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3Rva2VuaXplLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9wYXJzZS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvY29tbW9uLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9pbmRleC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9pbmRleC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL2Jyb3RsaS9kZWMvc3RyZWFtcy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvYnJvdGxpL2RlYy9iaXRfcmVhZGVyLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9icm90bGkvZGVjL2RpY3Rpb25hcnkuYmluLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9icm90bGkvZGVjL2RpY3Rpb25hcnktYnJvd3Nlci5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvYnJvdGxpL2RlYy9kaWN0aW9uYXJ5LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9icm90bGkvZGVjL2h1ZmZtYW4uanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL2Jyb3RsaS9kZWMvY29udGV4dC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvYnJvdGxpL2RlYy9wcmVmaXguanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL2Jyb3RsaS9kZWMvdHJhbnNmb3JtLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9icm90bGkvZGVjL2RlY29kZS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvYnJvdGxpL2RlY29tcHJlc3MuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3JlcGVhdC1zdHJpbmcvaW5kZXguanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3htbC1iZWF1dGlmaWVyL2Rpc3QvaW5kZXguanMiLCAiLi4vaW5kZXgudHN4IiwgIi4uL1Byb3RvYnVmRGVmaW5pdGlvbnNSZXBvc2l0b3J5LnRzeCIsICIuLi91dGlscy50c3giLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3Bha28vZGlzdC9wYWtvLmVzbS5tanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL2pzLWJhc2U2NC9iYXNlNjQubWpzIiwgIi4uL1JlcXVlc3REZXRhaWxzLnRzeCIsICIuLi9LZXlWYWx1ZVRhYmxlLnRzeCIsICIuLi9jaHVua3MudHN4IiwgIi4uL3JlcXVlc3QtbW9ja2luZy9NYW5hZ2VNb2NrUmVzcG9uc2VQYW5lbC50c3giLCAiLi4vcmVxdWVzdC1tb2NraW5nL01vY2tSZXNwb25zZURldGFpbHMudHN4IiwgIi4uL3JlcXVlc3QtbW9ja2luZy9OZXR3b3JrUm91dGVNYW5hZ2VyLnRzeCJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gYXNQcm9taXNlO1xyXG5cclxuLyoqXHJcbiAqIENhbGxiYWNrIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwuYXNQcm9taXNlfS5cclxuICogQHR5cGVkZWYgYXNQcm9taXNlQ2FsbGJhY2tcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge0Vycm9yfG51bGx9IGVycm9yIEVycm9yLCBpZiBhbnlcclxuICogQHBhcmFtIHsuLi4qfSBwYXJhbXMgQWRkaXRpb25hbCBhcmd1bWVudHNcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHByb21pc2UgZnJvbSBhIG5vZGUtc3R5bGUgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBwYXJhbSB7YXNQcm9taXNlQ2FsbGJhY2t9IGZuIEZ1bmN0aW9uIHRvIGNhbGxcclxuICogQHBhcmFtIHsqfSBjdHggRnVuY3Rpb24gY29udGV4dFxyXG4gKiBAcGFyYW0gey4uLip9IHBhcmFtcyBGdW5jdGlvbiBhcmd1bWVudHNcclxuICogQHJldHVybnMge1Byb21pc2U8Kj59IFByb21pc2lmaWVkIGZ1bmN0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiBhc1Byb21pc2UoZm4sIGN0eC8qLCB2YXJhcmdzICovKSB7XHJcbiAgICB2YXIgcGFyYW1zICA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSksXHJcbiAgICAgICAgb2Zmc2V0ICA9IDAsXHJcbiAgICAgICAgaW5kZXggICA9IDIsXHJcbiAgICAgICAgcGVuZGluZyA9IHRydWU7XHJcbiAgICB3aGlsZSAoaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoKVxyXG4gICAgICAgIHBhcmFtc1tvZmZzZXQrK10gPSBhcmd1bWVudHNbaW5kZXgrK107XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgcGFyYW1zW29mZnNldF0gPSBmdW5jdGlvbiBjYWxsYmFjayhlcnIvKiwgdmFyYXJncyAqLykge1xyXG4gICAgICAgICAgICBpZiAocGVuZGluZykge1xyXG4gICAgICAgICAgICAgICAgcGVuZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChvZmZzZXQgPCBwYXJhbXMubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXNbb2Zmc2V0KytdID0gYXJndW1lbnRzW29mZnNldF07XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZS5hcHBseShudWxsLCBwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmbi5hcHBseShjdHggfHwgbnVsbCwgcGFyYW1zKTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgaWYgKHBlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHBlbmRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuIiwgIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLyoqXHJcbiAqIEEgbWluaW1hbCBiYXNlNjQgaW1wbGVtZW50YXRpb24gZm9yIG51bWJlciBhcnJheXMuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBuYW1lc3BhY2VcclxuICovXHJcbnZhciBiYXNlNjQgPSBleHBvcnRzO1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGJ5dGUgbGVuZ3RoIG9mIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIEJhc2U2NCBlbmNvZGVkIHN0cmluZ1xyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBCeXRlIGxlbmd0aFxyXG4gKi9cclxuYmFzZTY0Lmxlbmd0aCA9IGZ1bmN0aW9uIGxlbmd0aChzdHJpbmcpIHtcclxuICAgIHZhciBwID0gc3RyaW5nLmxlbmd0aDtcclxuICAgIGlmICghcClcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIHZhciBuID0gMDtcclxuICAgIHdoaWxlICgtLXAgJSA0ID4gMSAmJiBzdHJpbmcuY2hhckF0KHApID09PSBcIj1cIilcclxuICAgICAgICArK247XHJcbiAgICByZXR1cm4gTWF0aC5jZWlsKHN0cmluZy5sZW5ndGggKiAzKSAvIDQgLSBuO1xyXG59O1xyXG5cclxuLy8gQmFzZTY0IGVuY29kaW5nIHRhYmxlXHJcbnZhciBiNjQgPSBuZXcgQXJyYXkoNjQpO1xyXG5cclxuLy8gQmFzZTY0IGRlY29kaW5nIHRhYmxlXHJcbnZhciBzNjQgPSBuZXcgQXJyYXkoMTIzKTtcclxuXHJcbi8vIDY1Li45MCwgOTcuLjEyMiwgNDguLjU3LCA0MywgNDdcclxuZm9yICh2YXIgaSA9IDA7IGkgPCA2NDspXHJcbiAgICBzNjRbYjY0W2ldID0gaSA8IDI2ID8gaSArIDY1IDogaSA8IDUyID8gaSArIDcxIDogaSA8IDYyID8gaSAtIDQgOiBpIC0gNTkgfCA0M10gPSBpKys7XHJcblxyXG4vKipcclxuICogRW5jb2RlcyBhIGJ1ZmZlciB0byBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cclxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZmZXIgU291cmNlIGJ1ZmZlclxyXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgU291cmNlIHN0YXJ0XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgU291cmNlIGVuZFxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBCYXNlNjQgZW5jb2RlZCBzdHJpbmdcclxuICovXHJcbmJhc2U2NC5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoYnVmZmVyLCBzdGFydCwgZW5kKSB7XHJcbiAgICB2YXIgcGFydHMgPSBudWxsLFxyXG4gICAgICAgIGNodW5rID0gW107XHJcbiAgICB2YXIgaSA9IDAsIC8vIG91dHB1dCBpbmRleFxyXG4gICAgICAgIGogPSAwLCAvLyBnb3RvIGluZGV4XHJcbiAgICAgICAgdDsgICAgIC8vIHRlbXBvcmFyeVxyXG4gICAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XHJcbiAgICAgICAgdmFyIGIgPSBidWZmZXJbc3RhcnQrK107XHJcbiAgICAgICAgc3dpdGNoIChqKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIGNodW5rW2krK10gPSBiNjRbYiA+PiAyXTtcclxuICAgICAgICAgICAgICAgIHQgPSAoYiAmIDMpIDw8IDQ7XHJcbiAgICAgICAgICAgICAgICBqID0gMTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICBjaHVua1tpKytdID0gYjY0W3QgfCBiID4+IDRdO1xyXG4gICAgICAgICAgICAgICAgdCA9IChiICYgMTUpIDw8IDI7XHJcbiAgICAgICAgICAgICAgICBqID0gMjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICBjaHVua1tpKytdID0gYjY0W3QgfCBiID4+IDZdO1xyXG4gICAgICAgICAgICAgICAgY2h1bmtbaSsrXSA9IGI2NFtiICYgNjNdO1xyXG4gICAgICAgICAgICAgICAgaiA9IDA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGkgPiA4MTkxKSB7XHJcbiAgICAgICAgICAgIChwYXJ0cyB8fCAocGFydHMgPSBbXSkpLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNodW5rKSk7XHJcbiAgICAgICAgICAgIGkgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChqKSB7XHJcbiAgICAgICAgY2h1bmtbaSsrXSA9IGI2NFt0XTtcclxuICAgICAgICBjaHVua1tpKytdID0gNjE7XHJcbiAgICAgICAgaWYgKGogPT09IDEpXHJcbiAgICAgICAgICAgIGNodW5rW2krK10gPSA2MTtcclxuICAgIH1cclxuICAgIGlmIChwYXJ0cykge1xyXG4gICAgICAgIGlmIChpKVxyXG4gICAgICAgICAgICBwYXJ0cy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjaHVuay5zbGljZSgwLCBpKSkpO1xyXG4gICAgICAgIHJldHVybiBwYXJ0cy5qb2luKFwiXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjaHVuay5zbGljZSgwLCBpKSk7XHJcbn07XHJcblxyXG52YXIgaW52YWxpZEVuY29kaW5nID0gXCJpbnZhbGlkIGVuY29kaW5nXCI7XHJcblxyXG4vKipcclxuICogRGVjb2RlcyBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZyB0byBhIGJ1ZmZlci5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTb3VyY2Ugc3RyaW5nXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmZmVyIERlc3RpbmF0aW9uIGJ1ZmZlclxyXG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IERlc3RpbmF0aW9uIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBOdW1iZXIgb2YgYnl0ZXMgd3JpdHRlblxyXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgZW5jb2RpbmcgaXMgaW52YWxpZFxyXG4gKi9cclxuYmFzZTY0LmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShzdHJpbmcsIGJ1ZmZlciwgb2Zmc2V0KSB7XHJcbiAgICB2YXIgc3RhcnQgPSBvZmZzZXQ7XHJcbiAgICB2YXIgaiA9IDAsIC8vIGdvdG8gaW5kZXhcclxuICAgICAgICB0OyAgICAgLy8gdGVtcG9yYXJ5XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7KSB7XHJcbiAgICAgICAgdmFyIGMgPSBzdHJpbmcuY2hhckNvZGVBdChpKyspO1xyXG4gICAgICAgIGlmIChjID09PSA2MSAmJiBqID4gMSlcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgaWYgKChjID0gczY0W2NdKSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihpbnZhbGlkRW5jb2RpbmcpO1xyXG4gICAgICAgIHN3aXRjaCAoaikge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICB0ID0gYztcclxuICAgICAgICAgICAgICAgIGogPSAxO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSB0IDw8IDIgfCAoYyAmIDQ4KSA+PiA0O1xyXG4gICAgICAgICAgICAgICAgdCA9IGM7XHJcbiAgICAgICAgICAgICAgICBqID0gMjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gKHQgJiAxNSkgPDwgNCB8IChjICYgNjApID4+IDI7XHJcbiAgICAgICAgICAgICAgICB0ID0gYztcclxuICAgICAgICAgICAgICAgIGogPSAzO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSAodCAmIDMpIDw8IDYgfCBjO1xyXG4gICAgICAgICAgICAgICAgaiA9IDA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoaiA9PT0gMSlcclxuICAgICAgICB0aHJvdyBFcnJvcihpbnZhbGlkRW5jb2RpbmcpO1xyXG4gICAgcmV0dXJuIG9mZnNldCAtIHN0YXJ0O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgc3RyaW5nIGFwcGVhcnMgdG8gYmUgYmFzZTY0IGVuY29kZWQuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU3RyaW5nIHRvIHRlc3RcclxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiBwcm9iYWJseSBiYXNlNjQgZW5jb2RlZCwgb3RoZXJ3aXNlIGZhbHNlXHJcbiAqL1xyXG5iYXNlNjQudGVzdCA9IGZ1bmN0aW9uIHRlc3Qoc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gL14oPzpbQS1aYS16MC05Ky9dezR9KSooPzpbQS1aYS16MC05Ky9dezJ9PT18W0EtWmEtejAtOSsvXXszfT0pPyQvLnRlc3Qoc3RyaW5nKTtcclxufTtcclxuIiwgIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IGV2ZW50IGVtaXR0ZXIgaW5zdGFuY2UuXHJcbiAqIEBjbGFzc2Rlc2MgQSBtaW5pbWFsIGV2ZW50IGVtaXR0ZXIuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXJlZCBsaXN0ZW5lcnMuXHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsKj59XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlZ2lzdGVycyBhbiBldmVudCBsaXN0ZW5lci5cclxuICogQHBhcmFtIHtzdHJpbmd9IGV2dCBFdmVudCBuYW1lXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIExpc3RlbmVyXHJcbiAqIEBwYXJhbSB7Kn0gW2N0eF0gTGlzdGVuZXIgY29udGV4dFxyXG4gKiBAcmV0dXJucyB7dXRpbC5FdmVudEVtaXR0ZXJ9IGB0aGlzYFxyXG4gKi9cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uKGV2dCwgZm4sIGN0eCkge1xyXG4gICAgKHRoaXMuX2xpc3RlbmVyc1tldnRdIHx8ICh0aGlzLl9saXN0ZW5lcnNbZXZ0XSA9IFtdKSkucHVzaCh7XHJcbiAgICAgICAgZm4gIDogZm4sXHJcbiAgICAgICAgY3R4IDogY3R4IHx8IHRoaXNcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVtb3ZlcyBhbiBldmVudCBsaXN0ZW5lciBvciBhbnkgbWF0Y2hpbmcgbGlzdGVuZXJzIGlmIGFyZ3VtZW50cyBhcmUgb21pdHRlZC5cclxuICogQHBhcmFtIHtzdHJpbmd9IFtldnRdIEV2ZW50IG5hbWUuIFJlbW92ZXMgYWxsIGxpc3RlbmVycyBpZiBvbWl0dGVkLlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbZm5dIExpc3RlbmVyIHRvIHJlbW92ZS4gUmVtb3ZlcyBhbGwgbGlzdGVuZXJzIG9mIGBldnRgIGlmIG9taXR0ZWQuXHJcbiAqIEByZXR1cm5zIHt1dGlsLkV2ZW50RW1pdHRlcn0gYHRoaXNgXHJcbiAqL1xyXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIG9mZihldnQsIGZuKSB7XHJcbiAgICBpZiAoZXZ0ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0ge307XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoZm4gPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzW2V2dF0gPSBbXTtcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1tldnRdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7KVxyXG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyc1tpXS5mbiA9PT0gZm4pXHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICArK2k7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogRW1pdHMgYW4gZXZlbnQgYnkgY2FsbGluZyBpdHMgbGlzdGVuZXJzIHdpdGggdGhlIHNwZWNpZmllZCBhcmd1bWVudHMuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBldnQgRXZlbnQgbmFtZVxyXG4gKiBAcGFyYW0gey4uLip9IGFyZ3MgQXJndW1lbnRzXHJcbiAqIEByZXR1cm5zIHt1dGlsLkV2ZW50RW1pdHRlcn0gYHRoaXNgXHJcbiAqL1xyXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2dCkge1xyXG4gICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1tldnRdO1xyXG4gICAgaWYgKGxpc3RlbmVycykge1xyXG4gICAgICAgIHZhciBhcmdzID0gW10sXHJcbiAgICAgICAgICAgIGkgPSAxO1xyXG4gICAgICAgIGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDspXHJcbiAgICAgICAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7KVxyXG4gICAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4uYXBwbHkobGlzdGVuZXJzW2krK10uY3R4LCBhcmdzKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoZmFjdG9yeSk7XHJcblxyXG4vKipcclxuICogUmVhZHMgLyB3cml0ZXMgZmxvYXRzIC8gZG91YmxlcyBmcm9tIC8gdG8gYnVmZmVycy5cclxuICogQG5hbWUgdXRpbC5mbG9hdFxyXG4gKiBAbmFtZXNwYWNlXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFdyaXRlcyBhIDMyIGJpdCBmbG9hdCB0byBhIGJ1ZmZlciB1c2luZyBsaXR0bGUgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQud3JpdGVGbG9hdExFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIFZhbHVlIHRvIHdyaXRlXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFRhcmdldCBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUYXJnZXQgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSAzMiBiaXQgZmxvYXQgdG8gYSBidWZmZXIgdXNpbmcgYmlnIGVuZGlhbiBieXRlIG9yZGVyLlxyXG4gKiBAbmFtZSB1dGlsLmZsb2F0LndyaXRlRmxvYXRCRVxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbCBWYWx1ZSB0byB3cml0ZVxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBUYXJnZXQgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgVGFyZ2V0IGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG4vKipcclxuICogUmVhZHMgYSAzMiBiaXQgZmxvYXQgZnJvbSBhIGJ1ZmZlciB1c2luZyBsaXR0bGUgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQucmVhZEZsb2F0TEVcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFNvdXJjZSBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBTb3VyY2UgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFJlYWRzIGEgMzIgYml0IGZsb2F0IGZyb20gYSBidWZmZXIgdXNpbmcgYmlnIGVuZGlhbiBieXRlIG9yZGVyLlxyXG4gKiBAbmFtZSB1dGlsLmZsb2F0LnJlYWRGbG9hdEJFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgU291cmNlIGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSA2NCBiaXQgZG91YmxlIHRvIGEgYnVmZmVyIHVzaW5nIGxpdHRsZSBlbmRpYW4gYnl0ZSBvcmRlci5cclxuICogQG5hbWUgdXRpbC5mbG9hdC53cml0ZURvdWJsZUxFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIFZhbHVlIHRvIHdyaXRlXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFRhcmdldCBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUYXJnZXQgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSA2NCBiaXQgZG91YmxlIHRvIGEgYnVmZmVyIHVzaW5nIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci5cclxuICogQG5hbWUgdXRpbC5mbG9hdC53cml0ZURvdWJsZUJFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIFZhbHVlIHRvIHdyaXRlXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFRhcmdldCBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUYXJnZXQgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBSZWFkcyBhIDY0IGJpdCBkb3VibGUgZnJvbSBhIGJ1ZmZlciB1c2luZyBsaXR0bGUgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQucmVhZERvdWJsZUxFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgU291cmNlIGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBSZWFkcyBhIDY0IGJpdCBkb3VibGUgZnJvbSBhIGJ1ZmZlciB1c2luZyBiaWcgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQucmVhZERvdWJsZUJFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgU291cmNlIGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuXHJcbi8vIEZhY3RvcnkgZnVuY3Rpb24gZm9yIHRoZSBwdXJwb3NlIG9mIG5vZGUtYmFzZWQgdGVzdGluZyBpbiBtb2RpZmllZCBnbG9iYWwgZW52aXJvbm1lbnRzXHJcbmZ1bmN0aW9uIGZhY3RvcnkoZXhwb3J0cykge1xyXG5cclxuICAgIC8vIGZsb2F0OiB0eXBlZCBhcnJheVxyXG4gICAgaWYgKHR5cGVvZiBGbG9hdDMyQXJyYXkgIT09IFwidW5kZWZpbmVkXCIpIChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIGYzMiA9IG5ldyBGbG9hdDMyQXJyYXkoWyAtMCBdKSxcclxuICAgICAgICAgICAgZjhiID0gbmV3IFVpbnQ4QXJyYXkoZjMyLmJ1ZmZlciksXHJcbiAgICAgICAgICAgIGxlICA9IGY4YlszXSA9PT0gMTI4O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB3cml0ZUZsb2F0X2YzMl9jcHkodmFsLCBidWYsIHBvcykge1xyXG4gICAgICAgICAgICBmMzJbMF0gPSB2YWw7XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgICAgXSA9IGY4YlswXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDFdID0gZjhiWzFdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMl0gPSBmOGJbMl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAzXSA9IGY4YlszXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRmxvYXRfZjMyX3Jldih2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIGYzMlswXSA9IHZhbDtcclxuICAgICAgICAgICAgYnVmW3BvcyAgICBdID0gZjhiWzNdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMV0gPSBmOGJbMl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAyXSA9IGY4YlsxXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDNdID0gZjhiWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLndyaXRlRmxvYXRMRSA9IGxlID8gd3JpdGVGbG9hdF9mMzJfY3B5IDogd3JpdGVGbG9hdF9mMzJfcmV2O1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0QkUgPSBsZSA/IHdyaXRlRmxvYXRfZjMyX3JldiA6IHdyaXRlRmxvYXRfZjMyX2NweTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVhZEZsb2F0X2YzMl9jcHkoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzBdID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbMV0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4YlsyXSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzNdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICByZXR1cm4gZjMyWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVhZEZsb2F0X2YzMl9yZXYoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzNdID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbMl0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4YlsxXSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzBdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICByZXR1cm4gZjMyWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLnJlYWRGbG9hdExFID0gbGUgPyByZWFkRmxvYXRfZjMyX2NweSA6IHJlYWRGbG9hdF9mMzJfcmV2O1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgZXhwb3J0cy5yZWFkRmxvYXRCRSA9IGxlID8gcmVhZEZsb2F0X2YzMl9yZXYgOiByZWFkRmxvYXRfZjMyX2NweTtcclxuXHJcbiAgICAvLyBmbG9hdDogaWVlZTc1NFxyXG4gICAgfSkoKTsgZWxzZSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRmxvYXRfaWVlZTc1NCh3cml0ZVVpbnQsIHZhbCwgYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgdmFyIHNpZ24gPSB2YWwgPCAwID8gMSA6IDA7XHJcbiAgICAgICAgICAgIGlmIChzaWduKVxyXG4gICAgICAgICAgICAgICAgdmFsID0gLXZhbDtcclxuICAgICAgICAgICAgaWYgKHZhbCA9PT0gMClcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgxIC8gdmFsID4gMCA/IC8qIHBvc2l0aXZlICovIDAgOiAvKiBuZWdhdGl2ZSAwICovIDIxNDc0ODM2NDgsIGJ1ZiwgcG9zKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNOYU4odmFsKSlcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgyMTQzMjg5MzQ0LCBidWYsIHBvcyk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbCA+IDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpIC8vICstSW5maW5pdHlcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgoc2lnbiA8PCAzMSB8IDIxMzkwOTUwNDApID4+PiAwLCBidWYsIHBvcyk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbCA8IDEuMTc1NDk0MzUwODIyMjg3NWUtMzgpIC8vIGRlbm9ybWFsXHJcbiAgICAgICAgICAgICAgICB3cml0ZVVpbnQoKHNpZ24gPDwgMzEgfCBNYXRoLnJvdW5kKHZhbCAvIDEuNDAxMjk4NDY0MzI0ODE3ZS00NSkpID4+PiAwLCBidWYsIHBvcyk7XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGV4cG9uZW50ID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWwpIC8gTWF0aC5MTjIpLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hbnRpc3NhID0gTWF0aC5yb3VuZCh2YWwgKiBNYXRoLnBvdygyLCAtZXhwb25lbnQpICogODM4ODYwOCkgJiA4Mzg4NjA3O1xyXG4gICAgICAgICAgICAgICAgd3JpdGVVaW50KChzaWduIDw8IDMxIHwgZXhwb25lbnQgKyAxMjcgPDwgMjMgfCBtYW50aXNzYSkgPj4+IDAsIGJ1ZiwgcG9zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0TEUgPSB3cml0ZUZsb2F0X2llZWU3NTQuYmluZChudWxsLCB3cml0ZVVpbnRMRSk7XHJcbiAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0QkUgPSB3cml0ZUZsb2F0X2llZWU3NTQuYmluZChudWxsLCB3cml0ZVVpbnRCRSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlYWRGbG9hdF9pZWVlNzU0KHJlYWRVaW50LCBidWYsIHBvcykge1xyXG4gICAgICAgICAgICB2YXIgdWludCA9IHJlYWRVaW50KGJ1ZiwgcG9zKSxcclxuICAgICAgICAgICAgICAgIHNpZ24gPSAodWludCA+PiAzMSkgKiAyICsgMSxcclxuICAgICAgICAgICAgICAgIGV4cG9uZW50ID0gdWludCA+Pj4gMjMgJiAyNTUsXHJcbiAgICAgICAgICAgICAgICBtYW50aXNzYSA9IHVpbnQgJiA4Mzg4NjA3O1xyXG4gICAgICAgICAgICByZXR1cm4gZXhwb25lbnQgPT09IDI1NVxyXG4gICAgICAgICAgICAgICAgPyBtYW50aXNzYVxyXG4gICAgICAgICAgICAgICAgPyBOYU5cclxuICAgICAgICAgICAgICAgIDogc2lnbiAqIEluZmluaXR5XHJcbiAgICAgICAgICAgICAgICA6IGV4cG9uZW50ID09PSAwIC8vIGRlbm9ybWFsXHJcbiAgICAgICAgICAgICAgICA/IHNpZ24gKiAxLjQwMTI5ODQ2NDMyNDgxN2UtNDUgKiBtYW50aXNzYVxyXG4gICAgICAgICAgICAgICAgOiBzaWduICogTWF0aC5wb3coMiwgZXhwb25lbnQgLSAxNTApICogKG1hbnRpc3NhICsgODM4ODYwOCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnRzLnJlYWRGbG9hdExFID0gcmVhZEZsb2F0X2llZWU3NTQuYmluZChudWxsLCByZWFkVWludExFKTtcclxuICAgICAgICBleHBvcnRzLnJlYWRGbG9hdEJFID0gcmVhZEZsb2F0X2llZWU3NTQuYmluZChudWxsLCByZWFkVWludEJFKTtcclxuXHJcbiAgICB9KSgpO1xyXG5cclxuICAgIC8vIGRvdWJsZTogdHlwZWQgYXJyYXlcclxuICAgIGlmICh0eXBlb2YgRmxvYXQ2NEFycmF5ICE9PSBcInVuZGVmaW5lZFwiKSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBmNjQgPSBuZXcgRmxvYXQ2NEFycmF5KFstMF0pLFxyXG4gICAgICAgICAgICBmOGIgPSBuZXcgVWludDhBcnJheShmNjQuYnVmZmVyKSxcclxuICAgICAgICAgICAgbGUgID0gZjhiWzddID09PSAxMjg7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRG91YmxlX2Y2NF9jcHkodmFsLCBidWYsIHBvcykge1xyXG4gICAgICAgICAgICBmNjRbMF0gPSB2YWw7XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgICAgXSA9IGY4YlswXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDFdID0gZjhiWzFdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMl0gPSBmOGJbMl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAzXSA9IGY4YlszXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDRdID0gZjhiWzRdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgNV0gPSBmOGJbNV07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyA2XSA9IGY4Yls2XTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDddID0gZjhiWzddO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gd3JpdGVEb3VibGVfZjY0X3Jldih2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIGY2NFswXSA9IHZhbDtcclxuICAgICAgICAgICAgYnVmW3BvcyAgICBdID0gZjhiWzddO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMV0gPSBmOGJbNl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAyXSA9IGY4Yls1XTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDNdID0gZjhiWzRdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgNF0gPSBmOGJbM107XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyA1XSA9IGY4YlsyXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDZdID0gZjhiWzFdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgN10gPSBmOGJbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgICAgIGV4cG9ydHMud3JpdGVEb3VibGVMRSA9IGxlID8gd3JpdGVEb3VibGVfZjY0X2NweSA6IHdyaXRlRG91YmxlX2Y2NF9yZXY7XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLndyaXRlRG91YmxlQkUgPSBsZSA/IHdyaXRlRG91YmxlX2Y2NF9yZXYgOiB3cml0ZURvdWJsZV9mNjRfY3B5O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiByZWFkRG91YmxlX2Y2NF9jcHkoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzBdID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbMV0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4YlsyXSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzNdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICBmOGJbNF0gPSBidWZbcG9zICsgNF07XHJcbiAgICAgICAgICAgIGY4Yls1XSA9IGJ1Zltwb3MgKyA1XTtcclxuICAgICAgICAgICAgZjhiWzZdID0gYnVmW3BvcyArIDZdO1xyXG4gICAgICAgICAgICBmOGJbN10gPSBidWZbcG9zICsgN107XHJcbiAgICAgICAgICAgIHJldHVybiBmNjRbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiByZWFkRG91YmxlX2Y2NF9yZXYoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzddID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbNl0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4Yls1XSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzRdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICBmOGJbM10gPSBidWZbcG9zICsgNF07XHJcbiAgICAgICAgICAgIGY4YlsyXSA9IGJ1Zltwb3MgKyA1XTtcclxuICAgICAgICAgICAgZjhiWzFdID0gYnVmW3BvcyArIDZdO1xyXG4gICAgICAgICAgICBmOGJbMF0gPSBidWZbcG9zICsgN107XHJcbiAgICAgICAgICAgIHJldHVybiBmNjRbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgICAgIGV4cG9ydHMucmVhZERvdWJsZUxFID0gbGUgPyByZWFkRG91YmxlX2Y2NF9jcHkgOiByZWFkRG91YmxlX2Y2NF9yZXY7XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLnJlYWREb3VibGVCRSA9IGxlID8gcmVhZERvdWJsZV9mNjRfcmV2IDogcmVhZERvdWJsZV9mNjRfY3B5O1xyXG5cclxuICAgIC8vIGRvdWJsZTogaWVlZTc1NFxyXG4gICAgfSkoKTsgZWxzZSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRG91YmxlX2llZWU3NTQod3JpdGVVaW50LCBvZmYwLCBvZmYxLCB2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIHZhciBzaWduID0gdmFsIDwgMCA/IDEgOiAwO1xyXG4gICAgICAgICAgICBpZiAoc2lnbilcclxuICAgICAgICAgICAgICAgIHZhbCA9IC12YWw7XHJcbiAgICAgICAgICAgIGlmICh2YWwgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgwLCBidWYsIHBvcyArIG9mZjApO1xyXG4gICAgICAgICAgICAgICAgd3JpdGVVaW50KDEgLyB2YWwgPiAwID8gLyogcG9zaXRpdmUgKi8gMCA6IC8qIG5lZ2F0aXZlIDAgKi8gMjE0NzQ4MzY0OCwgYnVmLCBwb3MgKyBvZmYxKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XHJcbiAgICAgICAgICAgICAgICB3cml0ZVVpbnQoMCwgYnVmLCBwb3MgKyBvZmYwKTtcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgyMTQ2OTU5MzYwLCBidWYsIHBvcyArIG9mZjEpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbCA+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4KSB7IC8vICstSW5maW5pdHlcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgwLCBidWYsIHBvcyArIG9mZjApO1xyXG4gICAgICAgICAgICAgICAgd3JpdGVVaW50KChzaWduIDw8IDMxIHwgMjE0NjQzNTA3MikgPj4+IDAsIGJ1ZiwgcG9zICsgb2ZmMSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWFudGlzc2E7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsIDwgMi4yMjUwNzM4NTg1MDcyMDE0ZS0zMDgpIHsgLy8gZGVub3JtYWxcclxuICAgICAgICAgICAgICAgICAgICBtYW50aXNzYSA9IHZhbCAvIDVlLTMyNDtcclxuICAgICAgICAgICAgICAgICAgICB3cml0ZVVpbnQobWFudGlzc2EgPj4+IDAsIGJ1ZiwgcG9zICsgb2ZmMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVVaW50KChzaWduIDw8IDMxIHwgbWFudGlzc2EgLyA0Mjk0OTY3Mjk2KSA+Pj4gMCwgYnVmLCBwb3MgKyBvZmYxKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4cG9uZW50ID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWwpIC8gTWF0aC5MTjIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChleHBvbmVudCA9PT0gMTAyNClcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwb25lbnQgPSAxMDIzO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hbnRpc3NhID0gdmFsICogTWF0aC5wb3coMiwgLWV4cG9uZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB3cml0ZVVpbnQobWFudGlzc2EgKiA0NTAzNTk5NjI3MzcwNDk2ID4+PiAwLCBidWYsIHBvcyArIG9mZjApO1xyXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlVWludCgoc2lnbiA8PCAzMSB8IGV4cG9uZW50ICsgMTAyMyA8PCAyMCB8IG1hbnRpc3NhICogMTA0ODU3NiAmIDEwNDg1NzUpID4+PiAwLCBidWYsIHBvcyArIG9mZjEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnRzLndyaXRlRG91YmxlTEUgPSB3cml0ZURvdWJsZV9pZWVlNzU0LmJpbmQobnVsbCwgd3JpdGVVaW50TEUsIDAsIDQpO1xyXG4gICAgICAgIGV4cG9ydHMud3JpdGVEb3VibGVCRSA9IHdyaXRlRG91YmxlX2llZWU3NTQuYmluZChudWxsLCB3cml0ZVVpbnRCRSwgNCwgMCk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlYWREb3VibGVfaWVlZTc1NChyZWFkVWludCwgb2ZmMCwgb2ZmMSwgYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgdmFyIGxvID0gcmVhZFVpbnQoYnVmLCBwb3MgKyBvZmYwKSxcclxuICAgICAgICAgICAgICAgIGhpID0gcmVhZFVpbnQoYnVmLCBwb3MgKyBvZmYxKTtcclxuICAgICAgICAgICAgdmFyIHNpZ24gPSAoaGkgPj4gMzEpICogMiArIDEsXHJcbiAgICAgICAgICAgICAgICBleHBvbmVudCA9IGhpID4+PiAyMCAmIDIwNDcsXHJcbiAgICAgICAgICAgICAgICBtYW50aXNzYSA9IDQyOTQ5NjcyOTYgKiAoaGkgJiAxMDQ4NTc1KSArIGxvO1xyXG4gICAgICAgICAgICByZXR1cm4gZXhwb25lbnQgPT09IDIwNDdcclxuICAgICAgICAgICAgICAgID8gbWFudGlzc2FcclxuICAgICAgICAgICAgICAgID8gTmFOXHJcbiAgICAgICAgICAgICAgICA6IHNpZ24gKiBJbmZpbml0eVxyXG4gICAgICAgICAgICAgICAgOiBleHBvbmVudCA9PT0gMCAvLyBkZW5vcm1hbFxyXG4gICAgICAgICAgICAgICAgPyBzaWduICogNWUtMzI0ICogbWFudGlzc2FcclxuICAgICAgICAgICAgICAgIDogc2lnbiAqIE1hdGgucG93KDIsIGV4cG9uZW50IC0gMTA3NSkgKiAobWFudGlzc2EgKyA0NTAzNTk5NjI3MzcwNDk2KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV4cG9ydHMucmVhZERvdWJsZUxFID0gcmVhZERvdWJsZV9pZWVlNzU0LmJpbmQobnVsbCwgcmVhZFVpbnRMRSwgMCwgNCk7XHJcbiAgICAgICAgZXhwb3J0cy5yZWFkRG91YmxlQkUgPSByZWFkRG91YmxlX2llZWU3NTQuYmluZChudWxsLCByZWFkVWludEJFLCA0LCAwKTtcclxuXHJcbiAgICB9KSgpO1xyXG5cclxuICAgIHJldHVybiBleHBvcnRzO1xyXG59XHJcblxyXG4vLyB1aW50IGhlbHBlcnNcclxuXHJcbmZ1bmN0aW9uIHdyaXRlVWludExFKHZhbCwgYnVmLCBwb3MpIHtcclxuICAgIGJ1Zltwb3MgICAgXSA9ICB2YWwgICAgICAgICYgMjU1O1xyXG4gICAgYnVmW3BvcyArIDFdID0gIHZhbCA+Pj4gOCAgJiAyNTU7XHJcbiAgICBidWZbcG9zICsgMl0gPSAgdmFsID4+PiAxNiAmIDI1NTtcclxuICAgIGJ1Zltwb3MgKyAzXSA9ICB2YWwgPj4+IDI0O1xyXG59XHJcblxyXG5mdW5jdGlvbiB3cml0ZVVpbnRCRSh2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICBidWZbcG9zICAgIF0gPSAgdmFsID4+PiAyNDtcclxuICAgIGJ1Zltwb3MgKyAxXSA9ICB2YWwgPj4+IDE2ICYgMjU1O1xyXG4gICAgYnVmW3BvcyArIDJdID0gIHZhbCA+Pj4gOCAgJiAyNTU7XHJcbiAgICBidWZbcG9zICsgM10gPSAgdmFsICAgICAgICAmIDI1NTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVhZFVpbnRMRShidWYsIHBvcykge1xyXG4gICAgcmV0dXJuIChidWZbcG9zICAgIF1cclxuICAgICAgICAgIHwgYnVmW3BvcyArIDFdIDw8IDhcclxuICAgICAgICAgIHwgYnVmW3BvcyArIDJdIDw8IDE2XHJcbiAgICAgICAgICB8IGJ1Zltwb3MgKyAzXSA8PCAyNCkgPj4+IDA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYWRVaW50QkUoYnVmLCBwb3MpIHtcclxuICAgIHJldHVybiAoYnVmW3BvcyAgICBdIDw8IDI0XHJcbiAgICAgICAgICB8IGJ1Zltwb3MgKyAxXSA8PCAxNlxyXG4gICAgICAgICAgfCBidWZbcG9zICsgMl0gPDwgOFxyXG4gICAgICAgICAgfCBidWZbcG9zICsgM10pID4+PiAwO1xyXG59XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBpbnF1aXJlO1xyXG5cclxuLyoqXHJcbiAqIFJlcXVpcmVzIGEgbW9kdWxlIG9ubHkgaWYgYXZhaWxhYmxlLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlTmFtZSBNb2R1bGUgdG8gcmVxdWlyZVxyXG4gKiBAcmV0dXJucyB7P09iamVjdH0gUmVxdWlyZWQgbW9kdWxlIGlmIGF2YWlsYWJsZSBhbmQgbm90IGVtcHR5LCBvdGhlcndpc2UgYG51bGxgXHJcbiAqL1xyXG5mdW5jdGlvbiBpbnF1aXJlKG1vZHVsZU5hbWUpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgdmFyIG1vZCA9IGV2YWwoXCJxdWlyZVwiLnJlcGxhY2UoL14vLFwicmVcIikpKG1vZHVsZU5hbWUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV2YWxcclxuICAgICAgICBpZiAobW9kICYmIChtb2QubGVuZ3RoIHx8IE9iamVjdC5rZXlzKG1vZCkubGVuZ3RoKSlcclxuICAgICAgICAgICAgcmV0dXJuIG1vZDtcclxuICAgIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8qKlxyXG4gKiBBIG1pbmltYWwgVVRGOCBpbXBsZW1lbnRhdGlvbiBmb3IgbnVtYmVyIGFycmF5cy5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQG5hbWVzcGFjZVxyXG4gKi9cclxudmFyIHV0ZjggPSBleHBvcnRzO1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIFVURjggYnl0ZSBsZW5ndGggb2YgYSBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU3RyaW5nXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEJ5dGUgbGVuZ3RoXHJcbiAqL1xyXG51dGY4Lmxlbmd0aCA9IGZ1bmN0aW9uIHV0ZjhfbGVuZ3RoKHN0cmluZykge1xyXG4gICAgdmFyIGxlbiA9IDAsXHJcbiAgICAgICAgYyA9IDA7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGMgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcclxuICAgICAgICBpZiAoYyA8IDEyOClcclxuICAgICAgICAgICAgbGVuICs9IDE7XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDIwNDgpXHJcbiAgICAgICAgICAgIGxlbiArPSAyO1xyXG4gICAgICAgIGVsc2UgaWYgKChjICYgMHhGQzAwKSA9PT0gMHhEODAwICYmIChzdHJpbmcuY2hhckNvZGVBdChpICsgMSkgJiAweEZDMDApID09PSAweERDMDApIHtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICBsZW4gKz0gNDtcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgbGVuICs9IDM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGVuO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlYWRzIFVURjggYnl0ZXMgYXMgYSBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmZmVyIFNvdXJjZSBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFNvdXJjZSBzdGFydFxyXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kIFNvdXJjZSBlbmRcclxuICogQHJldHVybnMge3N0cmluZ30gU3RyaW5nIHJlYWRcclxuICovXHJcbnV0ZjgucmVhZCA9IGZ1bmN0aW9uIHV0ZjhfcmVhZChidWZmZXIsIHN0YXJ0LCBlbmQpIHtcclxuICAgIHZhciBsZW4gPSBlbmQgLSBzdGFydDtcclxuICAgIGlmIChsZW4gPCAxKVxyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgdmFyIHBhcnRzID0gbnVsbCxcclxuICAgICAgICBjaHVuayA9IFtdLFxyXG4gICAgICAgIGkgPSAwLCAvLyBjaGFyIG9mZnNldFxyXG4gICAgICAgIHQ7ICAgICAvLyB0ZW1wb3JhcnlcclxuICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xyXG4gICAgICAgIHQgPSBidWZmZXJbc3RhcnQrK107XHJcbiAgICAgICAgaWYgKHQgPCAxMjgpXHJcbiAgICAgICAgICAgIGNodW5rW2krK10gPSB0O1xyXG4gICAgICAgIGVsc2UgaWYgKHQgPiAxOTEgJiYgdCA8IDIyNClcclxuICAgICAgICAgICAgY2h1bmtbaSsrXSA9ICh0ICYgMzEpIDw8IDYgfCBidWZmZXJbc3RhcnQrK10gJiA2MztcclxuICAgICAgICBlbHNlIGlmICh0ID4gMjM5ICYmIHQgPCAzNjUpIHtcclxuICAgICAgICAgICAgdCA9ICgodCAmIDcpIDw8IDE4IHwgKGJ1ZmZlcltzdGFydCsrXSAmIDYzKSA8PCAxMiB8IChidWZmZXJbc3RhcnQrK10gJiA2MykgPDwgNiB8IGJ1ZmZlcltzdGFydCsrXSAmIDYzKSAtIDB4MTAwMDA7XHJcbiAgICAgICAgICAgIGNodW5rW2krK10gPSAweEQ4MDAgKyAodCA+PiAxMCk7XHJcbiAgICAgICAgICAgIGNodW5rW2krK10gPSAweERDMDAgKyAodCAmIDEwMjMpO1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICBjaHVua1tpKytdID0gKHQgJiAxNSkgPDwgMTIgfCAoYnVmZmVyW3N0YXJ0KytdICYgNjMpIDw8IDYgfCBidWZmZXJbc3RhcnQrK10gJiA2MztcclxuICAgICAgICBpZiAoaSA+IDgxOTEpIHtcclxuICAgICAgICAgICAgKHBhcnRzIHx8IChwYXJ0cyA9IFtdKSkucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY2h1bmspKTtcclxuICAgICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHBhcnRzKSB7XHJcbiAgICAgICAgaWYgKGkpXHJcbiAgICAgICAgICAgIHBhcnRzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNodW5rLnNsaWNlKDAsIGkpKSk7XHJcbiAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oXCJcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNodW5rLnNsaWNlKDAsIGkpKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSBzdHJpbmcgYXMgVVRGOCBieXRlcy5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTb3VyY2Ugc3RyaW5nXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmZmVyIERlc3RpbmF0aW9uIGJ1ZmZlclxyXG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IERlc3RpbmF0aW9uIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBCeXRlcyB3cml0dGVuXHJcbiAqL1xyXG51dGY4LndyaXRlID0gZnVuY3Rpb24gdXRmOF93cml0ZShzdHJpbmcsIGJ1ZmZlciwgb2Zmc2V0KSB7XHJcbiAgICB2YXIgc3RhcnQgPSBvZmZzZXQsXHJcbiAgICAgICAgYzEsIC8vIGNoYXJhY3RlciAxXHJcbiAgICAgICAgYzI7IC8vIGNoYXJhY3RlciAyXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGMxID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgaWYgKGMxIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMTtcclxuICAgICAgICB9IGVsc2UgaWYgKGMxIDwgMjA0OCkge1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgPj4gNiAgICAgICB8IDE5MjtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxICAgICAgICYgNjMgfCAxMjg7XHJcbiAgICAgICAgfSBlbHNlIGlmICgoYzEgJiAweEZDMDApID09PSAweEQ4MDAgJiYgKChjMiA9IHN0cmluZy5jaGFyQ29kZUF0KGkgKyAxKSkgJiAweEZDMDApID09PSAweERDMDApIHtcclxuICAgICAgICAgICAgYzEgPSAweDEwMDAwICsgKChjMSAmIDB4MDNGRikgPDwgMTApICsgKGMyICYgMHgwM0ZGKTtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgPj4gMTggICAgICB8IDI0MDtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDEyICYgNjMgfCAxMjg7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSA+PiA2ICAmIDYzIHwgMTI4O1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgICAgICAgJiA2MyB8IDEyODtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgPj4gMTIgICAgICB8IDIyNDtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDYgICYgNjMgfCAxMjg7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSAgICAgICAmIDYzIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvZmZzZXQgLSBzdGFydDtcclxufTtcclxuIiwgIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IHBvb2w7XHJcblxyXG4vKipcclxuICogQW4gYWxsb2NhdG9yIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwucG9vbH0uXHJcbiAqIEB0eXBlZGVmIFBvb2xBbGxvY2F0b3JcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge251bWJlcn0gc2l6ZSBCdWZmZXIgc2l6ZVxyXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gQnVmZmVyXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEEgc2xpY2VyIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwucG9vbH0uXHJcbiAqIEB0eXBlZGVmIFBvb2xTbGljZXJcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgU3RhcnQgb2Zmc2V0XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgRW5kIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gQnVmZmVyIHNsaWNlXHJcbiAqIEB0aGlzIHtVaW50OEFycmF5fVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBBIGdlbmVyYWwgcHVycG9zZSBidWZmZXIgcG9vbC5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7UG9vbEFsbG9jYXRvcn0gYWxsb2MgQWxsb2NhdG9yXHJcbiAqIEBwYXJhbSB7UG9vbFNsaWNlcn0gc2xpY2UgU2xpY2VyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT04MTkyXSBTbGFiIHNpemVcclxuICogQHJldHVybnMge1Bvb2xBbGxvY2F0b3J9IFBvb2xlZCBhbGxvY2F0b3JcclxuICovXHJcbmZ1bmN0aW9uIHBvb2woYWxsb2MsIHNsaWNlLCBzaXplKSB7XHJcbiAgICB2YXIgU0laRSAgID0gc2l6ZSB8fCA4MTkyO1xyXG4gICAgdmFyIE1BWCAgICA9IFNJWkUgPj4+IDE7XHJcbiAgICB2YXIgc2xhYiAgID0gbnVsbDtcclxuICAgIHZhciBvZmZzZXQgPSBTSVpFO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBvb2xfYWxsb2Moc2l6ZSkge1xyXG4gICAgICAgIGlmIChzaXplIDwgMSB8fCBzaXplID4gTUFYKVxyXG4gICAgICAgICAgICByZXR1cm4gYWxsb2Moc2l6ZSk7XHJcbiAgICAgICAgaWYgKG9mZnNldCArIHNpemUgPiBTSVpFKSB7XHJcbiAgICAgICAgICAgIHNsYWIgPSBhbGxvYyhTSVpFKTtcclxuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGJ1ZiA9IHNsaWNlLmNhbGwoc2xhYiwgb2Zmc2V0LCBvZmZzZXQgKz0gc2l6ZSk7XHJcbiAgICAgICAgaWYgKG9mZnNldCAmIDcpIC8vIGFsaWduIHRvIDMyIGJpdFxyXG4gICAgICAgICAgICBvZmZzZXQgPSAob2Zmc2V0IHwgNykgKyAxO1xyXG4gICAgICAgIHJldHVybiBidWY7XHJcbiAgICB9O1xyXG59XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gTG9uZ0JpdHM7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4uL3V0aWwvbWluaW1hbFwiKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIG5ldyBsb25nIGJpdHMuXG4gKiBAY2xhc3NkZXNjIEhlbHBlciBjbGFzcyBmb3Igd29ya2luZyB3aXRoIHRoZSBsb3cgYW5kIGhpZ2ggYml0cyBvZiBhIDY0IGJpdCB2YWx1ZS5cbiAqIEBtZW1iZXJvZiB1dGlsXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7bnVtYmVyfSBsbyBMb3cgMzIgYml0cywgdW5zaWduZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaSBIaWdoIDMyIGJpdHMsIHVuc2lnbmVkXG4gKi9cbmZ1bmN0aW9uIExvbmdCaXRzKGxvLCBoaSkge1xuXG4gICAgLy8gbm90ZSB0aGF0IHRoZSBjYXN0cyBiZWxvdyBhcmUgdGhlb3JldGljYWxseSB1bm5lY2Vzc2FyeSBhcyBvZiB0b2RheSwgYnV0IG9sZGVyIHN0YXRpY2FsbHlcbiAgICAvLyBnZW5lcmF0ZWQgY29udmVydGVyIGNvZGUgbWlnaHQgc3RpbGwgY2FsbCB0aGUgY3RvciB3aXRoIHNpZ25lZCAzMmJpdHMuIGtlcHQgZm9yIGNvbXBhdC5cblxuICAgIC8qKlxuICAgICAqIExvdyBiaXRzLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5sbyA9IGxvID4+PiAwO1xuXG4gICAgLyoqXG4gICAgICogSGlnaCBiaXRzLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5oaSA9IGhpID4+PiAwO1xufVxuXG4vKipcbiAqIFplcm8gYml0cy5cbiAqIEBtZW1iZXJvZiB1dGlsLkxvbmdCaXRzXG4gKiBAdHlwZSB7dXRpbC5Mb25nQml0c31cbiAqL1xudmFyIHplcm8gPSBMb25nQml0cy56ZXJvID0gbmV3IExvbmdCaXRzKDAsIDApO1xuXG56ZXJvLnRvTnVtYmVyID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuemVyby56ekVuY29kZSA9IHplcm8uenpEZWNvZGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH07XG56ZXJvLmxlbmd0aCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMTsgfTtcblxuLyoqXG4gKiBaZXJvIGhhc2guXG4gKiBAbWVtYmVyb2YgdXRpbC5Mb25nQml0c1xuICogQHR5cGUge3N0cmluZ31cbiAqL1xudmFyIHplcm9IYXNoID0gTG9uZ0JpdHMuemVyb0hhc2ggPSBcIlxcMFxcMFxcMFxcMFxcMFxcMFxcMFxcMFwiO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgbmV3IGxvbmcgYml0cyBmcm9tIHRoZSBzcGVjaWZpZWQgbnVtYmVyLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlXG4gKiBAcmV0dXJucyB7dXRpbC5Mb25nQml0c30gSW5zdGFuY2VcbiAqL1xuTG9uZ0JpdHMuZnJvbU51bWJlciA9IGZ1bmN0aW9uIGZyb21OdW1iZXIodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IDApXG4gICAgICAgIHJldHVybiB6ZXJvO1xuICAgIHZhciBzaWduID0gdmFsdWUgPCAwO1xuICAgIGlmIChzaWduKVxuICAgICAgICB2YWx1ZSA9IC12YWx1ZTtcbiAgICB2YXIgbG8gPSB2YWx1ZSA+Pj4gMCxcbiAgICAgICAgaGkgPSAodmFsdWUgLSBsbykgLyA0Mjk0OTY3Mjk2ID4+PiAwO1xuICAgIGlmIChzaWduKSB7XG4gICAgICAgIGhpID0gfmhpID4+PiAwO1xuICAgICAgICBsbyA9IH5sbyA+Pj4gMDtcbiAgICAgICAgaWYgKCsrbG8gPiA0Mjk0OTY3Mjk1KSB7XG4gICAgICAgICAgICBsbyA9IDA7XG4gICAgICAgICAgICBpZiAoKytoaSA+IDQyOTQ5NjcyOTUpXG4gICAgICAgICAgICAgICAgaGkgPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgTG9uZ0JpdHMobG8sIGhpKTtcbn07XG5cbi8qKlxuICogQ29uc3RydWN0cyBuZXcgbG9uZyBiaXRzIGZyb20gYSBudW1iZXIsIGxvbmcgb3Igc3RyaW5nLlxuICogQHBhcmFtIHtMb25nfG51bWJlcnxzdHJpbmd9IHZhbHVlIFZhbHVlXG4gKiBAcmV0dXJucyB7dXRpbC5Mb25nQml0c30gSW5zdGFuY2VcbiAqL1xuTG9uZ0JpdHMuZnJvbSA9IGZ1bmN0aW9uIGZyb20odmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKVxuICAgICAgICByZXR1cm4gTG9uZ0JpdHMuZnJvbU51bWJlcih2YWx1ZSk7XG4gICAgaWYgKHV0aWwuaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmICh1dGlsLkxvbmcpXG4gICAgICAgICAgICB2YWx1ZSA9IHV0aWwuTG9uZy5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIExvbmdCaXRzLmZyb21OdW1iZXIocGFyc2VJbnQodmFsdWUsIDEwKSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZS5sb3cgfHwgdmFsdWUuaGlnaCA/IG5ldyBMb25nQml0cyh2YWx1ZS5sb3cgPj4+IDAsIHZhbHVlLmhpZ2ggPj4+IDApIDogemVybztcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBsb25nIGJpdHMgdG8gYSBwb3NzaWJseSB1bnNhZmUgSmF2YVNjcmlwdCBudW1iZXIuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFt1bnNpZ25lZD1mYWxzZV0gV2hldGhlciB1bnNpZ25lZCBvciBub3RcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFBvc3NpYmx5IHVuc2FmZSBudW1iZXJcbiAqL1xuTG9uZ0JpdHMucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIodW5zaWduZWQpIHtcbiAgICBpZiAoIXVuc2lnbmVkICYmIHRoaXMuaGkgPj4+IDMxKSB7XG4gICAgICAgIHZhciBsbyA9IH50aGlzLmxvICsgMSA+Pj4gMCxcbiAgICAgICAgICAgIGhpID0gfnRoaXMuaGkgICAgID4+PiAwO1xuICAgICAgICBpZiAoIWxvKVxuICAgICAgICAgICAgaGkgPSBoaSArIDEgPj4+IDA7XG4gICAgICAgIHJldHVybiAtKGxvICsgaGkgKiA0Mjk0OTY3Mjk2KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubG8gKyB0aGlzLmhpICogNDI5NDk2NzI5Njtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBsb25nIGJpdHMgdG8gYSBsb25nLlxuICogQHBhcmFtIHtib29sZWFufSBbdW5zaWduZWQ9ZmFsc2VdIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90XG4gKiBAcmV0dXJucyB7TG9uZ30gTG9uZ1xuICovXG5Mb25nQml0cy5wcm90b3R5cGUudG9Mb25nID0gZnVuY3Rpb24gdG9Mb25nKHVuc2lnbmVkKSB7XG4gICAgcmV0dXJuIHV0aWwuTG9uZ1xuICAgICAgICA/IG5ldyB1dGlsLkxvbmcodGhpcy5sbyB8IDAsIHRoaXMuaGkgfCAwLCBCb29sZWFuKHVuc2lnbmVkKSlcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgOiB7IGxvdzogdGhpcy5sbyB8IDAsIGhpZ2g6IHRoaXMuaGkgfCAwLCB1bnNpZ25lZDogQm9vbGVhbih1bnNpZ25lZCkgfTtcbn07XG5cbnZhciBjaGFyQ29kZUF0ID0gU3RyaW5nLnByb3RvdHlwZS5jaGFyQ29kZUF0O1xuXG4vKipcbiAqIENvbnN0cnVjdHMgbmV3IGxvbmcgYml0cyBmcm9tIHRoZSBzcGVjaWZpZWQgOCBjaGFyYWN0ZXJzIGxvbmcgaGFzaC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoIEhhc2hcbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBCaXRzXG4gKi9cbkxvbmdCaXRzLmZyb21IYXNoID0gZnVuY3Rpb24gZnJvbUhhc2goaGFzaCkge1xuICAgIGlmIChoYXNoID09PSB6ZXJvSGFzaClcbiAgICAgICAgcmV0dXJuIHplcm87XG4gICAgcmV0dXJuIG5ldyBMb25nQml0cyhcbiAgICAgICAgKCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgMClcbiAgICAgICAgfCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgMSkgPDwgOFxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCAyKSA8PCAxNlxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCAzKSA8PCAyNCkgPj4+IDBcbiAgICAsXG4gICAgICAgICggY2hhckNvZGVBdC5jYWxsKGhhc2gsIDQpXG4gICAgICAgIHwgY2hhckNvZGVBdC5jYWxsKGhhc2gsIDUpIDw8IDhcbiAgICAgICAgfCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgNikgPDwgMTZcbiAgICAgICAgfCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgNykgPDwgMjQpID4+PiAwXG4gICAgKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBsb25nIGJpdHMgdG8gYSA4IGNoYXJhY3RlcnMgbG9uZyBoYXNoLlxuICogQHJldHVybnMge3N0cmluZ30gSGFzaFxuICovXG5Mb25nQml0cy5wcm90b3R5cGUudG9IYXNoID0gZnVuY3Rpb24gdG9IYXNoKCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKFxuICAgICAgICB0aGlzLmxvICAgICAgICAmIDI1NSxcbiAgICAgICAgdGhpcy5sbyA+Pj4gOCAgJiAyNTUsXG4gICAgICAgIHRoaXMubG8gPj4+IDE2ICYgMjU1LFxuICAgICAgICB0aGlzLmxvID4+PiAyNCAgICAgICxcbiAgICAgICAgdGhpcy5oaSAgICAgICAgJiAyNTUsXG4gICAgICAgIHRoaXMuaGkgPj4+IDggICYgMjU1LFxuICAgICAgICB0aGlzLmhpID4+PiAxNiAmIDI1NSxcbiAgICAgICAgdGhpcy5oaSA+Pj4gMjRcbiAgICApO1xufTtcblxuLyoqXG4gKiBaaWctemFnIGVuY29kZXMgdGhpcyBsb25nIGJpdHMuXG4gKiBAcmV0dXJucyB7dXRpbC5Mb25nQml0c30gYHRoaXNgXG4gKi9cbkxvbmdCaXRzLnByb3RvdHlwZS56ekVuY29kZSA9IGZ1bmN0aW9uIHp6RW5jb2RlKCkge1xuICAgIHZhciBtYXNrID0gICB0aGlzLmhpID4+IDMxO1xuICAgIHRoaXMuaGkgID0gKCh0aGlzLmhpIDw8IDEgfCB0aGlzLmxvID4+PiAzMSkgXiBtYXNrKSA+Pj4gMDtcbiAgICB0aGlzLmxvICA9ICggdGhpcy5sbyA8PCAxICAgICAgICAgICAgICAgICAgIF4gbWFzaykgPj4+IDA7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFppZy16YWcgZGVjb2RlcyB0aGlzIGxvbmcgYml0cy5cbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBgdGhpc2BcbiAqL1xuTG9uZ0JpdHMucHJvdG90eXBlLnp6RGVjb2RlID0gZnVuY3Rpb24genpEZWNvZGUoKSB7XG4gICAgdmFyIG1hc2sgPSAtKHRoaXMubG8gJiAxKTtcbiAgICB0aGlzLmxvICA9ICgodGhpcy5sbyA+Pj4gMSB8IHRoaXMuaGkgPDwgMzEpIF4gbWFzaykgPj4+IDA7XG4gICAgdGhpcy5oaSAgPSAoIHRoaXMuaGkgPj4+IDEgICAgICAgICAgICAgICAgICBeIG1hc2spID4+PiAwO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgdGhpcyBsb25nYml0cyB3aGVuIGVuY29kZWQgYXMgYSB2YXJpbnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBMZW5ndGhcbiAqL1xuTG9uZ0JpdHMucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uIGxlbmd0aCgpIHtcbiAgICB2YXIgcGFydDAgPSAgdGhpcy5sbyxcbiAgICAgICAgcGFydDEgPSAodGhpcy5sbyA+Pj4gMjggfCB0aGlzLmhpIDw8IDQpID4+PiAwLFxuICAgICAgICBwYXJ0MiA9ICB0aGlzLmhpID4+PiAyNDtcbiAgICByZXR1cm4gcGFydDIgPT09IDBcbiAgICAgICAgID8gcGFydDEgPT09IDBcbiAgICAgICAgICAgPyBwYXJ0MCA8IDE2Mzg0XG4gICAgICAgICAgICAgPyBwYXJ0MCA8IDEyOCA/IDEgOiAyXG4gICAgICAgICAgICAgOiBwYXJ0MCA8IDIwOTcxNTIgPyAzIDogNFxuICAgICAgICAgICA6IHBhcnQxIDwgMTYzODRcbiAgICAgICAgICAgICA/IHBhcnQxIDwgMTI4ID8gNSA6IDZcbiAgICAgICAgICAgICA6IHBhcnQxIDwgMjA5NzE1MiA/IDcgOiA4XG4gICAgICAgICA6IHBhcnQyIDwgMTI4ID8gOSA6IDEwO1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciB1dGlsID0gZXhwb3J0cztcblxuLy8gdXNlZCB0byByZXR1cm4gYSBQcm9taXNlIHdoZXJlIGNhbGxiYWNrIGlzIG9taXR0ZWRcbnV0aWwuYXNQcm9taXNlID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL2FzcHJvbWlzZVwiKTtcblxuLy8gY29udmVydHMgdG8gLyBmcm9tIGJhc2U2NCBlbmNvZGVkIHN0cmluZ3NcbnV0aWwuYmFzZTY0ID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL2Jhc2U2NFwiKTtcblxuLy8gYmFzZSBjbGFzcyBvZiBycGMuU2VydmljZVxudXRpbC5FdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiQHByb3RvYnVmanMvZXZlbnRlbWl0dGVyXCIpO1xuXG4vLyBmbG9hdCBoYW5kbGluZyBhY2Nyb3NzIGJyb3dzZXJzXG51dGlsLmZsb2F0ID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL2Zsb2F0XCIpO1xuXG4vLyByZXF1aXJlcyBtb2R1bGVzIG9wdGlvbmFsbHkgYW5kIGhpZGVzIHRoZSBjYWxsIGZyb20gYnVuZGxlcnNcbnV0aWwuaW5xdWlyZSA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy9pbnF1aXJlXCIpO1xuXG4vLyBjb252ZXJ0cyB0byAvIGZyb20gdXRmOCBlbmNvZGVkIHN0cmluZ3NcbnV0aWwudXRmOCA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy91dGY4XCIpO1xuXG4vLyBwcm92aWRlcyBhIG5vZGUtbGlrZSBidWZmZXIgcG9vbCBpbiB0aGUgYnJvd3NlclxudXRpbC5wb29sID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL3Bvb2xcIik7XG5cbi8vIHV0aWxpdHkgdG8gd29yayB3aXRoIHRoZSBsb3cgYW5kIGhpZ2ggYml0cyBvZiBhIDY0IGJpdCB2YWx1ZVxudXRpbC5Mb25nQml0cyA9IHJlcXVpcmUoXCIuL2xvbmdiaXRzXCIpO1xuXG4vKipcbiAqIFdoZXRoZXIgcnVubmluZyB3aXRoaW4gbm9kZSBvciBub3QuXG4gKiBAbWVtYmVyb2YgdXRpbFxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbnV0aWwuaXNOb2RlID0gQm9vbGVhbih0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICAgICAgICAgJiYgZ2xvYmFsXG4gICAgICAgICAgICAgICAgICAgJiYgZ2xvYmFsLnByb2Nlc3NcbiAgICAgICAgICAgICAgICAgICAmJiBnbG9iYWwucHJvY2Vzcy52ZXJzaW9uc1xuICAgICAgICAgICAgICAgICAgICYmIGdsb2JhbC5wcm9jZXNzLnZlcnNpb25zLm5vZGUpO1xuXG4vKipcbiAqIEdsb2JhbCBvYmplY3QgcmVmZXJlbmNlLlxuICogQG1lbWJlcm9mIHV0aWxcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnV0aWwuZ2xvYmFsID0gdXRpbC5pc05vZGUgJiYgZ2xvYmFsXG4gICAgICAgICAgIHx8IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93XG4gICAgICAgICAgIHx8IHR5cGVvZiBzZWxmICAgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZlxuICAgICAgICAgICB8fCB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWludmFsaWQtdGhpc1xuXG4vKipcbiAqIEFuIGltbXVhYmxlIGVtcHR5IGFycmF5LlxuICogQG1lbWJlcm9mIHV0aWxcbiAqIEB0eXBlIHtBcnJheS48Kj59XG4gKiBAY29uc3RcbiAqL1xudXRpbC5lbXB0eUFycmF5ID0gT2JqZWN0LmZyZWV6ZSA/IE9iamVjdC5mcmVlemUoW10pIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gW107IC8vIHVzZWQgb24gcHJvdG90eXBlc1xuXG4vKipcbiAqIEFuIGltbXV0YWJsZSBlbXB0eSBvYmplY3QuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQGNvbnN0XG4gKi9cbnV0aWwuZW1wdHlPYmplY3QgPSBPYmplY3QuZnJlZXplID8gT2JqZWN0LmZyZWV6ZSh7fSkgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB7fTsgLy8gdXNlZCBvbiBwcm90b3R5cGVzXG5cbi8qKlxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhbiBpbnRlZ2VyLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZhbHVlIGlzIGFuIGludGVnZXJcbiAqL1xudXRpbC5pc0ludGVnZXIgPSBOdW1iZXIuaXNJbnRlZ2VyIHx8IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUodmFsdWUpICYmIE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZTtcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIHN0cmluZy5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgYSBzdHJpbmdcbiAqL1xudXRpbC5pc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCB2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZztcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIG5vbi1udWxsIG9iamVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgYSBub24tbnVsbCBvYmplY3RcbiAqL1xudXRpbC5pc09iamVjdCA9IGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgcHJvcGVydHkgb24gYSBtZXNzYWdlIGlzIGNvbnNpZGVyZWQgdG8gYmUgcHJlc2VudC5cbiAqIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIHV0aWwuaXNTZXR9LlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFBsYWluIG9iamVjdCBvciBtZXNzYWdlIGluc3RhbmNlXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSBuYW1lXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIGNvbnNpZGVyZWQgdG8gYmUgcHJlc2VudCwgb3RoZXJ3aXNlIGBmYWxzZWBcbiAqL1xudXRpbC5pc3NldCA9XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgcHJvcGVydHkgb24gYSBtZXNzYWdlIGlzIGNvbnNpZGVyZWQgdG8gYmUgcHJlc2VudC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogUGxhaW4gb2JqZWN0IG9yIG1lc3NhZ2UgaW5zdGFuY2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFByb3BlcnR5IG5hbWVcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgY29uc2lkZXJlZCB0byBiZSBwcmVzZW50LCBvdGhlcndpc2UgYGZhbHNlYFxuICovXG51dGlsLmlzU2V0ID0gZnVuY3Rpb24gaXNTZXQob2JqLCBwcm9wKSB7XG4gICAgdmFyIHZhbHVlID0gb2JqW3Byb3BdO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXEsIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmxlbmd0aCA6IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGgpID4gMDtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIEFueSBjb21wYXRpYmxlIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIFRoaXMgaXMgYSBtaW5pbWFsIHN0YW5kLWFsb25lIGRlZmluaXRpb24gb2YgYSBCdWZmZXIgaW5zdGFuY2UuIFRoZSBhY3R1YWwgdHlwZSBpcyB0aGF0IGV4cG9ydGVkIGJ5IG5vZGUncyB0eXBpbmdzLlxuICogQGludGVyZmFjZSBCdWZmZXJcbiAqIEBleHRlbmRzIFVpbnQ4QXJyYXlcbiAqL1xuXG4vKipcbiAqIE5vZGUncyBCdWZmZXIgY2xhc3MgaWYgYXZhaWxhYmxlLlxuICogQHR5cGUge0NvbnN0cnVjdG9yPEJ1ZmZlcj59XG4gKi9cbnV0aWwuQnVmZmVyID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBCdWZmZXIgPSB1dGlsLmlucXVpcmUoXCJidWZmZXJcIikuQnVmZmVyO1xuICAgICAgICAvLyByZWZ1c2UgdG8gdXNlIG5vbi1ub2RlIGJ1ZmZlcnMgaWYgbm90IGV4cGxpY2l0bHkgYXNzaWduZWQgKHBlcmYgcmVhc29ucyk6XG4gICAgICAgIHJldHVybiBCdWZmZXIucHJvdG90eXBlLnV0ZjhXcml0ZSA/IEJ1ZmZlciA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIG51bGw7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59KSgpO1xuXG4vLyBJbnRlcm5hbCBhbGlhcyBvZiBvciBwb2x5ZnVsbCBmb3IgQnVmZmVyLmZyb20uXG51dGlsLl9CdWZmZXJfZnJvbSA9IG51bGw7XG5cbi8vIEludGVybmFsIGFsaWFzIG9mIG9yIHBvbHlmaWxsIGZvciBCdWZmZXIuYWxsb2NVbnNhZmUuXG51dGlsLl9CdWZmZXJfYWxsb2NVbnNhZmUgPSBudWxsO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgYnVmZmVyIG9mIHdoYXRldmVyIHR5cGUgc3VwcG9ydGVkIGJ5IHRoZSBlbnZpcm9ubWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfG51bWJlcltdfSBbc2l6ZU9yQXJyYXk9MF0gQnVmZmVyIHNpemUgb3IgbnVtYmVyIGFycmF5XG4gKiBAcmV0dXJucyB7VWludDhBcnJheXxCdWZmZXJ9IEJ1ZmZlclxuICovXG51dGlsLm5ld0J1ZmZlciA9IGZ1bmN0aW9uIG5ld0J1ZmZlcihzaXplT3JBcnJheSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIHR5cGVvZiBzaXplT3JBcnJheSA9PT0gXCJudW1iZXJcIlxuICAgICAgICA/IHV0aWwuQnVmZmVyXG4gICAgICAgICAgICA/IHV0aWwuX0J1ZmZlcl9hbGxvY1Vuc2FmZShzaXplT3JBcnJheSlcbiAgICAgICAgICAgIDogbmV3IHV0aWwuQXJyYXkoc2l6ZU9yQXJyYXkpXG4gICAgICAgIDogdXRpbC5CdWZmZXJcbiAgICAgICAgICAgID8gdXRpbC5fQnVmZmVyX2Zyb20oc2l6ZU9yQXJyYXkpXG4gICAgICAgICAgICA6IHR5cGVvZiBVaW50OEFycmF5ID09PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICAgICAgPyBzaXplT3JBcnJheVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoc2l6ZU9yQXJyYXkpO1xufTtcblxuLyoqXG4gKiBBcnJheSBpbXBsZW1lbnRhdGlvbiB1c2VkIGluIHRoZSBicm93c2VyLiBgVWludDhBcnJheWAgaWYgc3VwcG9ydGVkLCBvdGhlcndpc2UgYEFycmF5YC5cbiAqIEB0eXBlIHtDb25zdHJ1Y3RvcjxVaW50OEFycmF5Pn1cbiAqL1xudXRpbC5BcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSBcInVuZGVmaW5lZFwiID8gVWludDhBcnJheSAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyA6IEFycmF5O1xuXG4vKipcbiAqIEFueSBjb21wYXRpYmxlIExvbmcgaW5zdGFuY2UuXG4gKiBUaGlzIGlzIGEgbWluaW1hbCBzdGFuZC1hbG9uZSBkZWZpbml0aW9uIG9mIGEgTG9uZyBpbnN0YW5jZS4gVGhlIGFjdHVhbCB0eXBlIGlzIHRoYXQgZXhwb3J0ZWQgYnkgbG9uZy5qcy5cbiAqIEBpbnRlcmZhY2UgTG9uZ1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGxvdyBMb3cgYml0c1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGhpZ2ggSGlnaCBiaXRzXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90XG4gKi9cblxuLyoqXG4gKiBMb25nLmpzJ3MgTG9uZyBjbGFzcyBpZiBhdmFpbGFibGUuXG4gKiBAdHlwZSB7Q29uc3RydWN0b3I8TG9uZz59XG4gKi9cbnV0aWwuTG9uZyA9IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHV0aWwuZ2xvYmFsLmRjb2RlSU8gJiYgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gdXRpbC5nbG9iYWwuZGNvZGVJTy5Mb25nXG4gICAgICAgICB8fCAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB1dGlsLmdsb2JhbC5Mb25nXG4gICAgICAgICB8fCB1dGlsLmlucXVpcmUoXCJsb25nXCIpO1xuXG4vKipcbiAqIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIHZlcmlmeSAyIGJpdCAoYGJvb2xgKSBtYXAga2V5cy5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAY29uc3RcbiAqL1xudXRpbC5rZXkyUmUgPSAvXnRydWV8ZmFsc2V8MHwxJC87XG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHVzZWQgdG8gdmVyaWZ5IDMyIGJpdCAoYGludDMyYCBldGMuKSBtYXAga2V5cy5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAY29uc3RcbiAqL1xudXRpbC5rZXkzMlJlID0gL14tPyg/OjB8WzEtOV1bMC05XSopJC87XG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHVzZWQgdG8gdmVyaWZ5IDY0IGJpdCAoYGludDY0YCBldGMuKSBtYXAga2V5cy5cbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAY29uc3RcbiAqL1xudXRpbC5rZXk2NFJlID0gL14oPzpbXFxcXHgwMC1cXFxceGZmXXs4fXwtPyg/OjB8WzEtOV1bMC05XSopKSQvO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgbnVtYmVyIG9yIGxvbmcgdG8gYW4gOCBjaGFyYWN0ZXJzIGxvbmcgaGFzaCBzdHJpbmcuXG4gKiBAcGFyYW0ge0xvbmd8bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7c3RyaW5nfSBIYXNoXG4gKi9cbnV0aWwubG9uZ1RvSGFzaCA9IGZ1bmN0aW9uIGxvbmdUb0hhc2godmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgPyB1dGlsLkxvbmdCaXRzLmZyb20odmFsdWUpLnRvSGFzaCgpXG4gICAgICAgIDogdXRpbC5Mb25nQml0cy56ZXJvSGFzaDtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYW4gOCBjaGFyYWN0ZXJzIGxvbmcgaGFzaCBzdHJpbmcgdG8gYSBsb25nIG9yIG51bWJlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoIEhhc2hcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Vuc2lnbmVkPWZhbHNlXSBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdFxuICogQHJldHVybnMge0xvbmd8bnVtYmVyfSBPcmlnaW5hbCB2YWx1ZVxuICovXG51dGlsLmxvbmdGcm9tSGFzaCA9IGZ1bmN0aW9uIGxvbmdGcm9tSGFzaChoYXNoLCB1bnNpZ25lZCkge1xuICAgIHZhciBiaXRzID0gdXRpbC5Mb25nQml0cy5mcm9tSGFzaChoYXNoKTtcbiAgICBpZiAodXRpbC5Mb25nKVxuICAgICAgICByZXR1cm4gdXRpbC5Mb25nLmZyb21CaXRzKGJpdHMubG8sIGJpdHMuaGksIHVuc2lnbmVkKTtcbiAgICByZXR1cm4gYml0cy50b051bWJlcihCb29sZWFuKHVuc2lnbmVkKSk7XG59O1xuXG4vKipcbiAqIE1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiB0aGUgc291cmNlIG9iamVjdCBpbnRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAbWVtYmVyb2YgdXRpbFxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZHN0IERlc3RpbmF0aW9uIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gc3JjIFNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lmTm90U2V0PWZhbHNlXSBNZXJnZXMgb25seSBpZiB0aGUga2V5IGlzIG5vdCBhbHJlYWR5IHNldFxuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBEZXN0aW5hdGlvbiBvYmplY3RcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoZHN0LCBzcmMsIGlmTm90U2V0KSB7IC8vIHVzZWQgYnkgY29udmVydGVyc1xuICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhzcmMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpXG4gICAgICAgIGlmIChkc3Rba2V5c1tpXV0gPT09IHVuZGVmaW5lZCB8fCAhaWZOb3RTZXQpXG4gICAgICAgICAgICBkc3Rba2V5c1tpXV0gPSBzcmNba2V5c1tpXV07XG4gICAgcmV0dXJuIGRzdDtcbn1cblxudXRpbC5tZXJnZSA9IG1lcmdlO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYSBzdHJpbmcgdG8gbG93ZXIgY2FzZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IENvbnZlcnRlZCBzdHJpbmdcbiAqL1xudXRpbC5sY0ZpcnN0ID0gZnVuY3Rpb24gbGNGaXJzdChzdHIpIHtcbiAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgc3RyLnN1YnN0cmluZygxKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGN1c3RvbSBlcnJvciBjb25zdHJ1Y3Rvci5cbiAqIEBtZW1iZXJvZiB1dGlsXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFcnJvciBuYW1lXG4gKiBAcmV0dXJucyB7Q29uc3RydWN0b3I8RXJyb3I+fSBDdXN0b20gZXJyb3IgY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gbmV3RXJyb3IobmFtZSkge1xuXG4gICAgZnVuY3Rpb24gQ3VzdG9tRXJyb3IobWVzc2FnZSwgcHJvcGVydGllcykge1xuXG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDdXN0b21FcnJvcikpXG4gICAgICAgICAgICByZXR1cm4gbmV3IEN1c3RvbUVycm9yKG1lc3NhZ2UsIHByb3BlcnRpZXMpO1xuXG4gICAgICAgIC8vIEVycm9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG4gICAgICAgIC8vIF4ganVzdCByZXR1cm5zIGEgbmV3IGVycm9yIGluc3RhbmNlIGJlY2F1c2UgdGhlIGN0b3IgY2FuIGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uXG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibWVzc2FnZVwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtZXNzYWdlOyB9IH0pO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkgLy8gbm9kZVxuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgQ3VzdG9tRXJyb3IpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzdGFja1wiLCB7IHZhbHVlOiBuZXcgRXJyb3IoKS5zdGFjayB8fCBcIlwiIH0pO1xuXG4gICAgICAgIGlmIChwcm9wZXJ0aWVzKVxuICAgICAgICAgICAgbWVyZ2UodGhpcywgcHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgKEN1c3RvbUVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBDdXN0b21FcnJvcjtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDdXN0b21FcnJvci5wcm90b3R5cGUsIFwibmFtZVwiLCB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBuYW1lOyB9IH0pO1xuXG4gICAgQ3VzdG9tRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWUgKyBcIjogXCIgKyB0aGlzLm1lc3NhZ2U7XG4gICAgfTtcblxuICAgIHJldHVybiBDdXN0b21FcnJvcjtcbn1cblxudXRpbC5uZXdFcnJvciA9IG5ld0Vycm9yO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgcHJvdG9jb2wgZXJyb3IuXG4gKiBAY2xhc3NkZXNjIEVycm9yIHN1YmNsYXNzIGluZGljYXRpbmcgYSBwcm90b2NvbCBzcGVjaWZjIGVycm9yLlxuICogQG1lbWJlcm9mIHV0aWxcbiAqIEBleHRlbmRzIEVycm9yXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIE1lc3NhZ2U8VD5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgRXJyb3IgbWVzc2FnZVxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW3Byb3BlcnRpZXNdIEFkZGl0aW9uYWwgcHJvcGVydGllc1xuICogQGV4YW1wbGVcbiAqIHRyeSB7XG4gKiAgICAgTXlNZXNzYWdlLmRlY29kZShzb21lQnVmZmVyKTsgLy8gdGhyb3dzIGlmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICogfSBjYXRjaCAoZSkge1xuICogICAgIGlmIChlIGluc3RhbmNlb2YgUHJvdG9jb2xFcnJvciAmJiBlLmluc3RhbmNlKVxuICogICAgICAgICBjb25zb2xlLmxvZyhcImRlY29kZWQgc28gZmFyOiBcIiArIEpTT04uc3RyaW5naWZ5KGUuaW5zdGFuY2UpKTtcbiAqIH1cbiAqL1xudXRpbC5Qcm90b2NvbEVycm9yID0gbmV3RXJyb3IoXCJQcm90b2NvbEVycm9yXCIpO1xuXG4vKipcbiAqIFNvIGZhciBkZWNvZGVkIG1lc3NhZ2UgaW5zdGFuY2UuXG4gKiBAbmFtZSB1dGlsLlByb3RvY29sRXJyb3IjaW5zdGFuY2VcbiAqIEB0eXBlIHtNZXNzYWdlPFQ+fVxuICovXG5cbi8qKlxuICogQSBPbmVPZiBnZXR0ZXIgYXMgcmV0dXJuZWQgYnkge0BsaW5rIHV0aWwub25lT2ZHZXR0ZXJ9LlxuICogQHR5cGVkZWYgT25lT2ZHZXR0ZXJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBTZXQgZmllbGQgbmFtZSwgaWYgYW55XG4gKi9cblxuLyoqXG4gKiBCdWlsZHMgYSBnZXR0ZXIgZm9yIGEgb25lb2YncyBwcmVzZW50IGZpZWxkIG5hbWUuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBmaWVsZE5hbWVzIEZpZWxkIG5hbWVzXG4gKiBAcmV0dXJucyB7T25lT2ZHZXR0ZXJ9IFVuYm91bmQgZ2V0dGVyXG4gKi9cbnV0aWwub25lT2ZHZXR0ZXIgPSBmdW5jdGlvbiBnZXRPbmVPZihmaWVsZE5hbWVzKSB7XG4gICAgdmFyIGZpZWxkTWFwID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWVsZE5hbWVzLmxlbmd0aDsgKytpKVxuICAgICAgICBmaWVsZE1hcFtmaWVsZE5hbWVzW2ldXSA9IDE7XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gU2V0IGZpZWxkIG5hbWUsIGlmIGFueVxuICAgICAqIEB0aGlzIE9iamVjdFxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpLCBpID0ga2V5cy5sZW5ndGggLSAxOyBpID4gLTE7IC0taSlcbiAgICAgICAgICAgIGlmIChmaWVsZE1hcFtrZXlzW2ldXSA9PT0gMSAmJiB0aGlzW2tleXNbaV1dICE9PSB1bmRlZmluZWQgJiYgdGhpc1trZXlzW2ldXSAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5c1tpXTtcbiAgICB9O1xufTtcblxuLyoqXG4gKiBBIE9uZU9mIHNldHRlciBhcyByZXR1cm5lZCBieSB7QGxpbmsgdXRpbC5vbmVPZlNldHRlcn0uXG4gKiBAdHlwZWRlZiBPbmVPZlNldHRlclxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtzdHJpbmd8dW5kZWZpbmVkfSB2YWx1ZSBGaWVsZCBuYW1lXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5cbi8qKlxuICogQnVpbGRzIGEgc2V0dGVyIGZvciBhIG9uZW9mJ3MgcHJlc2VudCBmaWVsZCBuYW1lLlxuICogQHBhcmFtIHtzdHJpbmdbXX0gZmllbGROYW1lcyBGaWVsZCBuYW1lc1xuICogQHJldHVybnMge09uZU9mU2V0dGVyfSBVbmJvdW5kIHNldHRlclxuICovXG51dGlsLm9uZU9mU2V0dGVyID0gZnVuY3Rpb24gc2V0T25lT2YoZmllbGROYW1lcykge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRmllbGQgbmFtZVxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICogQHRoaXMgT2JqZWN0XG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmllbGROYW1lcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIGlmIChmaWVsZE5hbWVzW2ldICE9PSBuYW1lKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzW2ZpZWxkTmFtZXNbaV1dO1xuICAgIH07XG59O1xuXG4vKipcbiAqIERlZmF1bHQgY29udmVyc2lvbiBvcHRpb25zIHVzZWQgZm9yIHtAbGluayBNZXNzYWdlI3RvSlNPTn0gaW1wbGVtZW50YXRpb25zLlxuICpcbiAqIFRoZXNlIG9wdGlvbnMgYXJlIGNsb3NlIHRvIHByb3RvMydzIEpTT04gbWFwcGluZyB3aXRoIHRoZSBleGNlcHRpb24gdGhhdCBpbnRlcm5hbCB0eXBlcyBsaWtlIEFueSBhcmUgaGFuZGxlZCBqdXN0IGxpa2UgbWVzc2FnZXMuIE1vcmUgcHJlY2lzZWx5OlxuICpcbiAqIC0gTG9uZ3MgYmVjb21lIHN0cmluZ3NcbiAqIC0gRW51bXMgYmVjb21lIHN0cmluZyBrZXlzXG4gKiAtIEJ5dGVzIGJlY29tZSBiYXNlNjQgZW5jb2RlZCBzdHJpbmdzXG4gKiAtIChTdWItKU1lc3NhZ2VzIGJlY29tZSBwbGFpbiBvYmplY3RzXG4gKiAtIE1hcHMgYmVjb21lIHBsYWluIG9iamVjdHMgd2l0aCBhbGwgc3RyaW5nIGtleXNcbiAqIC0gUmVwZWF0ZWQgZmllbGRzIGJlY29tZSBhcnJheXNcbiAqIC0gTmFOIGFuZCBJbmZpbml0eSBmb3IgZmxvYXQgYW5kIGRvdWJsZSBmaWVsZHMgYmVjb21lIHN0cmluZ3NcbiAqXG4gKiBAdHlwZSB7SUNvbnZlcnNpb25PcHRpb25zfVxuICogQHNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9wcm90b2NvbC1idWZmZXJzL2RvY3MvcHJvdG8zP2hsPWVuI2pzb25cbiAqL1xudXRpbC50b0pTT05PcHRpb25zID0ge1xuICAgIGxvbmdzOiBTdHJpbmcsXG4gICAgZW51bXM6IFN0cmluZyxcbiAgICBieXRlczogU3RyaW5nLFxuICAgIGpzb246IHRydWVcbn07XG5cbi8vIFNldHMgdXAgYnVmZmVyIHV0aWxpdHkgYWNjb3JkaW5nIHRvIHRoZSBlbnZpcm9ubWVudCAoY2FsbGVkIGluIGluZGV4LW1pbmltYWwpXG51dGlsLl9jb25maWd1cmUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgQnVmZmVyID0gdXRpbC5CdWZmZXI7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFCdWZmZXIpIHtcbiAgICAgICAgdXRpbC5fQnVmZmVyX2Zyb20gPSB1dGlsLl9CdWZmZXJfYWxsb2NVbnNhZmUgPSBudWxsO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGJlY2F1c2Ugbm9kZSA0LnggYnVmZmVycyBhcmUgaW5jb21wYXRpYmxlICYgaW1tdXRhYmxlXG4gICAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGNvZGVJTy9wcm90b2J1Zi5qcy9wdWxsLzY2NVxuICAgIHV0aWwuX0J1ZmZlcl9mcm9tID0gQnVmZmVyLmZyb20gIT09IFVpbnQ4QXJyYXkuZnJvbSAmJiBCdWZmZXIuZnJvbSB8fFxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBmdW5jdGlvbiBCdWZmZXJfZnJvbSh2YWx1ZSwgZW5jb2RpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQnVmZmVyKHZhbHVlLCBlbmNvZGluZyk7XG4gICAgICAgIH07XG4gICAgdXRpbC5fQnVmZmVyX2FsbG9jVW5zYWZlID0gQnVmZmVyLmFsbG9jVW5zYWZlIHx8XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIGZ1bmN0aW9uIEJ1ZmZlcl9hbGxvY1Vuc2FmZShzaXplKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJ1ZmZlcihzaXplKTtcbiAgICAgICAgfTtcbn07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRlcjtcblxudmFyIHV0aWwgICAgICA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcblxudmFyIEJ1ZmZlcldyaXRlcjsgLy8gY3ljbGljXG5cbnZhciBMb25nQml0cyAgPSB1dGlsLkxvbmdCaXRzLFxuICAgIGJhc2U2NCAgICA9IHV0aWwuYmFzZTY0LFxuICAgIHV0ZjggICAgICA9IHV0aWwudXRmODtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IHdyaXRlciBvcGVyYXRpb24gaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIFNjaGVkdWxlZCB3cml0ZXIgb3BlcmF0aW9uLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIFVpbnQ4QXJyYXksIG51bWJlcil9IGZuIEZ1bmN0aW9uIHRvIGNhbGxcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW4gVmFsdWUgYnl0ZSBsZW5ndGhcbiAqIEBwYXJhbSB7Kn0gdmFsIFZhbHVlIHRvIHdyaXRlXG4gKiBAaWdub3JlXG4gKi9cbmZ1bmN0aW9uIE9wKGZuLCBsZW4sIHZhbCkge1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdG8gY2FsbC5cbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb24oVWludDhBcnJheSwgbnVtYmVyLCAqKX1cbiAgICAgKi9cbiAgICB0aGlzLmZuID0gZm47XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZSBieXRlIGxlbmd0aC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMubGVuID0gbGVuO1xuXG4gICAgLyoqXG4gICAgICogTmV4dCBvcGVyYXRpb24uXG4gICAgICogQHR5cGUge1dyaXRlci5PcHx1bmRlZmluZWR9XG4gICAgICovXG4gICAgdGhpcy5uZXh0ID0gdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogVmFsdWUgdG8gd3JpdGUuXG4gICAgICogQHR5cGUgeyp9XG4gICAgICovXG4gICAgdGhpcy52YWwgPSB2YWw7IC8vIHR5cGUgdmFyaWVzXG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBub29wKCkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eS1mdW5jdGlvblxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgd3JpdGVyIHN0YXRlIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBDb3BpZWQgd3JpdGVyIHN0YXRlLlxuICogQG1lbWJlcm9mIFdyaXRlclxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1dyaXRlcn0gd3JpdGVyIFdyaXRlciB0byBjb3B5IHN0YXRlIGZyb21cbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gU3RhdGUod3JpdGVyKSB7XG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IGhlYWQuXG4gICAgICogQHR5cGUge1dyaXRlci5PcH1cbiAgICAgKi9cbiAgICB0aGlzLmhlYWQgPSB3cml0ZXIuaGVhZDtcblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgdGFpbC5cbiAgICAgKiBAdHlwZSB7V3JpdGVyLk9wfVxuICAgICAqL1xuICAgIHRoaXMudGFpbCA9IHdyaXRlci50YWlsO1xuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBidWZmZXIgbGVuZ3RoLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5sZW4gPSB3cml0ZXIubGVuO1xuXG4gICAgLyoqXG4gICAgICogTmV4dCBzdGF0ZS5cbiAgICAgKiBAdHlwZSB7U3RhdGV8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLm5leHQgPSB3cml0ZXIuc3RhdGVzO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgd3JpdGVyIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBXaXJlIGZvcm1hdCB3cml0ZXIgdXNpbmcgYFVpbnQ4QXJyYXlgIGlmIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGBBcnJheWAuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gV3JpdGVyKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBsZW5ndGguXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmxlbiA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBPcGVyYXRpb25zIGhlYWQuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLmhlYWQgPSBuZXcgT3Aobm9vcCwgMCwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBPcGVyYXRpb25zIHRhaWxcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMudGFpbCA9IHRoaXMuaGVhZDtcblxuICAgIC8qKlxuICAgICAqIExpbmtlZCBmb3JrZWQgc3RhdGVzLlxuICAgICAqIEB0eXBlIHtPYmplY3R8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnN0YXRlcyA9IG51bGw7XG5cbiAgICAvLyBXaGVuIGEgdmFsdWUgaXMgd3JpdHRlbiwgdGhlIHdyaXRlciBjYWxjdWxhdGVzIGl0cyBieXRlIGxlbmd0aCBhbmQgcHV0cyBpdCBpbnRvIGEgbGlua2VkXG4gICAgLy8gbGlzdCBvZiBvcGVyYXRpb25zIHRvIHBlcmZvcm0gd2hlbiBmaW5pc2goKSBpcyBjYWxsZWQuIFRoaXMgYm90aCBhbGxvd3MgdXMgdG8gYWxsb2NhdGVcbiAgICAvLyBidWZmZXJzIG9mIHRoZSBleGFjdCByZXF1aXJlZCBzaXplIGFuZCByZWR1Y2VzIHRoZSBhbW91bnQgb2Ygd29yayB3ZSBoYXZlIHRvIGRvIGNvbXBhcmVkXG4gICAgLy8gdG8gZmlyc3QgY2FsY3VsYXRpbmcgb3ZlciBvYmplY3RzIGFuZCB0aGVuIGVuY29kaW5nIG92ZXIgb2JqZWN0cy4gSW4gb3VyIGNhc2UsIHRoZSBlbmNvZGluZ1xuICAgIC8vIHBhcnQgaXMganVzdCBhIGxpbmtlZCBsaXN0IHdhbGsgY2FsbGluZyBvcGVyYXRpb25zIHdpdGggYWxyZWFkeSBwcmVwYXJlZCB2YWx1ZXMuXG59XG5cbnZhciBjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgcmV0dXJuIHV0aWwuQnVmZmVyXG4gICAgICAgID8gZnVuY3Rpb24gY3JlYXRlX2J1ZmZlcl9zZXR1cCgpIHtcbiAgICAgICAgICAgIHJldHVybiAoV3JpdGVyLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZV9idWZmZXIoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXJXcml0ZXIoKTtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgIH1cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgOiBmdW5jdGlvbiBjcmVhdGVfYXJyYXkoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFdyaXRlcigpO1xuICAgICAgICB9O1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHdyaXRlci5cbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0J1ZmZlcldyaXRlcnxXcml0ZXJ9IEEge0BsaW5rIEJ1ZmZlcldyaXRlcn0gd2hlbiBCdWZmZXJzIGFyZSBzdXBwb3J0ZWQsIG90aGVyd2lzZSBhIHtAbGluayBXcml0ZXJ9XG4gKi9cbldyaXRlci5jcmVhdGUgPSBjcmVhdGUoKTtcblxuLyoqXG4gKiBBbGxvY2F0ZXMgYSBidWZmZXIgb2YgdGhlIHNwZWNpZmllZCBzaXplLlxuICogQHBhcmFtIHtudW1iZXJ9IHNpemUgQnVmZmVyIHNpemVcbiAqIEByZXR1cm5zIHtVaW50OEFycmF5fSBCdWZmZXJcbiAqL1xuV3JpdGVyLmFsbG9jID0gZnVuY3Rpb24gYWxsb2Moc2l6ZSkge1xuICAgIHJldHVybiBuZXcgdXRpbC5BcnJheShzaXplKTtcbn07XG5cbi8vIFVzZSBVaW50OEFycmF5IGJ1ZmZlciBwb29sIGluIHRoZSBicm93c2VyLCBqdXN0IGxpa2Ugbm9kZSBkb2VzIHdpdGggYnVmZmVyc1xuLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbmlmICh1dGlsLkFycmF5ICE9PSBBcnJheSlcbiAgICBXcml0ZXIuYWxsb2MgPSB1dGlsLnBvb2woV3JpdGVyLmFsbG9jLCB1dGlsLkFycmF5LnByb3RvdHlwZS5zdWJhcnJheSk7XG5cbi8qKlxuICogUHVzaGVzIGEgbmV3IG9wZXJhdGlvbiB0byB0aGUgcXVldWUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFVpbnQ4QXJyYXksIG51bWJlciwgKil9IGZuIEZ1bmN0aW9uIHRvIGNhbGxcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW4gVmFsdWUgYnl0ZSBsZW5ndGhcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICogQHByaXZhdGVcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5fcHVzaCA9IGZ1bmN0aW9uIHB1c2goZm4sIGxlbiwgdmFsKSB7XG4gICAgdGhpcy50YWlsID0gdGhpcy50YWlsLm5leHQgPSBuZXcgT3AoZm4sIGxlbiwgdmFsKTtcbiAgICB0aGlzLmxlbiArPSBsZW47XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUJ5dGUodmFsLCBidWYsIHBvcykge1xuICAgIGJ1Zltwb3NdID0gdmFsICYgMjU1O1xufVxuXG5mdW5jdGlvbiB3cml0ZVZhcmludDMyKHZhbCwgYnVmLCBwb3MpIHtcbiAgICB3aGlsZSAodmFsID4gMTI3KSB7XG4gICAgICAgIGJ1Zltwb3MrK10gPSB2YWwgJiAxMjcgfCAxMjg7XG4gICAgICAgIHZhbCA+Pj49IDc7XG4gICAgfVxuICAgIGJ1Zltwb3NdID0gdmFsO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgdmFyaW50IHdyaXRlciBvcGVyYXRpb24gaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIFNjaGVkdWxlZCB2YXJpbnQgd3JpdGVyIG9wZXJhdGlvbi5cbiAqIEBleHRlbmRzIE9wXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW4gVmFsdWUgYnl0ZSBsZW5ndGhcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgVmFsdWUgdG8gd3JpdGVcbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gVmFyaW50T3AobGVuLCB2YWwpIHtcbiAgICB0aGlzLmxlbiA9IGxlbjtcbiAgICB0aGlzLm5leHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy52YWwgPSB2YWw7XG59XG5cblZhcmludE9wLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoT3AucHJvdG90eXBlKTtcblZhcmludE9wLnByb3RvdHlwZS5mbiA9IHdyaXRlVmFyaW50MzI7XG5cbi8qKlxuICogV3JpdGVzIGFuIHVuc2lnbmVkIDMyIGJpdCB2YWx1ZSBhcyBhIHZhcmludC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUudWludDMyID0gZnVuY3Rpb24gd3JpdGVfdWludDMyKHZhbHVlKSB7XG4gICAgLy8gaGVyZSwgdGhlIGNhbGwgdG8gdGhpcy5wdXNoIGhhcyBiZWVuIGlubGluZWQgYW5kIGEgdmFyaW50IHNwZWNpZmljIE9wIHN1YmNsYXNzIGlzIHVzZWQuXG4gICAgLy8gdWludDMyIGlzIGJ5IGZhciB0aGUgbW9zdCBmcmVxdWVudGx5IHVzZWQgb3BlcmF0aW9uIGFuZCBiZW5lZml0cyBzaWduaWZpY2FudGx5IGZyb20gdGhpcy5cbiAgICB0aGlzLmxlbiArPSAodGhpcy50YWlsID0gdGhpcy50YWlsLm5leHQgPSBuZXcgVmFyaW50T3AoXG4gICAgICAgICh2YWx1ZSA9IHZhbHVlID4+PiAwKVxuICAgICAgICAgICAgICAgIDwgMTI4ICAgICAgID8gMVxuICAgICAgICA6IHZhbHVlIDwgMTYzODQgICAgID8gMlxuICAgICAgICA6IHZhbHVlIDwgMjA5NzE1MiAgID8gM1xuICAgICAgICA6IHZhbHVlIDwgMjY4NDM1NDU2ID8gNFxuICAgICAgICA6ICAgICAgICAgICAgICAgICAgICAgNSxcbiAgICB2YWx1ZSkpLmxlbjtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgc2lnbmVkIDMyIGJpdCB2YWx1ZSBhcyBhIHZhcmludC5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5pbnQzMiA9IGZ1bmN0aW9uIHdyaXRlX2ludDMyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIDwgMFxuICAgICAgICA/IHRoaXMuX3B1c2god3JpdGVWYXJpbnQ2NCwgMTAsIExvbmdCaXRzLmZyb21OdW1iZXIodmFsdWUpKSAvLyAxMCBieXRlcyBwZXIgc3BlY1xuICAgICAgICA6IHRoaXMudWludDMyKHZhbHVlKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgMzIgYml0IHZhbHVlIGFzIGEgdmFyaW50LCB6aWctemFnIGVuY29kZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLnNpbnQzMiA9IGZ1bmN0aW9uIHdyaXRlX3NpbnQzMih2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLnVpbnQzMigodmFsdWUgPDwgMSBeIHZhbHVlID4+IDMxKSA+Pj4gMCk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZVZhcmludDY0KHZhbCwgYnVmLCBwb3MpIHtcbiAgICB3aGlsZSAodmFsLmhpKSB7XG4gICAgICAgIGJ1Zltwb3MrK10gPSB2YWwubG8gJiAxMjcgfCAxMjg7XG4gICAgICAgIHZhbC5sbyA9ICh2YWwubG8gPj4+IDcgfCB2YWwuaGkgPDwgMjUpID4+PiAwO1xuICAgICAgICB2YWwuaGkgPj4+PSA3O1xuICAgIH1cbiAgICB3aGlsZSAodmFsLmxvID4gMTI3KSB7XG4gICAgICAgIGJ1Zltwb3MrK10gPSB2YWwubG8gJiAxMjcgfCAxMjg7XG4gICAgICAgIHZhbC5sbyA9IHZhbC5sbyA+Pj4gNztcbiAgICB9XG4gICAgYnVmW3BvcysrXSA9IHZhbC5sbztcbn1cblxuLyoqXG4gKiBXcml0ZXMgYW4gdW5zaWduZWQgNjQgYml0IHZhbHVlIGFzIGEgdmFyaW50LlxuICogQHBhcmFtIHtMb25nfG51bWJlcnxzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYHZhbHVlYCBpcyBhIHN0cmluZyBhbmQgbm8gbG9uZyBsaWJyYXJ5IGlzIHByZXNlbnQuXG4gKi9cbldyaXRlci5wcm90b3R5cGUudWludDY0ID0gZnVuY3Rpb24gd3JpdGVfdWludDY0KHZhbHVlKSB7XG4gICAgdmFyIGJpdHMgPSBMb25nQml0cy5mcm9tKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZVZhcmludDY0LCBiaXRzLmxlbmd0aCgpLCBiaXRzKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgc2lnbmVkIDY0IGJpdCB2YWx1ZSBhcyBhIHZhcmludC5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtMb25nfG51bWJlcnxzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYHZhbHVlYCBpcyBhIHN0cmluZyBhbmQgbm8gbG9uZyBsaWJyYXJ5IGlzIHByZXNlbnQuXG4gKi9cbldyaXRlci5wcm90b3R5cGUuaW50NjQgPSBXcml0ZXIucHJvdG90eXBlLnVpbnQ2NDtcblxuLyoqXG4gKiBXcml0ZXMgYSBzaWduZWQgNjQgYml0IHZhbHVlIGFzIGEgdmFyaW50LCB6aWctemFnIGVuY29kZWQuXG4gKiBAcGFyYW0ge0xvbmd8bnVtYmVyfHN0cmluZ30gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgdmFsdWVgIGlzIGEgc3RyaW5nIGFuZCBubyBsb25nIGxpYnJhcnkgaXMgcHJlc2VudC5cbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5zaW50NjQgPSBmdW5jdGlvbiB3cml0ZV9zaW50NjQodmFsdWUpIHtcbiAgICB2YXIgYml0cyA9IExvbmdCaXRzLmZyb20odmFsdWUpLnp6RW5jb2RlKCk7XG4gICAgcmV0dXJuIHRoaXMuX3B1c2god3JpdGVWYXJpbnQ2NCwgYml0cy5sZW5ndGgoKSwgYml0cyk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIGJvb2xpc2ggdmFsdWUgYXMgYSB2YXJpbnQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5ib29sID0gZnVuY3Rpb24gd3JpdGVfYm9vbCh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLl9wdXNoKHdyaXRlQnl0ZSwgMSwgdmFsdWUgPyAxIDogMCk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUZpeGVkMzIodmFsLCBidWYsIHBvcykge1xuICAgIGJ1Zltwb3MgICAgXSA9ICB2YWwgICAgICAgICAmIDI1NTtcbiAgICBidWZbcG9zICsgMV0gPSAgdmFsID4+PiA4ICAgJiAyNTU7XG4gICAgYnVmW3BvcyArIDJdID0gIHZhbCA+Pj4gMTYgICYgMjU1O1xuICAgIGJ1Zltwb3MgKyAzXSA9ICB2YWwgPj4+IDI0O1xufVxuXG4vKipcbiAqIFdyaXRlcyBhbiB1bnNpZ25lZCAzMiBiaXQgdmFsdWUgYXMgZml4ZWQgMzIgYml0cy5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUuZml4ZWQzMiA9IGZ1bmN0aW9uIHdyaXRlX2ZpeGVkMzIodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZUZpeGVkMzIsIDQsIHZhbHVlID4+PiAwKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgc2lnbmVkIDMyIGJpdCB2YWx1ZSBhcyBmaXhlZCAzMiBiaXRzLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLnNmaXhlZDMyID0gV3JpdGVyLnByb3RvdHlwZS5maXhlZDMyO1xuXG4vKipcbiAqIFdyaXRlcyBhbiB1bnNpZ25lZCA2NCBiaXQgdmFsdWUgYXMgZml4ZWQgNjQgYml0cy5cbiAqIEBwYXJhbSB7TG9uZ3xudW1iZXJ8c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGB2YWx1ZWAgaXMgYSBzdHJpbmcgYW5kIG5vIGxvbmcgbGlicmFyeSBpcyBwcmVzZW50LlxuICovXG5Xcml0ZXIucHJvdG90eXBlLmZpeGVkNjQgPSBmdW5jdGlvbiB3cml0ZV9maXhlZDY0KHZhbHVlKSB7XG4gICAgdmFyIGJpdHMgPSBMb25nQml0cy5mcm9tKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZUZpeGVkMzIsIDQsIGJpdHMubG8pLl9wdXNoKHdyaXRlRml4ZWQzMiwgNCwgYml0cy5oaSk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIHNpZ25lZCA2NCBiaXQgdmFsdWUgYXMgZml4ZWQgNjQgYml0cy5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtMb25nfG51bWJlcnxzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYHZhbHVlYCBpcyBhIHN0cmluZyBhbmQgbm8gbG9uZyBsaWJyYXJ5IGlzIHByZXNlbnQuXG4gKi9cbldyaXRlci5wcm90b3R5cGUuc2ZpeGVkNjQgPSBXcml0ZXIucHJvdG90eXBlLmZpeGVkNjQ7XG5cbi8qKlxuICogV3JpdGVzIGEgZmxvYXQgKDMyIGJpdCkuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUuZmxvYXQgPSBmdW5jdGlvbiB3cml0ZV9mbG9hdCh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLl9wdXNoKHV0aWwuZmxvYXQud3JpdGVGbG9hdExFLCA0LCB2YWx1ZSk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIGRvdWJsZSAoNjQgYml0IGZsb2F0KS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5kb3VibGUgPSBmdW5jdGlvbiB3cml0ZV9kb3VibGUodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh1dGlsLmZsb2F0LndyaXRlRG91YmxlTEUsIDgsIHZhbHVlKTtcbn07XG5cbnZhciB3cml0ZUJ5dGVzID0gdXRpbC5BcnJheS5wcm90b3R5cGUuc2V0XG4gICAgPyBmdW5jdGlvbiB3cml0ZUJ5dGVzX3NldCh2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgICAgIGJ1Zi5zZXQodmFsLCBwb3MpOyAvLyBhbHNvIHdvcmtzIGZvciBwbGFpbiBhcnJheSB2YWx1ZXNcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICA6IGZ1bmN0aW9uIHdyaXRlQnl0ZXNfZm9yKHZhbCwgYnVmLCBwb3MpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICBidWZbcG9zICsgaV0gPSB2YWxbaV07XG4gICAgfTtcblxuLyoqXG4gKiBXcml0ZXMgYSBzZXF1ZW5jZSBvZiBieXRlcy5cbiAqIEBwYXJhbSB7VWludDhBcnJheXxzdHJpbmd9IHZhbHVlIEJ1ZmZlciBvciBiYXNlNjQgZW5jb2RlZCBzdHJpbmcgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLmJ5dGVzID0gZnVuY3Rpb24gd3JpdGVfYnl0ZXModmFsdWUpIHtcbiAgICB2YXIgbGVuID0gdmFsdWUubGVuZ3RoID4+PiAwO1xuICAgIGlmICghbGVuKVxuICAgICAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZUJ5dGUsIDEsIDApO1xuICAgIGlmICh1dGlsLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICB2YXIgYnVmID0gV3JpdGVyLmFsbG9jKGxlbiA9IGJhc2U2NC5sZW5ndGgodmFsdWUpKTtcbiAgICAgICAgYmFzZTY0LmRlY29kZSh2YWx1ZSwgYnVmLCAwKTtcbiAgICAgICAgdmFsdWUgPSBidWY7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnVpbnQzMihsZW4pLl9wdXNoKHdyaXRlQnl0ZXMsIGxlbiwgdmFsdWUpO1xufTtcblxuLyoqXG4gKiBXcml0ZXMgYSBzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLnN0cmluZyA9IGZ1bmN0aW9uIHdyaXRlX3N0cmluZyh2YWx1ZSkge1xuICAgIHZhciBsZW4gPSB1dGY4Lmxlbmd0aCh2YWx1ZSk7XG4gICAgcmV0dXJuIGxlblxuICAgICAgICA/IHRoaXMudWludDMyKGxlbikuX3B1c2godXRmOC53cml0ZSwgbGVuLCB2YWx1ZSlcbiAgICAgICAgOiB0aGlzLl9wdXNoKHdyaXRlQnl0ZSwgMSwgMCk7XG59O1xuXG4vKipcbiAqIEZvcmtzIHRoaXMgd3JpdGVyJ3Mgc3RhdGUgYnkgcHVzaGluZyBpdCB0byBhIHN0YWNrLlxuICogQ2FsbGluZyB7QGxpbmsgV3JpdGVyI3Jlc2V0fHJlc2V0fSBvciB7QGxpbmsgV3JpdGVyI2xkZWxpbXxsZGVsaW19IHJlc2V0cyB0aGUgd3JpdGVyIHRvIHRoZSBwcmV2aW91cyBzdGF0ZS5cbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLmZvcmsgPSBmdW5jdGlvbiBmb3JrKCkge1xuICAgIHRoaXMuc3RhdGVzID0gbmV3IFN0YXRlKHRoaXMpO1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG5ldyBPcChub29wLCAwLCAwKTtcbiAgICB0aGlzLmxlbiA9IDA7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlc2V0cyB0aGlzIGluc3RhbmNlIHRvIHRoZSBsYXN0IHN0YXRlLlxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZXMpIHtcbiAgICAgICAgdGhpcy5oZWFkICAgPSB0aGlzLnN0YXRlcy5oZWFkO1xuICAgICAgICB0aGlzLnRhaWwgICA9IHRoaXMuc3RhdGVzLnRhaWw7XG4gICAgICAgIHRoaXMubGVuICAgID0gdGhpcy5zdGF0ZXMubGVuO1xuICAgICAgICB0aGlzLnN0YXRlcyA9IHRoaXMuc3RhdGVzLm5leHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbmV3IE9wKG5vb3AsIDAsIDApO1xuICAgICAgICB0aGlzLmxlbiAgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVzZXRzIHRvIHRoZSBsYXN0IHN0YXRlIGFuZCBhcHBlbmRzIHRoZSBmb3JrIHN0YXRlJ3MgY3VycmVudCB3cml0ZSBsZW5ndGggYXMgYSB2YXJpbnQgZm9sbG93ZWQgYnkgaXRzIG9wZXJhdGlvbnMuXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5sZGVsaW0gPSBmdW5jdGlvbiBsZGVsaW0oKSB7XG4gICAgdmFyIGhlYWQgPSB0aGlzLmhlYWQsXG4gICAgICAgIHRhaWwgPSB0aGlzLnRhaWwsXG4gICAgICAgIGxlbiAgPSB0aGlzLmxlbjtcbiAgICB0aGlzLnJlc2V0KCkudWludDMyKGxlbik7XG4gICAgaWYgKGxlbikge1xuICAgICAgICB0aGlzLnRhaWwubmV4dCA9IGhlYWQubmV4dDsgLy8gc2tpcCBub29wXG4gICAgICAgIHRoaXMudGFpbCA9IHRhaWw7XG4gICAgICAgIHRoaXMubGVuICs9IGxlbjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEZpbmlzaGVzIHRoZSB3cml0ZSBvcGVyYXRpb24uXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gRmluaXNoZWQgYnVmZmVyXG4gKi9cbldyaXRlci5wcm90b3R5cGUuZmluaXNoID0gZnVuY3Rpb24gZmluaXNoKCkge1xuICAgIHZhciBoZWFkID0gdGhpcy5oZWFkLm5leHQsIC8vIHNraXAgbm9vcFxuICAgICAgICBidWYgID0gdGhpcy5jb25zdHJ1Y3Rvci5hbGxvYyh0aGlzLmxlbiksXG4gICAgICAgIHBvcyAgPSAwO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICAgIGhlYWQuZm4oaGVhZC52YWwsIGJ1ZiwgcG9zKTtcbiAgICAgICAgcG9zICs9IGhlYWQubGVuO1xuICAgICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgIH1cbiAgICAvLyB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHJldHVybiBidWY7XG59O1xuXG5Xcml0ZXIuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uKEJ1ZmZlcldyaXRlcl8pIHtcbiAgICBCdWZmZXJXcml0ZXIgPSBCdWZmZXJXcml0ZXJfO1xuICAgIFdyaXRlci5jcmVhdGUgPSBjcmVhdGUoKTtcbiAgICBCdWZmZXJXcml0ZXIuX2NvbmZpZ3VyZSgpO1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gQnVmZmVyV3JpdGVyO1xuXG4vLyBleHRlbmRzIFdyaXRlclxudmFyIFdyaXRlciA9IHJlcXVpcmUoXCIuL3dyaXRlclwiKTtcbihCdWZmZXJXcml0ZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShXcml0ZXIucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBCdWZmZXJXcml0ZXI7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgYnVmZmVyIHdyaXRlciBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgV2lyZSBmb3JtYXQgd3JpdGVyIHVzaW5nIG5vZGUgYnVmZmVycy5cbiAqIEBleHRlbmRzIFdyaXRlclxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEJ1ZmZlcldyaXRlcigpIHtcbiAgICBXcml0ZXIuY2FsbCh0aGlzKTtcbn1cblxuQnVmZmVyV3JpdGVyLl9jb25maWd1cmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQWxsb2NhdGVzIGEgYnVmZmVyIG9mIHRoZSBzcGVjaWZpZWQgc2l6ZS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZSBCdWZmZXIgc2l6ZVxuICAgICAqIEByZXR1cm5zIHtCdWZmZXJ9IEJ1ZmZlclxuICAgICAqL1xuICAgIEJ1ZmZlcldyaXRlci5hbGxvYyA9IHV0aWwuX0J1ZmZlcl9hbGxvY1Vuc2FmZTtcblxuICAgIEJ1ZmZlcldyaXRlci53cml0ZUJ5dGVzQnVmZmVyID0gdXRpbC5CdWZmZXIgJiYgdXRpbC5CdWZmZXIucHJvdG90eXBlIGluc3RhbmNlb2YgVWludDhBcnJheSAmJiB1dGlsLkJ1ZmZlci5wcm90b3R5cGUuc2V0Lm5hbWUgPT09IFwic2V0XCJcbiAgICAgICAgPyBmdW5jdGlvbiB3cml0ZUJ5dGVzQnVmZmVyX3NldCh2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgICAgICAgYnVmLnNldCh2YWwsIHBvcyk7IC8vIGZhc3RlciB0aGFuIGNvcHkgKHJlcXVpcmVzIG5vZGUgPj0gNCB3aGVyZSBCdWZmZXJzIGV4dGVuZCBVaW50OEFycmF5IGFuZCBzZXQgaXMgcHJvcGVybHkgaW5oZXJpdGVkKVxuICAgICAgICAgIC8vIGFsc28gd29ya3MgZm9yIHBsYWluIGFycmF5IHZhbHVlc1xuICAgICAgICB9XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIDogZnVuY3Rpb24gd3JpdGVCeXRlc0J1ZmZlcl9jb3B5KHZhbCwgYnVmLCBwb3MpIHtcbiAgICAgICAgICBpZiAodmFsLmNvcHkpIC8vIEJ1ZmZlciB2YWx1ZXNcbiAgICAgICAgICAgIHZhbC5jb3B5KGJ1ZiwgcG9zLCAwLCB2YWwubGVuZ3RoKTtcbiAgICAgICAgICBlbHNlIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDspIC8vIHBsYWluIGFycmF5IHZhbHVlc1xuICAgICAgICAgICAgYnVmW3BvcysrXSA9IHZhbFtpKytdO1xuICAgICAgICB9O1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5CdWZmZXJXcml0ZXIucHJvdG90eXBlLmJ5dGVzID0gZnVuY3Rpb24gd3JpdGVfYnl0ZXNfYnVmZmVyKHZhbHVlKSB7XG4gICAgaWYgKHV0aWwuaXNTdHJpbmcodmFsdWUpKVxuICAgICAgICB2YWx1ZSA9IHV0aWwuX0J1ZmZlcl9mcm9tKHZhbHVlLCBcImJhc2U2NFwiKTtcbiAgICB2YXIgbGVuID0gdmFsdWUubGVuZ3RoID4+PiAwO1xuICAgIHRoaXMudWludDMyKGxlbik7XG4gICAgaWYgKGxlbilcbiAgICAgICAgdGhpcy5fcHVzaChCdWZmZXJXcml0ZXIud3JpdGVCeXRlc0J1ZmZlciwgbGVuLCB2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiB3cml0ZVN0cmluZ0J1ZmZlcih2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgaWYgKHZhbC5sZW5ndGggPCA0MCkgLy8gcGxhaW4ganMgaXMgZmFzdGVyIGZvciBzaG9ydCBzdHJpbmdzIChwcm9iYWJseSBkdWUgdG8gcmVkdW5kYW50IGFzc2VydGlvbnMpXG4gICAgICAgIHV0aWwudXRmOC53cml0ZSh2YWwsIGJ1ZiwgcG9zKTtcbiAgICBlbHNlIGlmIChidWYudXRmOFdyaXRlKVxuICAgICAgICBidWYudXRmOFdyaXRlKHZhbCwgcG9zKTtcbiAgICBlbHNlXG4gICAgICAgIGJ1Zi53cml0ZSh2YWwsIHBvcyk7XG59XG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbkJ1ZmZlcldyaXRlci5wcm90b3R5cGUuc3RyaW5nID0gZnVuY3Rpb24gd3JpdGVfc3RyaW5nX2J1ZmZlcih2YWx1ZSkge1xuICAgIHZhciBsZW4gPSB1dGlsLkJ1ZmZlci5ieXRlTGVuZ3RoKHZhbHVlKTtcbiAgICB0aGlzLnVpbnQzMihsZW4pO1xuICAgIGlmIChsZW4pXG4gICAgICAgIHRoaXMuX3B1c2god3JpdGVTdHJpbmdCdWZmZXIsIGxlbiwgdmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG4vKipcbiAqIEZpbmlzaGVzIHRoZSB3cml0ZSBvcGVyYXRpb24uXG4gKiBAbmFtZSBCdWZmZXJXcml0ZXIjZmluaXNoXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IEZpbmlzaGVkIGJ1ZmZlclxuICovXG5cbkJ1ZmZlcldyaXRlci5fY29uZmlndXJlKCk7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRlcjtcblxudmFyIHV0aWwgICAgICA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcblxudmFyIEJ1ZmZlclJlYWRlcjsgLy8gY3ljbGljXG5cbnZhciBMb25nQml0cyAgPSB1dGlsLkxvbmdCaXRzLFxuICAgIHV0ZjggICAgICA9IHV0aWwudXRmODtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGluZGV4T3V0T2ZSYW5nZShyZWFkZXIsIHdyaXRlTGVuZ3RoKSB7XG4gICAgcmV0dXJuIFJhbmdlRXJyb3IoXCJpbmRleCBvdXQgb2YgcmFuZ2U6IFwiICsgcmVhZGVyLnBvcyArIFwiICsgXCIgKyAod3JpdGVMZW5ndGggfHwgMSkgKyBcIiA+IFwiICsgcmVhZGVyLmxlbik7XG59XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyByZWFkZXIgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBidWZmZXIuXG4gKiBAY2xhc3NkZXNjIFdpcmUgZm9ybWF0IHJlYWRlciB1c2luZyBgVWludDhBcnJheWAgaWYgYXZhaWxhYmxlLCBvdGhlcndpc2UgYEFycmF5YC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZmZXIgQnVmZmVyIHRvIHJlYWQgZnJvbVxuICovXG5mdW5jdGlvbiBSZWFkZXIoYnVmZmVyKSB7XG5cbiAgICAvKipcbiAgICAgKiBSZWFkIGJ1ZmZlci5cbiAgICAgKiBAdHlwZSB7VWludDhBcnJheX1cbiAgICAgKi9cbiAgICB0aGlzLmJ1ZiA9IGJ1ZmZlcjtcblxuICAgIC8qKlxuICAgICAqIFJlYWQgYnVmZmVyIHBvc2l0aW9uLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5wb3MgPSAwO1xuXG4gICAgLyoqXG4gICAgICogUmVhZCBidWZmZXIgbGVuZ3RoLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5sZW4gPSBidWZmZXIubGVuZ3RoO1xufVxuXG52YXIgY3JlYXRlX2FycmF5ID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09IFwidW5kZWZpbmVkXCJcbiAgICA/IGZ1bmN0aW9uIGNyZWF0ZV90eXBlZF9hcnJheShidWZmZXIpIHtcbiAgICAgICAgaWYgKGJ1ZmZlciBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHwgQXJyYXkuaXNBcnJheShidWZmZXIpKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWFkZXIoYnVmZmVyKTtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJpbGxlZ2FsIGJ1ZmZlclwiKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICA6IGZ1bmN0aW9uIGNyZWF0ZV9hcnJheShidWZmZXIpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYnVmZmVyKSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVhZGVyKGJ1ZmZlcik7XG4gICAgICAgIHRocm93IEVycm9yKFwiaWxsZWdhbCBidWZmZXJcIik7XG4gICAgfTtcblxudmFyIGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICByZXR1cm4gdXRpbC5CdWZmZXJcbiAgICAgICAgPyBmdW5jdGlvbiBjcmVhdGVfYnVmZmVyX3NldHVwKGJ1ZmZlcikge1xuICAgICAgICAgICAgcmV0dXJuIChSZWFkZXIuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlX2J1ZmZlcihidWZmZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXRpbC5CdWZmZXIuaXNCdWZmZXIoYnVmZmVyKVxuICAgICAgICAgICAgICAgICAgICA/IG5ldyBCdWZmZXJSZWFkZXIoYnVmZmVyKVxuICAgICAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgICAgICAgICA6IGNyZWF0ZV9hcnJheShidWZmZXIpO1xuICAgICAgICAgICAgfSkoYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICA6IGNyZWF0ZV9hcnJheTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyByZWFkZXIgdXNpbmcgdGhlIHNwZWNpZmllZCBidWZmZXIuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7VWludDhBcnJheXxCdWZmZXJ9IGJ1ZmZlciBCdWZmZXIgdG8gcmVhZCBmcm9tXG4gKiBAcmV0dXJucyB7UmVhZGVyfEJ1ZmZlclJlYWRlcn0gQSB7QGxpbmsgQnVmZmVyUmVhZGVyfSBpZiBgYnVmZmVyYCBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGEge0BsaW5rIFJlYWRlcn1cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBgYnVmZmVyYCBpcyBub3QgYSB2YWxpZCBidWZmZXJcbiAqL1xuUmVhZGVyLmNyZWF0ZSA9IGNyZWF0ZSgpO1xuXG5SZWFkZXIucHJvdG90eXBlLl9zbGljZSA9IHV0aWwuQXJyYXkucHJvdG90eXBlLnN1YmFycmF5IHx8IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHV0aWwuQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG4vKipcbiAqIFJlYWRzIGEgdmFyaW50IGFzIGFuIHVuc2lnbmVkIDMyIGJpdCB2YWx1ZS5cbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxuICovXG5SZWFkZXIucHJvdG90eXBlLnVpbnQzMiA9IChmdW5jdGlvbiByZWFkX3VpbnQzMl9zZXR1cCgpIHtcbiAgICB2YXIgdmFsdWUgPSA0Mjk0OTY3Mjk1OyAvLyBvcHRpbWl6ZXIgdHlwZS1oaW50LCB0ZW5kcyB0byBkZW9wdCBvdGhlcndpc2UgKD8hKVxuICAgIHJldHVybiBmdW5jdGlvbiByZWFkX3VpbnQzMigpIHtcbiAgICAgICAgdmFsdWUgPSAoICAgICAgICAgdGhpcy5idWZbdGhpcy5wb3NdICYgMTI3ICAgICAgICkgPj4+IDA7IGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOCkgcmV0dXJuIHZhbHVlO1xuICAgICAgICB2YWx1ZSA9ICh2YWx1ZSB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpIDw8ICA3KSA+Pj4gMDsgaWYgKHRoaXMuYnVmW3RoaXMucG9zKytdIDwgMTI4KSByZXR1cm4gdmFsdWU7XG4gICAgICAgIHZhbHVlID0gKHZhbHVlIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPDwgMTQpID4+PiAwOyBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpIHJldHVybiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSAodmFsdWUgfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCAyMSkgPj4+IDA7IGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOCkgcmV0dXJuIHZhbHVlO1xuICAgICAgICB2YWx1ZSA9ICh2YWx1ZSB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAgMTUpIDw8IDI4KSA+Pj4gMDsgaWYgKHRoaXMuYnVmW3RoaXMucG9zKytdIDwgMTI4KSByZXR1cm4gdmFsdWU7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICgodGhpcy5wb3MgKz0gNSkgPiB0aGlzLmxlbikge1xuICAgICAgICAgICAgdGhpcy5wb3MgPSB0aGlzLmxlbjtcbiAgICAgICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzLCAxMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG59KSgpO1xuXG4vKipcbiAqIFJlYWRzIGEgdmFyaW50IGFzIGEgc2lnbmVkIDMyIGJpdCB2YWx1ZS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5pbnQzMiA9IGZ1bmN0aW9uIHJlYWRfaW50MzIoKSB7XG4gICAgcmV0dXJuIHRoaXMudWludDMyKCkgfCAwO1xufTtcblxuLyoqXG4gKiBSZWFkcyBhIHppZy16YWcgZW5jb2RlZCB2YXJpbnQgYXMgYSBzaWduZWQgMzIgYml0IHZhbHVlLlxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxuICovXG5SZWFkZXIucHJvdG90eXBlLnNpbnQzMiA9IGZ1bmN0aW9uIHJlYWRfc2ludDMyKCkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMudWludDMyKCk7XG4gICAgcmV0dXJuIHZhbHVlID4+PiAxIF4gLSh2YWx1ZSAmIDEpIHwgMDtcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWludmFsaWQtdGhpcyAqL1xuXG5mdW5jdGlvbiByZWFkTG9uZ1ZhcmludCgpIHtcbiAgICAvLyB0ZW5kcyB0byBkZW9wdCB3aXRoIGxvY2FsIHZhcnMgZm9yIG9jdGV0IGV0Yy5cbiAgICB2YXIgYml0cyA9IG5ldyBMb25nQml0cygwLCAwKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgaWYgKHRoaXMubGVuIC0gdGhpcy5wb3MgPiA0KSB7IC8vIGZhc3Qgcm91dGUgKGxvKVxuICAgICAgICBmb3IgKDsgaSA8IDQ7ICsraSkge1xuICAgICAgICAgICAgLy8gMXN0Li40dGhcbiAgICAgICAgICAgIGJpdHMubG8gPSAoYml0cy5sbyB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpIDw8IGkgKiA3KSA+Pj4gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOClcbiAgICAgICAgICAgICAgICByZXR1cm4gYml0cztcbiAgICAgICAgfVxuICAgICAgICAvLyA1dGhcbiAgICAgICAgYml0cy5sbyA9IChiaXRzLmxvIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPDwgMjgpID4+PiAwO1xuICAgICAgICBiaXRzLmhpID0gKGJpdHMuaGkgfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA+PiAgNCkgPj4+IDA7XG4gICAgICAgIGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOClcbiAgICAgICAgICAgIHJldHVybiBiaXRzO1xuICAgICAgICBpID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKDsgaSA8IDM7ICsraSkge1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICBpZiAodGhpcy5wb3MgPj0gdGhpcy5sZW4pXG4gICAgICAgICAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMpO1xuICAgICAgICAgICAgLy8gMXN0Li4zdGhcbiAgICAgICAgICAgIGJpdHMubG8gPSAoYml0cy5sbyB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpIDw8IGkgKiA3KSA+Pj4gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOClcbiAgICAgICAgICAgICAgICByZXR1cm4gYml0cztcbiAgICAgICAgfVxuICAgICAgICAvLyA0dGhcbiAgICAgICAgYml0cy5sbyA9IChiaXRzLmxvIHwgKHRoaXMuYnVmW3RoaXMucG9zKytdICYgMTI3KSA8PCBpICogNykgPj4+IDA7XG4gICAgICAgIHJldHVybiBiaXRzO1xuICAgIH1cbiAgICBpZiAodGhpcy5sZW4gLSB0aGlzLnBvcyA+IDQpIHsgLy8gZmFzdCByb3V0ZSAoaGkpXG4gICAgICAgIGZvciAoOyBpIDwgNTsgKytpKSB7XG4gICAgICAgICAgICAvLyA2dGguLjEwdGhcbiAgICAgICAgICAgIGJpdHMuaGkgPSAoYml0cy5oaSB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpIDw8IGkgKiA3ICsgMykgPj4+IDA7XG4gICAgICAgICAgICBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpdHM7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKDsgaSA8IDU7ICsraSkge1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICBpZiAodGhpcy5wb3MgPj0gdGhpcy5sZW4pXG4gICAgICAgICAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMpO1xuICAgICAgICAgICAgLy8gNnRoLi4xMHRoXG4gICAgICAgICAgICBiaXRzLmhpID0gKGJpdHMuaGkgfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCBpICogNyArIDMpID4+PiAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuYnVmW3RoaXMucG9zKytdIDwgMTI4KVxuICAgICAgICAgICAgICAgIHJldHVybiBiaXRzO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgdGhyb3cgRXJyb3IoXCJpbnZhbGlkIHZhcmludCBlbmNvZGluZ1wiKTtcbn1cblxuLyogZXNsaW50LWVuYWJsZSBuby1pbnZhbGlkLXRoaXMgKi9cblxuLyoqXG4gKiBSZWFkcyBhIHZhcmludCBhcyBhIHNpZ25lZCA2NCBiaXQgdmFsdWUuXG4gKiBAbmFtZSBSZWFkZXIjaW50NjRcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0xvbmd9IFZhbHVlIHJlYWRcbiAqL1xuXG4vKipcbiAqIFJlYWRzIGEgdmFyaW50IGFzIGFuIHVuc2lnbmVkIDY0IGJpdCB2YWx1ZS5cbiAqIEBuYW1lIFJlYWRlciN1aW50NjRcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0xvbmd9IFZhbHVlIHJlYWRcbiAqL1xuXG4vKipcbiAqIFJlYWRzIGEgemlnLXphZyBlbmNvZGVkIHZhcmludCBhcyBhIHNpZ25lZCA2NCBiaXQgdmFsdWUuXG4gKiBAbmFtZSBSZWFkZXIjc2ludDY0XG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtMb25nfSBWYWx1ZSByZWFkXG4gKi9cblxuLyoqXG4gKiBSZWFkcyBhIHZhcmludCBhcyBhIGJvb2xlYW4uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVmFsdWUgcmVhZFxuICovXG5SZWFkZXIucHJvdG90eXBlLmJvb2wgPSBmdW5jdGlvbiByZWFkX2Jvb2woKSB7XG4gICAgcmV0dXJuIHRoaXMudWludDMyKCkgIT09IDA7XG59O1xuXG5mdW5jdGlvbiByZWFkRml4ZWQzMl9lbmQoYnVmLCBlbmQpIHsgLy8gbm90ZSB0aGF0IHRoaXMgdXNlcyBgZW5kYCwgbm90IGBwb3NgXG4gICAgcmV0dXJuIChidWZbZW5kIC0gNF1cbiAgICAgICAgICB8IGJ1ZltlbmQgLSAzXSA8PCA4XG4gICAgICAgICAgfCBidWZbZW5kIC0gMl0gPDwgMTZcbiAgICAgICAgICB8IGJ1ZltlbmQgLSAxXSA8PCAyNCkgPj4+IDA7XG59XG5cbi8qKlxuICogUmVhZHMgZml4ZWQgMzIgYml0cyBhcyBhbiB1bnNpZ25lZCAzMiBiaXQgaW50ZWdlci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5maXhlZDMyID0gZnVuY3Rpb24gcmVhZF9maXhlZDMyKCkge1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHRoaXMucG9zICsgNCA+IHRoaXMubGVuKVxuICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgNCk7XG5cbiAgICByZXR1cm4gcmVhZEZpeGVkMzJfZW5kKHRoaXMuYnVmLCB0aGlzLnBvcyArPSA0KTtcbn07XG5cbi8qKlxuICogUmVhZHMgZml4ZWQgMzIgYml0cyBhcyBhIHNpZ25lZCAzMiBiaXQgaW50ZWdlci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5zZml4ZWQzMiA9IGZ1bmN0aW9uIHJlYWRfc2ZpeGVkMzIoKSB7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAodGhpcy5wb3MgKyA0ID4gdGhpcy5sZW4pXG4gICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzLCA0KTtcblxuICAgIHJldHVybiByZWFkRml4ZWQzMl9lbmQodGhpcy5idWYsIHRoaXMucG9zICs9IDQpIHwgMDtcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWludmFsaWQtdGhpcyAqL1xuXG5mdW5jdGlvbiByZWFkRml4ZWQ2NCgvKiB0aGlzOiBSZWFkZXIgKi8pIHtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICh0aGlzLnBvcyArIDggPiB0aGlzLmxlbilcbiAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMsIDgpO1xuXG4gICAgcmV0dXJuIG5ldyBMb25nQml0cyhyZWFkRml4ZWQzMl9lbmQodGhpcy5idWYsIHRoaXMucG9zICs9IDQpLCByZWFkRml4ZWQzMl9lbmQodGhpcy5idWYsIHRoaXMucG9zICs9IDQpKTtcbn1cblxuLyogZXNsaW50LWVuYWJsZSBuby1pbnZhbGlkLXRoaXMgKi9cblxuLyoqXG4gKiBSZWFkcyBmaXhlZCA2NCBiaXRzLlxuICogQG5hbWUgUmVhZGVyI2ZpeGVkNjRcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0xvbmd9IFZhbHVlIHJlYWRcbiAqL1xuXG4vKipcbiAqIFJlYWRzIHppZy16YWcgZW5jb2RlZCBmaXhlZCA2NCBiaXRzLlxuICogQG5hbWUgUmVhZGVyI3NmaXhlZDY0XG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtMb25nfSBWYWx1ZSByZWFkXG4gKi9cblxuLyoqXG4gKiBSZWFkcyBhIGZsb2F0ICgzMiBiaXQpIGFzIGEgbnVtYmVyLlxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXG4gKi9cblJlYWRlci5wcm90b3R5cGUuZmxvYXQgPSBmdW5jdGlvbiByZWFkX2Zsb2F0KCkge1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHRoaXMucG9zICsgNCA+IHRoaXMubGVuKVxuICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgNCk7XG5cbiAgICB2YXIgdmFsdWUgPSB1dGlsLmZsb2F0LnJlYWRGbG9hdExFKHRoaXMuYnVmLCB0aGlzLnBvcyk7XG4gICAgdGhpcy5wb3MgKz0gNDtcbiAgICByZXR1cm4gdmFsdWU7XG59O1xuXG4vKipcbiAqIFJlYWRzIGEgZG91YmxlICg2NCBiaXQgZmxvYXQpIGFzIGEgbnVtYmVyLlxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXG4gKi9cblJlYWRlci5wcm90b3R5cGUuZG91YmxlID0gZnVuY3Rpb24gcmVhZF9kb3VibGUoKSB7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAodGhpcy5wb3MgKyA4ID4gdGhpcy5sZW4pXG4gICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzLCA0KTtcblxuICAgIHZhciB2YWx1ZSA9IHV0aWwuZmxvYXQucmVhZERvdWJsZUxFKHRoaXMuYnVmLCB0aGlzLnBvcyk7XG4gICAgdGhpcy5wb3MgKz0gODtcbiAgICByZXR1cm4gdmFsdWU7XG59O1xuXG4vKipcbiAqIFJlYWRzIGEgc2VxdWVuY2Ugb2YgYnl0ZXMgcHJlY2VlZGVkIGJ5IGl0cyBsZW5ndGggYXMgYSB2YXJpbnQuXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gVmFsdWUgcmVhZFxuICovXG5SZWFkZXIucHJvdG90eXBlLmJ5dGVzID0gZnVuY3Rpb24gcmVhZF9ieXRlcygpIHtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy51aW50MzIoKSxcbiAgICAgICAgc3RhcnQgID0gdGhpcy5wb3MsXG4gICAgICAgIGVuZCAgICA9IHRoaXMucG9zICsgbGVuZ3RoO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGVuZCA+IHRoaXMubGVuKVxuICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgbGVuZ3RoKTtcblxuICAgIHRoaXMucG9zICs9IGxlbmd0aDtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmJ1ZikpIC8vIHBsYWluIGFycmF5XG4gICAgICAgIHJldHVybiB0aGlzLmJ1Zi5zbGljZShzdGFydCwgZW5kKTtcbiAgICByZXR1cm4gc3RhcnQgPT09IGVuZCAvLyBmaXggZm9yIElFIDEwL1dpbjggYW5kIG90aGVycycgc3ViYXJyYXkgcmV0dXJuaW5nIGFycmF5IG9mIHNpemUgMVxuICAgICAgICA/IG5ldyB0aGlzLmJ1Zi5jb25zdHJ1Y3RvcigwKVxuICAgICAgICA6IHRoaXMuX3NsaWNlLmNhbGwodGhpcy5idWYsIHN0YXJ0LCBlbmQpO1xufTtcblxuLyoqXG4gKiBSZWFkcyBhIHN0cmluZyBwcmVjZWVkZWQgYnkgaXRzIGJ5dGUgbGVuZ3RoIGFzIGEgdmFyaW50LlxuICogQHJldHVybnMge3N0cmluZ30gVmFsdWUgcmVhZFxuICovXG5SZWFkZXIucHJvdG90eXBlLnN0cmluZyA9IGZ1bmN0aW9uIHJlYWRfc3RyaW5nKCkge1xuICAgIHZhciBieXRlcyA9IHRoaXMuYnl0ZXMoKTtcbiAgICByZXR1cm4gdXRmOC5yZWFkKGJ5dGVzLCAwLCBieXRlcy5sZW5ndGgpO1xufTtcblxuLyoqXG4gKiBTa2lwcyB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBieXRlcyBpZiBzcGVjaWZpZWQsIG90aGVyd2lzZSBza2lwcyBhIHZhcmludC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoXSBMZW5ndGggaWYga25vd24sIG90aGVyd2lzZSBhIHZhcmludCBpcyBhc3N1bWVkXG4gKiBAcmV0dXJucyB7UmVhZGVyfSBgdGhpc2BcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5za2lwID0gZnVuY3Rpb24gc2tpcChsZW5ndGgpIHtcbiAgICBpZiAodHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHRoaXMucG9zICsgbGVuZ3RoID4gdGhpcy5sZW4pXG4gICAgICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgbGVuZ3RoKTtcbiAgICAgICAgdGhpcy5wb3MgKz0gbGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgaWYgKHRoaXMucG9zID49IHRoaXMubGVuKVxuICAgICAgICAgICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzKTtcbiAgICAgICAgfSB3aGlsZSAodGhpcy5idWZbdGhpcy5wb3MrK10gJiAxMjgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2tpcHMgdGhlIG5leHQgZWxlbWVudCBvZiB0aGUgc3BlY2lmaWVkIHdpcmUgdHlwZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB3aXJlVHlwZSBXaXJlIHR5cGUgcmVjZWl2ZWRcbiAqIEByZXR1cm5zIHtSZWFkZXJ9IGB0aGlzYFxuICovXG5SZWFkZXIucHJvdG90eXBlLnNraXBUeXBlID0gZnVuY3Rpb24od2lyZVR5cGUpIHtcbiAgICBzd2l0Y2ggKHdpcmVUeXBlKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHRoaXMuc2tpcCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHRoaXMuc2tpcCg4KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICB0aGlzLnNraXAodGhpcy51aW50MzIoKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgd2hpbGUgKCh3aXJlVHlwZSA9IHRoaXMudWludDMyKCkgJiA3KSAhPT0gNCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2tpcFR5cGUod2lyZVR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIHRoaXMuc2tpcCg0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcImludmFsaWQgd2lyZSB0eXBlIFwiICsgd2lyZVR5cGUgKyBcIiBhdCBvZmZzZXQgXCIgKyB0aGlzLnBvcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblxuUmVhZGVyLl9jb25maWd1cmUgPSBmdW5jdGlvbihCdWZmZXJSZWFkZXJfKSB7XG4gICAgQnVmZmVyUmVhZGVyID0gQnVmZmVyUmVhZGVyXztcbiAgICBSZWFkZXIuY3JlYXRlID0gY3JlYXRlKCk7XG4gICAgQnVmZmVyUmVhZGVyLl9jb25maWd1cmUoKTtcblxuICAgIHZhciBmbiA9IHV0aWwuTG9uZyA/IFwidG9Mb25nXCIgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBcInRvTnVtYmVyXCI7XG4gICAgdXRpbC5tZXJnZShSZWFkZXIucHJvdG90eXBlLCB7XG5cbiAgICAgICAgaW50NjQ6IGZ1bmN0aW9uIHJlYWRfaW50NjQoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVhZExvbmdWYXJpbnQuY2FsbCh0aGlzKVtmbl0oZmFsc2UpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVpbnQ2NDogZnVuY3Rpb24gcmVhZF91aW50NjQoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVhZExvbmdWYXJpbnQuY2FsbCh0aGlzKVtmbl0odHJ1ZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2ludDY0OiBmdW5jdGlvbiByZWFkX3NpbnQ2NCgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWFkTG9uZ1ZhcmludC5jYWxsKHRoaXMpLnp6RGVjb2RlKClbZm5dKGZhbHNlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBmaXhlZDY0OiBmdW5jdGlvbiByZWFkX2ZpeGVkNjQoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVhZEZpeGVkNjQuY2FsbCh0aGlzKVtmbl0odHJ1ZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2ZpeGVkNjQ6IGZ1bmN0aW9uIHJlYWRfc2ZpeGVkNjQoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVhZEZpeGVkNjQuY2FsbCh0aGlzKVtmbl0oZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICB9KTtcbn07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IEJ1ZmZlclJlYWRlcjtcblxuLy8gZXh0ZW5kcyBSZWFkZXJcbnZhciBSZWFkZXIgPSByZXF1aXJlKFwiLi9yZWFkZXJcIik7XG4oQnVmZmVyUmVhZGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUmVhZGVyLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gQnVmZmVyUmVhZGVyO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1ZmZlciByZWFkZXIgaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIFdpcmUgZm9ybWF0IHJlYWRlciB1c2luZyBub2RlIGJ1ZmZlcnMuXG4gKiBAZXh0ZW5kcyBSZWFkZXJcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBCdWZmZXIgdG8gcmVhZCBmcm9tXG4gKi9cbmZ1bmN0aW9uIEJ1ZmZlclJlYWRlcihidWZmZXIpIHtcbiAgICBSZWFkZXIuY2FsbCh0aGlzLCBidWZmZXIpO1xuXG4gICAgLyoqXG4gICAgICogUmVhZCBidWZmZXIuXG4gICAgICogQG5hbWUgQnVmZmVyUmVhZGVyI2J1ZlxuICAgICAqIEB0eXBlIHtCdWZmZXJ9XG4gICAgICovXG59XG5cbkJ1ZmZlclJlYWRlci5fY29uZmlndXJlID0gZnVuY3Rpb24gKCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHV0aWwuQnVmZmVyKVxuICAgICAgICBCdWZmZXJSZWFkZXIucHJvdG90eXBlLl9zbGljZSA9IHV0aWwuQnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuQnVmZmVyUmVhZGVyLnByb3RvdHlwZS5zdHJpbmcgPSBmdW5jdGlvbiByZWFkX3N0cmluZ19idWZmZXIoKSB7XG4gICAgdmFyIGxlbiA9IHRoaXMudWludDMyKCk7IC8vIG1vZGlmaWVzIHBvc1xuICAgIHJldHVybiB0aGlzLmJ1Zi51dGY4U2xpY2VcbiAgICAgICAgPyB0aGlzLmJ1Zi51dGY4U2xpY2UodGhpcy5wb3MsIHRoaXMucG9zID0gTWF0aC5taW4odGhpcy5wb3MgKyBsZW4sIHRoaXMubGVuKSlcbiAgICAgICAgOiB0aGlzLmJ1Zi50b1N0cmluZyhcInV0Zi04XCIsIHRoaXMucG9zLCB0aGlzLnBvcyA9IE1hdGgubWluKHRoaXMucG9zICsgbGVuLCB0aGlzLmxlbikpO1xufTtcblxuLyoqXG4gKiBSZWFkcyBhIHNlcXVlbmNlIG9mIGJ5dGVzIHByZWNlZWRlZCBieSBpdHMgbGVuZ3RoIGFzIGEgdmFyaW50LlxuICogQG5hbWUgQnVmZmVyUmVhZGVyI2J5dGVzXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFZhbHVlIHJlYWRcbiAqL1xuXG5CdWZmZXJSZWFkZXIuX2NvbmZpZ3VyZSgpO1xuIiwgIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBTZXJ2aWNlO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuLi91dGlsL21pbmltYWxcIik7XG5cbi8vIEV4dGVuZHMgRXZlbnRFbWl0dGVyXG4oU2VydmljZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHV0aWwuRXZlbnRFbWl0dGVyLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gU2VydmljZTtcblxuLyoqXG4gKiBBIHNlcnZpY2UgbWV0aG9kIGNhbGxiYWNrIGFzIHVzZWQgYnkge0BsaW5rIHJwYy5TZXJ2aWNlTWV0aG9kfFNlcnZpY2VNZXRob2R9LlxuICpcbiAqIERpZmZlcnMgZnJvbSB7QGxpbmsgUlBDSW1wbENhbGxiYWNrfSBpbiB0aGF0IGl0IGlzIGFuIGFjdHVhbCBjYWxsYmFjayBvZiBhIHNlcnZpY2UgbWV0aG9kIHdoaWNoIG1heSBub3QgcmV0dXJuIGByZXNwb25zZSA9IG51bGxgLlxuICogQHR5cGVkZWYgcnBjLlNlcnZpY2VNZXRob2RDYWxsYmFja1xuICogQHRlbXBsYXRlIFRSZXMgZXh0ZW5kcyBNZXNzYWdlPFRSZXM+XG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcGFyYW0ge0Vycm9yfG51bGx9IGVycm9yIEVycm9yLCBpZiBhbnlcbiAqIEBwYXJhbSB7VFJlc30gW3Jlc3BvbnNlXSBSZXNwb25zZSBtZXNzYWdlXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5cbi8qKlxuICogQSBzZXJ2aWNlIG1ldGhvZCBwYXJ0IG9mIGEge0BsaW5rIHJwYy5TZXJ2aWNlfSBhcyBjcmVhdGVkIGJ5IHtAbGluayBTZXJ2aWNlLmNyZWF0ZX0uXG4gKiBAdHlwZWRlZiBycGMuU2VydmljZU1ldGhvZFxuICogQHRlbXBsYXRlIFRSZXEgZXh0ZW5kcyBNZXNzYWdlPFRSZXE+XG4gKiBAdGVtcGxhdGUgVFJlcyBleHRlbmRzIE1lc3NhZ2U8VFJlcz5cbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEBwYXJhbSB7VFJlcXxQcm9wZXJ0aWVzPFRSZXE+fSByZXF1ZXN0IFJlcXVlc3QgbWVzc2FnZSBvciBwbGFpbiBvYmplY3RcbiAqIEBwYXJhbSB7cnBjLlNlcnZpY2VNZXRob2RDYWxsYmFjazxUUmVzPn0gW2NhbGxiYWNrXSBOb2RlLXN0eWxlIGNhbGxiYWNrIGNhbGxlZCB3aXRoIHRoZSBlcnJvciwgaWYgYW55LCBhbmQgdGhlIHJlc3BvbnNlIG1lc3NhZ2VcbiAqIEByZXR1cm5zIHtQcm9taXNlPE1lc3NhZ2U8VFJlcz4+fSBQcm9taXNlIGlmIGBjYWxsYmFja2AgaGFzIGJlZW4gb21pdHRlZCwgb3RoZXJ3aXNlIGB1bmRlZmluZWRgXG4gKi9cblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IFJQQyBzZXJ2aWNlIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBBbiBSUEMgc2VydmljZSBhcyByZXR1cm5lZCBieSB7QGxpbmsgU2VydmljZSNjcmVhdGV9LlxuICogQGV4cG9ydHMgcnBjLlNlcnZpY2VcbiAqIEBleHRlbmRzIHV0aWwuRXZlbnRFbWl0dGVyXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7UlBDSW1wbH0gcnBjSW1wbCBSUEMgaW1wbGVtZW50YXRpb25cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JlcXVlc3REZWxpbWl0ZWQ9ZmFsc2VdIFdoZXRoZXIgcmVxdWVzdHMgYXJlIGxlbmd0aC1kZWxpbWl0ZWRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Jlc3BvbnNlRGVsaW1pdGVkPWZhbHNlXSBXaGV0aGVyIHJlc3BvbnNlcyBhcmUgbGVuZ3RoLWRlbGltaXRlZFxuICovXG5mdW5jdGlvbiBTZXJ2aWNlKHJwY0ltcGwsIHJlcXVlc3REZWxpbWl0ZWQsIHJlc3BvbnNlRGVsaW1pdGVkKSB7XG5cbiAgICBpZiAodHlwZW9mIHJwY0ltcGwgIT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwicnBjSW1wbCBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG5cbiAgICB1dGlsLkV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gICAgLyoqXG4gICAgICogUlBDIGltcGxlbWVudGF0aW9uLiBCZWNvbWVzIGBudWxsYCBvbmNlIHRoZSBzZXJ2aWNlIGlzIGVuZGVkLlxuICAgICAqIEB0eXBlIHtSUENJbXBsfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5ycGNJbXBsID0gcnBjSW1wbDtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgcmVxdWVzdHMgYXJlIGxlbmd0aC1kZWxpbWl0ZWQuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5yZXF1ZXN0RGVsaW1pdGVkID0gQm9vbGVhbihyZXF1ZXN0RGVsaW1pdGVkKTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgcmVzcG9uc2VzIGFyZSBsZW5ndGgtZGVsaW1pdGVkLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMucmVzcG9uc2VEZWxpbWl0ZWQgPSBCb29sZWFuKHJlc3BvbnNlRGVsaW1pdGVkKTtcbn1cblxuLyoqXG4gKiBDYWxscyBhIHNlcnZpY2UgbWV0aG9kIHRocm91Z2gge0BsaW5rIHJwYy5TZXJ2aWNlI3JwY0ltcGx8cnBjSW1wbH0uXG4gKiBAcGFyYW0ge01ldGhvZHxycGMuU2VydmljZU1ldGhvZDxUUmVxLFRSZXM+fSBtZXRob2QgUmVmbGVjdGVkIG9yIHN0YXRpYyBtZXRob2RcbiAqIEBwYXJhbSB7Q29uc3RydWN0b3I8VFJlcT59IHJlcXVlc3RDdG9yIFJlcXVlc3QgY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7Q29uc3RydWN0b3I8VFJlcz59IHJlc3BvbnNlQ3RvciBSZXNwb25zZSBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtUUmVxfFByb3BlcnRpZXM8VFJlcT59IHJlcXVlc3QgUmVxdWVzdCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdFxuICogQHBhcmFtIHtycGMuU2VydmljZU1ldGhvZENhbGxiYWNrPFRSZXM+fSBjYWxsYmFjayBTZXJ2aWNlIGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogQHRlbXBsYXRlIFRSZXEgZXh0ZW5kcyBNZXNzYWdlPFRSZXE+XG4gKiBAdGVtcGxhdGUgVFJlcyBleHRlbmRzIE1lc3NhZ2U8VFJlcz5cbiAqL1xuU2VydmljZS5wcm90b3R5cGUucnBjQ2FsbCA9IGZ1bmN0aW9uIHJwY0NhbGwobWV0aG9kLCByZXF1ZXN0Q3RvciwgcmVzcG9uc2VDdG9yLCByZXF1ZXN0LCBjYWxsYmFjaykge1xuXG4gICAgaWYgKCFyZXF1ZXN0KVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJyZXF1ZXN0IG11c3QgYmUgc3BlY2lmaWVkXCIpO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICghY2FsbGJhY2spXG4gICAgICAgIHJldHVybiB1dGlsLmFzUHJvbWlzZShycGNDYWxsLCBzZWxmLCBtZXRob2QsIHJlcXVlc3RDdG9yLCByZXNwb25zZUN0b3IsIHJlcXVlc3QpO1xuXG4gICAgaWYgKCFzZWxmLnJwY0ltcGwpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2FsbGJhY2soRXJyb3IoXCJhbHJlYWR5IGVuZGVkXCIpKTsgfSwgMCk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHNlbGYucnBjSW1wbChcbiAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgIHJlcXVlc3RDdG9yW3NlbGYucmVxdWVzdERlbGltaXRlZCA/IFwiZW5jb2RlRGVsaW1pdGVkXCIgOiBcImVuY29kZVwiXShyZXF1ZXN0KS5maW5pc2goKSxcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJwY0NhbGxiYWNrKGVyciwgcmVzcG9uc2UpIHtcblxuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5lbWl0KFwiZXJyb3JcIiwgZXJyLCBtZXRob2QpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5lbmQoLyogZW5kZWRCeVJQQyAqLyB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIShyZXNwb25zZSBpbnN0YW5jZW9mIHJlc3BvbnNlQ3RvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gcmVzcG9uc2VDdG9yW3NlbGYucmVzcG9uc2VEZWxpbWl0ZWQgPyBcImRlY29kZURlbGltaXRlZFwiIDogXCJkZWNvZGVcIl0ocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZW1pdChcImVycm9yXCIsIGVyciwgbWV0aG9kKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VsZi5lbWl0KFwiZGF0YVwiLCByZXNwb25zZSwgbWV0aG9kKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBzZWxmLmVtaXQoXCJlcnJvclwiLCBlcnIsIG1ldGhvZCk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGNhbGxiYWNrKGVycik7IH0sIDApO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn07XG5cbi8qKlxuICogRW5kcyB0aGlzIHNlcnZpY2UgYW5kIGVtaXRzIHRoZSBgZW5kYCBldmVudC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2VuZGVkQnlSUEM9ZmFsc2VdIFdoZXRoZXIgdGhlIHNlcnZpY2UgaGFzIGJlZW4gZW5kZWQgYnkgdGhlIFJQQyBpbXBsZW1lbnRhdGlvbi5cbiAqIEByZXR1cm5zIHtycGMuU2VydmljZX0gYHRoaXNgXG4gKi9cblNlcnZpY2UucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIGVuZChlbmRlZEJ5UlBDKSB7XG4gICAgaWYgKHRoaXMucnBjSW1wbCkge1xuICAgICAgICBpZiAoIWVuZGVkQnlSUEMpIC8vIHNpZ25hbCBlbmQgdG8gcnBjSW1wbFxuICAgICAgICAgICAgdGhpcy5ycGNJbXBsKG51bGwsIG51bGwsIG51bGwpO1xuICAgICAgICB0aGlzLnJwY0ltcGwgPSBudWxsO1xuICAgICAgICB0aGlzLmVtaXQoXCJlbmRcIikub2ZmKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBTdHJlYW1pbmcgUlBDIGhlbHBlcnMuXG4gKiBAbmFtZXNwYWNlXG4gKi9cbnZhciBycGMgPSBleHBvcnRzO1xuXG4vKipcbiAqIFJQQyBpbXBsZW1lbnRhdGlvbiBwYXNzZWQgdG8ge0BsaW5rIFNlcnZpY2UjY3JlYXRlfSBwZXJmb3JtaW5nIGEgc2VydmljZSByZXF1ZXN0IG9uIG5ldHdvcmsgbGV2ZWwsIGkuZS4gYnkgdXRpbGl6aW5nIGh0dHAgcmVxdWVzdHMgb3Igd2Vic29ja2V0cy5cbiAqIEB0eXBlZGVmIFJQQ0ltcGxcbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEBwYXJhbSB7TWV0aG9kfHJwYy5TZXJ2aWNlTWV0aG9kPE1lc3NhZ2U8e30+LE1lc3NhZ2U8e30+Pn0gbWV0aG9kIFJlZmxlY3RlZCBvciBzdGF0aWMgbWV0aG9kIGJlaW5nIGNhbGxlZFxuICogQHBhcmFtIHtVaW50OEFycmF5fSByZXF1ZXN0RGF0YSBSZXF1ZXN0IGRhdGFcbiAqIEBwYXJhbSB7UlBDSW1wbENhbGxiYWNrfSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvblxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqIEBleGFtcGxlXG4gKiBmdW5jdGlvbiBycGNJbXBsKG1ldGhvZCwgcmVxdWVzdERhdGEsIGNhbGxiYWNrKSB7XG4gKiAgICAgaWYgKHByb3RvYnVmLnV0aWwubGNGaXJzdChtZXRob2QubmFtZSkgIT09IFwibXlNZXRob2RcIikgLy8gY29tcGF0aWJsZSB3aXRoIHN0YXRpYyBjb2RlXG4gKiAgICAgICAgIHRocm93IEVycm9yKFwibm8gc3VjaCBtZXRob2RcIik7XG4gKiAgICAgYXN5bmNocm9ub3VzbHlPYnRhaW5BUmVzcG9uc2UocmVxdWVzdERhdGEsIGZ1bmN0aW9uKGVyciwgcmVzcG9uc2VEYXRhKSB7XG4gKiAgICAgICAgIGNhbGxiYWNrKGVyciwgcmVzcG9uc2VEYXRhKTtcbiAqICAgICB9KTtcbiAqIH1cbiAqL1xuXG4vKipcbiAqIE5vZGUtc3R5bGUgY2FsbGJhY2sgYXMgdXNlZCBieSB7QGxpbmsgUlBDSW1wbH0uXG4gKiBAdHlwZWRlZiBSUENJbXBsQ2FsbGJhY2tcbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEBwYXJhbSB7RXJyb3J8bnVsbH0gZXJyb3IgRXJyb3IsIGlmIGFueSwgb3RoZXJ3aXNlIGBudWxsYFxuICogQHBhcmFtIHtVaW50OEFycmF5fG51bGx9IFtyZXNwb25zZV0gUmVzcG9uc2UgZGF0YSBvciBgbnVsbGAgdG8gc2lnbmFsIGVuZCBvZiBzdHJlYW0sIGlmIHRoZXJlIGhhc24ndCBiZWVuIGFuIGVycm9yXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5cbnJwYy5TZXJ2aWNlID0gcmVxdWlyZShcIi4vcnBjL3NlcnZpY2VcIik7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vKipcbiAqIE5hbWVkIHJvb3RzLlxuICogVGhpcyBpcyB3aGVyZSBwYmpzIHN0b3JlcyBnZW5lcmF0ZWQgc3RydWN0dXJlcyAodGhlIG9wdGlvbiBgLXIsIC0tcm9vdGAgc3BlY2lmaWVzIGEgbmFtZSkuXG4gKiBDYW4gYWxzbyBiZSB1c2VkIG1hbnVhbGx5IHRvIG1ha2Ugcm9vdHMgYXZhaWxhYmxlIGFjY3Jvc3MgbW9kdWxlcy5cbiAqIEBuYW1lIHJvb3RzXG4gKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsUm9vdD59XG4gKiBAZXhhbXBsZVxuICogLy8gcGJqcyAtciBteXJvb3QgLW8gY29tcGlsZWQuanMgLi4uXG4gKlxuICogLy8gaW4gYW5vdGhlciBtb2R1bGU6XG4gKiByZXF1aXJlKFwiLi9jb21waWxlZC5qc1wiKTtcbiAqXG4gKiAvLyBpbiBhbnkgc3Vic2VxdWVudCBtb2R1bGU6XG4gKiB2YXIgcm9vdCA9IHByb3RvYnVmLnJvb3RzW1wibXlyb290XCJdO1xuICovXG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcHJvdG9idWYgPSBleHBvcnRzO1xuXG4vKipcbiAqIEJ1aWxkIHR5cGUsIG9uZSBvZiBgXCJmdWxsXCJgLCBgXCJsaWdodFwiYCBvciBgXCJtaW5pbWFsXCJgLlxuICogQG5hbWUgYnVpbGRcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAY29uc3RcbiAqL1xucHJvdG9idWYuYnVpbGQgPSBcIm1pbmltYWxcIjtcblxuLy8gU2VyaWFsaXphdGlvblxucHJvdG9idWYuV3JpdGVyICAgICAgID0gcmVxdWlyZShcIi4vd3JpdGVyXCIpO1xucHJvdG9idWYuQnVmZmVyV3JpdGVyID0gcmVxdWlyZShcIi4vd3JpdGVyX2J1ZmZlclwiKTtcbnByb3RvYnVmLlJlYWRlciAgICAgICA9IHJlcXVpcmUoXCIuL3JlYWRlclwiKTtcbnByb3RvYnVmLkJ1ZmZlclJlYWRlciA9IHJlcXVpcmUoXCIuL3JlYWRlcl9idWZmZXJcIik7XG5cbi8vIFV0aWxpdHlcbnByb3RvYnVmLnV0aWwgICAgICAgICA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcbnByb3RvYnVmLnJwYyAgICAgICAgICA9IHJlcXVpcmUoXCIuL3JwY1wiKTtcbnByb3RvYnVmLnJvb3RzICAgICAgICA9IHJlcXVpcmUoXCIuL3Jvb3RzXCIpO1xucHJvdG9idWYuY29uZmlndXJlICAgID0gY29uZmlndXJlO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBSZWNvbmZpZ3VyZXMgdGhlIGxpYnJhcnkgYWNjb3JkaW5nIHRvIHRoZSBlbnZpcm9ubWVudC5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cbmZ1bmN0aW9uIGNvbmZpZ3VyZSgpIHtcbiAgICBwcm90b2J1Zi51dGlsLl9jb25maWd1cmUoKTtcbiAgICBwcm90b2J1Zi5Xcml0ZXIuX2NvbmZpZ3VyZShwcm90b2J1Zi5CdWZmZXJXcml0ZXIpO1xuICAgIHByb3RvYnVmLlJlYWRlci5fY29uZmlndXJlKHByb3RvYnVmLkJ1ZmZlclJlYWRlcik7XG59XG5cbi8vIFNldCB1cCBidWZmZXIgdXRpbGl0eSBhY2NvcmRpbmcgdG8gdGhlIGVudmlyb25tZW50XG5jb25maWd1cmUoKTtcbiIsICJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBjb2RlZ2VuO1xyXG5cclxuLyoqXHJcbiAqIEJlZ2lucyBnZW5lcmF0aW5nIGEgZnVuY3Rpb24uXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBwYXJhbSB7c3RyaW5nW119IGZ1bmN0aW9uUGFyYW1zIEZ1bmN0aW9uIHBhcmFtZXRlciBuYW1lc1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gW2Z1bmN0aW9uTmFtZV0gRnVuY3Rpb24gbmFtZSBpZiBub3QgYW5vbnltb3VzXHJcbiAqIEByZXR1cm5zIHtDb2RlZ2VufSBBcHBlbmRlciB0aGF0IGFwcGVuZHMgY29kZSB0byB0aGUgZnVuY3Rpb24ncyBib2R5XHJcbiAqL1xyXG5mdW5jdGlvbiBjb2RlZ2VuKGZ1bmN0aW9uUGFyYW1zLCBmdW5jdGlvbk5hbWUpIHtcclxuXHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgIGlmICh0eXBlb2YgZnVuY3Rpb25QYXJhbXMgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBmdW5jdGlvbk5hbWUgPSBmdW5jdGlvblBhcmFtcztcclxuICAgICAgICBmdW5jdGlvblBhcmFtcyA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgYm9keSA9IFtdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwZW5kcyBjb2RlIHRvIHRoZSBmdW5jdGlvbidzIGJvZHkgb3IgZmluaXNoZXMgZ2VuZXJhdGlvbi5cclxuICAgICAqIEB0eXBlZGVmIENvZGVnZW5cclxuICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdC48c3RyaW5nLCo+fSBbZm9ybWF0U3RyaW5nT3JTY29wZV0gRm9ybWF0IHN0cmluZyBvciwgdG8gZmluaXNoIHRoZSBmdW5jdGlvbiwgYW4gb2JqZWN0IG9mIGFkZGl0aW9uYWwgc2NvcGUgdmFyaWFibGVzLCBpZiBhbnlcclxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2Zvcm1hdFBhcmFtc10gRm9ybWF0IHBhcmFtZXRlcnNcclxuICAgICAqIEByZXR1cm5zIHtDb2RlZ2VufEZ1bmN0aW9ufSBJdHNlbGYgb3IgdGhlIGdlbmVyYXRlZCBmdW5jdGlvbiBpZiBmaW5pc2hlZFxyXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIGZvcm1hdCBwYXJhbWV0ZXIgY291bnRzIGRvIG5vdCBtYXRjaFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gQ29kZWdlbihmb3JtYXRTdHJpbmdPclNjb3BlKSB7XHJcbiAgICAgICAgLy8gbm90ZSB0aGF0IGV4cGxpY2l0IGFycmF5IGhhbmRsaW5nIGJlbG93IG1ha2VzIHRoaXMgfjUwJSBmYXN0ZXJcclxuXHJcbiAgICAgICAgLy8gZmluaXNoIHRoZSBmdW5jdGlvblxyXG4gICAgICAgIGlmICh0eXBlb2YgZm9ybWF0U3RyaW5nT3JTY29wZSAhPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICB2YXIgc291cmNlID0gdG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgaWYgKGNvZGVnZW4udmVyYm9zZSlcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY29kZWdlbjogXCIgKyBzb3VyY2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcclxuICAgICAgICAgICAgc291cmNlID0gXCJyZXR1cm4gXCIgKyBzb3VyY2U7XHJcbiAgICAgICAgICAgIGlmIChmb3JtYXRTdHJpbmdPclNjb3BlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2NvcGVLZXlzICAgPSBPYmplY3Qua2V5cyhmb3JtYXRTdHJpbmdPclNjb3BlKSxcclxuICAgICAgICAgICAgICAgICAgICBzY29wZVBhcmFtcyA9IG5ldyBBcnJheShzY29wZUtleXMubGVuZ3RoICsgMSksXHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVWYWx1ZXMgPSBuZXcgQXJyYXkoc2NvcGVLZXlzLmxlbmd0aCksXHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVPZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHNjb3BlT2Zmc2V0IDwgc2NvcGVLZXlzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlUGFyYW1zW3Njb3BlT2Zmc2V0XSA9IHNjb3BlS2V5c1tzY29wZU9mZnNldF07XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVWYWx1ZXNbc2NvcGVPZmZzZXRdID0gZm9ybWF0U3RyaW5nT3JTY29wZVtzY29wZUtleXNbc2NvcGVPZmZzZXQrK11dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2NvcGVQYXJhbXNbc2NvcGVPZmZzZXRdID0gc291cmNlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uLmFwcGx5KG51bGwsIHNjb3BlUGFyYW1zKS5hcHBseShudWxsLCBzY29wZVZhbHVlcyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LWZ1bmNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24oc291cmNlKSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy1mdW5jXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBvdGhlcndpc2UgYXBwZW5kIHRvIGJvZHlcclxuICAgICAgICB2YXIgZm9ybWF0UGFyYW1zID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKSxcclxuICAgICAgICAgICAgZm9ybWF0T2Zmc2V0ID0gMDtcclxuICAgICAgICB3aGlsZSAoZm9ybWF0T2Zmc2V0IDwgZm9ybWF0UGFyYW1zLmxlbmd0aClcclxuICAgICAgICAgICAgZm9ybWF0UGFyYW1zW2Zvcm1hdE9mZnNldF0gPSBhcmd1bWVudHNbKytmb3JtYXRPZmZzZXRdO1xyXG4gICAgICAgIGZvcm1hdE9mZnNldCA9IDA7XHJcbiAgICAgICAgZm9ybWF0U3RyaW5nT3JTY29wZSA9IGZvcm1hdFN0cmluZ09yU2NvcGUucmVwbGFjZSgvJShbJWRmaWpzXSkvZywgZnVuY3Rpb24gcmVwbGFjZSgkMCwgJDEpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gZm9ybWF0UGFyYW1zW2Zvcm1hdE9mZnNldCsrXTtcclxuICAgICAgICAgICAgc3dpdGNoICgkMSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImRcIjogY2FzZSBcImZcIjogcmV0dXJuIFN0cmluZyhOdW1iZXIodmFsdWUpKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJpXCI6IHJldHVybiBTdHJpbmcoTWF0aC5mbG9vcih2YWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImpcIjogcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJzXCI6IHJldHVybiBTdHJpbmcodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBcIiVcIjtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoZm9ybWF0T2Zmc2V0ICE9PSBmb3JtYXRQYXJhbXMubGVuZ3RoKVxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcInBhcmFtZXRlciBjb3VudCBtaXNtYXRjaFwiKTtcclxuICAgICAgICBib2R5LnB1c2goZm9ybWF0U3RyaW5nT3JTY29wZSk7XHJcbiAgICAgICAgcmV0dXJuIENvZGVnZW47XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcoZnVuY3Rpb25OYW1lT3ZlcnJpZGUpIHtcclxuICAgICAgICByZXR1cm4gXCJmdW5jdGlvbiBcIiArIChmdW5jdGlvbk5hbWVPdmVycmlkZSB8fCBmdW5jdGlvbk5hbWUgfHwgXCJcIikgKyBcIihcIiArIChmdW5jdGlvblBhcmFtcyAmJiBmdW5jdGlvblBhcmFtcy5qb2luKFwiLFwiKSB8fCBcIlwiKSArIFwiKXtcXG4gIFwiICsgYm9keS5qb2luKFwiXFxuICBcIikgKyBcIlxcbn1cIjtcclxuICAgIH1cclxuXHJcbiAgICBDb2RlZ2VuLnRvU3RyaW5nID0gdG9TdHJpbmc7XHJcbiAgICByZXR1cm4gQ29kZWdlbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEJlZ2lucyBnZW5lcmF0aW5nIGEgZnVuY3Rpb24uXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBmdW5jdGlvbiBjb2RlZ2VuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbZnVuY3Rpb25OYW1lXSBGdW5jdGlvbiBuYW1lIGlmIG5vdCBhbm9ueW1vdXNcclxuICogQHJldHVybnMge0NvZGVnZW59IEFwcGVuZGVyIHRoYXQgYXBwZW5kcyBjb2RlIHRvIHRoZSBmdW5jdGlvbidzIGJvZHlcclxuICogQHZhcmlhdGlvbiAyXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFdoZW4gc2V0IHRvIGB0cnVlYCwgY29kZWdlbiB3aWxsIGxvZyBnZW5lcmF0ZWQgY29kZSB0byBjb25zb2xlLiBVc2VmdWwgZm9yIGRlYnVnZ2luZy5cclxuICogQG5hbWUgdXRpbC5jb2RlZ2VuLnZlcmJvc2VcclxuICogQHR5cGUge2Jvb2xlYW59XHJcbiAqL1xyXG5jb2RlZ2VuLnZlcmJvc2UgPSBmYWxzZTtcclxuIiwgIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZldGNoO1xyXG5cclxudmFyIGFzUHJvbWlzZSA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy9hc3Byb21pc2VcIiksXHJcbiAgICBpbnF1aXJlICAgPSByZXF1aXJlKFwiQHByb3RvYnVmanMvaW5xdWlyZVwiKTtcclxuXHJcbnZhciBmcyA9IGlucXVpcmUoXCJmc1wiKTtcclxuXHJcbi8qKlxyXG4gKiBOb2RlLXN0eWxlIGNhbGxiYWNrIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwuZmV0Y2h9LlxyXG4gKiBAdHlwZWRlZiBGZXRjaENhbGxiYWNrXHJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cclxuICogQHBhcmFtIHs/RXJyb3J9IGVycm9yIEVycm9yLCBpZiBhbnksIG90aGVyd2lzZSBgbnVsbGBcclxuICogQHBhcmFtIHtzdHJpbmd9IFtjb250ZW50c10gRmlsZSBjb250ZW50cywgaWYgdGhlcmUgaGFzbid0IGJlZW4gYW4gZXJyb3JcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG4vKipcclxuICogT3B0aW9ucyBhcyB1c2VkIGJ5IHtAbGluayB1dGlsLmZldGNofS5cclxuICogQHR5cGVkZWYgRmV0Y2hPcHRpb25zXHJcbiAqIEB0eXBlIHtPYmplY3R9XHJcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2JpbmFyeT1mYWxzZV0gV2hldGhlciBleHBlY3RpbmcgYSBiaW5hcnkgcmVzcG9uc2VcclxuICogQHByb3BlcnR5IHtib29sZWFufSBbeGhyPWZhbHNlXSBJZiBgdHJ1ZWAsIGZvcmNlcyB0aGUgdXNlIG9mIFhNTEh0dHBSZXF1ZXN0XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEZldGNoZXMgdGhlIGNvbnRlbnRzIG9mIGEgZmlsZS5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQHBhcmFtIHtzdHJpbmd9IGZpbGVuYW1lIEZpbGUgcGF0aCBvciB1cmxcclxuICogQHBhcmFtIHtGZXRjaE9wdGlvbnN9IG9wdGlvbnMgRmV0Y2ggb3B0aW9uc1xyXG4gKiBAcGFyYW0ge0ZldGNoQ2FsbGJhY2t9IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uXHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAqL1xyXG5mdW5jdGlvbiBmZXRjaChmaWxlbmFtZSwgb3B0aW9ucywgY2FsbGJhY2spIHtcclxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xyXG4gICAgICAgIG9wdGlvbnMgPSB7fTtcclxuICAgIH0gZWxzZSBpZiAoIW9wdGlvbnMpXHJcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xyXG5cclxuICAgIGlmICghY2FsbGJhY2spXHJcbiAgICAgICAgcmV0dXJuIGFzUHJvbWlzZShmZXRjaCwgdGhpcywgZmlsZW5hbWUsIG9wdGlvbnMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWludmFsaWQtdGhpc1xyXG5cclxuICAgIC8vIGlmIGEgbm9kZS1saWtlIGZpbGVzeXN0ZW0gaXMgcHJlc2VudCwgdHJ5IGl0IGZpcnN0IGJ1dCBmYWxsIGJhY2sgdG8gWEhSIGlmIG5vdGhpbmcgaXMgZm91bmQuXHJcbiAgICBpZiAoIW9wdGlvbnMueGhyICYmIGZzICYmIGZzLnJlYWRGaWxlKVxyXG4gICAgICAgIHJldHVybiBmcy5yZWFkRmlsZShmaWxlbmFtZSwgZnVuY3Rpb24gZmV0Y2hSZWFkRmlsZUNhbGxiYWNrKGVyciwgY29udGVudHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVyciAmJiB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gZmV0Y2gueGhyKGZpbGVuYW1lLCBvcHRpb25zLCBjYWxsYmFjaylcclxuICAgICAgICAgICAgICAgIDogZXJyXHJcbiAgICAgICAgICAgICAgICA/IGNhbGxiYWNrKGVycilcclxuICAgICAgICAgICAgICAgIDogY2FsbGJhY2sobnVsbCwgb3B0aW9ucy5iaW5hcnkgPyBjb250ZW50cyA6IGNvbnRlbnRzLnRvU3RyaW5nKFwidXRmOFwiKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgLy8gdXNlIHRoZSBYSFIgdmVyc2lvbiBvdGhlcndpc2UuXHJcbiAgICByZXR1cm4gZmV0Y2gueGhyKGZpbGVuYW1lLCBvcHRpb25zLCBjYWxsYmFjayk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGZXRjaGVzIHRoZSBjb250ZW50cyBvZiBhIGZpbGUuXHJcbiAqIEBuYW1lIHV0aWwuZmV0Y2hcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIEZpbGUgcGF0aCBvciB1cmxcclxuICogQHBhcmFtIHtGZXRjaENhbGxiYWNrfSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvblxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKiBAdmFyaWF0aW9uIDJcclxuICovXHJcblxyXG4vKipcclxuICogRmV0Y2hlcyB0aGUgY29udGVudHMgb2YgYSBmaWxlLlxyXG4gKiBAbmFtZSB1dGlsLmZldGNoXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBGaWxlIHBhdGggb3IgdXJsXHJcbiAqIEBwYXJhbSB7RmV0Y2hPcHRpb25zfSBbb3B0aW9uc10gRmV0Y2ggb3B0aW9uc1xyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmd8VWludDhBcnJheT59IFByb21pc2VcclxuICogQHZhcmlhdGlvbiAzXHJcbiAqL1xyXG5cclxuLyoqL1xyXG5mZXRjaC54aHIgPSBmdW5jdGlvbiBmZXRjaF94aHIoZmlsZW5hbWUsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlIC8qIHdvcmtzIGV2ZXJ5d2hlcmUgKi8gPSBmdW5jdGlvbiBmZXRjaE9uUmVhZHlTdGF0ZUNoYW5nZSgpIHtcclxuXHJcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlICE9PSA0KVxyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICAvLyBsb2NhbCBjb3JzIHNlY3VyaXR5IGVycm9ycyByZXR1cm4gc3RhdHVzIDAgLyBlbXB0eSBzdHJpbmcsIHRvby4gYWZhaWsgdGhpcyBjYW5ub3QgYmVcclxuICAgICAgICAvLyByZWxpYWJseSBkaXN0aW5ndWlzaGVkIGZyb20gYW4gYWN0dWFsbHkgZW1wdHkgZmlsZSBmb3Igc2VjdXJpdHkgcmVhc29ucy4gZmVlbCBmcmVlXHJcbiAgICAgICAgLy8gdG8gc2VuZCBhIHB1bGwgcmVxdWVzdCBpZiB5b3UgYXJlIGF3YXJlIG9mIGEgc29sdXRpb24uXHJcbiAgICAgICAgaWYgKHhoci5zdGF0dXMgIT09IDAgJiYgeGhyLnN0YXR1cyAhPT0gMjAwKVxyXG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soRXJyb3IoXCJzdGF0dXMgXCIgKyB4aHIuc3RhdHVzKSk7XHJcblxyXG4gICAgICAgIC8vIGlmIGJpbmFyeSBkYXRhIGlzIGV4cGVjdGVkLCBtYWtlIHN1cmUgdGhhdCBzb21lIHNvcnQgb2YgYXJyYXkgaXMgcmV0dXJuZWQsIGV2ZW4gaWZcclxuICAgICAgICAvLyBBcnJheUJ1ZmZlcnMgYXJlIG5vdCBzdXBwb3J0ZWQuIHRoZSBiaW5hcnkgc3RyaW5nIGZhbGxiYWNrLCBob3dldmVyLCBpcyB1bnNhZmUuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYmluYXJ5KSB7XHJcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSB4aHIucmVzcG9uc2U7XHJcbiAgICAgICAgICAgIGlmICghYnVmZmVyKSB7XHJcbiAgICAgICAgICAgICAgICBidWZmZXIgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeGhyLnJlc3BvbnNlVGV4dC5sZW5ndGg7ICsraSlcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXIucHVzaCh4aHIucmVzcG9uc2VUZXh0LmNoYXJDb2RlQXQoaSkgJiAyNTUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCB0eXBlb2YgVWludDhBcnJheSAhPT0gXCJ1bmRlZmluZWRcIiA/IG5ldyBVaW50OEFycmF5KGJ1ZmZlcikgOiBidWZmZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgeGhyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGlmIChvcHRpb25zLmJpbmFyeSkge1xyXG4gICAgICAgIC8vIHJlZjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1hNTEh0dHBSZXF1ZXN0L1NlbmRpbmdfYW5kX1JlY2VpdmluZ19CaW5hcnlfRGF0YSNSZWNlaXZpbmdfYmluYXJ5X2RhdGFfaW5fb2xkZXJfYnJvd3NlcnNcclxuICAgICAgICBpZiAoXCJvdmVycmlkZU1pbWVUeXBlXCIgaW4geGhyKVxyXG4gICAgICAgICAgICB4aHIub3ZlcnJpZGVNaW1lVHlwZShcInRleHQvcGxhaW47IGNoYXJzZXQ9eC11c2VyLWRlZmluZWRcIik7XHJcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcclxuICAgIH1cclxuXHJcbiAgICB4aHIub3BlbihcIkdFVFwiLCBmaWxlbmFtZSk7XHJcbiAgICB4aHIuc2VuZCgpO1xyXG59O1xyXG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vKipcclxuICogQSBtaW5pbWFsIHBhdGggbW9kdWxlIHRvIHJlc29sdmUgVW5peCwgV2luZG93cyBhbmQgVVJMIHBhdGhzIGFsaWtlLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAbmFtZXNwYWNlXHJcbiAqL1xyXG52YXIgcGF0aCA9IGV4cG9ydHM7XHJcblxyXG52YXIgaXNBYnNvbHV0ZSA9XHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGUgc3BlY2lmaWVkIHBhdGggaXMgYWJzb2x1dGUuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggdG8gdGVzdFxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHBhdGggaXMgYWJzb2x1dGVcclxuICovXHJcbnBhdGguaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aCkge1xyXG4gICAgcmV0dXJuIC9eKD86XFwvfFxcdys6KS8udGVzdChwYXRoKTtcclxufTtcclxuXHJcbnZhciBub3JtYWxpemUgPVxyXG4vKipcclxuICogTm9ybWFsaXplcyB0aGUgc3BlY2lmaWVkIHBhdGguXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggdG8gbm9ybWFsaXplXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IE5vcm1hbGl6ZWQgcGF0aFxyXG4gKi9cclxucGF0aC5ub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUocGF0aCkge1xyXG4gICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXFxcXC9nLCBcIi9cIilcclxuICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcL3syLH0vZywgXCIvXCIpO1xyXG4gICAgdmFyIHBhcnRzICAgID0gcGF0aC5zcGxpdChcIi9cIiksXHJcbiAgICAgICAgYWJzb2x1dGUgPSBpc0Fic29sdXRlKHBhdGgpLFxyXG4gICAgICAgIHByZWZpeCAgID0gXCJcIjtcclxuICAgIGlmIChhYnNvbHV0ZSlcclxuICAgICAgICBwcmVmaXggPSBwYXJ0cy5zaGlmdCgpICsgXCIvXCI7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDspIHtcclxuICAgICAgICBpZiAocGFydHNbaV0gPT09IFwiLi5cIikge1xyXG4gICAgICAgICAgICBpZiAoaSA+IDAgJiYgcGFydHNbaSAtIDFdICE9PSBcIi4uXCIpXHJcbiAgICAgICAgICAgICAgICBwYXJ0cy5zcGxpY2UoLS1pLCAyKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoYWJzb2x1dGUpXHJcbiAgICAgICAgICAgICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICsraTtcclxuICAgICAgICB9IGVsc2UgaWYgKHBhcnRzW2ldID09PSBcIi5cIilcclxuICAgICAgICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByZWZpeCArIHBhcnRzLmpvaW4oXCIvXCIpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlc29sdmVzIHRoZSBzcGVjaWZpZWQgaW5jbHVkZSBwYXRoIGFnYWluc3QgdGhlIHNwZWNpZmllZCBvcmlnaW4gcGF0aC5cclxuICogQHBhcmFtIHtzdHJpbmd9IG9yaWdpblBhdGggUGF0aCB0byB0aGUgb3JpZ2luIGZpbGVcclxuICogQHBhcmFtIHtzdHJpbmd9IGluY2x1ZGVQYXRoIEluY2x1ZGUgcGF0aCByZWxhdGl2ZSB0byBvcmlnaW4gcGF0aFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFthbHJlYWR5Tm9ybWFsaXplZD1mYWxzZV0gYHRydWVgIGlmIGJvdGggcGF0aHMgYXJlIGFscmVhZHkga25vd24gdG8gYmUgbm9ybWFsaXplZFxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBQYXRoIHRvIHRoZSBpbmNsdWRlIGZpbGVcclxuICovXHJcbnBhdGgucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUob3JpZ2luUGF0aCwgaW5jbHVkZVBhdGgsIGFscmVhZHlOb3JtYWxpemVkKSB7XHJcbiAgICBpZiAoIWFscmVhZHlOb3JtYWxpemVkKVxyXG4gICAgICAgIGluY2x1ZGVQYXRoID0gbm9ybWFsaXplKGluY2x1ZGVQYXRoKTtcclxuICAgIGlmIChpc0Fic29sdXRlKGluY2x1ZGVQYXRoKSlcclxuICAgICAgICByZXR1cm4gaW5jbHVkZVBhdGg7XHJcbiAgICBpZiAoIWFscmVhZHlOb3JtYWxpemVkKVxyXG4gICAgICAgIG9yaWdpblBhdGggPSBub3JtYWxpemUob3JpZ2luUGF0aCk7XHJcbiAgICByZXR1cm4gKG9yaWdpblBhdGggPSBvcmlnaW5QYXRoLnJlcGxhY2UoLyg/OlxcL3xeKVteL10rJC8sIFwiXCIpKS5sZW5ndGggPyBub3JtYWxpemUob3JpZ2luUGF0aCArIFwiL1wiICsgaW5jbHVkZVBhdGgpIDogaW5jbHVkZVBhdGg7XHJcbn07XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb21tb24gdHlwZSBjb25zdGFudHMuXG4gKiBAbmFtZXNwYWNlXG4gKi9cbnZhciB0eXBlcyA9IGV4cG9ydHM7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxudmFyIHMgPSBbXG4gICAgXCJkb3VibGVcIiwgICAvLyAwXG4gICAgXCJmbG9hdFwiLCAgICAvLyAxXG4gICAgXCJpbnQzMlwiLCAgICAvLyAyXG4gICAgXCJ1aW50MzJcIiwgICAvLyAzXG4gICAgXCJzaW50MzJcIiwgICAvLyA0XG4gICAgXCJmaXhlZDMyXCIsICAvLyA1XG4gICAgXCJzZml4ZWQzMlwiLCAvLyA2XG4gICAgXCJpbnQ2NFwiLCAgICAvLyA3XG4gICAgXCJ1aW50NjRcIiwgICAvLyA4XG4gICAgXCJzaW50NjRcIiwgICAvLyA5XG4gICAgXCJmaXhlZDY0XCIsICAvLyAxMFxuICAgIFwic2ZpeGVkNjRcIiwgLy8gMTFcbiAgICBcImJvb2xcIiwgICAgIC8vIDEyXG4gICAgXCJzdHJpbmdcIiwgICAvLyAxM1xuICAgIFwiYnl0ZXNcIiAgICAgLy8gMTRcbl07XG5cbmZ1bmN0aW9uIGJha2UodmFsdWVzLCBvZmZzZXQpIHtcbiAgICB2YXIgaSA9IDAsIG8gPSB7fTtcbiAgICBvZmZzZXQgfD0gMDtcbiAgICB3aGlsZSAoaSA8IHZhbHVlcy5sZW5ndGgpIG9bc1tpICsgb2Zmc2V0XV0gPSB2YWx1ZXNbaSsrXTtcbiAgICByZXR1cm4gbztcbn1cblxuLyoqXG4gKiBCYXNpYyB0eXBlIHdpcmUgdHlwZXMuXG4gKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsbnVtYmVyPn1cbiAqIEBjb25zdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRvdWJsZT0xIEZpeGVkNjQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gZmxvYXQ9NSBGaXhlZDMyIHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGludDMyPTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHVpbnQzMj0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaW50MzI9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gZml4ZWQzMj01IEZpeGVkMzIgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ZpeGVkMzI9NSBGaXhlZDMyIHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGludDY0PTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHVpbnQ2ND0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaW50NjQ9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gZml4ZWQ2ND0xIEZpeGVkNjQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ZpeGVkNjQ9MSBGaXhlZDY0IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGJvb2w9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gc3RyaW5nPTIgTGRlbGltIHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGJ5dGVzPTIgTGRlbGltIHdpcmUgdHlwZVxuICovXG50eXBlcy5iYXNpYyA9IGJha2UoW1xuICAgIC8qIGRvdWJsZSAgICovIDEsXG4gICAgLyogZmxvYXQgICAgKi8gNSxcbiAgICAvKiBpbnQzMiAgICAqLyAwLFxuICAgIC8qIHVpbnQzMiAgICovIDAsXG4gICAgLyogc2ludDMyICAgKi8gMCxcbiAgICAvKiBmaXhlZDMyICAqLyA1LFxuICAgIC8qIHNmaXhlZDMyICovIDUsXG4gICAgLyogaW50NjQgICAgKi8gMCxcbiAgICAvKiB1aW50NjQgICAqLyAwLFxuICAgIC8qIHNpbnQ2NCAgICovIDAsXG4gICAgLyogZml4ZWQ2NCAgKi8gMSxcbiAgICAvKiBzZml4ZWQ2NCAqLyAxLFxuICAgIC8qIGJvb2wgICAgICovIDAsXG4gICAgLyogc3RyaW5nICAgKi8gMixcbiAgICAvKiBieXRlcyAgICAqLyAyXG5dKTtcblxuLyoqXG4gKiBCYXNpYyB0eXBlIGRlZmF1bHRzLlxuICogQHR5cGUge09iamVjdC48c3RyaW5nLCo+fVxuICogQGNvbnN0XG4gKiBAcHJvcGVydHkge251bWJlcn0gZG91YmxlPTAgRG91YmxlIGRlZmF1bHRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmbG9hdD0wIEZsb2F0IGRlZmF1bHRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpbnQzMj0wIEludDMyIGRlZmF1bHRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB1aW50MzI9MCBVaW50MzIgZGVmYXVsdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNpbnQzMj0wIFNpbnQzMiBkZWZhdWx0XG4gKiBAcHJvcGVydHkge251bWJlcn0gZml4ZWQzMj0wIEZpeGVkMzIgZGVmYXVsdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNmaXhlZDMyPTAgU2ZpeGVkMzIgZGVmYXVsdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGludDY0PTAgSW50NjQgZGVmYXVsdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHVpbnQ2ND0wIFVpbnQ2NCBkZWZhdWx0XG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ludDY0PTAgU2ludDMyIGRlZmF1bHRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmaXhlZDY0PTAgRml4ZWQ2NCBkZWZhdWx0XG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ZpeGVkNjQ9MCBTZml4ZWQ2NCBkZWZhdWx0XG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGJvb2w9ZmFsc2UgQm9vbCBkZWZhdWx0XG4gKiBAcHJvcGVydHkge3N0cmluZ30gc3RyaW5nPVwiXCIgU3RyaW5nIGRlZmF1bHRcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPG51bWJlcj59IGJ5dGVzPUFycmF5KDApIEJ5dGVzIGRlZmF1bHRcbiAqIEBwcm9wZXJ0eSB7bnVsbH0gbWVzc2FnZT1udWxsIE1lc3NhZ2UgZGVmYXVsdFxuICovXG50eXBlcy5kZWZhdWx0cyA9IGJha2UoW1xuICAgIC8qIGRvdWJsZSAgICovIDAsXG4gICAgLyogZmxvYXQgICAgKi8gMCxcbiAgICAvKiBpbnQzMiAgICAqLyAwLFxuICAgIC8qIHVpbnQzMiAgICovIDAsXG4gICAgLyogc2ludDMyICAgKi8gMCxcbiAgICAvKiBmaXhlZDMyICAqLyAwLFxuICAgIC8qIHNmaXhlZDMyICovIDAsXG4gICAgLyogaW50NjQgICAgKi8gMCxcbiAgICAvKiB1aW50NjQgICAqLyAwLFxuICAgIC8qIHNpbnQ2NCAgICovIDAsXG4gICAgLyogZml4ZWQ2NCAgKi8gMCxcbiAgICAvKiBzZml4ZWQ2NCAqLyAwLFxuICAgIC8qIGJvb2wgICAgICovIGZhbHNlLFxuICAgIC8qIHN0cmluZyAgICovIFwiXCIsXG4gICAgLyogYnl0ZXMgICAgKi8gdXRpbC5lbXB0eUFycmF5LFxuICAgIC8qIG1lc3NhZ2UgICovIG51bGxcbl0pO1xuXG4vKipcbiAqIEJhc2ljIGxvbmcgdHlwZSB3aXJlIHR5cGVzLlxuICogQHR5cGUge09iamVjdC48c3RyaW5nLG51bWJlcj59XG4gKiBAY29uc3RcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpbnQ2ND0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB1aW50NjQ9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ludDY0PTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGZpeGVkNjQ9MSBGaXhlZDY0IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNmaXhlZDY0PTEgRml4ZWQ2NCB3aXJlIHR5cGVcbiAqL1xudHlwZXMubG9uZyA9IGJha2UoW1xuICAgIC8qIGludDY0ICAgICovIDAsXG4gICAgLyogdWludDY0ICAgKi8gMCxcbiAgICAvKiBzaW50NjQgICAqLyAwLFxuICAgIC8qIGZpeGVkNjQgICovIDEsXG4gICAgLyogc2ZpeGVkNjQgKi8gMVxuXSwgNyk7XG5cbi8qKlxuICogQWxsb3dlZCB0eXBlcyBmb3IgbWFwIGtleXMgd2l0aCB0aGVpciBhc3NvY2lhdGVkIHdpcmUgdHlwZS5cbiAqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxudW1iZXI+fVxuICogQGNvbnN0XG4gKiBAcHJvcGVydHkge251bWJlcn0gaW50MzI9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gdWludDMyPTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNpbnQzMj0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmaXhlZDMyPTUgRml4ZWQzMiB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzZml4ZWQzMj01IEZpeGVkMzIgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gaW50NjQ9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gdWludDY0PTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNpbnQ2ND0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmaXhlZDY0PTEgRml4ZWQ2NCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzZml4ZWQ2ND0xIEZpeGVkNjQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gYm9vbD0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzdHJpbmc9MiBMZGVsaW0gd2lyZSB0eXBlXG4gKi9cbnR5cGVzLm1hcEtleSA9IGJha2UoW1xuICAgIC8qIGludDMyICAgICovIDAsXG4gICAgLyogdWludDMyICAgKi8gMCxcbiAgICAvKiBzaW50MzIgICAqLyAwLFxuICAgIC8qIGZpeGVkMzIgICovIDUsXG4gICAgLyogc2ZpeGVkMzIgKi8gNSxcbiAgICAvKiBpbnQ2NCAgICAqLyAwLFxuICAgIC8qIHVpbnQ2NCAgICovIDAsXG4gICAgLyogc2ludDY0ICAgKi8gMCxcbiAgICAvKiBmaXhlZDY0ICAqLyAxLFxuICAgIC8qIHNmaXhlZDY0ICovIDEsXG4gICAgLyogYm9vbCAgICAgKi8gMCxcbiAgICAvKiBzdHJpbmcgICAqLyAyXG5dLCAyKTtcblxuLyoqXG4gKiBBbGxvd2VkIHR5cGVzIGZvciBwYWNrZWQgcmVwZWF0ZWQgZmllbGRzIHdpdGggdGhlaXIgYXNzb2NpYXRlZCB3aXJlIHR5cGUuXG4gKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsbnVtYmVyPn1cbiAqIEBjb25zdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRvdWJsZT0xIEZpeGVkNjQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gZmxvYXQ9NSBGaXhlZDMyIHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGludDMyPTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHVpbnQzMj0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaW50MzI9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gZml4ZWQzMj01IEZpeGVkMzIgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ZpeGVkMzI9NSBGaXhlZDMyIHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGludDY0PTAgVmFyaW50IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHVpbnQ2ND0wIFZhcmludCB3aXJlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaW50NjQ9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gZml4ZWQ2ND0xIEZpeGVkNjQgd2lyZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ZpeGVkNjQ9MSBGaXhlZDY0IHdpcmUgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGJvb2w9MCBWYXJpbnQgd2lyZSB0eXBlXG4gKi9cbnR5cGVzLnBhY2tlZCA9IGJha2UoW1xuICAgIC8qIGRvdWJsZSAgICovIDEsXG4gICAgLyogZmxvYXQgICAgKi8gNSxcbiAgICAvKiBpbnQzMiAgICAqLyAwLFxuICAgIC8qIHVpbnQzMiAgICovIDAsXG4gICAgLyogc2ludDMyICAgKi8gMCxcbiAgICAvKiBmaXhlZDMyICAqLyA1LFxuICAgIC8qIHNmaXhlZDMyICovIDUsXG4gICAgLyogaW50NjQgICAgKi8gMCxcbiAgICAvKiB1aW50NjQgICAqLyAwLFxuICAgIC8qIHNpbnQ2NCAgICovIDAsXG4gICAgLyogZml4ZWQ2NCAgKi8gMSxcbiAgICAvKiBzZml4ZWQ2NCAqLyAxLFxuICAgIC8qIGJvb2wgICAgICovIDBcbl0pO1xuIiwgIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBGaWVsZDtcblxuLy8gZXh0ZW5kcyBSZWZsZWN0aW9uT2JqZWN0XG52YXIgUmVmbGVjdGlvbk9iamVjdCA9IHJlcXVpcmUoXCIuL29iamVjdFwiKTtcbigoRmllbGQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShSZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gRmllbGQpLmNsYXNzTmFtZSA9IFwiRmllbGRcIjtcblxudmFyIEVudW0gID0gcmVxdWlyZShcIi4vZW51bVwiKSxcbiAgICB0eXBlcyA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpLFxuICAgIHV0aWwgID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxudmFyIFR5cGU7IC8vIGN5Y2xpY1xuXG52YXIgcnVsZVJlID0gL15yZXF1aXJlZHxvcHRpb25hbHxyZXBlYXRlZCQvO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgbWVzc2FnZSBmaWVsZCBpbnN0YW5jZS4gTm90ZSB0aGF0IHtAbGluayBNYXBGaWVsZHxtYXAgZmllbGRzfSBoYXZlIHRoZWlyIG93biBjbGFzcy5cbiAqIEBuYW1lIEZpZWxkXG4gKiBAY2xhc3NkZXNjIFJlZmxlY3RlZCBtZXNzYWdlIGZpZWxkLlxuICogQGV4dGVuZHMgRmllbGRCYXNlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFVuaXF1ZSBuYW1lIHdpdGhpbiBpdHMgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge251bWJlcn0gaWQgVW5pcXVlIGlkIHdpdGhpbiBpdHMgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBWYWx1ZSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3QuPHN0cmluZywqPn0gW3J1bGU9XCJvcHRpb25hbFwiXSBGaWVsZCBydWxlXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3QuPHN0cmluZywqPn0gW2V4dGVuZF0gRXh0ZW5kZWQgdHlwZSBpZiBkaWZmZXJlbnQgZnJvbSBwYXJlbnRcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBEZWNsYXJlZCBvcHRpb25zXG4gKi9cblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgZmllbGQgZnJvbSBhIGZpZWxkIGRlc2NyaXB0b3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBGaWVsZCBuYW1lXG4gKiBAcGFyYW0ge0lGaWVsZH0ganNvbiBGaWVsZCBkZXNjcmlwdG9yXG4gKiBAcmV0dXJucyB7RmllbGR9IENyZWF0ZWQgZmllbGRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYXJndW1lbnRzIGFyZSBpbnZhbGlkXG4gKi9cbkZpZWxkLmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04obmFtZSwganNvbikge1xuICAgIHJldHVybiBuZXcgRmllbGQobmFtZSwganNvbi5pZCwganNvbi50eXBlLCBqc29uLnJ1bGUsIGpzb24uZXh0ZW5kLCBqc29uLm9wdGlvbnMsIGpzb24uY29tbWVudCk7XG59O1xuXG4vKipcbiAqIE5vdCBhbiBhY3R1YWwgY29uc3RydWN0b3IuIFVzZSB7QGxpbmsgRmllbGR9IGluc3RlYWQuXG4gKiBAY2xhc3NkZXNjIEJhc2UgY2xhc3Mgb2YgYWxsIHJlZmxlY3RlZCBtZXNzYWdlIGZpZWxkcy4gVGhpcyBpcyBub3QgYW4gYWN0dWFsIGNsYXNzIGJ1dCBoZXJlIGZvciB0aGUgc2FrZSBvZiBoYXZpbmcgY29uc2lzdGVudCB0eXBlIGRlZmluaXRpb25zLlxuICogQGV4cG9ydHMgRmllbGRCYXNlXG4gKiBAZXh0ZW5kcyBSZWZsZWN0aW9uT2JqZWN0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFVuaXF1ZSBuYW1lIHdpdGhpbiBpdHMgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge251bWJlcn0gaWQgVW5pcXVlIGlkIHdpdGhpbiBpdHMgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBWYWx1ZSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3QuPHN0cmluZywqPn0gW3J1bGU9XCJvcHRpb25hbFwiXSBGaWVsZCBydWxlXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3QuPHN0cmluZywqPn0gW2V4dGVuZF0gRXh0ZW5kZWQgdHlwZSBpZiBkaWZmZXJlbnQgZnJvbSBwYXJlbnRcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBEZWNsYXJlZCBvcHRpb25zXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvbW1lbnRdIENvbW1lbnQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZmllbGRcbiAqL1xuZnVuY3Rpb24gRmllbGQobmFtZSwgaWQsIHR5cGUsIHJ1bGUsIGV4dGVuZCwgb3B0aW9ucywgY29tbWVudCkge1xuXG4gICAgaWYgKHV0aWwuaXNPYmplY3QocnVsZSkpIHtcbiAgICAgICAgY29tbWVudCA9IGV4dGVuZDtcbiAgICAgICAgb3B0aW9ucyA9IHJ1bGU7XG4gICAgICAgIHJ1bGUgPSBleHRlbmQgPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIGlmICh1dGlsLmlzT2JqZWN0KGV4dGVuZCkpIHtcbiAgICAgICAgY29tbWVudCA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSBleHRlbmQ7XG4gICAgICAgIGV4dGVuZCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBSZWZsZWN0aW9uT2JqZWN0LmNhbGwodGhpcywgbmFtZSwgb3B0aW9ucyk7XG5cbiAgICBpZiAoIXV0aWwuaXNJbnRlZ2VyKGlkKSB8fCBpZCA8IDApXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcImlkIG11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlclwiKTtcblxuICAgIGlmICghdXRpbC5pc1N0cmluZyh0eXBlKSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwidHlwZSBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuXG4gICAgaWYgKHJ1bGUgIT09IHVuZGVmaW5lZCAmJiAhcnVsZVJlLnRlc3QocnVsZSA9IHJ1bGUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpKSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwicnVsZSBtdXN0IGJlIGEgc3RyaW5nIHJ1bGVcIik7XG5cbiAgICBpZiAoZXh0ZW5kICE9PSB1bmRlZmluZWQgJiYgIXV0aWwuaXNTdHJpbmcoZXh0ZW5kKSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiZXh0ZW5kIG11c3QgYmUgYSBzdHJpbmdcIik7XG5cbiAgICAvKipcbiAgICAgKiBGaWVsZCBydWxlLCBpZiBhbnkuXG4gICAgICogQHR5cGUge3N0cmluZ3x1bmRlZmluZWR9XG4gICAgICovXG4gICAgdGhpcy5ydWxlID0gcnVsZSAmJiBydWxlICE9PSBcIm9wdGlvbmFsXCIgPyBydWxlIDogdW5kZWZpbmVkOyAvLyB0b0pTT05cblxuICAgIC8qKlxuICAgICAqIEZpZWxkIHR5cGUuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnR5cGUgPSB0eXBlOyAvLyB0b0pTT05cblxuICAgIC8qKlxuICAgICAqIFVuaXF1ZSBmaWVsZCBpZC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuaWQgPSBpZDsgLy8gdG9KU09OLCBtYXJrZXJcblxuICAgIC8qKlxuICAgICAqIEV4dGVuZGVkIHR5cGUgaWYgZGlmZmVyZW50IGZyb20gcGFyZW50LlxuICAgICAqIEB0eXBlIHtzdHJpbmd8dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIHRoaXMuZXh0ZW5kID0gZXh0ZW5kIHx8IHVuZGVmaW5lZDsgLy8gdG9KU09OXG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoaXMgZmllbGQgaXMgcmVxdWlyZWQuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5yZXF1aXJlZCA9IHJ1bGUgPT09IFwicmVxdWlyZWRcIjtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhpcyBmaWVsZCBpcyBvcHRpb25hbC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLm9wdGlvbmFsID0gIXRoaXMucmVxdWlyZWQ7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoaXMgZmllbGQgaXMgcmVwZWF0ZWQuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5yZXBlYXRlZCA9IHJ1bGUgPT09IFwicmVwZWF0ZWRcIjtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhpcyBmaWVsZCBpcyBhIG1hcCBvciBub3QuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5tYXAgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIE1lc3NhZ2UgdGhpcyBmaWVsZCBiZWxvbmdzIHRvLlxuICAgICAqIEB0eXBlIHtUeXBlfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5tZXNzYWdlID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIE9uZU9mIHRoaXMgZmllbGQgYmVsb25ncyB0bywgaWYgYW55LFxuICAgICAqIEB0eXBlIHtPbmVPZnxudWxsfVxuICAgICAqL1xuICAgIHRoaXMucGFydE9mID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmaWVsZCB0eXBlJ3MgZGVmYXVsdCB2YWx1ZS5cbiAgICAgKiBAdHlwZSB7Kn1cbiAgICAgKi9cbiAgICB0aGlzLnR5cGVEZWZhdWx0ID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmaWVsZCdzIGRlZmF1bHQgdmFsdWUgb24gcHJvdG90eXBlcy5cbiAgICAgKiBAdHlwZSB7Kn1cbiAgICAgKi9cbiAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoaXMgZmllbGQncyB2YWx1ZSBzaG91bGQgYmUgdHJlYXRlZCBhcyBhIGxvbmcuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5sb25nID0gdXRpbC5Mb25nID8gdHlwZXMubG9uZ1t0eXBlXSAhPT0gdW5kZWZpbmVkIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoaXMgZmllbGQncyB2YWx1ZSBpcyBhIGJ1ZmZlci5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmJ5dGVzID0gdHlwZSA9PT0gXCJieXRlc1wiO1xuXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZWQgdHlwZSBpZiBub3QgYSBiYXNpYyB0eXBlLlxuICAgICAqIEB0eXBlIHtUeXBlfEVudW18bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnJlc29sdmVkVHlwZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBTaXN0ZXItZmllbGQgd2l0aGluIHRoZSBleHRlbmRlZCB0eXBlIGlmIGEgZGVjbGFyaW5nIGV4dGVuc2lvbiBmaWVsZC5cbiAgICAgKiBAdHlwZSB7RmllbGR8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLmV4dGVuc2lvbkZpZWxkID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFNpc3Rlci1maWVsZCB3aXRoaW4gdGhlIGRlY2xhcmluZyBuYW1lc3BhY2UgaWYgYW4gZXh0ZW5kZWQgZmllbGQuXG4gICAgICogQHR5cGUge0ZpZWxkfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5kZWNsYXJpbmdGaWVsZCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbGx5IHJlbWVtYmVycyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgcGFja2VkLlxuICAgICAqIEB0eXBlIHtib29sZWFufG51bGx9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9wYWNrZWQgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQ29tbWVudCBmb3IgdGhpcyBmaWVsZC5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5jb21tZW50ID0gY29tbWVudDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBwYWNrZWQuIE9ubHkgcmVsZXZhbnQgd2hlbiByZXBlYXRlZCBhbmQgd29ya2luZyB3aXRoIHByb3RvMi5cbiAqIEBuYW1lIEZpZWxkI3BhY2tlZFxuICogQHR5cGUge2Jvb2xlYW59XG4gKiBAcmVhZG9ubHlcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KEZpZWxkLnByb3RvdHlwZSwgXCJwYWNrZWRcIiwge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGRlZmF1bHRzIHRvIHBhY2tlZD10cnVlIGlmIG5vdCBleHBsaWNpdHkgc2V0IHRvIGZhbHNlXG4gICAgICAgIGlmICh0aGlzLl9wYWNrZWQgPT09IG51bGwpXG4gICAgICAgICAgICB0aGlzLl9wYWNrZWQgPSB0aGlzLmdldE9wdGlvbihcInBhY2tlZFwiKSAhPT0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYWNrZWQ7XG4gICAgfVxufSk7XG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbkZpZWxkLnByb3RvdHlwZS5zZXRPcHRpb24gPSBmdW5jdGlvbiBzZXRPcHRpb24obmFtZSwgdmFsdWUsIGlmTm90U2V0KSB7XG4gICAgaWYgKG5hbWUgPT09IFwicGFja2VkXCIpIC8vIGNsZWFyIGNhY2hlZCBiZWZvcmUgc2V0dGluZ1xuICAgICAgICB0aGlzLl9wYWNrZWQgPSBudWxsO1xuICAgIHJldHVybiBSZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZS5zZXRPcHRpb24uY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSwgaWZOb3RTZXQpO1xufTtcblxuLyoqXG4gKiBGaWVsZCBkZXNjcmlwdG9yLlxuICogQGludGVyZmFjZSBJRmllbGRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcnVsZT1cIm9wdGlvbmFsXCJdIEZpZWxkIHJ1bGVcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIEZpZWxkIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpZCBGaWVsZCBpZFxuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIEZpZWxkIG9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEV4dGVuc2lvbiBmaWVsZCBkZXNjcmlwdG9yLlxuICogQGludGVyZmFjZSBJRXh0ZW5zaW9uRmllbGRcbiAqIEBleHRlbmRzIElGaWVsZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGV4dGVuZCBFeHRlbmRlZCB0eXBlXG4gKi9cblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIGZpZWxkIHRvIGEgZmllbGQgZGVzY3JpcHRvci5cbiAqIEBwYXJhbSB7SVRvSlNPTk9wdGlvbnN9IFt0b0pTT05PcHRpb25zXSBKU09OIGNvbnZlcnNpb24gb3B0aW9uc1xuICogQHJldHVybnMge0lGaWVsZH0gRmllbGQgZGVzY3JpcHRvclxuICovXG5GaWVsZC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKHRvSlNPTk9wdGlvbnMpIHtcbiAgICB2YXIga2VlcENvbW1lbnRzID0gdG9KU09OT3B0aW9ucyA/IEJvb2xlYW4odG9KU09OT3B0aW9ucy5rZWVwQ29tbWVudHMpIDogZmFsc2U7XG4gICAgcmV0dXJuIHV0aWwudG9PYmplY3QoW1xuICAgICAgICBcInJ1bGVcIiAgICAsIHRoaXMucnVsZSAhPT0gXCJvcHRpb25hbFwiICYmIHRoaXMucnVsZSB8fCB1bmRlZmluZWQsXG4gICAgICAgIFwidHlwZVwiICAgICwgdGhpcy50eXBlLFxuICAgICAgICBcImlkXCIgICAgICAsIHRoaXMuaWQsXG4gICAgICAgIFwiZXh0ZW5kXCIgICwgdGhpcy5leHRlbmQsXG4gICAgICAgIFwib3B0aW9uc1wiICwgdGhpcy5vcHRpb25zLFxuICAgICAgICBcImNvbW1lbnRcIiAsIGtlZXBDb21tZW50cyA/IHRoaXMuY29tbWVudCA6IHVuZGVmaW5lZFxuICAgIF0pO1xufTtcblxuLyoqXG4gKiBSZXNvbHZlcyB0aGlzIGZpZWxkJ3MgdHlwZSByZWZlcmVuY2VzLlxuICogQHJldHVybnMge0ZpZWxkfSBgdGhpc2BcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBhbnkgcmVmZXJlbmNlIGNhbm5vdCBiZSByZXNvbHZlZFxuICovXG5GaWVsZC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUoKSB7XG5cbiAgICBpZiAodGhpcy5yZXNvbHZlZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAoKHRoaXMudHlwZURlZmF1bHQgPSB0eXBlcy5kZWZhdWx0c1t0aGlzLnR5cGVdKSA9PT0gdW5kZWZpbmVkKSB7IC8vIGlmIG5vdCBhIGJhc2ljIHR5cGUsIHJlc29sdmUgaXRcbiAgICAgICAgdGhpcy5yZXNvbHZlZFR5cGUgPSAodGhpcy5kZWNsYXJpbmdGaWVsZCA/IHRoaXMuZGVjbGFyaW5nRmllbGQucGFyZW50IDogdGhpcy5wYXJlbnQpLmxvb2t1cFR5cGVPckVudW0odGhpcy50eXBlKTtcbiAgICAgICAgaWYgKHRoaXMucmVzb2x2ZWRUeXBlIGluc3RhbmNlb2YgVHlwZSlcbiAgICAgICAgICAgIHRoaXMudHlwZURlZmF1bHQgPSBudWxsO1xuICAgICAgICBlbHNlIC8vIGluc3RhbmNlb2YgRW51bVxuICAgICAgICAgICAgdGhpcy50eXBlRGVmYXVsdCA9IHRoaXMucmVzb2x2ZWRUeXBlLnZhbHVlc1tPYmplY3Qua2V5cyh0aGlzLnJlc29sdmVkVHlwZS52YWx1ZXMpWzBdXTsgLy8gZmlyc3QgZGVmaW5lZFxuICAgIH1cblxuICAgIC8vIHVzZSBleHBsaWNpdGx5IHNldCBkZWZhdWx0IHZhbHVlIGlmIHByZXNlbnRcbiAgICBpZiAodGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9uc1tcImRlZmF1bHRcIl0gIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnR5cGVEZWZhdWx0ID0gdGhpcy5vcHRpb25zW1wiZGVmYXVsdFwiXTtcbiAgICAgICAgaWYgKHRoaXMucmVzb2x2ZWRUeXBlIGluc3RhbmNlb2YgRW51bSAmJiB0eXBlb2YgdGhpcy50eXBlRGVmYXVsdCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgIHRoaXMudHlwZURlZmF1bHQgPSB0aGlzLnJlc29sdmVkVHlwZS52YWx1ZXNbdGhpcy50eXBlRGVmYXVsdF07XG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIHVubmVjZXNzYXJ5IG9wdGlvbnNcbiAgICBpZiAodGhpcy5vcHRpb25zKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGFja2VkID09PSB0cnVlIHx8IHRoaXMub3B0aW9ucy5wYWNrZWQgIT09IHVuZGVmaW5lZCAmJiB0aGlzLnJlc29sdmVkVHlwZSAmJiAhKHRoaXMucmVzb2x2ZWRUeXBlIGluc3RhbmNlb2YgRW51bSkpXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5vcHRpb25zLnBhY2tlZDtcbiAgICAgICAgaWYgKCFPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMpLmxlbmd0aClcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBjb252ZXJ0IHRvIGludGVybmFsIGRhdGEgdHlwZSBpZiBuZWNlc3NzYXJ5XG4gICAgaWYgKHRoaXMubG9uZykge1xuICAgICAgICB0aGlzLnR5cGVEZWZhdWx0ID0gdXRpbC5Mb25nLmZyb21OdW1iZXIodGhpcy50eXBlRGVmYXVsdCwgdGhpcy50eXBlLmNoYXJBdCgwKSA9PT0gXCJ1XCIpO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmIChPYmplY3QuZnJlZXplKVxuICAgICAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzLnR5cGVEZWZhdWx0KTsgLy8gbG9uZyBpbnN0YW5jZXMgYXJlIG1lYW50IHRvIGJlIGltbXV0YWJsZSBhbnl3YXkgKGkuZS4gdXNlIHNtYWxsIGludCBjYWNoZSB0aGF0IGV2ZW4gcmVxdWlyZXMgaXQpXG5cbiAgICB9IGVsc2UgaWYgKHRoaXMuYnl0ZXMgJiYgdHlwZW9mIHRoaXMudHlwZURlZmF1bHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFyIGJ1ZjtcbiAgICAgICAgaWYgKHV0aWwuYmFzZTY0LnRlc3QodGhpcy50eXBlRGVmYXVsdCkpXG4gICAgICAgICAgICB1dGlsLmJhc2U2NC5kZWNvZGUodGhpcy50eXBlRGVmYXVsdCwgYnVmID0gdXRpbC5uZXdCdWZmZXIodXRpbC5iYXNlNjQubGVuZ3RoKHRoaXMudHlwZURlZmF1bHQpKSwgMCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHV0aWwudXRmOC53cml0ZSh0aGlzLnR5cGVEZWZhdWx0LCBidWYgPSB1dGlsLm5ld0J1ZmZlcih1dGlsLnV0ZjgubGVuZ3RoKHRoaXMudHlwZURlZmF1bHQpKSwgMCk7XG4gICAgICAgIHRoaXMudHlwZURlZmF1bHQgPSBidWY7XG4gICAgfVxuXG4gICAgLy8gdGFrZSBzcGVjaWFsIGNhcmUgb2YgbWFwcyBhbmQgcmVwZWF0ZWQgZmllbGRzXG4gICAgaWYgKHRoaXMubWFwKVxuICAgICAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9IHV0aWwuZW1wdHlPYmplY3Q7XG4gICAgZWxzZSBpZiAodGhpcy5yZXBlYXRlZClcbiAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPSB1dGlsLmVtcHR5QXJyYXk7XG4gICAgZWxzZVxuICAgICAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9IHRoaXMudHlwZURlZmF1bHQ7XG5cbiAgICAvLyBlbnN1cmUgcHJvcGVyIHZhbHVlIG9uIHByb3RvdHlwZVxuICAgIGlmICh0aGlzLnBhcmVudCBpbnN0YW5jZW9mIFR5cGUpXG4gICAgICAgIHRoaXMucGFyZW50LmN0b3IucHJvdG90eXBlW3RoaXMubmFtZV0gPSB0aGlzLmRlZmF1bHRWYWx1ZTtcblxuICAgIHJldHVybiBSZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZS5yZXNvbHZlLmNhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIERlY29yYXRvciBmdW5jdGlvbiBhcyByZXR1cm5lZCBieSB7QGxpbmsgRmllbGQuZH0gYW5kIHtAbGluayBNYXBGaWVsZC5kfSAoVHlwZVNjcmlwdCkuXG4gKiBAdHlwZWRlZiBGaWVsZERlY29yYXRvclxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUYXJnZXQgcHJvdG90eXBlXG4gKiBAcGFyYW0ge3N0cmluZ30gZmllbGROYW1lIEZpZWxkIG5hbWVcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cblxuLyoqXG4gKiBGaWVsZCBkZWNvcmF0b3IgKFR5cGVTY3JpcHQpLlxuICogQG5hbWUgRmllbGQuZFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gZmllbGRJZCBGaWVsZCBpZFxuICogQHBhcmFtIHtcImRvdWJsZVwifFwiZmxvYXRcInxcImludDMyXCJ8XCJ1aW50MzJcInxcInNpbnQzMlwifFwiZml4ZWQzMlwifFwic2ZpeGVkMzJcInxcImludDY0XCJ8XCJ1aW50NjRcInxcInNpbnQ2NFwifFwiZml4ZWQ2NFwifFwic2ZpeGVkNjRcInxcInN0cmluZ1wifFwiYm9vbFwifFwiYnl0ZXNcInxPYmplY3R9IGZpZWxkVHlwZSBGaWVsZCB0eXBlXG4gKiBAcGFyYW0ge1wib3B0aW9uYWxcInxcInJlcXVpcmVkXCJ8XCJyZXBlYXRlZFwifSBbZmllbGRSdWxlPVwib3B0aW9uYWxcIl0gRmllbGQgcnVsZVxuICogQHBhcmFtIHtUfSBbZGVmYXVsdFZhbHVlXSBEZWZhdWx0IHZhbHVlXG4gKiBAcmV0dXJucyB7RmllbGREZWNvcmF0b3J9IERlY29yYXRvciBmdW5jdGlvblxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBudW1iZXIgfCBudW1iZXJbXSB8IExvbmcgfCBMb25nW10gfCBzdHJpbmcgfCBzdHJpbmdbXSB8IGJvb2xlYW4gfCBib29sZWFuW10gfCBVaW50OEFycmF5IHwgVWludDhBcnJheVtdIHwgQnVmZmVyIHwgQnVmZmVyW11cbiAqL1xuRmllbGQuZCA9IGZ1bmN0aW9uIGRlY29yYXRlRmllbGQoZmllbGRJZCwgZmllbGRUeXBlLCBmaWVsZFJ1bGUsIGRlZmF1bHRWYWx1ZSkge1xuXG4gICAgLy8gc3VibWVzc2FnZTogZGVjb3JhdGUgdGhlIHN1Ym1lc3NhZ2UgYW5kIHVzZSBpdHMgbmFtZSBhcyB0aGUgdHlwZVxuICAgIGlmICh0eXBlb2YgZmllbGRUeXBlID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZpZWxkVHlwZSA9IHV0aWwuZGVjb3JhdGVUeXBlKGZpZWxkVHlwZSkubmFtZTtcblxuICAgIC8vIGVudW0gcmVmZXJlbmNlOiBjcmVhdGUgYSByZWZsZWN0ZWQgY29weSBvZiB0aGUgZW51bSBhbmQga2VlcCByZXVzZWluZyBpdFxuICAgIGVsc2UgaWYgKGZpZWxkVHlwZSAmJiB0eXBlb2YgZmllbGRUeXBlID09PSBcIm9iamVjdFwiKVxuICAgICAgICBmaWVsZFR5cGUgPSB1dGlsLmRlY29yYXRlRW51bShmaWVsZFR5cGUpLm5hbWU7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gZmllbGREZWNvcmF0b3IocHJvdG90eXBlLCBmaWVsZE5hbWUpIHtcbiAgICAgICAgdXRpbC5kZWNvcmF0ZVR5cGUocHJvdG90eXBlLmNvbnN0cnVjdG9yKVxuICAgICAgICAgICAgLmFkZChuZXcgRmllbGQoZmllbGROYW1lLCBmaWVsZElkLCBmaWVsZFR5cGUsIGZpZWxkUnVsZSwgeyBcImRlZmF1bHRcIjogZGVmYXVsdFZhbHVlIH0pKTtcbiAgICB9O1xufTtcblxuLyoqXG4gKiBGaWVsZCBkZWNvcmF0b3IgKFR5cGVTY3JpcHQpLlxuICogQG5hbWUgRmllbGQuZFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gZmllbGRJZCBGaWVsZCBpZFxuICogQHBhcmFtIHtDb25zdHJ1Y3RvcjxUPnxzdHJpbmd9IGZpZWxkVHlwZSBGaWVsZCB0eXBlXG4gKiBAcGFyYW0ge1wib3B0aW9uYWxcInxcInJlcXVpcmVkXCJ8XCJyZXBlYXRlZFwifSBbZmllbGRSdWxlPVwib3B0aW9uYWxcIl0gRmllbGQgcnVsZVxuICogQHJldHVybnMge0ZpZWxkRGVjb3JhdG9yfSBEZWNvcmF0b3IgZnVuY3Rpb25cbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgTWVzc2FnZTxUPlxuICogQHZhcmlhdGlvbiAyXG4gKi9cbi8vIGxpa2UgRmllbGQuZCBidXQgd2l0aG91dCBhIGRlZmF1bHQgdmFsdWVcblxuLy8gU2V0cyB1cCBjeWNsaWMgZGVwZW5kZW5jaWVzIChjYWxsZWQgaW4gaW5kZXgtbGlnaHQpXG5GaWVsZC5fY29uZmlndXJlID0gZnVuY3Rpb24gY29uZmlndXJlKFR5cGVfKSB7XG4gICAgVHlwZSA9IFR5cGVfO1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gTmFtZXNwYWNlO1xuXG4vLyBleHRlbmRzIFJlZmxlY3Rpb25PYmplY3RcbnZhciBSZWZsZWN0aW9uT2JqZWN0ID0gcmVxdWlyZShcIi4vb2JqZWN0XCIpO1xuKChOYW1lc3BhY2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShSZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gTmFtZXNwYWNlKS5jbGFzc05hbWUgPSBcIk5hbWVzcGFjZVwiO1xuXG52YXIgRmllbGQgICAgPSByZXF1aXJlKFwiLi9maWVsZFwiKSxcbiAgICB1dGlsICAgICA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5cbnZhciBUeXBlLCAgICAvLyBjeWNsaWNcbiAgICBTZXJ2aWNlLFxuICAgIEVudW07XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyBuYW1lc3BhY2UgaW5zdGFuY2UuXG4gKiBAbmFtZSBOYW1lc3BhY2VcbiAqIEBjbGFzc2Rlc2MgUmVmbGVjdGVkIG5hbWVzcGFjZS5cbiAqIEBleHRlbmRzIE5hbWVzcGFjZUJhc2VcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZXNwYWNlIG5hbWVcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBEZWNsYXJlZCBvcHRpb25zXG4gKi9cblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmFtZXNwYWNlIGZyb20gSlNPTi5cbiAqIEBtZW1iZXJvZiBOYW1lc3BhY2VcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZXNwYWNlIG5hbWVcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGpzb24gSlNPTiBvYmplY3RcbiAqIEByZXR1cm5zIHtOYW1lc3BhY2V9IENyZWF0ZWQgbmFtZXNwYWNlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGFyZ3VtZW50cyBhcmUgaW52YWxpZFxuICovXG5OYW1lc3BhY2UuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihuYW1lLCBqc29uKSB7XG4gICAgcmV0dXJuIG5ldyBOYW1lc3BhY2UobmFtZSwganNvbi5vcHRpb25zKS5hZGRKU09OKGpzb24ubmVzdGVkKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYW4gYXJyYXkgb2YgcmVmbGVjdGlvbiBvYmplY3RzIHRvIEpTT04uXG4gKiBAbWVtYmVyb2YgTmFtZXNwYWNlXG4gKiBAcGFyYW0ge1JlZmxlY3Rpb25PYmplY3RbXX0gYXJyYXkgT2JqZWN0IGFycmF5XG4gKiBAcGFyYW0ge0lUb0pTT05PcHRpb25zfSBbdG9KU09OT3B0aW9uc10gSlNPTiBjb252ZXJzaW9uIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPnx1bmRlZmluZWR9IEpTT04gb2JqZWN0IG9yIGB1bmRlZmluZWRgIHdoZW4gYXJyYXkgaXMgZW1wdHlcbiAqL1xuZnVuY3Rpb24gYXJyYXlUb0pTT04oYXJyYXksIHRvSlNPTk9wdGlvbnMpIHtcbiAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHZhciBvYmogPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgKytpKVxuICAgICAgICBvYmpbYXJyYXlbaV0ubmFtZV0gPSBhcnJheVtpXS50b0pTT04odG9KU09OT3B0aW9ucyk7XG4gICAgcmV0dXJuIG9iajtcbn1cblxuTmFtZXNwYWNlLmFycmF5VG9KU09OID0gYXJyYXlUb0pTT047XG5cbi8qKlxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCBpZCBpcyByZXNlcnZlZC5cbiAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcltdfHN0cmluZz58dW5kZWZpbmVkfSByZXNlcnZlZCBBcnJheSBvZiByZXNlcnZlZCByYW5nZXMgYW5kIG5hbWVzXG4gKiBAcGFyYW0ge251bWJlcn0gaWQgSWQgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiByZXNlcnZlZCwgb3RoZXJ3aXNlIGBmYWxzZWBcbiAqL1xuTmFtZXNwYWNlLmlzUmVzZXJ2ZWRJZCA9IGZ1bmN0aW9uIGlzUmVzZXJ2ZWRJZChyZXNlcnZlZCwgaWQpIHtcbiAgICBpZiAocmVzZXJ2ZWQpXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzZXJ2ZWQubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlc2VydmVkW2ldICE9PSBcInN0cmluZ1wiICYmIHJlc2VydmVkW2ldWzBdIDw9IGlkICYmIHJlc2VydmVkW2ldWzFdID4gaWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBUZXN0cyBpZiB0aGUgc3BlY2lmaWVkIG5hbWUgaXMgcmVzZXJ2ZWQuXG4gKiBAcGFyYW0ge0FycmF5LjxudW1iZXJbXXxzdHJpbmc+fHVuZGVmaW5lZH0gcmVzZXJ2ZWQgQXJyYXkgb2YgcmVzZXJ2ZWQgcmFuZ2VzIGFuZCBuYW1lc1xuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHJlc2VydmVkLCBvdGhlcndpc2UgYGZhbHNlYFxuICovXG5OYW1lc3BhY2UuaXNSZXNlcnZlZE5hbWUgPSBmdW5jdGlvbiBpc1Jlc2VydmVkTmFtZShyZXNlcnZlZCwgbmFtZSkge1xuICAgIGlmIChyZXNlcnZlZClcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXNlcnZlZC5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIGlmIChyZXNlcnZlZFtpXSA9PT0gbmFtZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIE5vdCBhbiBhY3R1YWwgY29uc3RydWN0b3IuIFVzZSB7QGxpbmsgTmFtZXNwYWNlfSBpbnN0ZWFkLlxuICogQGNsYXNzZGVzYyBCYXNlIGNsYXNzIG9mIGFsbCByZWZsZWN0aW9uIG9iamVjdHMgY29udGFpbmluZyBuZXN0ZWQgb2JqZWN0cy4gVGhpcyBpcyBub3QgYW4gYWN0dWFsIGNsYXNzIGJ1dCBoZXJlIGZvciB0aGUgc2FrZSBvZiBoYXZpbmcgY29uc2lzdGVudCB0eXBlIGRlZmluaXRpb25zLlxuICogQGV4cG9ydHMgTmFtZXNwYWNlQmFzZVxuICogQGV4dGVuZHMgUmVmbGVjdGlvbk9iamVjdFxuICogQGFic3RyYWN0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWVzcGFjZSBuYW1lXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBbb3B0aW9uc10gRGVjbGFyZWQgb3B0aW9uc1xuICogQHNlZSB7QGxpbmsgTmFtZXNwYWNlfVxuICovXG5mdW5jdGlvbiBOYW1lc3BhY2UobmFtZSwgb3B0aW9ucykge1xuICAgIFJlZmxlY3Rpb25PYmplY3QuY2FsbCh0aGlzLCBuYW1lLCBvcHRpb25zKTtcblxuICAgIC8qKlxuICAgICAqIE5lc3RlZCBvYmplY3RzIGJ5IG5hbWUuXG4gICAgICogQHR5cGUge09iamVjdC48c3RyaW5nLFJlZmxlY3Rpb25PYmplY3Q+fHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICB0aGlzLm5lc3RlZCA9IHVuZGVmaW5lZDsgLy8gdG9KU09OXG5cbiAgICAvKipcbiAgICAgKiBDYWNoZWQgbmVzdGVkIG9iamVjdHMgYXMgYW4gYXJyYXkuXG4gICAgICogQHR5cGUge1JlZmxlY3Rpb25PYmplY3RbXXxudWxsfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbmVzdGVkQXJyYXkgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBjbGVhckNhY2hlKG5hbWVzcGFjZSkge1xuICAgIG5hbWVzcGFjZS5fbmVzdGVkQXJyYXkgPSBudWxsO1xuICAgIHJldHVybiBuYW1lc3BhY2U7XG59XG5cbi8qKlxuICogTmVzdGVkIG9iamVjdHMgb2YgdGhpcyBuYW1lc3BhY2UgYXMgYW4gYXJyYXkgZm9yIGl0ZXJhdGlvbi5cbiAqIEBuYW1lIE5hbWVzcGFjZUJhc2UjbmVzdGVkQXJyYXlcbiAqIEB0eXBlIHtSZWZsZWN0aW9uT2JqZWN0W119XG4gKiBAcmVhZG9ubHlcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KE5hbWVzcGFjZS5wcm90b3R5cGUsIFwibmVzdGVkQXJyYXlcIiwge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9uZXN0ZWRBcnJheSB8fCAodGhpcy5fbmVzdGVkQXJyYXkgPSB1dGlsLnRvQXJyYXkodGhpcy5uZXN0ZWQpKTtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBOYW1lc3BhY2UgZGVzY3JpcHRvci5cbiAqIEBpbnRlcmZhY2UgSU5hbWVzcGFjZVxuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIE5hbWVzcGFjZSBvcHRpb25zXG4gKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLEFueU5lc3RlZE9iamVjdD59IFtuZXN0ZWRdIE5lc3RlZCBvYmplY3QgZGVzY3JpcHRvcnNcbiAqL1xuXG4vKipcbiAqIEFueSBleHRlbnNpb24gZmllbGQgZGVzY3JpcHRvci5cbiAqIEB0eXBlZGVmIEFueUV4dGVuc2lvbkZpZWxkXG4gKiBAdHlwZSB7SUV4dGVuc2lvbkZpZWxkfElFeHRlbnNpb25NYXBGaWVsZH1cbiAqL1xuXG4vKipcbiAqIEFueSBuZXN0ZWQgb2JqZWN0IGRlc2NyaXB0b3IuXG4gKiBAdHlwZWRlZiBBbnlOZXN0ZWRPYmplY3RcbiAqIEB0eXBlIHtJRW51bXxJVHlwZXxJU2VydmljZXxBbnlFeHRlbnNpb25GaWVsZHxJTmFtZXNwYWNlfVxuICovXG4vLyBeIEJFV0FSRTogVlNDb2RlIGhhbmdzIGZvcmV2ZXIgd2hlbiB1c2luZyBtb3JlIHRoYW4gNSB0eXBlcyAodGhhdCdzIHdoeSBBbnlFeHRlbnNpb25GaWVsZCBleGlzdHMgaW4gdGhlIGZpcnN0IHBsYWNlKVxuXG4vKipcbiAqIENvbnZlcnRzIHRoaXMgbmFtZXNwYWNlIHRvIGEgbmFtZXNwYWNlIGRlc2NyaXB0b3IuXG4gKiBAcGFyYW0ge0lUb0pTT05PcHRpb25zfSBbdG9KU09OT3B0aW9uc10gSlNPTiBjb252ZXJzaW9uIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtJTmFtZXNwYWNlfSBOYW1lc3BhY2UgZGVzY3JpcHRvclxuICovXG5OYW1lc3BhY2UucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTih0b0pTT05PcHRpb25zKSB7XG4gICAgcmV0dXJuIHV0aWwudG9PYmplY3QoW1xuICAgICAgICBcIm9wdGlvbnNcIiAsIHRoaXMub3B0aW9ucyxcbiAgICAgICAgXCJuZXN0ZWRcIiAgLCBhcnJheVRvSlNPTih0aGlzLm5lc3RlZEFycmF5LCB0b0pTT05PcHRpb25zKVxuICAgIF0pO1xufTtcblxuLyoqXG4gKiBBZGRzIG5lc3RlZCBvYmplY3RzIHRvIHRoaXMgbmFtZXNwYWNlIGZyb20gbmVzdGVkIG9iamVjdCBkZXNjcmlwdG9ycy5cbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsQW55TmVzdGVkT2JqZWN0Pn0gbmVzdGVkSnNvbiBBbnkgbmVzdGVkIG9iamVjdCBkZXNjcmlwdG9yc1xuICogQHJldHVybnMge05hbWVzcGFjZX0gYHRoaXNgXG4gKi9cbk5hbWVzcGFjZS5wcm90b3R5cGUuYWRkSlNPTiA9IGZ1bmN0aW9uIGFkZEpTT04obmVzdGVkSnNvbikge1xuICAgIHZhciBucyA9IHRoaXM7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAobmVzdGVkSnNvbikge1xuICAgICAgICBmb3IgKHZhciBuYW1lcyA9IE9iamVjdC5rZXlzKG5lc3RlZEpzb24pLCBpID0gMCwgbmVzdGVkOyBpIDwgbmFtZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIG5lc3RlZCA9IG5lc3RlZEpzb25bbmFtZXNbaV1dO1xuICAgICAgICAgICAgbnMuYWRkKCAvLyBtb3N0IHRvIGxlYXN0IGxpa2VseVxuICAgICAgICAgICAgICAgICggbmVzdGVkLmZpZWxkcyAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBUeXBlLmZyb21KU09OXG4gICAgICAgICAgICAgICAgOiBuZXN0ZWQudmFsdWVzICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IEVudW0uZnJvbUpTT05cbiAgICAgICAgICAgICAgICA6IG5lc3RlZC5tZXRob2RzICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IFNlcnZpY2UuZnJvbUpTT05cbiAgICAgICAgICAgICAgICA6IG5lc3RlZC5pZCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBGaWVsZC5mcm9tSlNPTlxuICAgICAgICAgICAgICAgIDogTmFtZXNwYWNlLmZyb21KU09OICkobmFtZXNbaV0sIG5lc3RlZClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIG5lc3RlZCBvYmplY3Qgb2YgdGhlIHNwZWNpZmllZCBuYW1lLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmVzdGVkIG9iamVjdCBuYW1lXG4gKiBAcmV0dXJucyB7UmVmbGVjdGlvbk9iamVjdHxudWxsfSBUaGUgcmVmbGVjdGlvbiBvYmplY3Qgb3IgYG51bGxgIGlmIGl0IGRvZXNuJ3QgZXhpc3RcbiAqL1xuTmFtZXNwYWNlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLm5lc3RlZCAmJiB0aGlzLm5lc3RlZFtuYW1lXVxuICAgICAgICB8fCBudWxsO1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZXMgb2YgdGhlIG5lc3RlZCB7QGxpbmsgRW51bXxlbnVtfSBvZiB0aGUgc3BlY2lmaWVkIG5hbWUuXG4gKiBUaGlzIG1ldGhvZHMgZGlmZmVycyBmcm9tIHtAbGluayBOYW1lc3BhY2UjZ2V0fGdldH0gaW4gdGhhdCBpdCByZXR1cm5zIGFuIGVudW0ncyB2YWx1ZXMgZGlyZWN0bHkgYW5kIHRocm93cyBpbnN0ZWFkIG9mIHJldHVybmluZyBgbnVsbGAuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOZXN0ZWQgZW51bSBuYW1lXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsbnVtYmVyPn0gRW51bSB2YWx1ZXNcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGVyZSBpcyBubyBzdWNoIGVudW1cbiAqL1xuTmFtZXNwYWNlLnByb3RvdHlwZS5nZXRFbnVtID0gZnVuY3Rpb24gZ2V0RW51bShuYW1lKSB7XG4gICAgaWYgKHRoaXMubmVzdGVkICYmIHRoaXMubmVzdGVkW25hbWVdIGluc3RhbmNlb2YgRW51bSlcbiAgICAgICAgcmV0dXJuIHRoaXMubmVzdGVkW25hbWVdLnZhbHVlcztcbiAgICB0aHJvdyBFcnJvcihcIm5vIHN1Y2ggZW51bTogXCIgKyBuYW1lKTtcbn07XG5cbi8qKlxuICogQWRkcyBhIG5lc3RlZCBvYmplY3QgdG8gdGhpcyBuYW1lc3BhY2UuXG4gKiBAcGFyYW0ge1JlZmxlY3Rpb25PYmplY3R9IG9iamVjdCBOZXN0ZWQgb2JqZWN0IHRvIGFkZFxuICogQHJldHVybnMge05hbWVzcGFjZX0gYHRoaXNgXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGFyZ3VtZW50cyBhcmUgaW52YWxpZFxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZXJlIGlzIGFscmVhZHkgYSBuZXN0ZWQgb2JqZWN0IHdpdGggdGhpcyBuYW1lXG4gKi9cbk5hbWVzcGFjZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKG9iamVjdCkge1xuXG4gICAgaWYgKCEob2JqZWN0IGluc3RhbmNlb2YgRmllbGQgJiYgb2JqZWN0LmV4dGVuZCAhPT0gdW5kZWZpbmVkIHx8IG9iamVjdCBpbnN0YW5jZW9mIFR5cGUgfHwgb2JqZWN0IGluc3RhbmNlb2YgRW51bSB8fCBvYmplY3QgaW5zdGFuY2VvZiBTZXJ2aWNlIHx8IG9iamVjdCBpbnN0YW5jZW9mIE5hbWVzcGFjZSkpXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcIm9iamVjdCBtdXN0IGJlIGEgdmFsaWQgbmVzdGVkIG9iamVjdFwiKTtcblxuICAgIGlmICghdGhpcy5uZXN0ZWQpXG4gICAgICAgIHRoaXMubmVzdGVkID0ge307XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBwcmV2ID0gdGhpcy5nZXQob2JqZWN0Lm5hbWUpO1xuICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgaWYgKHByZXYgaW5zdGFuY2VvZiBOYW1lc3BhY2UgJiYgb2JqZWN0IGluc3RhbmNlb2YgTmFtZXNwYWNlICYmICEocHJldiBpbnN0YW5jZW9mIFR5cGUgfHwgcHJldiBpbnN0YW5jZW9mIFNlcnZpY2UpKSB7XG4gICAgICAgICAgICAgICAgLy8gcmVwbGFjZSBwbGFpbiBuYW1lc3BhY2UgYnV0IGtlZXAgZXhpc3RpbmcgbmVzdGVkIGVsZW1lbnRzIGFuZCBvcHRpb25zXG4gICAgICAgICAgICAgICAgdmFyIG5lc3RlZCA9IHByZXYubmVzdGVkQXJyYXk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXN0ZWQubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5hZGQobmVzdGVkW2ldKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZShwcmV2KTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubmVzdGVkKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5lc3RlZCA9IHt9O1xuICAgICAgICAgICAgICAgIG9iamVjdC5zZXRPcHRpb25zKHByZXYub3B0aW9ucywgdHJ1ZSk7XG5cbiAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiZHVwbGljYXRlIG5hbWUgJ1wiICsgb2JqZWN0Lm5hbWUgKyBcIicgaW4gXCIgKyB0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm5lc3RlZFtvYmplY3QubmFtZV0gPSBvYmplY3Q7XG4gICAgb2JqZWN0Lm9uQWRkKHRoaXMpO1xuICAgIHJldHVybiBjbGVhckNhY2hlKHRoaXMpO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIGEgbmVzdGVkIG9iamVjdCBmcm9tIHRoaXMgbmFtZXNwYWNlLlxuICogQHBhcmFtIHtSZWZsZWN0aW9uT2JqZWN0fSBvYmplY3QgTmVzdGVkIG9iamVjdCB0byByZW1vdmVcbiAqIEByZXR1cm5zIHtOYW1lc3BhY2V9IGB0aGlzYFxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBhcmd1bWVudHMgYXJlIGludmFsaWRcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBgb2JqZWN0YCBpcyBub3QgYSBtZW1iZXIgb2YgdGhpcyBuYW1lc3BhY2VcbiAqL1xuTmFtZXNwYWNlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUob2JqZWN0KSB7XG5cbiAgICBpZiAoIShvYmplY3QgaW5zdGFuY2VvZiBSZWZsZWN0aW9uT2JqZWN0KSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwib2JqZWN0IG11c3QgYmUgYSBSZWZsZWN0aW9uT2JqZWN0XCIpO1xuICAgIGlmIChvYmplY3QucGFyZW50ICE9PSB0aGlzKVxuICAgICAgICB0aHJvdyBFcnJvcihvYmplY3QgKyBcIiBpcyBub3QgYSBtZW1iZXIgb2YgXCIgKyB0aGlzKTtcblxuICAgIGRlbGV0ZSB0aGlzLm5lc3RlZFtvYmplY3QubmFtZV07XG4gICAgaWYgKCFPYmplY3Qua2V5cyh0aGlzLm5lc3RlZCkubGVuZ3RoKVxuICAgICAgICB0aGlzLm5lc3RlZCA9IHVuZGVmaW5lZDtcblxuICAgIG9iamVjdC5vblJlbW92ZSh0aGlzKTtcbiAgICByZXR1cm4gY2xlYXJDYWNoZSh0aGlzKTtcbn07XG5cbi8qKlxuICogRGVmaW5lcyBhZGRpdGlhbCBuYW1lc3BhY2VzIHdpdGhpbiB0aGlzIG9uZSBpZiBub3QgeWV0IGV4aXN0aW5nLlxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IHBhdGggUGF0aCB0byBjcmVhdGVcbiAqIEBwYXJhbSB7Kn0gW2pzb25dIE5lc3RlZCB0eXBlcyB0byBjcmVhdGUgZnJvbSBKU09OXG4gKiBAcmV0dXJucyB7TmFtZXNwYWNlfSBQb2ludGVyIHRvIHRoZSBsYXN0IG5hbWVzcGFjZSBjcmVhdGVkIG9yIGB0aGlzYCBpZiBwYXRoIGlzIGVtcHR5XG4gKi9cbk5hbWVzcGFjZS5wcm90b3R5cGUuZGVmaW5lID0gZnVuY3Rpb24gZGVmaW5lKHBhdGgsIGpzb24pIHtcblxuICAgIGlmICh1dGlsLmlzU3RyaW5nKHBhdGgpKVxuICAgICAgICBwYXRoID0gcGF0aC5zcGxpdChcIi5cIik7XG4gICAgZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkocGF0aCkpXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcImlsbGVnYWwgcGF0aFwiKTtcbiAgICBpZiAocGF0aCAmJiBwYXRoLmxlbmd0aCAmJiBwYXRoWzBdID09PSBcIlwiKVxuICAgICAgICB0aHJvdyBFcnJvcihcInBhdGggbXVzdCBiZSByZWxhdGl2ZVwiKTtcblxuICAgIHZhciBwdHIgPSB0aGlzO1xuICAgIHdoaWxlIChwYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHBhcnQgPSBwYXRoLnNoaWZ0KCk7XG4gICAgICAgIGlmIChwdHIubmVzdGVkICYmIHB0ci5uZXN0ZWRbcGFydF0pIHtcbiAgICAgICAgICAgIHB0ciA9IHB0ci5uZXN0ZWRbcGFydF07XG4gICAgICAgICAgICBpZiAoIShwdHIgaW5zdGFuY2VvZiBOYW1lc3BhY2UpKVxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwicGF0aCBjb25mbGljdHMgd2l0aCBub24tbmFtZXNwYWNlIG9iamVjdHNcIik7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgcHRyLmFkZChwdHIgPSBuZXcgTmFtZXNwYWNlKHBhcnQpKTtcbiAgICB9XG4gICAgaWYgKGpzb24pXG4gICAgICAgIHB0ci5hZGRKU09OKGpzb24pO1xuICAgIHJldHVybiBwdHI7XG59O1xuXG4vKipcbiAqIFJlc29sdmVzIHRoaXMgbmFtZXNwYWNlJ3MgYW5kIGFsbCBpdHMgbmVzdGVkIG9iamVjdHMnIHR5cGUgcmVmZXJlbmNlcy4gVXNlZnVsIHRvIHZhbGlkYXRlIGEgcmVmbGVjdGlvbiB0cmVlLCBidXQgY29tZXMgYXQgYSBjb3N0LlxuICogQHJldHVybnMge05hbWVzcGFjZX0gYHRoaXNgXG4gKi9cbk5hbWVzcGFjZS5wcm90b3R5cGUucmVzb2x2ZUFsbCA9IGZ1bmN0aW9uIHJlc29sdmVBbGwoKSB7XG4gICAgdmFyIG5lc3RlZCA9IHRoaXMubmVzdGVkQXJyYXksIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgbmVzdGVkLmxlbmd0aClcbiAgICAgICAgaWYgKG5lc3RlZFtpXSBpbnN0YW5jZW9mIE5hbWVzcGFjZSlcbiAgICAgICAgICAgIG5lc3RlZFtpKytdLnJlc29sdmVBbGwoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbmVzdGVkW2krK10ucmVzb2x2ZSgpO1xuICAgIHJldHVybiB0aGlzLnJlc29sdmUoKTtcbn07XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgbG9va3MgdXAgdGhlIHJlZmxlY3Rpb24gb2JqZWN0IG1hdGNoaW5nIHRoZSBzcGVjaWZpZWQgcGF0aCBpbiB0aGUgc2NvcGUgb2YgdGhpcyBuYW1lc3BhY2UuXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gcGF0aCBQYXRoIHRvIGxvb2sgdXBcbiAqIEBwYXJhbSB7KnxBcnJheS48Kj59IGZpbHRlclR5cGVzIEZpbHRlciB0eXBlcywgYW55IGNvbWJpbmF0aW9uIG9mIHRoZSBjb25zdHJ1Y3RvcnMgb2YgYHByb3RvYnVmLlR5cGVgLCBgcHJvdG9idWYuRW51bWAsIGBwcm90b2J1Zi5TZXJ2aWNlYCBldGMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtwYXJlbnRBbHJlYWR5Q2hlY2tlZD1mYWxzZV0gSWYga25vd24sIHdoZXRoZXIgdGhlIHBhcmVudCBoYXMgYWxyZWFkeSBiZWVuIGNoZWNrZWRcbiAqIEByZXR1cm5zIHtSZWZsZWN0aW9uT2JqZWN0fG51bGx9IExvb2tlZCB1cCBvYmplY3Qgb3IgYG51bGxgIGlmIG5vbmUgY291bGQgYmUgZm91bmRcbiAqL1xuTmFtZXNwYWNlLnByb3RvdHlwZS5sb29rdXAgPSBmdW5jdGlvbiBsb29rdXAocGF0aCwgZmlsdGVyVHlwZXMsIHBhcmVudEFscmVhZHlDaGVja2VkKSB7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICh0eXBlb2YgZmlsdGVyVHlwZXMgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIHBhcmVudEFscmVhZHlDaGVja2VkID0gZmlsdGVyVHlwZXM7XG4gICAgICAgIGZpbHRlclR5cGVzID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSBpZiAoZmlsdGVyVHlwZXMgJiYgIUFycmF5LmlzQXJyYXkoZmlsdGVyVHlwZXMpKVxuICAgICAgICBmaWx0ZXJUeXBlcyA9IFsgZmlsdGVyVHlwZXMgXTtcblxuICAgIGlmICh1dGlsLmlzU3RyaW5nKHBhdGgpICYmIHBhdGgubGVuZ3RoKSB7XG4gICAgICAgIGlmIChwYXRoID09PSBcIi5cIilcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJvb3Q7XG4gICAgICAgIHBhdGggPSBwYXRoLnNwbGl0KFwiLlwiKTtcbiAgICB9IGVsc2UgaWYgKCFwYXRoLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAvLyBTdGFydCBhdCByb290IGlmIHBhdGggaXMgYWJzb2x1dGVcbiAgICBpZiAocGF0aFswXSA9PT0gXCJcIilcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5sb29rdXAocGF0aC5zbGljZSgxKSwgZmlsdGVyVHlwZXMpO1xuXG4gICAgLy8gVGVzdCBpZiB0aGUgZmlyc3QgcGFydCBtYXRjaGVzIGFueSBuZXN0ZWQgb2JqZWN0LCBhbmQgaWYgc28sIHRyYXZlcnNlIGlmIHBhdGggY29udGFpbnMgbW9yZVxuICAgIHZhciBmb3VuZCA9IHRoaXMuZ2V0KHBhdGhbMF0pO1xuICAgIGlmIChmb3VuZCkge1xuICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGlmICghZmlsdGVyVHlwZXMgfHwgZmlsdGVyVHlwZXMuaW5kZXhPZihmb3VuZC5jb25zdHJ1Y3RvcikgPiAtMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgICAgIH0gZWxzZSBpZiAoZm91bmQgaW5zdGFuY2VvZiBOYW1lc3BhY2UgJiYgKGZvdW5kID0gZm91bmQubG9va3VwKHBhdGguc2xpY2UoMSksIGZpbHRlclR5cGVzLCB0cnVlKSkpXG4gICAgICAgICAgICByZXR1cm4gZm91bmQ7XG5cbiAgICAvLyBPdGhlcndpc2UgdHJ5IGVhY2ggbmVzdGVkIG5hbWVzcGFjZVxuICAgIH0gZWxzZVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubmVzdGVkQXJyYXkubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICBpZiAodGhpcy5fbmVzdGVkQXJyYXlbaV0gaW5zdGFuY2VvZiBOYW1lc3BhY2UgJiYgKGZvdW5kID0gdGhpcy5fbmVzdGVkQXJyYXlbaV0ubG9va3VwKHBhdGgsIGZpbHRlclR5cGVzLCB0cnVlKSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kO1xuXG4gICAgLy8gSWYgdGhlcmUgaGFzbid0IGJlZW4gYSBtYXRjaCwgdHJ5IGFnYWluIGF0IHRoZSBwYXJlbnRcbiAgICBpZiAodGhpcy5wYXJlbnQgPT09IG51bGwgfHwgcGFyZW50QWxyZWFkeUNoZWNrZWQpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiB0aGlzLnBhcmVudC5sb29rdXAocGF0aCwgZmlsdGVyVHlwZXMpO1xufTtcblxuLyoqXG4gKiBMb29rcyB1cCB0aGUgcmVmbGVjdGlvbiBvYmplY3QgYXQgdGhlIHNwZWNpZmllZCBwYXRoLCByZWxhdGl2ZSB0byB0aGlzIG5hbWVzcGFjZS5cbiAqIEBuYW1lIE5hbWVzcGFjZUJhc2UjbG9va3VwXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBwYXRoIFBhdGggdG8gbG9vayB1cFxuICogQHBhcmFtIHtib29sZWFufSBbcGFyZW50QWxyZWFkeUNoZWNrZWQ9ZmFsc2VdIFdoZXRoZXIgdGhlIHBhcmVudCBoYXMgYWxyZWFkeSBiZWVuIGNoZWNrZWRcbiAqIEByZXR1cm5zIHtSZWZsZWN0aW9uT2JqZWN0fG51bGx9IExvb2tlZCB1cCBvYmplY3Qgb3IgYG51bGxgIGlmIG5vbmUgY291bGQgYmUgZm91bmRcbiAqIEB2YXJpYXRpb24gMlxuICovXG4vLyBsb29rdXAocGF0aDogc3RyaW5nLCBbcGFyZW50QWxyZWFkeUNoZWNrZWQ6IGJvb2xlYW5dKVxuXG4vKipcbiAqIExvb2tzIHVwIHRoZSB7QGxpbmsgVHlwZXx0eXBlfSBhdCB0aGUgc3BlY2lmaWVkIHBhdGgsIHJlbGF0aXZlIHRvIHRoaXMgbmFtZXNwYWNlLlxuICogQmVzaWRlcyBpdHMgc2lnbmF0dXJlLCB0aGlzIG1ldGhvZHMgZGlmZmVycyBmcm9tIHtAbGluayBOYW1lc3BhY2UjbG9va3VwfGxvb2t1cH0gaW4gdGhhdCBpdCB0aHJvd3MgaW5zdGVhZCBvZiByZXR1cm5pbmcgYG51bGxgLlxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IHBhdGggUGF0aCB0byBsb29rIHVwXG4gKiBAcmV0dXJucyB7VHlwZX0gTG9va2VkIHVwIHR5cGVcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBgcGF0aGAgZG9lcyBub3QgcG9pbnQgdG8gYSB0eXBlXG4gKi9cbk5hbWVzcGFjZS5wcm90b3R5cGUubG9va3VwVHlwZSA9IGZ1bmN0aW9uIGxvb2t1cFR5cGUocGF0aCkge1xuICAgIHZhciBmb3VuZCA9IHRoaXMubG9va3VwKHBhdGgsIFsgVHlwZSBdKTtcbiAgICBpZiAoIWZvdW5kKVxuICAgICAgICB0aHJvdyBFcnJvcihcIm5vIHN1Y2ggdHlwZTogXCIgKyBwYXRoKTtcbiAgICByZXR1cm4gZm91bmQ7XG59O1xuXG4vKipcbiAqIExvb2tzIHVwIHRoZSB2YWx1ZXMgb2YgdGhlIHtAbGluayBFbnVtfGVudW19IGF0IHRoZSBzcGVjaWZpZWQgcGF0aCwgcmVsYXRpdmUgdG8gdGhpcyBuYW1lc3BhY2UuXG4gKiBCZXNpZGVzIGl0cyBzaWduYXR1cmUsIHRoaXMgbWV0aG9kcyBkaWZmZXJzIGZyb20ge0BsaW5rIE5hbWVzcGFjZSNsb29rdXB8bG9va3VwfSBpbiB0aGF0IGl0IHRocm93cyBpbnN0ZWFkIG9mIHJldHVybmluZyBgbnVsbGAuXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gcGF0aCBQYXRoIHRvIGxvb2sgdXBcbiAqIEByZXR1cm5zIHtFbnVtfSBMb29rZWQgdXAgZW51bVxuICogQHRocm93cyB7RXJyb3J9IElmIGBwYXRoYCBkb2VzIG5vdCBwb2ludCB0byBhbiBlbnVtXG4gKi9cbk5hbWVzcGFjZS5wcm90b3R5cGUubG9va3VwRW51bSA9IGZ1bmN0aW9uIGxvb2t1cEVudW0ocGF0aCkge1xuICAgIHZhciBmb3VuZCA9IHRoaXMubG9va3VwKHBhdGgsIFsgRW51bSBdKTtcbiAgICBpZiAoIWZvdW5kKVxuICAgICAgICB0aHJvdyBFcnJvcihcIm5vIHN1Y2ggRW51bSAnXCIgKyBwYXRoICsgXCInIGluIFwiICsgdGhpcyk7XG4gICAgcmV0dXJuIGZvdW5kO1xufTtcblxuLyoqXG4gKiBMb29rcyB1cCB0aGUge0BsaW5rIFR5cGV8dHlwZX0gb3Ige0BsaW5rIEVudW18ZW51bX0gYXQgdGhlIHNwZWNpZmllZCBwYXRoLCByZWxhdGl2ZSB0byB0aGlzIG5hbWVzcGFjZS5cbiAqIEJlc2lkZXMgaXRzIHNpZ25hdHVyZSwgdGhpcyBtZXRob2RzIGRpZmZlcnMgZnJvbSB7QGxpbmsgTmFtZXNwYWNlI2xvb2t1cHxsb29rdXB9IGluIHRoYXQgaXQgdGhyb3dzIGluc3RlYWQgb2YgcmV0dXJuaW5nIGBudWxsYC5cbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBwYXRoIFBhdGggdG8gbG9vayB1cFxuICogQHJldHVybnMge1R5cGV9IExvb2tlZCB1cCB0eXBlIG9yIGVudW1cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBgcGF0aGAgZG9lcyBub3QgcG9pbnQgdG8gYSB0eXBlIG9yIGVudW1cbiAqL1xuTmFtZXNwYWNlLnByb3RvdHlwZS5sb29rdXBUeXBlT3JFbnVtID0gZnVuY3Rpb24gbG9va3VwVHlwZU9yRW51bShwYXRoKSB7XG4gICAgdmFyIGZvdW5kID0gdGhpcy5sb29rdXAocGF0aCwgWyBUeXBlLCBFbnVtIF0pO1xuICAgIGlmICghZm91bmQpXG4gICAgICAgIHRocm93IEVycm9yKFwibm8gc3VjaCBUeXBlIG9yIEVudW0gJ1wiICsgcGF0aCArIFwiJyBpbiBcIiArIHRoaXMpO1xuICAgIHJldHVybiBmb3VuZDtcbn07XG5cbi8qKlxuICogTG9va3MgdXAgdGhlIHtAbGluayBTZXJ2aWNlfHNlcnZpY2V9IGF0IHRoZSBzcGVjaWZpZWQgcGF0aCwgcmVsYXRpdmUgdG8gdGhpcyBuYW1lc3BhY2UuXG4gKiBCZXNpZGVzIGl0cyBzaWduYXR1cmUsIHRoaXMgbWV0aG9kcyBkaWZmZXJzIGZyb20ge0BsaW5rIE5hbWVzcGFjZSNsb29rdXB8bG9va3VwfSBpbiB0aGF0IGl0IHRocm93cyBpbnN0ZWFkIG9mIHJldHVybmluZyBgbnVsbGAuXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gcGF0aCBQYXRoIHRvIGxvb2sgdXBcbiAqIEByZXR1cm5zIHtTZXJ2aWNlfSBMb29rZWQgdXAgc2VydmljZVxuICogQHRocm93cyB7RXJyb3J9IElmIGBwYXRoYCBkb2VzIG5vdCBwb2ludCB0byBhIHNlcnZpY2VcbiAqL1xuTmFtZXNwYWNlLnByb3RvdHlwZS5sb29rdXBTZXJ2aWNlID0gZnVuY3Rpb24gbG9va3VwU2VydmljZShwYXRoKSB7XG4gICAgdmFyIGZvdW5kID0gdGhpcy5sb29rdXAocGF0aCwgWyBTZXJ2aWNlIF0pO1xuICAgIGlmICghZm91bmQpXG4gICAgICAgIHRocm93IEVycm9yKFwibm8gc3VjaCBTZXJ2aWNlICdcIiArIHBhdGggKyBcIicgaW4gXCIgKyB0aGlzKTtcbiAgICByZXR1cm4gZm91bmQ7XG59O1xuXG4vLyBTZXRzIHVwIGN5Y2xpYyBkZXBlbmRlbmNpZXMgKGNhbGxlZCBpbiBpbmRleC1saWdodClcbk5hbWVzcGFjZS5fY29uZmlndXJlID0gZnVuY3Rpb24oVHlwZV8sIFNlcnZpY2VfLCBFbnVtXykge1xuICAgIFR5cGUgICAgPSBUeXBlXztcbiAgICBTZXJ2aWNlID0gU2VydmljZV87XG4gICAgRW51bSAgICA9IEVudW1fO1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gT25lT2Y7XG5cbi8vIGV4dGVuZHMgUmVmbGVjdGlvbk9iamVjdFxudmFyIFJlZmxlY3Rpb25PYmplY3QgPSByZXF1aXJlKFwiLi9vYmplY3RcIik7XG4oKE9uZU9mLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUpKS5jb25zdHJ1Y3RvciA9IE9uZU9mKS5jbGFzc05hbWUgPSBcIk9uZU9mXCI7XG5cbnZhciBGaWVsZCA9IHJlcXVpcmUoXCIuL2ZpZWxkXCIpLFxuICAgIHV0aWwgID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IG9uZW9mIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBSZWZsZWN0ZWQgb25lb2YuXG4gKiBAZXh0ZW5kcyBSZWZsZWN0aW9uT2JqZWN0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE9uZW9mIG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nW118T2JqZWN0LjxzdHJpbmcsKj59IFtmaWVsZE5hbWVzXSBGaWVsZCBuYW1lc1xuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIERlY2xhcmVkIG9wdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29tbWVudF0gQ29tbWVudCBhc3NvY2lhdGVkIHdpdGggdGhpcyBmaWVsZFxuICovXG5mdW5jdGlvbiBPbmVPZihuYW1lLCBmaWVsZE5hbWVzLCBvcHRpb25zLCBjb21tZW50KSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGZpZWxkTmFtZXMpKSB7XG4gICAgICAgIG9wdGlvbnMgPSBmaWVsZE5hbWVzO1xuICAgICAgICBmaWVsZE5hbWVzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBSZWZsZWN0aW9uT2JqZWN0LmNhbGwodGhpcywgbmFtZSwgb3B0aW9ucyk7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIShmaWVsZE5hbWVzID09PSB1bmRlZmluZWQgfHwgQXJyYXkuaXNBcnJheShmaWVsZE5hbWVzKSkpXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcImZpZWxkTmFtZXMgbXVzdCBiZSBhbiBBcnJheVwiKTtcblxuICAgIC8qKlxuICAgICAqIEZpZWxkIG5hbWVzIHRoYXQgYmVsb25nIHRvIHRoaXMgb25lb2YuXG4gICAgICogQHR5cGUge3N0cmluZ1tdfVxuICAgICAqL1xuICAgIHRoaXMub25lb2YgPSBmaWVsZE5hbWVzIHx8IFtdOyAvLyB0b0pTT04sIG1hcmtlclxuXG4gICAgLyoqXG4gICAgICogRmllbGRzIHRoYXQgYmVsb25nIHRvIHRoaXMgb25lb2YgYXMgYW4gYXJyYXkgZm9yIGl0ZXJhdGlvbi5cbiAgICAgKiBAdHlwZSB7RmllbGRbXX1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICB0aGlzLmZpZWxkc0FycmF5ID0gW107IC8vIGRlY2xhcmVkIHJlYWRvbmx5IGZvciBjb25mb3JtYW5jZSwgcG9zc2libHkgbm90IHlldCBhZGRlZCB0byBwYXJlbnRcblxuICAgIC8qKlxuICAgICAqIENvbW1lbnQgZm9yIHRoaXMgZmllbGQuXG4gICAgICogQHR5cGUge3N0cmluZ3xudWxsfVxuICAgICAqL1xuICAgIHRoaXMuY29tbWVudCA9IGNvbW1lbnQ7XG59XG5cbi8qKlxuICogT25lb2YgZGVzY3JpcHRvci5cbiAqIEBpbnRlcmZhY2UgSU9uZU9mXG4gKiBAcHJvcGVydHkge0FycmF5LjxzdHJpbmc+fSBvbmVvZiBPbmVvZiBmaWVsZCBuYW1lc1xuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIE9uZW9mIG9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBvbmVvZiBmcm9tIGEgb25lb2YgZGVzY3JpcHRvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE9uZW9mIG5hbWVcbiAqIEBwYXJhbSB7SU9uZU9mfSBqc29uIE9uZW9mIGRlc2NyaXB0b3JcbiAqIEByZXR1cm5zIHtPbmVPZn0gQ3JlYXRlZCBvbmVvZlxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBhcmd1bWVudHMgYXJlIGludmFsaWRcbiAqL1xuT25lT2YuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihuYW1lLCBqc29uKSB7XG4gICAgcmV0dXJuIG5ldyBPbmVPZihuYW1lLCBqc29uLm9uZW9mLCBqc29uLm9wdGlvbnMsIGpzb24uY29tbWVudCk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIHRoaXMgb25lb2YgdG8gYSBvbmVvZiBkZXNjcmlwdG9yLlxuICogQHBhcmFtIHtJVG9KU09OT3B0aW9uc30gW3RvSlNPTk9wdGlvbnNdIEpTT04gY29udmVyc2lvbiBvcHRpb25zXG4gKiBAcmV0dXJucyB7SU9uZU9mfSBPbmVvZiBkZXNjcmlwdG9yXG4gKi9cbk9uZU9mLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04odG9KU09OT3B0aW9ucykge1xuICAgIHZhciBrZWVwQ29tbWVudHMgPSB0b0pTT05PcHRpb25zID8gQm9vbGVhbih0b0pTT05PcHRpb25zLmtlZXBDb21tZW50cykgOiBmYWxzZTtcbiAgICByZXR1cm4gdXRpbC50b09iamVjdChbXG4gICAgICAgIFwib3B0aW9uc1wiICwgdGhpcy5vcHRpb25zLFxuICAgICAgICBcIm9uZW9mXCIgICAsIHRoaXMub25lb2YsXG4gICAgICAgIFwiY29tbWVudFwiICwga2VlcENvbW1lbnRzID8gdGhpcy5jb21tZW50IDogdW5kZWZpbmVkXG4gICAgXSk7XG59O1xuXG4vKipcbiAqIEFkZHMgdGhlIGZpZWxkcyBvZiB0aGUgc3BlY2lmaWVkIG9uZW9mIHRvIHRoZSBwYXJlbnQgaWYgbm90IGFscmVhZHkgZG9uZSBzby5cbiAqIEBwYXJhbSB7T25lT2Z9IG9uZW9mIFRoZSBvbmVvZlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqIEBpbm5lclxuICogQGlnbm9yZVxuICovXG5mdW5jdGlvbiBhZGRGaWVsZHNUb1BhcmVudChvbmVvZikge1xuICAgIGlmIChvbmVvZi5wYXJlbnQpXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb25lb2YuZmllbGRzQXJyYXkubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICBpZiAoIW9uZW9mLmZpZWxkc0FycmF5W2ldLnBhcmVudClcbiAgICAgICAgICAgICAgICBvbmVvZi5wYXJlbnQuYWRkKG9uZW9mLmZpZWxkc0FycmF5W2ldKTtcbn1cblxuLyoqXG4gKiBBZGRzIGEgZmllbGQgdG8gdGhpcyBvbmVvZiBhbmQgcmVtb3ZlcyBpdCBmcm9tIGl0cyBjdXJyZW50IHBhcmVudCwgaWYgYW55LlxuICogQHBhcmFtIHtGaWVsZH0gZmllbGQgRmllbGQgdG8gYWRkXG4gKiBAcmV0dXJucyB7T25lT2Z9IGB0aGlzYFxuICovXG5PbmVPZi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKGZpZWxkKSB7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIShmaWVsZCBpbnN0YW5jZW9mIEZpZWxkKSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiZmllbGQgbXVzdCBiZSBhIEZpZWxkXCIpO1xuXG4gICAgaWYgKGZpZWxkLnBhcmVudCAmJiBmaWVsZC5wYXJlbnQgIT09IHRoaXMucGFyZW50KVxuICAgICAgICBmaWVsZC5wYXJlbnQucmVtb3ZlKGZpZWxkKTtcbiAgICB0aGlzLm9uZW9mLnB1c2goZmllbGQubmFtZSk7XG4gICAgdGhpcy5maWVsZHNBcnJheS5wdXNoKGZpZWxkKTtcbiAgICBmaWVsZC5wYXJ0T2YgPSB0aGlzOyAvLyBmaWVsZC5wYXJlbnQgcmVtYWlucyBudWxsXG4gICAgYWRkRmllbGRzVG9QYXJlbnQodGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgYSBmaWVsZCBmcm9tIHRoaXMgb25lb2YgYW5kIHB1dHMgaXQgYmFjayB0byB0aGUgb25lb2YncyBwYXJlbnQuXG4gKiBAcGFyYW0ge0ZpZWxkfSBmaWVsZCBGaWVsZCB0byByZW1vdmVcbiAqIEByZXR1cm5zIHtPbmVPZn0gYHRoaXNgXG4gKi9cbk9uZU9mLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoZmllbGQpIHtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghKGZpZWxkIGluc3RhbmNlb2YgRmllbGQpKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJmaWVsZCBtdXN0IGJlIGEgRmllbGRcIik7XG5cbiAgICB2YXIgaW5kZXggPSB0aGlzLmZpZWxkc0FycmF5LmluZGV4T2YoZmllbGQpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGluZGV4IDwgMClcbiAgICAgICAgdGhyb3cgRXJyb3IoZmllbGQgKyBcIiBpcyBub3QgYSBtZW1iZXIgb2YgXCIgKyB0aGlzKTtcblxuICAgIHRoaXMuZmllbGRzQXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICBpbmRleCA9IHRoaXMub25lb2YuaW5kZXhPZihmaWVsZC5uYW1lKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKGluZGV4ID4gLTEpIC8vIHRoZW9yZXRpY2FsXG4gICAgICAgIHRoaXMub25lb2Yuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgIGZpZWxkLnBhcnRPZiA9IG51bGw7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5PbmVPZi5wcm90b3R5cGUub25BZGQgPSBmdW5jdGlvbiBvbkFkZChwYXJlbnQpIHtcbiAgICBSZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZS5vbkFkZC5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIC8vIENvbGxlY3QgcHJlc2VudCBmaWVsZHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMub25lb2YubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGZpZWxkID0gcGFyZW50LmdldCh0aGlzLm9uZW9mW2ldKTtcbiAgICAgICAgaWYgKGZpZWxkICYmICFmaWVsZC5wYXJ0T2YpIHtcbiAgICAgICAgICAgIGZpZWxkLnBhcnRPZiA9IHNlbGY7XG4gICAgICAgICAgICBzZWxmLmZpZWxkc0FycmF5LnB1c2goZmllbGQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEFkZCBub3QgeWV0IHByZXNlbnQgZmllbGRzXG4gICAgYWRkRmllbGRzVG9QYXJlbnQodGhpcyk7XG59O1xuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5PbmVPZi5wcm90b3R5cGUub25SZW1vdmUgPSBmdW5jdGlvbiBvblJlbW92ZShwYXJlbnQpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgZmllbGQ7IGkgPCB0aGlzLmZpZWxkc0FycmF5Lmxlbmd0aDsgKytpKVxuICAgICAgICBpZiAoKGZpZWxkID0gdGhpcy5maWVsZHNBcnJheVtpXSkucGFyZW50KVxuICAgICAgICAgICAgZmllbGQucGFyZW50LnJlbW92ZShmaWVsZCk7XG4gICAgUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUub25SZW1vdmUuY2FsbCh0aGlzLCBwYXJlbnQpO1xufTtcblxuLyoqXG4gKiBEZWNvcmF0b3IgZnVuY3Rpb24gYXMgcmV0dXJuZWQgYnkge0BsaW5rIE9uZU9mLmR9IChUeXBlU2NyaXB0KS5cbiAqIEB0eXBlZGVmIE9uZU9mRGVjb3JhdG9yXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRhcmdldCBwcm90b3R5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBvbmVvZk5hbWUgT25lT2YgbmFtZVxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuXG4vKipcbiAqIE9uZU9mIGRlY29yYXRvciAoVHlwZVNjcmlwdCkuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Li4uc3RyaW5nfSBmaWVsZE5hbWVzIEZpZWxkIG5hbWVzXG4gKiBAcmV0dXJucyB7T25lT2ZEZWNvcmF0b3J9IERlY29yYXRvciBmdW5jdGlvblxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBzdHJpbmdcbiAqL1xuT25lT2YuZCA9IGZ1bmN0aW9uIGRlY29yYXRlT25lT2YoKSB7XG4gICAgdmFyIGZpZWxkTmFtZXMgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCksXG4gICAgICAgIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoKVxuICAgICAgICBmaWVsZE5hbWVzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gZnVuY3Rpb24gb25lT2ZEZWNvcmF0b3IocHJvdG90eXBlLCBvbmVvZk5hbWUpIHtcbiAgICAgICAgdXRpbC5kZWNvcmF0ZVR5cGUocHJvdG90eXBlLmNvbnN0cnVjdG9yKVxuICAgICAgICAgICAgLmFkZChuZXcgT25lT2Yob25lb2ZOYW1lLCBmaWVsZE5hbWVzKSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsIG9uZW9mTmFtZSwge1xuICAgICAgICAgICAgZ2V0OiB1dGlsLm9uZU9mR2V0dGVyKGZpZWxkTmFtZXMpLFxuICAgICAgICAgICAgc2V0OiB1dGlsLm9uZU9mU2V0dGVyKGZpZWxkTmFtZXMpXG4gICAgICAgIH0pO1xuICAgIH07XG59O1xuIiwgIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBNYXBGaWVsZDtcblxuLy8gZXh0ZW5kcyBGaWVsZFxudmFyIEZpZWxkID0gcmVxdWlyZShcIi4vZmllbGRcIik7XG4oKE1hcEZpZWxkLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRmllbGQucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBNYXBGaWVsZCkuY2xhc3NOYW1lID0gXCJNYXBGaWVsZFwiO1xuXG52YXIgdHlwZXMgICA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpLFxuICAgIHV0aWwgICAgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgbWFwIGZpZWxkIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBSZWZsZWN0ZWQgbWFwIGZpZWxkLlxuICogQGV4dGVuZHMgRmllbGRCYXNlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFVuaXF1ZSBuYW1lIHdpdGhpbiBpdHMgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge251bWJlcn0gaWQgVW5pcXVlIGlkIHdpdGhpbiBpdHMgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5VHlwZSBLZXkgdHlwZVxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVmFsdWUgdHlwZVxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIERlY2xhcmVkIG9wdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29tbWVudF0gQ29tbWVudCBhc3NvY2lhdGVkIHdpdGggdGhpcyBmaWVsZFxuICovXG5mdW5jdGlvbiBNYXBGaWVsZChuYW1lLCBpZCwga2V5VHlwZSwgdHlwZSwgb3B0aW9ucywgY29tbWVudCkge1xuICAgIEZpZWxkLmNhbGwodGhpcywgbmFtZSwgaWQsIHR5cGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBvcHRpb25zLCBjb21tZW50KTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghdXRpbC5pc1N0cmluZyhrZXlUeXBlKSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwia2V5VHlwZSBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuXG4gICAgLyoqXG4gICAgICogS2V5IHR5cGUuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmtleVR5cGUgPSBrZXlUeXBlOyAvLyB0b0pTT04sIG1hcmtlclxuXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZWQga2V5IHR5cGUgaWYgbm90IGEgYmFzaWMgdHlwZS5cbiAgICAgKiBAdHlwZSB7UmVmbGVjdGlvbk9iamVjdHxudWxsfVxuICAgICAqL1xuICAgIHRoaXMucmVzb2x2ZWRLZXlUeXBlID0gbnVsbDtcblxuICAgIC8vIE92ZXJyaWRlcyBGaWVsZCNtYXBcbiAgICB0aGlzLm1hcCA9IHRydWU7XG59XG5cbi8qKlxuICogTWFwIGZpZWxkIGRlc2NyaXB0b3IuXG4gKiBAaW50ZXJmYWNlIElNYXBGaWVsZFxuICogQGV4dGVuZHMge0lGaWVsZH1cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBrZXlUeXBlIEtleSB0eXBlXG4gKi9cblxuLyoqXG4gKiBFeHRlbnNpb24gbWFwIGZpZWxkIGRlc2NyaXB0b3IuXG4gKiBAaW50ZXJmYWNlIElFeHRlbnNpb25NYXBGaWVsZFxuICogQGV4dGVuZHMgSU1hcEZpZWxkXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZXh0ZW5kIEV4dGVuZGVkIHR5cGVcbiAqL1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBtYXAgZmllbGQgZnJvbSBhIG1hcCBmaWVsZCBkZXNjcmlwdG9yLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRmllbGQgbmFtZVxuICogQHBhcmFtIHtJTWFwRmllbGR9IGpzb24gTWFwIGZpZWxkIGRlc2NyaXB0b3JcbiAqIEByZXR1cm5zIHtNYXBGaWVsZH0gQ3JlYXRlZCBtYXAgZmllbGRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYXJndW1lbnRzIGFyZSBpbnZhbGlkXG4gKi9cbk1hcEZpZWxkLmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04obmFtZSwganNvbikge1xuICAgIHJldHVybiBuZXcgTWFwRmllbGQobmFtZSwganNvbi5pZCwganNvbi5rZXlUeXBlLCBqc29uLnR5cGUsIGpzb24ub3B0aW9ucywganNvbi5jb21tZW50KTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBtYXAgZmllbGQgdG8gYSBtYXAgZmllbGQgZGVzY3JpcHRvci5cbiAqIEBwYXJhbSB7SVRvSlNPTk9wdGlvbnN9IFt0b0pTT05PcHRpb25zXSBKU09OIGNvbnZlcnNpb24gb3B0aW9uc1xuICogQHJldHVybnMge0lNYXBGaWVsZH0gTWFwIGZpZWxkIGRlc2NyaXB0b3JcbiAqL1xuTWFwRmllbGQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTih0b0pTT05PcHRpb25zKSB7XG4gICAgdmFyIGtlZXBDb21tZW50cyA9IHRvSlNPTk9wdGlvbnMgPyBCb29sZWFuKHRvSlNPTk9wdGlvbnMua2VlcENvbW1lbnRzKSA6IGZhbHNlO1xuICAgIHJldHVybiB1dGlsLnRvT2JqZWN0KFtcbiAgICAgICAgXCJrZXlUeXBlXCIgLCB0aGlzLmtleVR5cGUsXG4gICAgICAgIFwidHlwZVwiICAgICwgdGhpcy50eXBlLFxuICAgICAgICBcImlkXCIgICAgICAsIHRoaXMuaWQsXG4gICAgICAgIFwiZXh0ZW5kXCIgICwgdGhpcy5leHRlbmQsXG4gICAgICAgIFwib3B0aW9uc1wiICwgdGhpcy5vcHRpb25zLFxuICAgICAgICBcImNvbW1lbnRcIiAsIGtlZXBDb21tZW50cyA/IHRoaXMuY29tbWVudCA6IHVuZGVmaW5lZFxuICAgIF0pO1xufTtcblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuTWFwRmllbGQucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKCkge1xuICAgIGlmICh0aGlzLnJlc29sdmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgIC8vIEJlc2lkZXMgYSB2YWx1ZSB0eXBlLCBtYXAgZmllbGRzIGhhdmUgYSBrZXkgdHlwZSB0aGF0IG1heSBiZSBcImFueSBzY2FsYXIgdHlwZSBleGNlcHQgZm9yIGZsb2F0aW5nIHBvaW50IHR5cGVzIGFuZCBieXRlc1wiXG4gICAgaWYgKHR5cGVzLm1hcEtleVt0aGlzLmtleVR5cGVdID09PSB1bmRlZmluZWQpXG4gICAgICAgIHRocm93IEVycm9yKFwiaW52YWxpZCBrZXkgdHlwZTogXCIgKyB0aGlzLmtleVR5cGUpO1xuXG4gICAgcmV0dXJuIEZpZWxkLnByb3RvdHlwZS5yZXNvbHZlLmNhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIE1hcCBmaWVsZCBkZWNvcmF0b3IgKFR5cGVTY3JpcHQpLlxuICogQG5hbWUgTWFwRmllbGQuZFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gZmllbGRJZCBGaWVsZCBpZFxuICogQHBhcmFtIHtcImludDMyXCJ8XCJ1aW50MzJcInxcInNpbnQzMlwifFwiZml4ZWQzMlwifFwic2ZpeGVkMzJcInxcImludDY0XCJ8XCJ1aW50NjRcInxcInNpbnQ2NFwifFwiZml4ZWQ2NFwifFwic2ZpeGVkNjRcInxcImJvb2xcInxcInN0cmluZ1wifSBmaWVsZEtleVR5cGUgRmllbGQga2V5IHR5cGVcbiAqIEBwYXJhbSB7XCJkb3VibGVcInxcImZsb2F0XCJ8XCJpbnQzMlwifFwidWludDMyXCJ8XCJzaW50MzJcInxcImZpeGVkMzJcInxcInNmaXhlZDMyXCJ8XCJpbnQ2NFwifFwidWludDY0XCJ8XCJzaW50NjRcInxcImZpeGVkNjRcInxcInNmaXhlZDY0XCJ8XCJib29sXCJ8XCJzdHJpbmdcInxcImJ5dGVzXCJ8T2JqZWN0fENvbnN0cnVjdG9yPHt9Pn0gZmllbGRWYWx1ZVR5cGUgRmllbGQgdmFsdWUgdHlwZVxuICogQHJldHVybnMge0ZpZWxkRGVjb3JhdG9yfSBEZWNvcmF0b3IgZnVuY3Rpb25cbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfCBMb25nIHwgc3RyaW5nIHwgYm9vbGVhbiB8IFVpbnQ4QXJyYXkgfCBCdWZmZXIgfCBudW1iZXJbXSB8IE1lc3NhZ2U8e30+IH1cbiAqL1xuTWFwRmllbGQuZCA9IGZ1bmN0aW9uIGRlY29yYXRlTWFwRmllbGQoZmllbGRJZCwgZmllbGRLZXlUeXBlLCBmaWVsZFZhbHVlVHlwZSkge1xuXG4gICAgLy8gc3VibWVzc2FnZSB2YWx1ZTogZGVjb3JhdGUgdGhlIHN1Ym1lc3NhZ2UgYW5kIHVzZSBpdHMgbmFtZSBhcyB0aGUgdHlwZVxuICAgIGlmICh0eXBlb2YgZmllbGRWYWx1ZVR5cGUgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZmllbGRWYWx1ZVR5cGUgPSB1dGlsLmRlY29yYXRlVHlwZShmaWVsZFZhbHVlVHlwZSkubmFtZTtcblxuICAgIC8vIGVudW0gcmVmZXJlbmNlIHZhbHVlOiBjcmVhdGUgYSByZWZsZWN0ZWQgY29weSBvZiB0aGUgZW51bSBhbmQga2VlcCByZXVzZWluZyBpdFxuICAgIGVsc2UgaWYgKGZpZWxkVmFsdWVUeXBlICYmIHR5cGVvZiBmaWVsZFZhbHVlVHlwZSA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgZmllbGRWYWx1ZVR5cGUgPSB1dGlsLmRlY29yYXRlRW51bShmaWVsZFZhbHVlVHlwZSkubmFtZTtcblxuICAgIHJldHVybiBmdW5jdGlvbiBtYXBGaWVsZERlY29yYXRvcihwcm90b3R5cGUsIGZpZWxkTmFtZSkge1xuICAgICAgICB1dGlsLmRlY29yYXRlVHlwZShwcm90b3R5cGUuY29uc3RydWN0b3IpXG4gICAgICAgICAgICAuYWRkKG5ldyBNYXBGaWVsZChmaWVsZE5hbWUsIGZpZWxkSWQsIGZpZWxkS2V5VHlwZSwgZmllbGRWYWx1ZVR5cGUpKTtcbiAgICB9O1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gTWV0aG9kO1xuXG4vLyBleHRlbmRzIFJlZmxlY3Rpb25PYmplY3RcbnZhciBSZWZsZWN0aW9uT2JqZWN0ID0gcmVxdWlyZShcIi4vb2JqZWN0XCIpO1xuKChNZXRob2QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShSZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gTWV0aG9kKS5jbGFzc05hbWUgPSBcIk1ldGhvZFwiO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyBzZXJ2aWNlIG1ldGhvZCBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgUmVmbGVjdGVkIHNlcnZpY2UgbWV0aG9kLlxuICogQGV4dGVuZHMgUmVmbGVjdGlvbk9iamVjdFxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBNZXRob2QgbmFtZVxuICogQHBhcmFtIHtzdHJpbmd8dW5kZWZpbmVkfSB0eXBlIE1ldGhvZCB0eXBlLCB1c3VhbGx5IGBcInJwY1wiYFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RUeXBlIFJlcXVlc3QgbWVzc2FnZSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVzcG9uc2VUeXBlIFJlc3BvbnNlIG1lc3NhZ2UgdHlwZVxuICogQHBhcmFtIHtib29sZWFufE9iamVjdC48c3RyaW5nLCo+fSBbcmVxdWVzdFN0cmVhbV0gV2hldGhlciB0aGUgcmVxdWVzdCBpcyBzdHJlYW1lZFxuICogQHBhcmFtIHtib29sZWFufE9iamVjdC48c3RyaW5nLCo+fSBbcmVzcG9uc2VTdHJlYW1dIFdoZXRoZXIgdGhlIHJlc3BvbnNlIGlzIHN0cmVhbWVkXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBbb3B0aW9uc10gRGVjbGFyZWQgb3B0aW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IFtjb21tZW50XSBUaGUgY29tbWVudCBmb3IgdGhpcyBtZXRob2RcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtwYXJzZWRPcHRpb25zXSBEZWNsYXJlZCBvcHRpb25zLCBwcm9wZXJseSBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xuZnVuY3Rpb24gTWV0aG9kKG5hbWUsIHR5cGUsIHJlcXVlc3RUeXBlLCByZXNwb25zZVR5cGUsIHJlcXVlc3RTdHJlYW0sIHJlc3BvbnNlU3RyZWFtLCBvcHRpb25zLCBjb21tZW50LCBwYXJzZWRPcHRpb25zKSB7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICh1dGlsLmlzT2JqZWN0KHJlcXVlc3RTdHJlYW0pKSB7XG4gICAgICAgIG9wdGlvbnMgPSByZXF1ZXN0U3RyZWFtO1xuICAgICAgICByZXF1ZXN0U3RyZWFtID0gcmVzcG9uc2VTdHJlYW0gPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIGlmICh1dGlsLmlzT2JqZWN0KHJlc3BvbnNlU3RyZWFtKSkge1xuICAgICAgICBvcHRpb25zID0gcmVzcG9uc2VTdHJlYW07XG4gICAgICAgIHJlc3BvbnNlU3RyZWFtID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghKHR5cGUgPT09IHVuZGVmaW5lZCB8fCB1dGlsLmlzU3RyaW5nKHR5cGUpKSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwidHlwZSBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCF1dGlsLmlzU3RyaW5nKHJlcXVlc3RUeXBlKSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwicmVxdWVzdFR5cGUgbXVzdCBiZSBhIHN0cmluZ1wiKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghdXRpbC5pc1N0cmluZyhyZXNwb25zZVR5cGUpKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJyZXNwb25zZVR5cGUgbXVzdCBiZSBhIHN0cmluZ1wiKTtcblxuICAgIFJlZmxlY3Rpb25PYmplY3QuY2FsbCh0aGlzLCBuYW1lLCBvcHRpb25zKTtcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0eXBlLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy50eXBlID0gdHlwZSB8fCBcInJwY1wiOyAvLyB0b0pTT05cblxuICAgIC8qKlxuICAgICAqIFJlcXVlc3QgdHlwZS5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMucmVxdWVzdFR5cGUgPSByZXF1ZXN0VHlwZTsgLy8gdG9KU09OLCBtYXJrZXJcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgcmVxdWVzdHMgYXJlIHN0cmVhbWVkIG9yIG5vdC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9XG4gICAgICovXG4gICAgdGhpcy5yZXF1ZXN0U3RyZWFtID0gcmVxdWVzdFN0cmVhbSA/IHRydWUgOiB1bmRlZmluZWQ7IC8vIHRvSlNPTlxuXG4gICAgLyoqXG4gICAgICogUmVzcG9uc2UgdHlwZS5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlOyAvLyB0b0pTT05cblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgcmVzcG9uc2VzIGFyZSBzdHJlYW1lZCBvciBub3QuXG4gICAgICogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIHRoaXMucmVzcG9uc2VTdHJlYW0gPSByZXNwb25zZVN0cmVhbSA/IHRydWUgOiB1bmRlZmluZWQ7IC8vIHRvSlNPTlxuXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZWQgcmVxdWVzdCB0eXBlLlxuICAgICAqIEB0eXBlIHtUeXBlfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5yZXNvbHZlZFJlcXVlc3RUeXBlID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFJlc29sdmVkIHJlc3BvbnNlIHR5cGUuXG4gICAgICogQHR5cGUge1R5cGV8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnJlc29sdmVkUmVzcG9uc2VUeXBlID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIENvbW1lbnQgZm9yIHRoaXMgbWV0aG9kXG4gICAgICogQHR5cGUge3N0cmluZ3xudWxsfVxuICAgICAqL1xuICAgIHRoaXMuY29tbWVudCA9IGNvbW1lbnQ7XG5cbiAgICAvKipcbiAgICAgKiBPcHRpb25zIHByb3Blcmx5IHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICAgICAqL1xuICAgIHRoaXMucGFyc2VkT3B0aW9ucyA9IHBhcnNlZE9wdGlvbnM7XG59XG5cbi8qKlxuICogTWV0aG9kIGRlc2NyaXB0b3IuXG4gKiBAaW50ZXJmYWNlIElNZXRob2RcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdHlwZT1cInJwY1wiXSBNZXRob2QgdHlwZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHJlcXVlc3RUeXBlIFJlcXVlc3QgdHlwZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHJlc3BvbnNlVHlwZSBSZXNwb25zZSB0eXBlXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyZXF1ZXN0U3RyZWFtPWZhbHNlXSBXaGV0aGVyIHJlcXVlc3RzIGFyZSBzdHJlYW1lZFxuICogQHByb3BlcnR5IHtib29sZWFufSBbcmVzcG9uc2VTdHJlYW09ZmFsc2VdIFdoZXRoZXIgcmVzcG9uc2VzIGFyZSBzdHJlYW1lZFxuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIE1ldGhvZCBvcHRpb25zXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29tbWVudCBNZXRob2QgY29tbWVudHNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsKj59IFtwYXJzZWRPcHRpb25zXSBNZXRob2Qgb3B0aW9ucyBwcm9wZXJseSBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBtZXRob2QgZnJvbSBhIG1ldGhvZCBkZXNjcmlwdG9yLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTWV0aG9kIG5hbWVcbiAqIEBwYXJhbSB7SU1ldGhvZH0ganNvbiBNZXRob2QgZGVzY3JpcHRvclxuICogQHJldHVybnMge01ldGhvZH0gQ3JlYXRlZCBtZXRob2RcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYXJndW1lbnRzIGFyZSBpbnZhbGlkXG4gKi9cbk1ldGhvZC5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OKG5hbWUsIGpzb24pIHtcbiAgICByZXR1cm4gbmV3IE1ldGhvZChuYW1lLCBqc29uLnR5cGUsIGpzb24ucmVxdWVzdFR5cGUsIGpzb24ucmVzcG9uc2VUeXBlLCBqc29uLnJlcXVlc3RTdHJlYW0sIGpzb24ucmVzcG9uc2VTdHJlYW0sIGpzb24ub3B0aW9ucywganNvbi5jb21tZW50LCBqc29uLnBhcnNlZE9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIG1ldGhvZCB0byBhIG1ldGhvZCBkZXNjcmlwdG9yLlxuICogQHBhcmFtIHtJVG9KU09OT3B0aW9uc30gW3RvSlNPTk9wdGlvbnNdIEpTT04gY29udmVyc2lvbiBvcHRpb25zXG4gKiBAcmV0dXJucyB7SU1ldGhvZH0gTWV0aG9kIGRlc2NyaXB0b3JcbiAqL1xuTWV0aG9kLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04odG9KU09OT3B0aW9ucykge1xuICAgIHZhciBrZWVwQ29tbWVudHMgPSB0b0pTT05PcHRpb25zID8gQm9vbGVhbih0b0pTT05PcHRpb25zLmtlZXBDb21tZW50cykgOiBmYWxzZTtcbiAgICByZXR1cm4gdXRpbC50b09iamVjdChbXG4gICAgICAgIFwidHlwZVwiICAgICAgICAgICAsIHRoaXMudHlwZSAhPT0gXCJycGNcIiAmJiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB0aGlzLnR5cGUgfHwgdW5kZWZpbmVkLFxuICAgICAgICBcInJlcXVlc3RUeXBlXCIgICAgLCB0aGlzLnJlcXVlc3RUeXBlLFxuICAgICAgICBcInJlcXVlc3RTdHJlYW1cIiAgLCB0aGlzLnJlcXVlc3RTdHJlYW0sXG4gICAgICAgIFwicmVzcG9uc2VUeXBlXCIgICAsIHRoaXMucmVzcG9uc2VUeXBlLFxuICAgICAgICBcInJlc3BvbnNlU3RyZWFtXCIgLCB0aGlzLnJlc3BvbnNlU3RyZWFtLFxuICAgICAgICBcIm9wdGlvbnNcIiAgICAgICAgLCB0aGlzLm9wdGlvbnMsXG4gICAgICAgIFwiY29tbWVudFwiICAgICAgICAsIGtlZXBDb21tZW50cyA/IHRoaXMuY29tbWVudCA6IHVuZGVmaW5lZCxcbiAgICAgICAgXCJwYXJzZWRPcHRpb25zXCIgICwgdGhpcy5wYXJzZWRPcHRpb25zLFxuICAgIF0pO1xufTtcblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuTWV0aG9kLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSgpIHtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICh0aGlzLnJlc29sdmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgIHRoaXMucmVzb2x2ZWRSZXF1ZXN0VHlwZSA9IHRoaXMucGFyZW50Lmxvb2t1cFR5cGUodGhpcy5yZXF1ZXN0VHlwZSk7XG4gICAgdGhpcy5yZXNvbHZlZFJlc3BvbnNlVHlwZSA9IHRoaXMucGFyZW50Lmxvb2t1cFR5cGUodGhpcy5yZXNwb25zZVR5cGUpO1xuXG4gICAgcmV0dXJuIFJlZmxlY3Rpb25PYmplY3QucHJvdG90eXBlLnJlc29sdmUuY2FsbCh0aGlzKTtcbn07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFNlcnZpY2U7XG5cbi8vIGV4dGVuZHMgTmFtZXNwYWNlXG52YXIgTmFtZXNwYWNlID0gcmVxdWlyZShcIi4vbmFtZXNwYWNlXCIpO1xuKChTZXJ2aWNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTmFtZXNwYWNlLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gU2VydmljZSkuY2xhc3NOYW1lID0gXCJTZXJ2aWNlXCI7XG5cbnZhciBNZXRob2QgPSByZXF1aXJlKFwiLi9tZXRob2RcIiksXG4gICAgdXRpbCAgID0gcmVxdWlyZShcIi4vdXRpbFwiKSxcbiAgICBycGMgICAgPSByZXF1aXJlKFwiLi9ycGNcIik7XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyBzZXJ2aWNlIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBSZWZsZWN0ZWQgc2VydmljZS5cbiAqIEBleHRlbmRzIE5hbWVzcGFjZUJhc2VcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgU2VydmljZSBuYW1lXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBbb3B0aW9uc10gU2VydmljZSBvcHRpb25zXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGFyZ3VtZW50cyBhcmUgaW52YWxpZFxuICovXG5mdW5jdGlvbiBTZXJ2aWNlKG5hbWUsIG9wdGlvbnMpIHtcbiAgICBOYW1lc3BhY2UuY2FsbCh0aGlzLCBuYW1lLCBvcHRpb25zKTtcblxuICAgIC8qKlxuICAgICAqIFNlcnZpY2UgbWV0aG9kcy5cbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsTWV0aG9kPn1cbiAgICAgKi9cbiAgICB0aGlzLm1ldGhvZHMgPSB7fTsgLy8gdG9KU09OLCBtYXJrZXJcblxuICAgIC8qKlxuICAgICAqIENhY2hlZCBtZXRob2RzIGFzIGFuIGFycmF5LlxuICAgICAqIEB0eXBlIHtNZXRob2RbXXxudWxsfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbWV0aG9kc0FycmF5ID0gbnVsbDtcbn1cblxuLyoqXG4gKiBTZXJ2aWNlIGRlc2NyaXB0b3IuXG4gKiBAaW50ZXJmYWNlIElTZXJ2aWNlXG4gKiBAZXh0ZW5kcyBJTmFtZXNwYWNlXG4gKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLElNZXRob2Q+fSBtZXRob2RzIE1ldGhvZCBkZXNjcmlwdG9yc1xuICovXG5cbi8qKlxuICogQ29uc3RydWN0cyBhIHNlcnZpY2UgZnJvbSBhIHNlcnZpY2UgZGVzY3JpcHRvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFNlcnZpY2UgbmFtZVxuICogQHBhcmFtIHtJU2VydmljZX0ganNvbiBTZXJ2aWNlIGRlc2NyaXB0b3JcbiAqIEByZXR1cm5zIHtTZXJ2aWNlfSBDcmVhdGVkIHNlcnZpY2VcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYXJndW1lbnRzIGFyZSBpbnZhbGlkXG4gKi9cblNlcnZpY2UuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihuYW1lLCBqc29uKSB7XG4gICAgdmFyIHNlcnZpY2UgPSBuZXcgU2VydmljZShuYW1lLCBqc29uLm9wdGlvbnMpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKGpzb24ubWV0aG9kcylcbiAgICAgICAgZm9yICh2YXIgbmFtZXMgPSBPYmplY3Qua2V5cyhqc29uLm1ldGhvZHMpLCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgc2VydmljZS5hZGQoTWV0aG9kLmZyb21KU09OKG5hbWVzW2ldLCBqc29uLm1ldGhvZHNbbmFtZXNbaV1dKSk7XG4gICAgaWYgKGpzb24ubmVzdGVkKVxuICAgICAgICBzZXJ2aWNlLmFkZEpTT04oanNvbi5uZXN0ZWQpO1xuICAgIHNlcnZpY2UuY29tbWVudCA9IGpzb24uY29tbWVudDtcbiAgICByZXR1cm4gc2VydmljZTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBzZXJ2aWNlIHRvIGEgc2VydmljZSBkZXNjcmlwdG9yLlxuICogQHBhcmFtIHtJVG9KU09OT3B0aW9uc30gW3RvSlNPTk9wdGlvbnNdIEpTT04gY29udmVyc2lvbiBvcHRpb25zXG4gKiBAcmV0dXJucyB7SVNlcnZpY2V9IFNlcnZpY2UgZGVzY3JpcHRvclxuICovXG5TZXJ2aWNlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04odG9KU09OT3B0aW9ucykge1xuICAgIHZhciBpbmhlcml0ZWQgPSBOYW1lc3BhY2UucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsIHRvSlNPTk9wdGlvbnMpO1xuICAgIHZhciBrZWVwQ29tbWVudHMgPSB0b0pTT05PcHRpb25zID8gQm9vbGVhbih0b0pTT05PcHRpb25zLmtlZXBDb21tZW50cykgOiBmYWxzZTtcbiAgICByZXR1cm4gdXRpbC50b09iamVjdChbXG4gICAgICAgIFwib3B0aW9uc1wiICwgaW5oZXJpdGVkICYmIGluaGVyaXRlZC5vcHRpb25zIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgXCJtZXRob2RzXCIgLCBOYW1lc3BhY2UuYXJyYXlUb0pTT04odGhpcy5tZXRob2RzQXJyYXksIHRvSlNPTk9wdGlvbnMpIHx8IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHt9LFxuICAgICAgICBcIm5lc3RlZFwiICAsIGluaGVyaXRlZCAmJiBpbmhlcml0ZWQubmVzdGVkIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgXCJjb21tZW50XCIgLCBrZWVwQ29tbWVudHMgPyB0aGlzLmNvbW1lbnQgOiB1bmRlZmluZWRcbiAgICBdKTtcbn07XG5cbi8qKlxuICogTWV0aG9kcyBvZiB0aGlzIHNlcnZpY2UgYXMgYW4gYXJyYXkgZm9yIGl0ZXJhdGlvbi5cbiAqIEBuYW1lIFNlcnZpY2UjbWV0aG9kc0FycmF5XG4gKiBAdHlwZSB7TWV0aG9kW119XG4gKiBAcmVhZG9ubHlcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNlcnZpY2UucHJvdG90eXBlLCBcIm1ldGhvZHNBcnJheVwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGhvZHNBcnJheSB8fCAodGhpcy5fbWV0aG9kc0FycmF5ID0gdXRpbC50b0FycmF5KHRoaXMubWV0aG9kcykpO1xuICAgIH1cbn0pO1xuXG5mdW5jdGlvbiBjbGVhckNhY2hlKHNlcnZpY2UpIHtcbiAgICBzZXJ2aWNlLl9tZXRob2RzQXJyYXkgPSBudWxsO1xuICAgIHJldHVybiBzZXJ2aWNlO1xufVxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5TZXJ2aWNlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1ldGhvZHNbbmFtZV1cbiAgICAgICAgfHwgTmFtZXNwYWNlLnByb3RvdHlwZS5nZXQuY2FsbCh0aGlzLCBuYW1lKTtcbn07XG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cblNlcnZpY2UucHJvdG90eXBlLnJlc29sdmVBbGwgPSBmdW5jdGlvbiByZXNvbHZlQWxsKCkge1xuICAgIHZhciBtZXRob2RzID0gdGhpcy5tZXRob2RzQXJyYXk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZXRob2RzLmxlbmd0aDsgKytpKVxuICAgICAgICBtZXRob2RzW2ldLnJlc29sdmUoKTtcbiAgICByZXR1cm4gTmFtZXNwYWNlLnByb3RvdHlwZS5yZXNvbHZlLmNhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5TZXJ2aWNlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQob2JqZWN0KSB7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAodGhpcy5nZXQob2JqZWN0Lm5hbWUpKVxuICAgICAgICB0aHJvdyBFcnJvcihcImR1cGxpY2F0ZSBuYW1lICdcIiArIG9iamVjdC5uYW1lICsgXCInIGluIFwiICsgdGhpcyk7XG5cbiAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgTWV0aG9kKSB7XG4gICAgICAgIHRoaXMubWV0aG9kc1tvYmplY3QubmFtZV0gPSBvYmplY3Q7XG4gICAgICAgIG9iamVjdC5wYXJlbnQgPSB0aGlzO1xuICAgICAgICByZXR1cm4gY2xlYXJDYWNoZSh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIE5hbWVzcGFjZS5wcm90b3R5cGUuYWRkLmNhbGwodGhpcywgb2JqZWN0KTtcbn07XG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cblNlcnZpY2UucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgTWV0aG9kKSB7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICh0aGlzLm1ldGhvZHNbb2JqZWN0Lm5hbWVdICE9PSBvYmplY3QpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihvYmplY3QgKyBcIiBpcyBub3QgYSBtZW1iZXIgb2YgXCIgKyB0aGlzKTtcblxuICAgICAgICBkZWxldGUgdGhpcy5tZXRob2RzW29iamVjdC5uYW1lXTtcbiAgICAgICAgb2JqZWN0LnBhcmVudCA9IG51bGw7XG4gICAgICAgIHJldHVybiBjbGVhckNhY2hlKHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gTmFtZXNwYWNlLnByb3RvdHlwZS5yZW1vdmUuY2FsbCh0aGlzLCBvYmplY3QpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgcnVudGltZSBzZXJ2aWNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcnBjIGltcGxlbWVudGF0aW9uLlxuICogQHBhcmFtIHtSUENJbXBsfSBycGNJbXBsIFJQQyBpbXBsZW1lbnRhdGlvblxuICogQHBhcmFtIHtib29sZWFufSBbcmVxdWVzdERlbGltaXRlZD1mYWxzZV0gV2hldGhlciByZXF1ZXN0cyBhcmUgbGVuZ3RoLWRlbGltaXRlZFxuICogQHBhcmFtIHtib29sZWFufSBbcmVzcG9uc2VEZWxpbWl0ZWQ9ZmFsc2VdIFdoZXRoZXIgcmVzcG9uc2VzIGFyZSBsZW5ndGgtZGVsaW1pdGVkXG4gKiBAcmV0dXJucyB7cnBjLlNlcnZpY2V9IFJQQyBzZXJ2aWNlLiBVc2VmdWwgd2hlcmUgcmVxdWVzdHMgYW5kL29yIHJlc3BvbnNlcyBhcmUgc3RyZWFtZWQuXG4gKi9cblNlcnZpY2UucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShycGNJbXBsLCByZXF1ZXN0RGVsaW1pdGVkLCByZXNwb25zZURlbGltaXRlZCkge1xuICAgIHZhciBycGNTZXJ2aWNlID0gbmV3IHJwYy5TZXJ2aWNlKHJwY0ltcGwsIHJlcXVlc3REZWxpbWl0ZWQsIHJlc3BvbnNlRGVsaW1pdGVkKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbWV0aG9kOyBpIDwgLyogaW5pdGlhbGl6ZXMgKi8gdGhpcy5tZXRob2RzQXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIG1ldGhvZE5hbWUgPSB1dGlsLmxjRmlyc3QoKG1ldGhvZCA9IHRoaXMuX21ldGhvZHNBcnJheVtpXSkucmVzb2x2ZSgpLm5hbWUpLnJlcGxhY2UoL1teJFxcd19dL2csIFwiXCIpO1xuICAgICAgICBycGNTZXJ2aWNlW21ldGhvZE5hbWVdID0gdXRpbC5jb2RlZ2VuKFtcInJcIixcImNcIl0sIHV0aWwuaXNSZXNlcnZlZChtZXRob2ROYW1lKSA/IG1ldGhvZE5hbWUgKyBcIl9cIiA6IG1ldGhvZE5hbWUpKFwicmV0dXJuIHRoaXMucnBjQ2FsbChtLHEscyxyLGMpXCIpKHtcbiAgICAgICAgICAgIG06IG1ldGhvZCxcbiAgICAgICAgICAgIHE6IG1ldGhvZC5yZXNvbHZlZFJlcXVlc3RUeXBlLmN0b3IsXG4gICAgICAgICAgICBzOiBtZXRob2QucmVzb2x2ZWRSZXNwb25zZVR5cGUuY3RvclxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJwY1NlcnZpY2U7XG59O1xuIiwgIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBNZXNzYWdlO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IG1lc3NhZ2UgaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIEFic3RyYWN0IHJ1bnRpbWUgbWVzc2FnZS5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtQcm9wZXJ0aWVzPFQ+fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgb2JqZWN0ID0gb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIE1lc3NhZ2UocHJvcGVydGllcykge1xuICAgIC8vIG5vdCB1c2VkIGludGVybmFsbHlcbiAgICBpZiAocHJvcGVydGllcylcbiAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICB0aGlzW2tleXNbaV1dID0gcHJvcGVydGllc1trZXlzW2ldXTtcbn1cblxuLyoqXG4gKiBSZWZlcmVuY2UgdG8gdGhlIHJlZmxlY3RlZCB0eXBlLlxuICogQG5hbWUgTWVzc2FnZS4kdHlwZVxuICogQHR5cGUge1R5cGV9XG4gKiBAcmVhZG9ubHlcbiAqL1xuXG4vKipcbiAqIFJlZmVyZW5jZSB0byB0aGUgcmVmbGVjdGVkIHR5cGUuXG4gKiBAbmFtZSBNZXNzYWdlIyR0eXBlXG4gKiBAdHlwZSB7VHlwZX1cbiAqIEByZWFkb25seVxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgdmFsaWQtanNkb2MqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbWVzc2FnZSBvZiB0aGlzIHR5cGUgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gKiBAcmV0dXJucyB7TWVzc2FnZTxUPn0gTWVzc2FnZSBpbnN0YW5jZVxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBNZXNzYWdlPFQ+XG4gKiBAdGhpcyBDb25zdHJ1Y3RvcjxUPlxuICovXG5NZXNzYWdlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShwcm9wZXJ0aWVzKSB7XG4gICAgcmV0dXJuIHRoaXMuJHR5cGUuY3JlYXRlKHByb3BlcnRpZXMpO1xufTtcblxuLyoqXG4gKiBFbmNvZGVzIGEgbWVzc2FnZSBvZiB0aGlzIHR5cGUuXG4gKiBAcGFyYW0ge1R8T2JqZWN0LjxzdHJpbmcsKj59IG1lc3NhZ2UgTWVzc2FnZSB0byBlbmNvZGVcbiAqIEBwYXJhbSB7V3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gdXNlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBXcml0ZXJcbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgTWVzc2FnZTxUPlxuICogQHRoaXMgQ29uc3RydWN0b3I8VD5cbiAqL1xuTWVzc2FnZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuJHR5cGUuZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcik7XG59O1xuXG4vKipcbiAqIEVuY29kZXMgYSBtZXNzYWdlIG9mIHRoaXMgdHlwZSBwcmVjZWVkZWQgYnkgaXRzIGxlbmd0aCBhcyBhIHZhcmludC5cbiAqIEBwYXJhbSB7VHxPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBNZXNzYWdlIHRvIGVuY29kZVxuICogQHBhcmFtIHtXcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byB1c2VcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IFdyaXRlclxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBNZXNzYWdlPFQ+XG4gKiBAdGhpcyBDb25zdHJ1Y3RvcjxUPlxuICovXG5NZXNzYWdlLmVuY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZChtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICByZXR1cm4gdGhpcy4kdHlwZS5lbmNvZGVEZWxpbWl0ZWQobWVzc2FnZSwgd3JpdGVyKTtcbn07XG5cbi8qKlxuICogRGVjb2RlcyBhIG1lc3NhZ2Ugb2YgdGhpcyB0eXBlLlxuICogQG5hbWUgTWVzc2FnZS5kZWNvZGVcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtSZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlXG4gKiBAcmV0dXJucyB7VH0gRGVjb2RlZCBtZXNzYWdlXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIE1lc3NhZ2U8VD5cbiAqIEB0aGlzIENvbnN0cnVjdG9yPFQ+XG4gKi9cbk1lc3NhZ2UuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHJlYWRlcikge1xuICAgIHJldHVybiB0aGlzLiR0eXBlLmRlY29kZShyZWFkZXIpO1xufTtcblxuLyoqXG4gKiBEZWNvZGVzIGEgbWVzc2FnZSBvZiB0aGlzIHR5cGUgcHJlY2VlZGVkIGJ5IGl0cyBsZW5ndGggYXMgYSB2YXJpbnQuXG4gKiBAbmFtZSBNZXNzYWdlLmRlY29kZURlbGltaXRlZFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge1JlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGVcbiAqIEByZXR1cm5zIHtUfSBEZWNvZGVkIG1lc3NhZ2VcbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgTWVzc2FnZTxUPlxuICogQHRoaXMgQ29uc3RydWN0b3I8VD5cbiAqL1xuTWVzc2FnZS5kZWNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuJHR5cGUuZGVjb2RlRGVsaW1pdGVkKHJlYWRlcik7XG59O1xuXG4vKipcbiAqIFZlcmlmaWVzIGEgbWVzc2FnZSBvZiB0aGlzIHR5cGUuXG4gKiBAbmFtZSBNZXNzYWdlLnZlcmlmeVxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBtZXNzYWdlIFBsYWluIG9iamVjdCB0byB2ZXJpZnlcbiAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH0gYG51bGxgIGlmIHZhbGlkLCBvdGhlcndpc2UgdGhlIHJlYXNvbiB3aHkgaXQgaXMgbm90XG4gKi9cbk1lc3NhZ2UudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy4kdHlwZS52ZXJpZnkobWVzc2FnZSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbWVzc2FnZSBvZiB0aGlzIHR5cGUgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IG9iamVjdCBQbGFpbiBvYmplY3RcbiAqIEByZXR1cm5zIHtUfSBNZXNzYWdlIGluc3RhbmNlXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIE1lc3NhZ2U8VD5cbiAqIEB0aGlzIENvbnN0cnVjdG9yPFQ+XG4gKi9cbk1lc3NhZ2UuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3Qob2JqZWN0KSB7XG4gICAgcmV0dXJuIHRoaXMuJHR5cGUuZnJvbU9iamVjdChvYmplY3QpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBtZXNzYWdlIG9mIHRoaXMgdHlwZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICogQHBhcmFtIHtUfSBtZXNzYWdlIE1lc3NhZ2UgaW5zdGFuY2VcbiAqIEBwYXJhbSB7SUNvbnZlcnNpb25PcHRpb25zfSBbb3B0aW9uc10gQ29udmVyc2lvbiBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBNZXNzYWdlPFQ+XG4gKiBAdGhpcyBDb25zdHJ1Y3RvcjxUPlxuICovXG5NZXNzYWdlLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobWVzc2FnZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLiR0eXBlLnRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIG1lc3NhZ2UgdG8gSlNPTi5cbiAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAqL1xuTWVzc2FnZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLiR0eXBlLnRvT2JqZWN0KHRoaXMsIHV0aWwudG9KU09OT3B0aW9ucyk7XG59O1xuXG4vKmVzbGludC1lbmFibGUgdmFsaWQtanNkb2MqLyIsICJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZGVjb2RlcjtcblxudmFyIEVudW0gICAgPSByZXF1aXJlKFwiLi9lbnVtXCIpLFxuICAgIHR5cGVzICAgPSByZXF1aXJlKFwiLi90eXBlc1wiKSxcbiAgICB1dGlsICAgID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxuZnVuY3Rpb24gbWlzc2luZyhmaWVsZCkge1xuICAgIHJldHVybiBcIm1pc3NpbmcgcmVxdWlyZWQgJ1wiICsgZmllbGQubmFtZSArIFwiJ1wiO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIGRlY29kZXIgc3BlY2lmaWMgdG8gdGhlIHNwZWNpZmllZCBtZXNzYWdlIHR5cGUuXG4gKiBAcGFyYW0ge1R5cGV9IG10eXBlIE1lc3NhZ2UgdHlwZVxuICogQHJldHVybnMge0NvZGVnZW59IENvZGVnZW4gaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gZGVjb2RlcihtdHlwZSkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lICovXG4gICAgdmFyIGdlbiA9IHV0aWwuY29kZWdlbihbXCJyXCIsIFwibFwiXSwgbXR5cGUubmFtZSArIFwiJGRlY29kZVwiKVxuICAgIChcImlmKCEociBpbnN0YW5jZW9mIFJlYWRlcikpXCIpXG4gICAgICAgIChcInI9UmVhZGVyLmNyZWF0ZShyKVwiKVxuICAgIChcInZhciBjPWw9PT11bmRlZmluZWQ/ci5sZW46ci5wb3MrbCxtPW5ldyB0aGlzLmN0b3JcIiArIChtdHlwZS5maWVsZHNBcnJheS5maWx0ZXIoZnVuY3Rpb24oZmllbGQpIHsgcmV0dXJuIGZpZWxkLm1hcDsgfSkubGVuZ3RoID8gXCIsayx2YWx1ZVwiIDogXCJcIikpXG4gICAgKFwid2hpbGUoci5wb3M8Yyl7XCIpXG4gICAgICAgIChcInZhciB0PXIudWludDMyKClcIik7XG4gICAgaWYgKG10eXBlLmdyb3VwKSBnZW5cbiAgICAgICAgKFwiaWYoKHQmNyk9PT00KVwiKVxuICAgICAgICAgICAgKFwiYnJlYWtcIik7XG4gICAgZ2VuXG4gICAgICAgIChcInN3aXRjaCh0Pj4+Myl7XCIpO1xuXG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBpIDwgLyogaW5pdGlhbGl6ZXMgKi8gbXR5cGUuZmllbGRzQXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGZpZWxkID0gbXR5cGUuX2ZpZWxkc0FycmF5W2ldLnJlc29sdmUoKSxcbiAgICAgICAgICAgIHR5cGUgID0gZmllbGQucmVzb2x2ZWRUeXBlIGluc3RhbmNlb2YgRW51bSA/IFwiaW50MzJcIiA6IGZpZWxkLnR5cGUsXG4gICAgICAgICAgICByZWYgICA9IFwibVwiICsgdXRpbC5zYWZlUHJvcChmaWVsZC5uYW1lKTsgZ2VuXG4gICAgICAgICAgICAoXCJjYXNlICVpOlwiLCBmaWVsZC5pZCk7XG5cbiAgICAgICAgLy8gTWFwIGZpZWxkc1xuICAgICAgICBpZiAoZmllbGQubWFwKSB7IGdlblxuICAgICAgICAgICAgICAgIChcImlmKCVzPT09dXRpbC5lbXB0eU9iamVjdClcIiwgcmVmKVxuICAgICAgICAgICAgICAgICAgICAoXCIlcz17fVwiLCByZWYpXG4gICAgICAgICAgICAgICAgKFwidmFyIGMyID0gci51aW50MzIoKStyLnBvc1wiKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVzLmRlZmF1bHRzW2ZpZWxkLmtleVR5cGVdICE9PSB1bmRlZmluZWQpIGdlblxuICAgICAgICAgICAgICAgIChcIms9JWpcIiwgdHlwZXMuZGVmYXVsdHNbZmllbGQua2V5VHlwZV0pO1xuICAgICAgICAgICAgZWxzZSBnZW5cbiAgICAgICAgICAgICAgICAoXCJrPW51bGxcIik7XG5cbiAgICAgICAgICAgIGlmICh0eXBlcy5kZWZhdWx0c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSBnZW5cbiAgICAgICAgICAgICAgICAoXCJ2YWx1ZT0lalwiLCB0eXBlcy5kZWZhdWx0c1t0eXBlXSk7XG4gICAgICAgICAgICBlbHNlIGdlblxuICAgICAgICAgICAgICAgIChcInZhbHVlPW51bGxcIik7XG5cbiAgICAgICAgICAgIGdlblxuICAgICAgICAgICAgICAgIChcIndoaWxlKHIucG9zPGMyKXtcIilcbiAgICAgICAgICAgICAgICAgICAgKFwidmFyIHRhZzI9ci51aW50MzIoKVwiKVxuICAgICAgICAgICAgICAgICAgICAoXCJzd2l0Y2godGFnMj4+PjMpe1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgKFwiY2FzZSAxOiBrPXIuJXMoKTsgYnJlYWtcIiwgZmllbGQua2V5VHlwZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIChcImNhc2UgMjpcIik7XG5cbiAgICAgICAgICAgIGlmICh0eXBlcy5iYXNpY1t0eXBlXSA9PT0gdW5kZWZpbmVkKSBnZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXCJ2YWx1ZT10eXBlc1slaV0uZGVjb2RlKHIsci51aW50MzIoKSlcIiwgaSk7IC8vIGNhbid0IGJlIGdyb3Vwc1xuICAgICAgICAgICAgZWxzZSBnZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXCJ2YWx1ZT1yLiVzKClcIiwgdHlwZSk7XG5cbiAgICAgICAgICAgIGdlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChcImJyZWFrXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAoXCJkZWZhdWx0OlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChcInIuc2tpcFR5cGUodGFnMiY3KVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChcImJyZWFrXCIpXG4gICAgICAgICAgICAgICAgICAgIChcIn1cIilcbiAgICAgICAgICAgICAgICAoXCJ9XCIpO1xuXG4gICAgICAgICAgICBpZiAodHlwZXMubG9uZ1tmaWVsZC5rZXlUeXBlXSAhPT0gdW5kZWZpbmVkKSBnZW5cbiAgICAgICAgICAgICAgICAoXCIlc1t0eXBlb2Ygaz09PVxcXCJvYmplY3RcXFwiP3V0aWwubG9uZ1RvSGFzaChrKTprXT12YWx1ZVwiLCByZWYpO1xuICAgICAgICAgICAgZWxzZSBnZW5cbiAgICAgICAgICAgICAgICAoXCIlc1trXT12YWx1ZVwiLCByZWYpO1xuXG4gICAgICAgIC8vIFJlcGVhdGVkIGZpZWxkc1xuICAgICAgICB9IGVsc2UgaWYgKGZpZWxkLnJlcGVhdGVkKSB7IGdlblxuXG4gICAgICAgICAgICAgICAgKFwiaWYoISglcyYmJXMubGVuZ3RoKSlcIiwgcmVmLCByZWYpXG4gICAgICAgICAgICAgICAgICAgIChcIiVzPVtdXCIsIHJlZik7XG5cbiAgICAgICAgICAgIC8vIFBhY2thYmxlIChhbHdheXMgY2hlY2sgZm9yIGZvcndhcmQgYW5kIGJhY2t3YXJkIGNvbXBhdGlibGl0eSlcbiAgICAgICAgICAgIGlmICh0eXBlcy5wYWNrZWRbdHlwZV0gIT09IHVuZGVmaW5lZCkgZ2VuXG4gICAgICAgICAgICAgICAgKFwiaWYoKHQmNyk9PT0yKXtcIilcbiAgICAgICAgICAgICAgICAgICAgKFwidmFyIGMyPXIudWludDMyKCkrci5wb3NcIilcbiAgICAgICAgICAgICAgICAgICAgKFwid2hpbGUoci5wb3M8YzIpXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAoXCIlcy5wdXNoKHIuJXMoKSlcIiwgcmVmLCB0eXBlKVxuICAgICAgICAgICAgICAgIChcIn1lbHNlXCIpO1xuXG4gICAgICAgICAgICAvLyBOb24tcGFja2VkXG4gICAgICAgICAgICBpZiAodHlwZXMuYmFzaWNbdHlwZV0gPT09IHVuZGVmaW5lZCkgZ2VuKGZpZWxkLnJlc29sdmVkVHlwZS5ncm91cFxuICAgICAgICAgICAgICAgICAgICA/IFwiJXMucHVzaCh0eXBlc1slaV0uZGVjb2RlKHIpKVwiXG4gICAgICAgICAgICAgICAgICAgIDogXCIlcy5wdXNoKHR5cGVzWyVpXS5kZWNvZGUocixyLnVpbnQzMigpKSlcIiwgcmVmLCBpKTtcbiAgICAgICAgICAgIGVsc2UgZ2VuXG4gICAgICAgICAgICAgICAgICAgIChcIiVzLnB1c2goci4lcygpKVwiLCByZWYsIHR5cGUpO1xuXG4gICAgICAgIC8vIE5vbi1yZXBlYXRlZFxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVzLmJhc2ljW3R5cGVdID09PSB1bmRlZmluZWQpIGdlbihmaWVsZC5yZXNvbHZlZFR5cGUuZ3JvdXBcbiAgICAgICAgICAgICAgICA/IFwiJXM9dHlwZXNbJWldLmRlY29kZShyKVwiXG4gICAgICAgICAgICAgICAgOiBcIiVzPXR5cGVzWyVpXS5kZWNvZGUocixyLnVpbnQzMigpKVwiLCByZWYsIGkpO1xuICAgICAgICBlbHNlIGdlblxuICAgICAgICAgICAgICAgIChcIiVzPXIuJXMoKVwiLCByZWYsIHR5cGUpO1xuICAgICAgICBnZW5cbiAgICAgICAgICAgICAgICAoXCJicmVha1wiKTtcbiAgICAvLyBVbmtub3duIGZpZWxkc1xuICAgIH0gZ2VuXG4gICAgICAgICAgICAoXCJkZWZhdWx0OlwiKVxuICAgICAgICAgICAgICAgIChcInIuc2tpcFR5cGUodCY3KVwiKVxuICAgICAgICAgICAgICAgIChcImJyZWFrXCIpXG5cbiAgICAgICAgKFwifVwiKVxuICAgIChcIn1cIik7XG5cbiAgICAvLyBGaWVsZCBwcmVzZW5jZVxuICAgIGZvciAoaSA9IDA7IGkgPCBtdHlwZS5fZmllbGRzQXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHJmaWVsZCA9IG10eXBlLl9maWVsZHNBcnJheVtpXTtcbiAgICAgICAgaWYgKHJmaWVsZC5yZXF1aXJlZCkgZ2VuXG4gICAgKFwiaWYoIW0uaGFzT3duUHJvcGVydHkoJWopKVwiLCByZmllbGQubmFtZSlcbiAgICAgICAgKFwidGhyb3cgdXRpbC5Qcm90b2NvbEVycm9yKCVqLHtpbnN0YW5jZTptfSlcIiwgbWlzc2luZyhyZmllbGQpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2VuXG4gICAgKFwicmV0dXJuIG1cIik7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby11bmV4cGVjdGVkLW11bHRpbGluZSAqL1xufVxuIiwgIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSB2ZXJpZmllcjtcblxudmFyIEVudW0gICAgICA9IHJlcXVpcmUoXCIuL2VudW1cIiksXG4gICAgdXRpbCAgICAgID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxuZnVuY3Rpb24gaW52YWxpZChmaWVsZCwgZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gZmllbGQubmFtZSArIFwiOiBcIiArIGV4cGVjdGVkICsgKGZpZWxkLnJlcGVhdGVkICYmIGV4cGVjdGVkICE9PSBcImFycmF5XCIgPyBcIltdXCIgOiBmaWVsZC5tYXAgJiYgZXhwZWN0ZWQgIT09IFwib2JqZWN0XCIgPyBcIntrOlwiK2ZpZWxkLmtleVR5cGUrXCJ9XCIgOiBcIlwiKSArIFwiIGV4cGVjdGVkXCI7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgcGFydGlhbCB2YWx1ZSB2ZXJpZmllci5cbiAqIEBwYXJhbSB7Q29kZWdlbn0gZ2VuIENvZGVnZW4gaW5zdGFuY2VcbiAqIEBwYXJhbSB7RmllbGR9IGZpZWxkIFJlZmxlY3RlZCBmaWVsZFxuICogQHBhcmFtIHtudW1iZXJ9IGZpZWxkSW5kZXggRmllbGQgaW5kZXhcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWYgVmFyaWFibGUgcmVmZXJlbmNlXG4gKiBAcmV0dXJucyB7Q29kZWdlbn0gQ29kZWdlbiBpbnN0YW5jZVxuICogQGlnbm9yZVxuICovXG5mdW5jdGlvbiBnZW5WZXJpZnlWYWx1ZShnZW4sIGZpZWxkLCBmaWVsZEluZGV4LCByZWYpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmV4cGVjdGVkLW11bHRpbGluZSAqL1xuICAgIGlmIChmaWVsZC5yZXNvbHZlZFR5cGUpIHtcbiAgICAgICAgaWYgKGZpZWxkLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIEVudW0pIHsgZ2VuXG4gICAgICAgICAgICAoXCJzd2l0Y2goJXMpe1wiLCByZWYpXG4gICAgICAgICAgICAgICAgKFwiZGVmYXVsdDpcIilcbiAgICAgICAgICAgICAgICAgICAgKFwicmV0dXJuJWpcIiwgaW52YWxpZChmaWVsZCwgXCJlbnVtIHZhbHVlXCIpKTtcbiAgICAgICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhmaWVsZC5yZXNvbHZlZFR5cGUudmFsdWVzKSwgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgKytqKSBnZW5cbiAgICAgICAgICAgICAgICAoXCJjYXNlICVpOlwiLCBmaWVsZC5yZXNvbHZlZFR5cGUudmFsdWVzW2tleXNbal1dKTtcbiAgICAgICAgICAgIGdlblxuICAgICAgICAgICAgICAgICAgICAoXCJicmVha1wiKVxuICAgICAgICAgICAgKFwifVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdlblxuICAgICAgICAgICAgKFwie1wiKVxuICAgICAgICAgICAgICAgIChcInZhciBlPXR5cGVzWyVpXS52ZXJpZnkoJXMpO1wiLCBmaWVsZEluZGV4LCByZWYpXG4gICAgICAgICAgICAgICAgKFwiaWYoZSlcIilcbiAgICAgICAgICAgICAgICAgICAgKFwicmV0dXJuJWorZVwiLCBmaWVsZC5uYW1lICsgXCIuXCIpXG4gICAgICAgICAgICAoXCJ9XCIpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3dpdGNoIChmaWVsZC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiaW50MzJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJ1aW50MzJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzaW50MzJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJmaXhlZDMyXCI6XG4gICAgICAgICAgICBjYXNlIFwic2ZpeGVkMzJcIjogZ2VuXG4gICAgICAgICAgICAgICAgKFwiaWYoIXV0aWwuaXNJbnRlZ2VyKCVzKSlcIiwgcmVmKVxuICAgICAgICAgICAgICAgICAgICAoXCJyZXR1cm4lalwiLCBpbnZhbGlkKGZpZWxkLCBcImludGVnZXJcIikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImludDY0XCI6XG4gICAgICAgICAgICBjYXNlIFwidWludDY0XCI6XG4gICAgICAgICAgICBjYXNlIFwic2ludDY0XCI6XG4gICAgICAgICAgICBjYXNlIFwiZml4ZWQ2NFwiOlxuICAgICAgICAgICAgY2FzZSBcInNmaXhlZDY0XCI6IGdlblxuICAgICAgICAgICAgICAgIChcImlmKCF1dGlsLmlzSW50ZWdlciglcykmJiEoJXMmJnV0aWwuaXNJbnRlZ2VyKCVzLmxvdykmJnV0aWwuaXNJbnRlZ2VyKCVzLmhpZ2gpKSlcIiwgcmVmLCByZWYsIHJlZiwgcmVmKVxuICAgICAgICAgICAgICAgICAgICAoXCJyZXR1cm4lalwiLCBpbnZhbGlkKGZpZWxkLCBcImludGVnZXJ8TG9uZ1wiKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZmxvYXRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJkb3VibGVcIjogZ2VuXG4gICAgICAgICAgICAgICAgKFwiaWYodHlwZW9mICVzIT09XFxcIm51bWJlclxcXCIpXCIsIHJlZilcbiAgICAgICAgICAgICAgICAgICAgKFwicmV0dXJuJWpcIiwgaW52YWxpZChmaWVsZCwgXCJudW1iZXJcIikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImJvb2xcIjogZ2VuXG4gICAgICAgICAgICAgICAgKFwiaWYodHlwZW9mICVzIT09XFxcImJvb2xlYW5cXFwiKVwiLCByZWYpXG4gICAgICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGludmFsaWQoZmllbGQsIFwiYm9vbGVhblwiKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6IGdlblxuICAgICAgICAgICAgICAgIChcImlmKCF1dGlsLmlzU3RyaW5nKCVzKSlcIiwgcmVmKVxuICAgICAgICAgICAgICAgICAgICAoXCJyZXR1cm4lalwiLCBpbnZhbGlkKGZpZWxkLCBcInN0cmluZ1wiKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYnl0ZXNcIjogZ2VuXG4gICAgICAgICAgICAgICAgKFwiaWYoISglcyYmdHlwZW9mICVzLmxlbmd0aD09PVxcXCJudW1iZXJcXFwifHx1dGlsLmlzU3RyaW5nKCVzKSkpXCIsIHJlZiwgcmVmLCByZWYpXG4gICAgICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGludmFsaWQoZmllbGQsIFwiYnVmZmVyXCIpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZ2VuO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUgKi9cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBwYXJ0aWFsIGtleSB2ZXJpZmllci5cbiAqIEBwYXJhbSB7Q29kZWdlbn0gZ2VuIENvZGVnZW4gaW5zdGFuY2VcbiAqIEBwYXJhbSB7RmllbGR9IGZpZWxkIFJlZmxlY3RlZCBmaWVsZFxuICogQHBhcmFtIHtzdHJpbmd9IHJlZiBWYXJpYWJsZSByZWZlcmVuY2VcbiAqIEByZXR1cm5zIHtDb2RlZ2VufSBDb2RlZ2VuIGluc3RhbmNlXG4gKiBAaWdub3JlXG4gKi9cbmZ1bmN0aW9uIGdlblZlcmlmeUtleShnZW4sIGZpZWxkLCByZWYpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmV4cGVjdGVkLW11bHRpbGluZSAqL1xuICAgIHN3aXRjaCAoZmllbGQua2V5VHlwZSkge1xuICAgICAgICBjYXNlIFwiaW50MzJcIjpcbiAgICAgICAgY2FzZSBcInVpbnQzMlwiOlxuICAgICAgICBjYXNlIFwic2ludDMyXCI6XG4gICAgICAgIGNhc2UgXCJmaXhlZDMyXCI6XG4gICAgICAgIGNhc2UgXCJzZml4ZWQzMlwiOiBnZW5cbiAgICAgICAgICAgIChcImlmKCF1dGlsLmtleTMyUmUudGVzdCglcykpXCIsIHJlZilcbiAgICAgICAgICAgICAgICAoXCJyZXR1cm4lalwiLCBpbnZhbGlkKGZpZWxkLCBcImludGVnZXIga2V5XCIpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiaW50NjRcIjpcbiAgICAgICAgY2FzZSBcInVpbnQ2NFwiOlxuICAgICAgICBjYXNlIFwic2ludDY0XCI6XG4gICAgICAgIGNhc2UgXCJmaXhlZDY0XCI6XG4gICAgICAgIGNhc2UgXCJzZml4ZWQ2NFwiOiBnZW5cbiAgICAgICAgICAgIChcImlmKCF1dGlsLmtleTY0UmUudGVzdCglcykpXCIsIHJlZikgLy8gc2VlIGNvbW1lbnQgYWJvdmU6IHggaXMgb2ssIGQgaXMgbm90XG4gICAgICAgICAgICAgICAgKFwicmV0dXJuJWpcIiwgaW52YWxpZChmaWVsZCwgXCJpbnRlZ2VyfExvbmcga2V5XCIpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiYm9vbFwiOiBnZW5cbiAgICAgICAgICAgIChcImlmKCF1dGlsLmtleTJSZS50ZXN0KCVzKSlcIiwgcmVmKVxuICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGludmFsaWQoZmllbGQsIFwiYm9vbGVhbiBrZXlcIikpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBnZW47XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby11bmV4cGVjdGVkLW11bHRpbGluZSAqL1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHZlcmlmaWVyIHNwZWNpZmljIHRvIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSB0eXBlLlxuICogQHBhcmFtIHtUeXBlfSBtdHlwZSBNZXNzYWdlIHR5cGVcbiAqIEByZXR1cm5zIHtDb2RlZ2VufSBDb2RlZ2VuIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIHZlcmlmaWVyKG10eXBlKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUgKi9cblxuICAgIHZhciBnZW4gPSB1dGlsLmNvZGVnZW4oW1wibVwiXSwgbXR5cGUubmFtZSArIFwiJHZlcmlmeVwiKVxuICAgIChcImlmKHR5cGVvZiBtIT09XFxcIm9iamVjdFxcXCJ8fG09PT1udWxsKVwiKVxuICAgICAgICAoXCJyZXR1cm4lalwiLCBcIm9iamVjdCBleHBlY3RlZFwiKTtcbiAgICB2YXIgb25lb2ZzID0gbXR5cGUub25lb2ZzQXJyYXksXG4gICAgICAgIHNlZW5GaXJzdEZpZWxkID0ge307XG4gICAgaWYgKG9uZW9mcy5sZW5ndGgpIGdlblxuICAgIChcInZhciBwPXt9XCIpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAvKiBpbml0aWFsaXplcyAqLyBtdHlwZS5maWVsZHNBcnJheS5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgZmllbGQgPSBtdHlwZS5fZmllbGRzQXJyYXlbaV0ucmVzb2x2ZSgpLFxuICAgICAgICAgICAgcmVmICAgPSBcIm1cIiArIHV0aWwuc2FmZVByb3AoZmllbGQubmFtZSk7XG5cbiAgICAgICAgaWYgKGZpZWxkLm9wdGlvbmFsKSBnZW5cbiAgICAgICAgKFwiaWYoJXMhPW51bGwmJm0uaGFzT3duUHJvcGVydHkoJWopKXtcIiwgcmVmLCBmaWVsZC5uYW1lKTsgLy8gIT09IHVuZGVmaW5lZCAmJiAhPT0gbnVsbFxuXG4gICAgICAgIC8vIG1hcCBmaWVsZHNcbiAgICAgICAgaWYgKGZpZWxkLm1hcCkgeyBnZW5cbiAgICAgICAgICAgIChcImlmKCF1dGlsLmlzT2JqZWN0KCVzKSlcIiwgcmVmKVxuICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGludmFsaWQoZmllbGQsIFwib2JqZWN0XCIpKVxuICAgICAgICAgICAgKFwidmFyIGs9T2JqZWN0LmtleXMoJXMpXCIsIHJlZilcbiAgICAgICAgICAgIChcImZvcih2YXIgaT0wO2k8ay5sZW5ndGg7KytpKXtcIik7XG4gICAgICAgICAgICAgICAgZ2VuVmVyaWZ5S2V5KGdlbiwgZmllbGQsIFwia1tpXVwiKTtcbiAgICAgICAgICAgICAgICBnZW5WZXJpZnlWYWx1ZShnZW4sIGZpZWxkLCBpLCByZWYgKyBcIltrW2ldXVwiKVxuICAgICAgICAgICAgKFwifVwiKTtcblxuICAgICAgICAvLyByZXBlYXRlZCBmaWVsZHNcbiAgICAgICAgfSBlbHNlIGlmIChmaWVsZC5yZXBlYXRlZCkgeyBnZW5cbiAgICAgICAgICAgIChcImlmKCFBcnJheS5pc0FycmF5KCVzKSlcIiwgcmVmKVxuICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGludmFsaWQoZmllbGQsIFwiYXJyYXlcIikpXG4gICAgICAgICAgICAoXCJmb3IodmFyIGk9MDtpPCVzLmxlbmd0aDsrK2kpe1wiLCByZWYpO1xuICAgICAgICAgICAgICAgIGdlblZlcmlmeVZhbHVlKGdlbiwgZmllbGQsIGksIHJlZiArIFwiW2ldXCIpXG4gICAgICAgICAgICAoXCJ9XCIpO1xuXG4gICAgICAgIC8vIHJlcXVpcmVkIG9yIHByZXNlbnQgZmllbGRzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZmllbGQucGFydE9mKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9uZW9mUHJvcCA9IHV0aWwuc2FmZVByb3AoZmllbGQucGFydE9mLm5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChzZWVuRmlyc3RGaWVsZFtmaWVsZC5wYXJ0T2YubmFtZV0gPT09IDEpIGdlblxuICAgICAgICAgICAgKFwiaWYocCVzPT09MSlcIiwgb25lb2ZQcm9wKVxuICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGZpZWxkLnBhcnRPZi5uYW1lICsgXCI6IG11bHRpcGxlIHZhbHVlc1wiKTtcbiAgICAgICAgICAgICAgICBzZWVuRmlyc3RGaWVsZFtmaWVsZC5wYXJ0T2YubmFtZV0gPSAxO1xuICAgICAgICAgICAgICAgIGdlblxuICAgICAgICAgICAgKFwicCVzPTFcIiwgb25lb2ZQcm9wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdlblZlcmlmeVZhbHVlKGdlbiwgZmllbGQsIGksIHJlZik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpZWxkLm9wdGlvbmFsKSBnZW5cbiAgICAgICAgKFwifVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGdlblxuICAgIChcInJldHVybiBudWxsXCIpO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUgKi9cbn0iLCAiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIFJ1bnRpbWUgbWVzc2FnZSBmcm9tL3RvIHBsYWluIG9iamVjdCBjb252ZXJ0ZXJzLlxuICogQG5hbWVzcGFjZVxuICovXG52YXIgY29udmVydGVyID0gZXhwb3J0cztcblxudmFyIEVudW0gPSByZXF1aXJlKFwiLi9lbnVtXCIpLFxuICAgIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHBhcnRpYWwgdmFsdWUgZnJvbU9iamVjdCBjb252ZXRlci5cbiAqIEBwYXJhbSB7Q29kZWdlbn0gZ2VuIENvZGVnZW4gaW5zdGFuY2VcbiAqIEBwYXJhbSB7RmllbGR9IGZpZWxkIFJlZmxlY3RlZCBmaWVsZFxuICogQHBhcmFtIHtudW1iZXJ9IGZpZWxkSW5kZXggRmllbGQgaW5kZXhcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFByb3BlcnR5IHJlZmVyZW5jZVxuICogQHJldHVybnMge0NvZGVnZW59IENvZGVnZW4gaW5zdGFuY2VcbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gZ2VuVmFsdWVQYXJ0aWFsX2Zyb21PYmplY3QoZ2VuLCBmaWVsZCwgZmllbGRJbmRleCwgcHJvcCkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lLCBibG9jay1zY29wZWQtdmFyLCBuby1yZWRlY2xhcmUgKi9cbiAgICBpZiAoZmllbGQucmVzb2x2ZWRUeXBlKSB7XG4gICAgICAgIGlmIChmaWVsZC5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBFbnVtKSB7IGdlblxuICAgICAgICAgICAgKFwic3dpdGNoKGQlcyl7XCIsIHByb3ApO1xuICAgICAgICAgICAgZm9yICh2YXIgdmFsdWVzID0gZmllbGQucmVzb2x2ZWRUeXBlLnZhbHVlcywga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlcyksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGlmIChmaWVsZC5yZXBlYXRlZCAmJiB2YWx1ZXNba2V5c1tpXV0gPT09IGZpZWxkLnR5cGVEZWZhdWx0KSBnZW5cbiAgICAgICAgICAgICAgICAoXCJkZWZhdWx0OlwiKTtcbiAgICAgICAgICAgICAgICBnZW5cbiAgICAgICAgICAgICAgICAoXCJjYXNlJWo6XCIsIGtleXNbaV0pXG4gICAgICAgICAgICAgICAgKFwiY2FzZSAlaTpcIiwgdmFsdWVzW2tleXNbaV1dKVxuICAgICAgICAgICAgICAgICAgICAoXCJtJXM9JWpcIiwgcHJvcCwgdmFsdWVzW2tleXNbaV1dKVxuICAgICAgICAgICAgICAgICAgICAoXCJicmVha1wiKTtcbiAgICAgICAgICAgIH0gZ2VuXG4gICAgICAgICAgICAoXCJ9XCIpO1xuICAgICAgICB9IGVsc2UgZ2VuXG4gICAgICAgICAgICAoXCJpZih0eXBlb2YgZCVzIT09XFxcIm9iamVjdFxcXCIpXCIsIHByb3ApXG4gICAgICAgICAgICAgICAgKFwidGhyb3cgVHlwZUVycm9yKCVqKVwiLCBmaWVsZC5mdWxsTmFtZSArIFwiOiBvYmplY3QgZXhwZWN0ZWRcIilcbiAgICAgICAgICAgIChcIm0lcz10eXBlc1slaV0uZnJvbU9iamVjdChkJXMpXCIsIHByb3AsIGZpZWxkSW5kZXgsIHByb3ApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpc1Vuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgIHN3aXRjaCAoZmllbGQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImRvdWJsZVwiOlxuICAgICAgICAgICAgY2FzZSBcImZsb2F0XCI6IGdlblxuICAgICAgICAgICAgICAgIChcIm0lcz1OdW1iZXIoZCVzKVwiLCBwcm9wLCBwcm9wKTsgLy8gYWxzbyBjYXRjaGVzIFwiTmFOXCIsIFwiSW5maW5pdHlcIlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInVpbnQzMlwiOlxuICAgICAgICAgICAgY2FzZSBcImZpeGVkMzJcIjogZ2VuXG4gICAgICAgICAgICAgICAgKFwibSVzPWQlcz4+PjBcIiwgcHJvcCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiaW50MzJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzaW50MzJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzZml4ZWQzMlwiOiBnZW5cbiAgICAgICAgICAgICAgICAoXCJtJXM9ZCVzfDBcIiwgcHJvcCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidWludDY0XCI6XG4gICAgICAgICAgICAgICAgaXNVbnNpZ25lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1mYWxsdGhyb3VnaFxuICAgICAgICAgICAgY2FzZSBcImludDY0XCI6XG4gICAgICAgICAgICBjYXNlIFwic2ludDY0XCI6XG4gICAgICAgICAgICBjYXNlIFwiZml4ZWQ2NFwiOlxuICAgICAgICAgICAgY2FzZSBcInNmaXhlZDY0XCI6IGdlblxuICAgICAgICAgICAgICAgIChcImlmKHV0aWwuTG9uZylcIilcbiAgICAgICAgICAgICAgICAgICAgKFwiKG0lcz11dGlsLkxvbmcuZnJvbVZhbHVlKGQlcykpLnVuc2lnbmVkPSVqXCIsIHByb3AsIHByb3AsIGlzVW5zaWduZWQpXG4gICAgICAgICAgICAgICAgKFwiZWxzZSBpZih0eXBlb2YgZCVzPT09XFxcInN0cmluZ1xcXCIpXCIsIHByb3ApXG4gICAgICAgICAgICAgICAgICAgIChcIm0lcz1wYXJzZUludChkJXMsMTApXCIsIHByb3AsIHByb3ApXG4gICAgICAgICAgICAgICAgKFwiZWxzZSBpZih0eXBlb2YgZCVzPT09XFxcIm51bWJlclxcXCIpXCIsIHByb3ApXG4gICAgICAgICAgICAgICAgICAgIChcIm0lcz1kJXNcIiwgcHJvcCwgcHJvcClcbiAgICAgICAgICAgICAgICAoXCJlbHNlIGlmKHR5cGVvZiBkJXM9PT1cXFwib2JqZWN0XFxcIilcIiwgcHJvcClcbiAgICAgICAgICAgICAgICAgICAgKFwibSVzPW5ldyB1dGlsLkxvbmdCaXRzKGQlcy5sb3c+Pj4wLGQlcy5oaWdoPj4+MCkudG9OdW1iZXIoJXMpXCIsIHByb3AsIHByb3AsIHByb3AsIGlzVW5zaWduZWQgPyBcInRydWVcIiA6IFwiXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImJ5dGVzXCI6IGdlblxuICAgICAgICAgICAgICAgIChcImlmKHR5cGVvZiBkJXM9PT1cXFwic3RyaW5nXFxcIilcIiwgcHJvcClcbiAgICAgICAgICAgICAgICAgICAgKFwidXRpbC5iYXNlNjQuZGVjb2RlKGQlcyxtJXM9dXRpbC5uZXdCdWZmZXIodXRpbC5iYXNlNjQubGVuZ3RoKGQlcykpLDApXCIsIHByb3AsIHByb3AsIHByb3ApXG4gICAgICAgICAgICAgICAgKFwiZWxzZSBpZihkJXMubGVuZ3RoKVwiLCBwcm9wKVxuICAgICAgICAgICAgICAgICAgICAoXCJtJXM9ZCVzXCIsIHByb3AsIHByb3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOiBnZW5cbiAgICAgICAgICAgICAgICAoXCJtJXM9U3RyaW5nKGQlcylcIiwgcHJvcCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYm9vbFwiOiBnZW5cbiAgICAgICAgICAgICAgICAoXCJtJXM9Qm9vbGVhbihkJXMpXCIsIHByb3AsIHByb3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLyogZGVmYXVsdDogZ2VuXG4gICAgICAgICAgICAgICAgKFwibSVzPWQlc1wiLCBwcm9wLCBwcm9wKTtcbiAgICAgICAgICAgICAgICBicmVhazsgKi9cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZ2VuO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUsIGJsb2NrLXNjb3BlZC12YXIsIG5vLXJlZGVjbGFyZSAqL1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHBsYWluIG9iamVjdCB0byBydW50aW1lIG1lc3NhZ2UgY29udmVydGVyIHNwZWNpZmljIHRvIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSB0eXBlLlxuICogQHBhcmFtIHtUeXBlfSBtdHlwZSBNZXNzYWdlIHR5cGVcbiAqIEByZXR1cm5zIHtDb2RlZ2VufSBDb2RlZ2VuIGluc3RhbmNlXG4gKi9cbmNvbnZlcnRlci5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChtdHlwZSkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lLCBibG9jay1zY29wZWQtdmFyLCBuby1yZWRlY2xhcmUgKi9cbiAgICB2YXIgZmllbGRzID0gbXR5cGUuZmllbGRzQXJyYXk7XG4gICAgdmFyIGdlbiA9IHV0aWwuY29kZWdlbihbXCJkXCJdLCBtdHlwZS5uYW1lICsgXCIkZnJvbU9iamVjdFwiKVxuICAgIChcImlmKGQgaW5zdGFuY2VvZiB0aGlzLmN0b3IpXCIpXG4gICAgICAgIChcInJldHVybiBkXCIpO1xuICAgIGlmICghZmllbGRzLmxlbmd0aCkgcmV0dXJuIGdlblxuICAgIChcInJldHVybiBuZXcgdGhpcy5jdG9yXCIpO1xuICAgIGdlblxuICAgIChcInZhciBtPW5ldyB0aGlzLmN0b3JcIik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGZpZWxkICA9IGZpZWxkc1tpXS5yZXNvbHZlKCksXG4gICAgICAgICAgICBwcm9wICAgPSB1dGlsLnNhZmVQcm9wKGZpZWxkLm5hbWUpO1xuXG4gICAgICAgIC8vIE1hcCBmaWVsZHNcbiAgICAgICAgaWYgKGZpZWxkLm1hcCkgeyBnZW5cbiAgICAoXCJpZihkJXMpe1wiLCBwcm9wKVxuICAgICAgICAoXCJpZih0eXBlb2YgZCVzIT09XFxcIm9iamVjdFxcXCIpXCIsIHByb3ApXG4gICAgICAgICAgICAoXCJ0aHJvdyBUeXBlRXJyb3IoJWopXCIsIGZpZWxkLmZ1bGxOYW1lICsgXCI6IG9iamVjdCBleHBlY3RlZFwiKVxuICAgICAgICAoXCJtJXM9e31cIiwgcHJvcClcbiAgICAgICAgKFwiZm9yKHZhciBrcz1PYmplY3Qua2V5cyhkJXMpLGk9MDtpPGtzLmxlbmd0aDsrK2kpe1wiLCBwcm9wKTtcbiAgICAgICAgICAgIGdlblZhbHVlUGFydGlhbF9mcm9tT2JqZWN0KGdlbiwgZmllbGQsIC8qIG5vdCBzb3J0ZWQgKi8gaSwgcHJvcCArIFwiW2tzW2ldXVwiKVxuICAgICAgICAoXCJ9XCIpXG4gICAgKFwifVwiKTtcblxuICAgICAgICAvLyBSZXBlYXRlZCBmaWVsZHNcbiAgICAgICAgfSBlbHNlIGlmIChmaWVsZC5yZXBlYXRlZCkgeyBnZW5cbiAgICAoXCJpZihkJXMpe1wiLCBwcm9wKVxuICAgICAgICAoXCJpZighQXJyYXkuaXNBcnJheShkJXMpKVwiLCBwcm9wKVxuICAgICAgICAgICAgKFwidGhyb3cgVHlwZUVycm9yKCVqKVwiLCBmaWVsZC5mdWxsTmFtZSArIFwiOiBhcnJheSBleHBlY3RlZFwiKVxuICAgICAgICAoXCJtJXM9W11cIiwgcHJvcClcbiAgICAgICAgKFwiZm9yKHZhciBpPTA7aTxkJXMubGVuZ3RoOysraSl7XCIsIHByb3ApO1xuICAgICAgICAgICAgZ2VuVmFsdWVQYXJ0aWFsX2Zyb21PYmplY3QoZ2VuLCBmaWVsZCwgLyogbm90IHNvcnRlZCAqLyBpLCBwcm9wICsgXCJbaV1cIilcbiAgICAgICAgKFwifVwiKVxuICAgIChcIn1cIik7XG5cbiAgICAgICAgLy8gTm9uLXJlcGVhdGVkIGZpZWxkc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCEoZmllbGQucmVzb2x2ZWRUeXBlIGluc3RhbmNlb2YgRW51bSkpIGdlbiAvLyBubyBuZWVkIHRvIHRlc3QgZm9yIG51bGwvdW5kZWZpbmVkIGlmIGFuIGVudW0gKHVzZXMgc3dpdGNoKVxuICAgIChcImlmKGQlcyE9bnVsbCl7XCIsIHByb3ApOyAvLyAhPT0gdW5kZWZpbmVkICYmICE9PSBudWxsXG4gICAgICAgIGdlblZhbHVlUGFydGlhbF9mcm9tT2JqZWN0KGdlbiwgZmllbGQsIC8qIG5vdCBzb3J0ZWQgKi8gaSwgcHJvcCk7XG4gICAgICAgICAgICBpZiAoIShmaWVsZC5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBFbnVtKSkgZ2VuXG4gICAgKFwifVwiKTtcbiAgICAgICAgfVxuICAgIH0gcmV0dXJuIGdlblxuICAgIChcInJldHVybiBtXCIpO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUsIGJsb2NrLXNjb3BlZC12YXIsIG5vLXJlZGVjbGFyZSAqL1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBwYXJ0aWFsIHZhbHVlIHRvT2JqZWN0IGNvbnZlcnRlci5cbiAqIEBwYXJhbSB7Q29kZWdlbn0gZ2VuIENvZGVnZW4gaW5zdGFuY2VcbiAqIEBwYXJhbSB7RmllbGR9IGZpZWxkIFJlZmxlY3RlZCBmaWVsZFxuICogQHBhcmFtIHtudW1iZXJ9IGZpZWxkSW5kZXggRmllbGQgaW5kZXhcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFByb3BlcnR5IHJlZmVyZW5jZVxuICogQHJldHVybnMge0NvZGVnZW59IENvZGVnZW4gaW5zdGFuY2VcbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gZ2VuVmFsdWVQYXJ0aWFsX3RvT2JqZWN0KGdlbiwgZmllbGQsIGZpZWxkSW5kZXgsIHByb3ApIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmV4cGVjdGVkLW11bHRpbGluZSwgYmxvY2stc2NvcGVkLXZhciwgbm8tcmVkZWNsYXJlICovXG4gICAgaWYgKGZpZWxkLnJlc29sdmVkVHlwZSkge1xuICAgICAgICBpZiAoZmllbGQucmVzb2x2ZWRUeXBlIGluc3RhbmNlb2YgRW51bSkgZ2VuXG4gICAgICAgICAgICAoXCJkJXM9by5lbnVtcz09PVN0cmluZz90eXBlc1slaV0udmFsdWVzW20lc106bSVzXCIsIHByb3AsIGZpZWxkSW5kZXgsIHByb3AsIHByb3ApO1xuICAgICAgICBlbHNlIGdlblxuICAgICAgICAgICAgKFwiZCVzPXR5cGVzWyVpXS50b09iamVjdChtJXMsbylcIiwgcHJvcCwgZmllbGRJbmRleCwgcHJvcCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGlzVW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgc3dpdGNoIChmaWVsZC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiZG91YmxlXCI6XG4gICAgICAgICAgICBjYXNlIFwiZmxvYXRcIjogZ2VuXG4gICAgICAgICAgICAoXCJkJXM9by5qc29uJiYhaXNGaW5pdGUobSVzKT9TdHJpbmcobSVzKTptJXNcIiwgcHJvcCwgcHJvcCwgcHJvcCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidWludDY0XCI6XG4gICAgICAgICAgICAgICAgaXNVbnNpZ25lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1mYWxsdGhyb3VnaFxuICAgICAgICAgICAgY2FzZSBcImludDY0XCI6XG4gICAgICAgICAgICBjYXNlIFwic2ludDY0XCI6XG4gICAgICAgICAgICBjYXNlIFwiZml4ZWQ2NFwiOlxuICAgICAgICAgICAgY2FzZSBcInNmaXhlZDY0XCI6IGdlblxuICAgICAgICAgICAgKFwiaWYodHlwZW9mIG0lcz09PVxcXCJudW1iZXJcXFwiKVwiLCBwcm9wKVxuICAgICAgICAgICAgICAgIChcImQlcz1vLmxvbmdzPT09U3RyaW5nP1N0cmluZyhtJXMpOm0lc1wiLCBwcm9wLCBwcm9wLCBwcm9wKVxuICAgICAgICAgICAgKFwiZWxzZVwiKSAvLyBMb25nLWxpa2VcbiAgICAgICAgICAgICAgICAoXCJkJXM9by5sb25ncz09PVN0cmluZz91dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobSVzKTpvLmxvbmdzPT09TnVtYmVyP25ldyB1dGlsLkxvbmdCaXRzKG0lcy5sb3c+Pj4wLG0lcy5oaWdoPj4+MCkudG9OdW1iZXIoJXMpOm0lc1wiLCBwcm9wLCBwcm9wLCBwcm9wLCBwcm9wLCBpc1Vuc2lnbmVkID8gXCJ0cnVlXCI6IFwiXCIsIHByb3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImJ5dGVzXCI6IGdlblxuICAgICAgICAgICAgKFwiZCVzPW8uYnl0ZXM9PT1TdHJpbmc/dXRpbC5iYXNlNjQuZW5jb2RlKG0lcywwLG0lcy5sZW5ndGgpOm8uYnl0ZXM9PT1BcnJheT9BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChtJXMpOm0lc1wiLCBwcm9wLCBwcm9wLCBwcm9wLCBwcm9wLCBwcm9wKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6IGdlblxuICAgICAgICAgICAgKFwiZCVzPW0lc1wiLCBwcm9wLCBwcm9wKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZ2VuO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUsIGJsb2NrLXNjb3BlZC12YXIsIG5vLXJlZGVjbGFyZSAqL1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHJ1bnRpbWUgbWVzc2FnZSB0byBwbGFpbiBvYmplY3QgY29udmVydGVyIHNwZWNpZmljIHRvIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSB0eXBlLlxuICogQHBhcmFtIHtUeXBlfSBtdHlwZSBNZXNzYWdlIHR5cGVcbiAqIEByZXR1cm5zIHtDb2RlZ2VufSBDb2RlZ2VuIGluc3RhbmNlXG4gKi9cbmNvbnZlcnRlci50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG10eXBlKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUsIGJsb2NrLXNjb3BlZC12YXIsIG5vLXJlZGVjbGFyZSAqL1xuICAgIHZhciBmaWVsZHMgPSBtdHlwZS5maWVsZHNBcnJheS5zbGljZSgpLnNvcnQodXRpbC5jb21wYXJlRmllbGRzQnlJZCk7XG4gICAgaWYgKCFmaWVsZHMubGVuZ3RoKVxuICAgICAgICByZXR1cm4gdXRpbC5jb2RlZ2VuKCkoXCJyZXR1cm4ge31cIik7XG4gICAgdmFyIGdlbiA9IHV0aWwuY29kZWdlbihbXCJtXCIsIFwib1wiXSwgbXR5cGUubmFtZSArIFwiJHRvT2JqZWN0XCIpXG4gICAgKFwiaWYoIW8pXCIpXG4gICAgICAgIChcIm89e31cIilcbiAgICAoXCJ2YXIgZD17fVwiKTtcblxuICAgIHZhciByZXBlYXRlZEZpZWxkcyA9IFtdLFxuICAgICAgICBtYXBGaWVsZHMgPSBbXSxcbiAgICAgICAgbm9ybWFsRmllbGRzID0gW10sXG4gICAgICAgIGkgPSAwO1xuICAgIGZvciAoOyBpIDwgZmllbGRzLmxlbmd0aDsgKytpKVxuICAgICAgICBpZiAoIWZpZWxkc1tpXS5wYXJ0T2YpXG4gICAgICAgICAgICAoIGZpZWxkc1tpXS5yZXNvbHZlKCkucmVwZWF0ZWQgPyByZXBlYXRlZEZpZWxkc1xuICAgICAgICAgICAgOiBmaWVsZHNbaV0ubWFwID8gbWFwRmllbGRzXG4gICAgICAgICAgICA6IG5vcm1hbEZpZWxkcykucHVzaChmaWVsZHNbaV0pO1xuXG4gICAgaWYgKHJlcGVhdGVkRmllbGRzLmxlbmd0aCkgeyBnZW5cbiAgICAoXCJpZihvLmFycmF5c3x8by5kZWZhdWx0cyl7XCIpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcmVwZWF0ZWRGaWVsZHMubGVuZ3RoOyArK2kpIGdlblxuICAgICAgICAoXCJkJXM9W11cIiwgdXRpbC5zYWZlUHJvcChyZXBlYXRlZEZpZWxkc1tpXS5uYW1lKSk7XG4gICAgICAgIGdlblxuICAgIChcIn1cIik7XG4gICAgfVxuXG4gICAgaWYgKG1hcEZpZWxkcy5sZW5ndGgpIHsgZ2VuXG4gICAgKFwiaWYoby5vYmplY3RzfHxvLmRlZmF1bHRzKXtcIik7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBtYXBGaWVsZHMubGVuZ3RoOyArK2kpIGdlblxuICAgICAgICAoXCJkJXM9e31cIiwgdXRpbC5zYWZlUHJvcChtYXBGaWVsZHNbaV0ubmFtZSkpO1xuICAgICAgICBnZW5cbiAgICAoXCJ9XCIpO1xuICAgIH1cblxuICAgIGlmIChub3JtYWxGaWVsZHMubGVuZ3RoKSB7IGdlblxuICAgIChcImlmKG8uZGVmYXVsdHMpe1wiKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG5vcm1hbEZpZWxkcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGZpZWxkID0gbm9ybWFsRmllbGRzW2ldLFxuICAgICAgICAgICAgICAgIHByb3AgID0gdXRpbC5zYWZlUHJvcChmaWVsZC5uYW1lKTtcbiAgICAgICAgICAgIGlmIChmaWVsZC5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBFbnVtKSBnZW5cbiAgICAgICAgKFwiZCVzPW8uZW51bXM9PT1TdHJpbmc/JWo6JWpcIiwgcHJvcCwgZmllbGQucmVzb2x2ZWRUeXBlLnZhbHVlc0J5SWRbZmllbGQudHlwZURlZmF1bHRdLCBmaWVsZC50eXBlRGVmYXVsdCk7XG4gICAgICAgICAgICBlbHNlIGlmIChmaWVsZC5sb25nKSBnZW5cbiAgICAgICAgKFwiaWYodXRpbC5Mb25nKXtcIilcbiAgICAgICAgICAgIChcInZhciBuPW5ldyB1dGlsLkxvbmcoJWksJWksJWopXCIsIGZpZWxkLnR5cGVEZWZhdWx0LmxvdywgZmllbGQudHlwZURlZmF1bHQuaGlnaCwgZmllbGQudHlwZURlZmF1bHQudW5zaWduZWQpXG4gICAgICAgICAgICAoXCJkJXM9by5sb25ncz09PVN0cmluZz9uLnRvU3RyaW5nKCk6by5sb25ncz09PU51bWJlcj9uLnRvTnVtYmVyKCk6blwiLCBwcm9wKVxuICAgICAgICAoXCJ9ZWxzZVwiKVxuICAgICAgICAgICAgKFwiZCVzPW8ubG9uZ3M9PT1TdHJpbmc/JWo6JWlcIiwgcHJvcCwgZmllbGQudHlwZURlZmF1bHQudG9TdHJpbmcoKSwgZmllbGQudHlwZURlZmF1bHQudG9OdW1iZXIoKSk7XG4gICAgICAgICAgICBlbHNlIGlmIChmaWVsZC5ieXRlcykge1xuICAgICAgICAgICAgICAgIHZhciBhcnJheURlZmF1bHQgPSBcIltcIiArIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZpZWxkLnR5cGVEZWZhdWx0KS5qb2luKFwiLFwiKSArIFwiXVwiO1xuICAgICAgICAgICAgICAgIGdlblxuICAgICAgICAoXCJpZihvLmJ5dGVzPT09U3RyaW5nKWQlcz0lalwiLCBwcm9wLCBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgZmllbGQudHlwZURlZmF1bHQpKVxuICAgICAgICAoXCJlbHNle1wiKVxuICAgICAgICAgICAgKFwiZCVzPSVzXCIsIHByb3AsIGFycmF5RGVmYXVsdClcbiAgICAgICAgICAgIChcImlmKG8uYnl0ZXMhPT1BcnJheSlkJXM9dXRpbC5uZXdCdWZmZXIoZCVzKVwiLCBwcm9wLCBwcm9wKVxuICAgICAgICAoXCJ9XCIpO1xuICAgICAgICAgICAgfSBlbHNlIGdlblxuICAgICAgICAoXCJkJXM9JWpcIiwgcHJvcCwgZmllbGQudHlwZURlZmF1bHQpOyAvLyBhbHNvIG1lc3NhZ2VzICg9bnVsbClcbiAgICAgICAgfSBnZW5cbiAgICAoXCJ9XCIpO1xuICAgIH1cbiAgICB2YXIgaGFzS3MyID0gZmFsc2U7XG4gICAgZm9yIChpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgZmllbGQgPSBmaWVsZHNbaV0sXG4gICAgICAgICAgICBpbmRleCA9IG10eXBlLl9maWVsZHNBcnJheS5pbmRleE9mKGZpZWxkKSxcbiAgICAgICAgICAgIHByb3AgID0gdXRpbC5zYWZlUHJvcChmaWVsZC5uYW1lKTtcbiAgICAgICAgaWYgKGZpZWxkLm1hcCkge1xuICAgICAgICAgICAgaWYgKCFoYXNLczIpIHsgaGFzS3MyID0gdHJ1ZTsgZ2VuXG4gICAgKFwidmFyIGtzMlwiKTtcbiAgICAgICAgICAgIH0gZ2VuXG4gICAgKFwiaWYobSVzJiYoa3MyPU9iamVjdC5rZXlzKG0lcykpLmxlbmd0aCl7XCIsIHByb3AsIHByb3ApXG4gICAgICAgIChcImQlcz17fVwiLCBwcm9wKVxuICAgICAgICAoXCJmb3IodmFyIGo9MDtqPGtzMi5sZW5ndGg7KytqKXtcIik7XG4gICAgICAgICAgICBnZW5WYWx1ZVBhcnRpYWxfdG9PYmplY3QoZ2VuLCBmaWVsZCwgLyogc29ydGVkICovIGluZGV4LCBwcm9wICsgXCJba3MyW2pdXVwiKVxuICAgICAgICAoXCJ9XCIpO1xuICAgICAgICB9IGVsc2UgaWYgKGZpZWxkLnJlcGVhdGVkKSB7IGdlblxuICAgIChcImlmKG0lcyYmbSVzLmxlbmd0aCl7XCIsIHByb3AsIHByb3ApXG4gICAgICAgIChcImQlcz1bXVwiLCBwcm9wKVxuICAgICAgICAoXCJmb3IodmFyIGo9MDtqPG0lcy5sZW5ndGg7KytqKXtcIiwgcHJvcCk7XG4gICAgICAgICAgICBnZW5WYWx1ZVBhcnRpYWxfdG9PYmplY3QoZ2VuLCBmaWVsZCwgLyogc29ydGVkICovIGluZGV4LCBwcm9wICsgXCJbal1cIilcbiAgICAgICAgKFwifVwiKTtcbiAgICAgICAgfSBlbHNlIHsgZ2VuXG4gICAgKFwiaWYobSVzIT1udWxsJiZtLmhhc093blByb3BlcnR5KCVqKSl7XCIsIHByb3AsIGZpZWxkLm5hbWUpOyAvLyAhPT0gdW5kZWZpbmVkICYmICE9PSBudWxsXG4gICAgICAgIGdlblZhbHVlUGFydGlhbF90b09iamVjdChnZW4sIGZpZWxkLCAvKiBzb3J0ZWQgKi8gaW5kZXgsIHByb3ApO1xuICAgICAgICBpZiAoZmllbGQucGFydE9mKSBnZW5cbiAgICAgICAgKFwiaWYoby5vbmVvZnMpXCIpXG4gICAgICAgICAgICAoXCJkJXM9JWpcIiwgdXRpbC5zYWZlUHJvcChmaWVsZC5wYXJ0T2YubmFtZSksIGZpZWxkLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGdlblxuICAgIChcIn1cIik7XG4gICAgfVxuICAgIHJldHVybiBnZW5cbiAgICAoXCJyZXR1cm4gZFwiKTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lLCBibG9jay1zY29wZWQtdmFyLCBuby1yZWRlY2xhcmUgKi9cbn07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogV3JhcHBlcnMgZm9yIGNvbW1vbiB0eXBlcy5cbiAqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxJV3JhcHBlcj59XG4gKiBAY29uc3RcbiAqL1xudmFyIHdyYXBwZXJzID0gZXhwb3J0cztcblxudmFyIE1lc3NhZ2UgPSByZXF1aXJlKFwiLi9tZXNzYWdlXCIpO1xuXG4vKipcbiAqIEZyb20gb2JqZWN0IGNvbnZlcnRlciBwYXJ0IG9mIGFuIHtAbGluayBJV3JhcHBlcn0uXG4gKiBAdHlwZWRlZiBXcmFwcGVyRnJvbU9iamVjdENvbnZlcnRlclxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gb2JqZWN0IFBsYWluIG9iamVjdFxuICogQHJldHVybnMge01lc3NhZ2U8e30+fSBNZXNzYWdlIGluc3RhbmNlXG4gKiBAdGhpcyBUeXBlXG4gKi9cblxuLyoqXG4gKiBUbyBvYmplY3QgY29udmVydGVyIHBhcnQgb2YgYW4ge0BsaW5rIElXcmFwcGVyfS5cbiAqIEB0eXBlZGVmIFdyYXBwZXJUb09iamVjdENvbnZlcnRlclxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtNZXNzYWdlPHt9Pn0gbWVzc2FnZSBNZXNzYWdlIGluc3RhbmNlXG4gKiBAcGFyYW0ge0lDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAqIEB0aGlzIFR5cGVcbiAqL1xuXG4vKipcbiAqIENvbW1vbiB0eXBlIHdyYXBwZXIgcGFydCBvZiB7QGxpbmsgd3JhcHBlcnN9LlxuICogQGludGVyZmFjZSBJV3JhcHBlclxuICogQHByb3BlcnR5IHtXcmFwcGVyRnJvbU9iamVjdENvbnZlcnRlcn0gW2Zyb21PYmplY3RdIEZyb20gb2JqZWN0IGNvbnZlcnRlclxuICogQHByb3BlcnR5IHtXcmFwcGVyVG9PYmplY3RDb252ZXJ0ZXJ9IFt0b09iamVjdF0gVG8gb2JqZWN0IGNvbnZlcnRlclxuICovXG5cbi8vIEN1c3RvbSB3cmFwcGVyIGZvciBBbnlcbndyYXBwZXJzW1wiLmdvb2dsZS5wcm90b2J1Zi5BbnlcIl0gPSB7XG5cbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbihvYmplY3QpIHtcblxuICAgICAgICAvLyB1bndyYXAgdmFsdWUgdHlwZSBpZiBtYXBwZWRcbiAgICAgICAgaWYgKG9iamVjdCAmJiBvYmplY3RbXCJAdHlwZVwiXSkge1xuICAgICAgICAgICAgIC8vIE9ubHkgdXNlIGZ1bGx5IHF1YWxpZmllZCB0eXBlIG5hbWUgYWZ0ZXIgdGhlIGxhc3QgJy8nXG4gICAgICAgICAgICB2YXIgbmFtZSA9IG9iamVjdFtcIkB0eXBlXCJdLnN1YnN0cmluZyhvYmplY3RbXCJAdHlwZVwiXS5sYXN0SW5kZXhPZihcIi9cIikgKyAxKTtcbiAgICAgICAgICAgIHZhciB0eXBlID0gdGhpcy5sb29rdXAobmFtZSk7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAvLyB0eXBlX3VybCBkb2VzIG5vdCBhY2NlcHQgbGVhZGluZyBcIi5cIlxuICAgICAgICAgICAgICAgIHZhciB0eXBlX3VybCA9IG9iamVjdFtcIkB0eXBlXCJdLmNoYXJBdCgwKSA9PT0gXCIuXCIgP1xuICAgICAgICAgICAgICAgICAgICBvYmplY3RbXCJAdHlwZVwiXS5zdWJzdHIoMSkgOiBvYmplY3RbXCJAdHlwZVwiXTtcbiAgICAgICAgICAgICAgICAvLyB0eXBlX3VybCBwcmVmaXggaXMgb3B0aW9uYWwsIGJ1dCBwYXRoIHNlcGVyYXRvciBpcyByZXF1aXJlZFxuICAgICAgICAgICAgICAgIGlmICh0eXBlX3VybC5pbmRleE9mKFwiL1wiKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZV91cmwgPSBcIi9cIiArIHR5cGVfdXJsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGUoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlX3VybDogdHlwZV91cmwsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0eXBlLmVuY29kZSh0eXBlLmZyb21PYmplY3Qob2JqZWN0KSkuZmluaXNoKClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmZyb21PYmplY3Qob2JqZWN0KTtcbiAgICB9LFxuXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKG1lc3NhZ2UsIG9wdGlvbnMpIHtcblxuICAgICAgICAvLyBEZWZhdWx0IHByZWZpeFxuICAgICAgICB2YXIgZ29vZ2xlQXBpID0gXCJ0eXBlLmdvb2dsZWFwaXMuY29tL1wiO1xuICAgICAgICB2YXIgcHJlZml4ID0gXCJcIjtcbiAgICAgICAgdmFyIG5hbWUgPSBcIlwiO1xuXG4gICAgICAgIC8vIGRlY29kZSB2YWx1ZSBpZiByZXF1ZXN0ZWQgYW5kIHVubWFwcGVkXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuanNvbiAmJiBtZXNzYWdlLnR5cGVfdXJsICYmIG1lc3NhZ2UudmFsdWUpIHtcbiAgICAgICAgICAgIC8vIE9ubHkgdXNlIGZ1bGx5IHF1YWxpZmllZCB0eXBlIG5hbWUgYWZ0ZXIgdGhlIGxhc3QgJy8nXG4gICAgICAgICAgICBuYW1lID0gbWVzc2FnZS50eXBlX3VybC5zdWJzdHJpbmcobWVzc2FnZS50eXBlX3VybC5sYXN0SW5kZXhPZihcIi9cIikgKyAxKTtcbiAgICAgICAgICAgIC8vIFNlcGFyYXRlIHRoZSBwcmVmaXggdXNlZFxuICAgICAgICAgICAgcHJlZml4ID0gbWVzc2FnZS50eXBlX3VybC5zdWJzdHJpbmcoMCwgbWVzc2FnZS50eXBlX3VybC5sYXN0SW5kZXhPZihcIi9cIikgKyAxKTtcbiAgICAgICAgICAgIHZhciB0eXBlID0gdGhpcy5sb29rdXAobmFtZSk7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgICAgaWYgKHR5cGUpXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IHR5cGUuZGVjb2RlKG1lc3NhZ2UudmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gd3JhcCB2YWx1ZSBpZiB1bm1hcHBlZFxuICAgICAgICBpZiAoIShtZXNzYWdlIGluc3RhbmNlb2YgdGhpcy5jdG9yKSAmJiBtZXNzYWdlIGluc3RhbmNlb2YgTWVzc2FnZSkge1xuICAgICAgICAgICAgdmFyIG9iamVjdCA9IG1lc3NhZ2UuJHR5cGUudG9PYmplY3QobWVzc2FnZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB2YXIgbWVzc2FnZU5hbWUgPSBtZXNzYWdlLiR0eXBlLmZ1bGxOYW1lWzBdID09PSBcIi5cIiA/XG4gICAgICAgICAgICAgICAgbWVzc2FnZS4kdHlwZS5mdWxsTmFtZS5zdWJzdHIoMSkgOiBtZXNzYWdlLiR0eXBlLmZ1bGxOYW1lO1xuICAgICAgICAgICAgLy8gRGVmYXVsdCB0byB0eXBlLmdvb2dsZWFwaXMuY29tIHByZWZpeCBpZiBubyBwcmVmaXggaXMgdXNlZFxuICAgICAgICAgICAgaWYgKHByZWZpeCA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgIHByZWZpeCA9IGdvb2dsZUFwaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5hbWUgPSBwcmVmaXggKyBtZXNzYWdlTmFtZTtcbiAgICAgICAgICAgIG9iamVjdFtcIkB0eXBlXCJdID0gbmFtZTtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy50b09iamVjdChtZXNzYWdlLCBvcHRpb25zKTtcbiAgICB9XG59O1xuIiwgIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBUeXBlO1xuXG4vLyBleHRlbmRzIE5hbWVzcGFjZVxudmFyIE5hbWVzcGFjZSA9IHJlcXVpcmUoXCIuL25hbWVzcGFjZVwiKTtcbigoVHlwZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE5hbWVzcGFjZS5wcm90b3R5cGUpKS5jb25zdHJ1Y3RvciA9IFR5cGUpLmNsYXNzTmFtZSA9IFwiVHlwZVwiO1xuXG52YXIgRW51bSAgICAgID0gcmVxdWlyZShcIi4vZW51bVwiKSxcbiAgICBPbmVPZiAgICAgPSByZXF1aXJlKFwiLi9vbmVvZlwiKSxcbiAgICBGaWVsZCAgICAgPSByZXF1aXJlKFwiLi9maWVsZFwiKSxcbiAgICBNYXBGaWVsZCAgPSByZXF1aXJlKFwiLi9tYXBmaWVsZFwiKSxcbiAgICBTZXJ2aWNlICAgPSByZXF1aXJlKFwiLi9zZXJ2aWNlXCIpLFxuICAgIE1lc3NhZ2UgICA9IHJlcXVpcmUoXCIuL21lc3NhZ2VcIiksXG4gICAgUmVhZGVyICAgID0gcmVxdWlyZShcIi4vcmVhZGVyXCIpLFxuICAgIFdyaXRlciAgICA9IHJlcXVpcmUoXCIuL3dyaXRlclwiKSxcbiAgICB1dGlsICAgICAgPSByZXF1aXJlKFwiLi91dGlsXCIpLFxuICAgIGVuY29kZXIgICA9IHJlcXVpcmUoXCIuL2VuY29kZXJcIiksXG4gICAgZGVjb2RlciAgID0gcmVxdWlyZShcIi4vZGVjb2RlclwiKSxcbiAgICB2ZXJpZmllciAgPSByZXF1aXJlKFwiLi92ZXJpZmllclwiKSxcbiAgICBjb252ZXJ0ZXIgPSByZXF1aXJlKFwiLi9jb252ZXJ0ZXJcIiksXG4gICAgd3JhcHBlcnMgID0gcmVxdWlyZShcIi4vd3JhcHBlcnNcIik7XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyByZWZsZWN0ZWQgbWVzc2FnZSB0eXBlIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBSZWZsZWN0ZWQgbWVzc2FnZSB0eXBlLlxuICogQGV4dGVuZHMgTmFtZXNwYWNlQmFzZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBNZXNzYWdlIG5hbWVcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBEZWNsYXJlZCBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIFR5cGUobmFtZSwgb3B0aW9ucykge1xuICAgIE5hbWVzcGFjZS5jYWxsKHRoaXMsIG5hbWUsIG9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICogTWVzc2FnZSBmaWVsZHMuXG4gICAgICogQHR5cGUge09iamVjdC48c3RyaW5nLEZpZWxkPn1cbiAgICAgKi9cbiAgICB0aGlzLmZpZWxkcyA9IHt9OyAgLy8gdG9KU09OLCBtYXJrZXJcblxuICAgIC8qKlxuICAgICAqIE9uZW9mcyBkZWNsYXJlZCB3aXRoaW4gdGhpcyBuYW1lc3BhY2UsIGlmIGFueS5cbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsT25lT2Y+fVxuICAgICAqL1xuICAgIHRoaXMub25lb2ZzID0gdW5kZWZpbmVkOyAvLyB0b0pTT05cblxuICAgIC8qKlxuICAgICAqIEV4dGVuc2lvbiByYW5nZXMsIGlmIGFueS5cbiAgICAgKiBAdHlwZSB7bnVtYmVyW11bXX1cbiAgICAgKi9cbiAgICB0aGlzLmV4dGVuc2lvbnMgPSB1bmRlZmluZWQ7IC8vIHRvSlNPTlxuXG4gICAgLyoqXG4gICAgICogUmVzZXJ2ZWQgcmFuZ2VzLCBpZiBhbnkuXG4gICAgICogQHR5cGUge0FycmF5LjxudW1iZXJbXXxzdHJpbmc+fVxuICAgICAqL1xuICAgIHRoaXMucmVzZXJ2ZWQgPSB1bmRlZmluZWQ7IC8vIHRvSlNPTlxuXG4gICAgLyo/XG4gICAgICogV2hldGhlciB0aGlzIHR5cGUgaXMgYSBsZWdhY3kgZ3JvdXAuXG4gICAgICogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIHRoaXMuZ3JvdXAgPSB1bmRlZmluZWQ7IC8vIHRvSlNPTlxuXG4gICAgLyoqXG4gICAgICogQ2FjaGVkIGZpZWxkcyBieSBpZC5cbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxudW1iZXIsRmllbGQ+fG51bGx9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9maWVsZHNCeUlkID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIENhY2hlZCBmaWVsZHMgYXMgYW4gYXJyYXkuXG4gICAgICogQHR5cGUge0ZpZWxkW118bnVsbH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2ZpZWxkc0FycmF5ID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIENhY2hlZCBvbmVvZnMgYXMgYW4gYXJyYXkuXG4gICAgICogQHR5cGUge09uZU9mW118bnVsbH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX29uZW9mc0FycmF5ID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIENhY2hlZCBjb25zdHJ1Y3Rvci5cbiAgICAgKiBAdHlwZSB7Q29uc3RydWN0b3I8e30+fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fY3RvciA9IG51bGw7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFR5cGUucHJvdG90eXBlLCB7XG5cbiAgICAvKipcbiAgICAgKiBNZXNzYWdlIGZpZWxkcyBieSBpZC5cbiAgICAgKiBAbmFtZSBUeXBlI2ZpZWxkc0J5SWRcbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxudW1iZXIsRmllbGQ+fVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGZpZWxkc0J5SWQ6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICBpZiAodGhpcy5fZmllbGRzQnlJZClcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZmllbGRzQnlJZDtcblxuICAgICAgICAgICAgdGhpcy5fZmllbGRzQnlJZCA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgbmFtZXMgPSBPYmplY3Qua2V5cyh0aGlzLmZpZWxkcyksIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmllbGQgPSB0aGlzLmZpZWxkc1tuYW1lc1tpXV0sXG4gICAgICAgICAgICAgICAgICAgIGlkID0gZmllbGQuaWQ7XG5cbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZmllbGRzQnlJZFtpZF0pXG4gICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiZHVwbGljYXRlIGlkIFwiICsgaWQgKyBcIiBpbiBcIiArIHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fZmllbGRzQnlJZFtpZF0gPSBmaWVsZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9maWVsZHNCeUlkO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZpZWxkcyBvZiB0aGlzIG1lc3NhZ2UgYXMgYW4gYXJyYXkgZm9yIGl0ZXJhdGlvbi5cbiAgICAgKiBAbmFtZSBUeXBlI2ZpZWxkc0FycmF5XG4gICAgICogQHR5cGUge0ZpZWxkW119XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgZmllbGRzQXJyYXk6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9maWVsZHNBcnJheSB8fCAodGhpcy5fZmllbGRzQXJyYXkgPSB1dGlsLnRvQXJyYXkodGhpcy5maWVsZHMpKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBPbmVvZnMgb2YgdGhpcyBtZXNzYWdlIGFzIGFuIGFycmF5IGZvciBpdGVyYXRpb24uXG4gICAgICogQG5hbWUgVHlwZSNvbmVvZnNBcnJheVxuICAgICAqIEB0eXBlIHtPbmVPZltdfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIG9uZW9mc0FycmF5OiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fb25lb2ZzQXJyYXkgfHwgKHRoaXMuX29uZW9mc0FycmF5ID0gdXRpbC50b0FycmF5KHRoaXMub25lb2ZzKSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVGhlIHJlZ2lzdGVyZWQgY29uc3RydWN0b3IsIGlmIGFueSByZWdpc3RlcmVkLCBvdGhlcndpc2UgYSBnZW5lcmljIGNvbnN0cnVjdG9yLlxuICAgICAqIEFzc2lnbmluZyBhIGZ1bmN0aW9uIHJlcGxhY2VzIHRoZSBpbnRlcm5hbCBjb25zdHJ1Y3Rvci4gSWYgdGhlIGZ1bmN0aW9uIGRvZXMgbm90IGV4dGVuZCB7QGxpbmsgTWVzc2FnZX0geWV0LCBpdHMgcHJvdG90eXBlIHdpbGwgYmUgc2V0dXAgYWNjb3JkaW5nbHkgYW5kIHN0YXRpYyBtZXRob2RzIHdpbGwgYmUgcG9wdWxhdGVkLiBJZiBpdCBhbHJlYWR5IGV4dGVuZHMge0BsaW5rIE1lc3NhZ2V9LCBpdCB3aWxsIGp1c3QgcmVwbGFjZSB0aGUgaW50ZXJuYWwgY29uc3RydWN0b3IuXG4gICAgICogQG5hbWUgVHlwZSNjdG9yXG4gICAgICogQHR5cGUge0NvbnN0cnVjdG9yPHt9Pn1cbiAgICAgKi9cbiAgICBjdG9yOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY3RvciB8fCAodGhpcy5jdG9yID0gVHlwZS5nZW5lcmF0ZUNvbnN0cnVjdG9yKHRoaXMpKCkpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKGN0b3IpIHtcblxuICAgICAgICAgICAgLy8gRW5zdXJlIHByb3BlciBwcm90b3R5cGVcbiAgICAgICAgICAgIHZhciBwcm90b3R5cGUgPSBjdG9yLnByb3RvdHlwZTtcbiAgICAgICAgICAgIGlmICghKHByb3RvdHlwZSBpbnN0YW5jZW9mIE1lc3NhZ2UpKSB7XG4gICAgICAgICAgICAgICAgKGN0b3IucHJvdG90eXBlID0gbmV3IE1lc3NhZ2UoKSkuY29uc3RydWN0b3IgPSBjdG9yO1xuICAgICAgICAgICAgICAgIHV0aWwubWVyZ2UoY3Rvci5wcm90b3R5cGUsIHByb3RvdHlwZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENsYXNzZXMgYW5kIG1lc3NhZ2VzIHJlZmVyZW5jZSB0aGVpciByZWZsZWN0ZWQgdHlwZVxuICAgICAgICAgICAgY3Rvci4kdHlwZSA9IGN0b3IucHJvdG90eXBlLiR0eXBlID0gdGhpcztcblxuICAgICAgICAgICAgLy8gTWl4IGluIHN0YXRpYyBtZXRob2RzXG4gICAgICAgICAgICB1dGlsLm1lcmdlKGN0b3IsIE1lc3NhZ2UsIHRydWUpO1xuXG4gICAgICAgICAgICB0aGlzLl9jdG9yID0gY3RvcjtcblxuICAgICAgICAgICAgLy8gTWVzc2FnZXMgaGF2ZSBub24tZW51bWVyYWJsZSBkZWZhdWx0IHZhbHVlcyBvbiB0aGVpciBwcm90b3R5cGVcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIGZvciAoOyBpIDwgLyogaW5pdGlhbGl6ZXMgKi8gdGhpcy5maWVsZHNBcnJheS5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICB0aGlzLl9maWVsZHNBcnJheVtpXS5yZXNvbHZlKCk7IC8vIGVuc3VyZXMgYSBwcm9wZXIgdmFsdWVcblxuICAgICAgICAgICAgLy8gTWVzc2FnZXMgaGF2ZSBub24tZW51bWVyYWJsZSBnZXR0ZXJzIGFuZCBzZXR0ZXJzIGZvciBlYWNoIHZpcnR1YWwgb25lb2YgZmllbGRcbiAgICAgICAgICAgIHZhciBjdG9yUHJvcGVydGllcyA9IHt9O1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IC8qIGluaXRpYWxpemVzICovIHRoaXMub25lb2ZzQXJyYXkubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgY3RvclByb3BlcnRpZXNbdGhpcy5fb25lb2ZzQXJyYXlbaV0ucmVzb2x2ZSgpLm5hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IHV0aWwub25lT2ZHZXR0ZXIodGhpcy5fb25lb2ZzQXJyYXlbaV0ub25lb2YpLFxuICAgICAgICAgICAgICAgICAgICBzZXQ6IHV0aWwub25lT2ZTZXR0ZXIodGhpcy5fb25lb2ZzQXJyYXlbaV0ub25lb2YpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpKVxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGN0b3IucHJvdG90eXBlLCBjdG9yUHJvcGVydGllcyk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIHNwZWNpZmllZCB0eXBlLlxuICogQHBhcmFtIHtUeXBlfSBtdHlwZSBNZXNzYWdlIHR5cGVcbiAqIEByZXR1cm5zIHtDb2RlZ2VufSBDb2RlZ2VuIGluc3RhbmNlXG4gKi9cblR5cGUuZ2VuZXJhdGVDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIGdlbmVyYXRlQ29uc3RydWN0b3IobXR5cGUpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmV4cGVjdGVkLW11bHRpbGluZSAqL1xuICAgIHZhciBnZW4gPSB1dGlsLmNvZGVnZW4oW1wicFwiXSwgbXR5cGUubmFtZSk7XG4gICAgLy8gZXhwbGljaXRseSBpbml0aWFsaXplIG11dGFibGUgb2JqZWN0L2FycmF5IGZpZWxkcyBzbyB0aGF0IHRoZXNlIGFyZW4ndCBqdXN0IGluaGVyaXRlZCBmcm9tIHRoZSBwcm90b3R5cGVcbiAgICBmb3IgKHZhciBpID0gMCwgZmllbGQ7IGkgPCBtdHlwZS5maWVsZHNBcnJheS5sZW5ndGg7ICsraSlcbiAgICAgICAgaWYgKChmaWVsZCA9IG10eXBlLl9maWVsZHNBcnJheVtpXSkubWFwKSBnZW5cbiAgICAgICAgICAgIChcInRoaXMlcz17fVwiLCB1dGlsLnNhZmVQcm9wKGZpZWxkLm5hbWUpKTtcbiAgICAgICAgZWxzZSBpZiAoZmllbGQucmVwZWF0ZWQpIGdlblxuICAgICAgICAgICAgKFwidGhpcyVzPVtdXCIsIHV0aWwuc2FmZVByb3AoZmllbGQubmFtZSkpO1xuICAgIHJldHVybiBnZW5cbiAgICAoXCJpZihwKWZvcih2YXIga3M9T2JqZWN0LmtleXMocCksaT0wO2k8a3MubGVuZ3RoOysraSlpZihwW2tzW2ldXSE9bnVsbClcIikgLy8gb21pdCB1bmRlZmluZWQgb3IgbnVsbFxuICAgICAgICAoXCJ0aGlzW2tzW2ldXT1wW2tzW2ldXVwiKTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lICovXG59O1xuXG5mdW5jdGlvbiBjbGVhckNhY2hlKHR5cGUpIHtcbiAgICB0eXBlLl9maWVsZHNCeUlkID0gdHlwZS5fZmllbGRzQXJyYXkgPSB0eXBlLl9vbmVvZnNBcnJheSA9IG51bGw7XG4gICAgZGVsZXRlIHR5cGUuZW5jb2RlO1xuICAgIGRlbGV0ZSB0eXBlLmRlY29kZTtcbiAgICBkZWxldGUgdHlwZS52ZXJpZnk7XG4gICAgcmV0dXJuIHR5cGU7XG59XG5cbi8qKlxuICogTWVzc2FnZSB0eXBlIGRlc2NyaXB0b3IuXG4gKiBAaW50ZXJmYWNlIElUeXBlXG4gKiBAZXh0ZW5kcyBJTmFtZXNwYWNlXG4gKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLElPbmVPZj59IFtvbmVvZnNdIE9uZW9mIGRlc2NyaXB0b3JzXG4gKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLElGaWVsZD59IGZpZWxkcyBGaWVsZCBkZXNjcmlwdG9yc1xuICogQHByb3BlcnR5IHtudW1iZXJbXVtdfSBbZXh0ZW5zaW9uc10gRXh0ZW5zaW9uIHJhbmdlc1xuICogQHByb3BlcnR5IHtudW1iZXJbXVtdfSBbcmVzZXJ2ZWRdIFJlc2VydmVkIHJhbmdlc1xuICogQHByb3BlcnR5IHtib29sZWFufSBbZ3JvdXA9ZmFsc2VdIFdoZXRoZXIgYSBsZWdhY3kgZ3JvdXAgb3Igbm90XG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbWVzc2FnZSB0eXBlIGZyb20gYSBtZXNzYWdlIHR5cGUgZGVzY3JpcHRvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE1lc3NhZ2UgbmFtZVxuICogQHBhcmFtIHtJVHlwZX0ganNvbiBNZXNzYWdlIHR5cGUgZGVzY3JpcHRvclxuICogQHJldHVybnMge1R5cGV9IENyZWF0ZWQgbWVzc2FnZSB0eXBlXG4gKi9cblR5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihuYW1lLCBqc29uKSB7XG4gICAgdmFyIHR5cGUgPSBuZXcgVHlwZShuYW1lLCBqc29uLm9wdGlvbnMpO1xuICAgIHR5cGUuZXh0ZW5zaW9ucyA9IGpzb24uZXh0ZW5zaW9ucztcbiAgICB0eXBlLnJlc2VydmVkID0ganNvbi5yZXNlcnZlZDtcbiAgICB2YXIgbmFtZXMgPSBPYmplY3Qua2V5cyhqc29uLmZpZWxkcyksXG4gICAgICAgIGkgPSAwO1xuICAgIGZvciAoOyBpIDwgbmFtZXMubGVuZ3RoOyArK2kpXG4gICAgICAgIHR5cGUuYWRkKFxuICAgICAgICAgICAgKCB0eXBlb2YganNvbi5maWVsZHNbbmFtZXNbaV1dLmtleVR5cGUgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgICAgID8gTWFwRmllbGQuZnJvbUpTT05cbiAgICAgICAgICAgIDogRmllbGQuZnJvbUpTT04gKShuYW1lc1tpXSwganNvbi5maWVsZHNbbmFtZXNbaV1dKVxuICAgICAgICApO1xuICAgIGlmIChqc29uLm9uZW9mcylcbiAgICAgICAgZm9yIChuYW1lcyA9IE9iamVjdC5rZXlzKGpzb24ub25lb2ZzKSwgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIHR5cGUuYWRkKE9uZU9mLmZyb21KU09OKG5hbWVzW2ldLCBqc29uLm9uZW9mc1tuYW1lc1tpXV0pKTtcbiAgICBpZiAoanNvbi5uZXN0ZWQpXG4gICAgICAgIGZvciAobmFtZXMgPSBPYmplY3Qua2V5cyhqc29uLm5lc3RlZCksIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBuZXN0ZWQgPSBqc29uLm5lc3RlZFtuYW1lc1tpXV07XG4gICAgICAgICAgICB0eXBlLmFkZCggLy8gbW9zdCB0byBsZWFzdCBsaWtlbHlcbiAgICAgICAgICAgICAgICAoIG5lc3RlZC5pZCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBGaWVsZC5mcm9tSlNPTlxuICAgICAgICAgICAgICAgIDogbmVzdGVkLmZpZWxkcyAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBUeXBlLmZyb21KU09OXG4gICAgICAgICAgICAgICAgOiBuZXN0ZWQudmFsdWVzICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IEVudW0uZnJvbUpTT05cbiAgICAgICAgICAgICAgICA6IG5lc3RlZC5tZXRob2RzICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IFNlcnZpY2UuZnJvbUpTT05cbiAgICAgICAgICAgICAgICA6IE5hbWVzcGFjZS5mcm9tSlNPTiApKG5hbWVzW2ldLCBuZXN0ZWQpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgaWYgKGpzb24uZXh0ZW5zaW9ucyAmJiBqc29uLmV4dGVuc2lvbnMubGVuZ3RoKVxuICAgICAgICB0eXBlLmV4dGVuc2lvbnMgPSBqc29uLmV4dGVuc2lvbnM7XG4gICAgaWYgKGpzb24ucmVzZXJ2ZWQgJiYganNvbi5yZXNlcnZlZC5sZW5ndGgpXG4gICAgICAgIHR5cGUucmVzZXJ2ZWQgPSBqc29uLnJlc2VydmVkO1xuICAgIGlmIChqc29uLmdyb3VwKVxuICAgICAgICB0eXBlLmdyb3VwID0gdHJ1ZTtcbiAgICBpZiAoanNvbi5jb21tZW50KVxuICAgICAgICB0eXBlLmNvbW1lbnQgPSBqc29uLmNvbW1lbnQ7XG4gICAgcmV0dXJuIHR5cGU7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIHRoaXMgbWVzc2FnZSB0eXBlIHRvIGEgbWVzc2FnZSB0eXBlIGRlc2NyaXB0b3IuXG4gKiBAcGFyYW0ge0lUb0pTT05PcHRpb25zfSBbdG9KU09OT3B0aW9uc10gSlNPTiBjb252ZXJzaW9uIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtJVHlwZX0gTWVzc2FnZSB0eXBlIGRlc2NyaXB0b3JcbiAqL1xuVHlwZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKHRvSlNPTk9wdGlvbnMpIHtcbiAgICB2YXIgaW5oZXJpdGVkID0gTmFtZXNwYWNlLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLCB0b0pTT05PcHRpb25zKTtcbiAgICB2YXIga2VlcENvbW1lbnRzID0gdG9KU09OT3B0aW9ucyA/IEJvb2xlYW4odG9KU09OT3B0aW9ucy5rZWVwQ29tbWVudHMpIDogZmFsc2U7XG4gICAgcmV0dXJuIHV0aWwudG9PYmplY3QoW1xuICAgICAgICBcIm9wdGlvbnNcIiAgICAsIGluaGVyaXRlZCAmJiBpbmhlcml0ZWQub3B0aW9ucyB8fCB1bmRlZmluZWQsXG4gICAgICAgIFwib25lb2ZzXCIgICAgICwgTmFtZXNwYWNlLmFycmF5VG9KU09OKHRoaXMub25lb2ZzQXJyYXksIHRvSlNPTk9wdGlvbnMpLFxuICAgICAgICBcImZpZWxkc1wiICAgICAsIE5hbWVzcGFjZS5hcnJheVRvSlNPTih0aGlzLmZpZWxkc0FycmF5LmZpbHRlcihmdW5jdGlvbihvYmopIHsgcmV0dXJuICFvYmouZGVjbGFyaW5nRmllbGQ7IH0pLCB0b0pTT05PcHRpb25zKSB8fCB7fSxcbiAgICAgICAgXCJleHRlbnNpb25zXCIgLCB0aGlzLmV4dGVuc2lvbnMgJiYgdGhpcy5leHRlbnNpb25zLmxlbmd0aCA/IHRoaXMuZXh0ZW5zaW9ucyA6IHVuZGVmaW5lZCxcbiAgICAgICAgXCJyZXNlcnZlZFwiICAgLCB0aGlzLnJlc2VydmVkICYmIHRoaXMucmVzZXJ2ZWQubGVuZ3RoID8gdGhpcy5yZXNlcnZlZCA6IHVuZGVmaW5lZCxcbiAgICAgICAgXCJncm91cFwiICAgICAgLCB0aGlzLmdyb3VwIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgXCJuZXN0ZWRcIiAgICAgLCBpbmhlcml0ZWQgJiYgaW5oZXJpdGVkLm5lc3RlZCB8fCB1bmRlZmluZWQsXG4gICAgICAgIFwiY29tbWVudFwiICAgICwga2VlcENvbW1lbnRzID8gdGhpcy5jb21tZW50IDogdW5kZWZpbmVkXG4gICAgXSk7XG59O1xuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5UeXBlLnByb3RvdHlwZS5yZXNvbHZlQWxsID0gZnVuY3Rpb24gcmVzb2x2ZUFsbCgpIHtcbiAgICB2YXIgZmllbGRzID0gdGhpcy5maWVsZHNBcnJheSwgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBmaWVsZHMubGVuZ3RoKVxuICAgICAgICBmaWVsZHNbaSsrXS5yZXNvbHZlKCk7XG4gICAgdmFyIG9uZW9mcyA9IHRoaXMub25lb2ZzQXJyYXk7IGkgPSAwO1xuICAgIHdoaWxlIChpIDwgb25lb2ZzLmxlbmd0aClcbiAgICAgICAgb25lb2ZzW2krK10ucmVzb2x2ZSgpO1xuICAgIHJldHVybiBOYW1lc3BhY2UucHJvdG90eXBlLnJlc29sdmVBbGwuY2FsbCh0aGlzKTtcbn07XG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cblR5cGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldChuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuZmllbGRzW25hbWVdXG4gICAgICAgIHx8IHRoaXMub25lb2ZzICYmIHRoaXMub25lb2ZzW25hbWVdXG4gICAgICAgIHx8IHRoaXMubmVzdGVkICYmIHRoaXMubmVzdGVkW25hbWVdXG4gICAgICAgIHx8IG51bGw7XG59O1xuXG4vKipcbiAqIEFkZHMgYSBuZXN0ZWQgb2JqZWN0IHRvIHRoaXMgdHlwZS5cbiAqIEBwYXJhbSB7UmVmbGVjdGlvbk9iamVjdH0gb2JqZWN0IE5lc3RlZCBvYmplY3QgdG8gYWRkXG4gKiBAcmV0dXJucyB7VHlwZX0gYHRoaXNgXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGFyZ3VtZW50cyBhcmUgaW52YWxpZFxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZXJlIGlzIGFscmVhZHkgYSBuZXN0ZWQgb2JqZWN0IHdpdGggdGhpcyBuYW1lIG9yLCBpZiBhIGZpZWxkLCB3aGVuIHRoZXJlIGlzIGFscmVhZHkgYSBmaWVsZCB3aXRoIHRoaXMgaWRcbiAqL1xuVHlwZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKG9iamVjdCkge1xuXG4gICAgaWYgKHRoaXMuZ2V0KG9iamVjdC5uYW1lKSlcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJkdXBsaWNhdGUgbmFtZSAnXCIgKyBvYmplY3QubmFtZSArIFwiJyBpbiBcIiArIHRoaXMpO1xuXG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEZpZWxkICYmIG9iamVjdC5leHRlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBOT1RFOiBFeHRlbnNpb24gZmllbGRzIGFyZW4ndCBhY3R1YWwgZmllbGRzIG9uIHRoZSBkZWNsYXJpbmcgdHlwZSwgYnV0IG5lc3RlZCBvYmplY3RzLlxuICAgICAgICAvLyBUaGUgcm9vdCBvYmplY3QgdGFrZXMgY2FyZSBvZiBhZGRpbmcgZGlzdGluY3Qgc2lzdGVyLWZpZWxkcyB0byB0aGUgcmVzcGVjdGl2ZSBleHRlbmRlZFxuICAgICAgICAvLyB0eXBlIGluc3RlYWQuXG5cbiAgICAgICAgLy8gYXZvaWRzIGNhbGxpbmcgdGhlIGdldHRlciBpZiBub3QgYWJzb2x1dGVseSBuZWNlc3NhcnkgYmVjYXVzZSBpdCdzIGNhbGxlZCBxdWl0ZSBmcmVxdWVudGx5XG4gICAgICAgIGlmICh0aGlzLl9maWVsZHNCeUlkID8gLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gdGhpcy5fZmllbGRzQnlJZFtvYmplY3QuaWRdIDogdGhpcy5maWVsZHNCeUlkW29iamVjdC5pZF0pXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcImR1cGxpY2F0ZSBpZCBcIiArIG9iamVjdC5pZCArIFwiIGluIFwiICsgdGhpcyk7XG4gICAgICAgIGlmICh0aGlzLmlzUmVzZXJ2ZWRJZChvYmplY3QuaWQpKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJpZCBcIiArIG9iamVjdC5pZCArIFwiIGlzIHJlc2VydmVkIGluIFwiICsgdGhpcyk7XG4gICAgICAgIGlmICh0aGlzLmlzUmVzZXJ2ZWROYW1lKG9iamVjdC5uYW1lKSlcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwibmFtZSAnXCIgKyBvYmplY3QubmFtZSArIFwiJyBpcyByZXNlcnZlZCBpbiBcIiArIHRoaXMpO1xuXG4gICAgICAgIGlmIChvYmplY3QucGFyZW50KVxuICAgICAgICAgICAgb2JqZWN0LnBhcmVudC5yZW1vdmUob2JqZWN0KTtcbiAgICAgICAgdGhpcy5maWVsZHNbb2JqZWN0Lm5hbWVdID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QubWVzc2FnZSA9IHRoaXM7XG4gICAgICAgIG9iamVjdC5vbkFkZCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIGNsZWFyQ2FjaGUodGhpcyk7XG4gICAgfVxuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBPbmVPZikge1xuICAgICAgICBpZiAoIXRoaXMub25lb2ZzKVxuICAgICAgICAgICAgdGhpcy5vbmVvZnMgPSB7fTtcbiAgICAgICAgdGhpcy5vbmVvZnNbb2JqZWN0Lm5hbWVdID0gb2JqZWN0O1xuICAgICAgICBvYmplY3Qub25BZGQodGhpcyk7XG4gICAgICAgIHJldHVybiBjbGVhckNhY2hlKHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gTmFtZXNwYWNlLnByb3RvdHlwZS5hZGQuY2FsbCh0aGlzLCBvYmplY3QpO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIGEgbmVzdGVkIG9iamVjdCBmcm9tIHRoaXMgdHlwZS5cbiAqIEBwYXJhbSB7UmVmbGVjdGlvbk9iamVjdH0gb2JqZWN0IE5lc3RlZCBvYmplY3QgdG8gcmVtb3ZlXG4gKiBAcmV0dXJucyB7VHlwZX0gYHRoaXNgXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGFyZ3VtZW50cyBhcmUgaW52YWxpZFxuICogQHRocm93cyB7RXJyb3J9IElmIGBvYmplY3RgIGlzIG5vdCBhIG1lbWJlciBvZiB0aGlzIHR5cGVcbiAqL1xuVHlwZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBGaWVsZCAmJiBvYmplY3QuZXh0ZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gU2VlIFR5cGUjYWRkIGZvciB0aGUgcmVhc29uIHdoeSBleHRlbnNpb24gZmllbGRzIGFyZSBleGNsdWRlZCBoZXJlLlxuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIXRoaXMuZmllbGRzIHx8IHRoaXMuZmllbGRzW29iamVjdC5uYW1lXSAhPT0gb2JqZWN0KVxuICAgICAgICAgICAgdGhyb3cgRXJyb3Iob2JqZWN0ICsgXCIgaXMgbm90IGEgbWVtYmVyIG9mIFwiICsgdGhpcyk7XG5cbiAgICAgICAgZGVsZXRlIHRoaXMuZmllbGRzW29iamVjdC5uYW1lXTtcbiAgICAgICAgb2JqZWN0LnBhcmVudCA9IG51bGw7XG4gICAgICAgIG9iamVjdC5vblJlbW92ZSh0aGlzKTtcbiAgICAgICAgcmV0dXJuIGNsZWFyQ2FjaGUodGhpcyk7XG4gICAgfVxuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBPbmVPZikge1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIXRoaXMub25lb2ZzIHx8IHRoaXMub25lb2ZzW29iamVjdC5uYW1lXSAhPT0gb2JqZWN0KVxuICAgICAgICAgICAgdGhyb3cgRXJyb3Iob2JqZWN0ICsgXCIgaXMgbm90IGEgbWVtYmVyIG9mIFwiICsgdGhpcyk7XG5cbiAgICAgICAgZGVsZXRlIHRoaXMub25lb2ZzW29iamVjdC5uYW1lXTtcbiAgICAgICAgb2JqZWN0LnBhcmVudCA9IG51bGw7XG4gICAgICAgIG9iamVjdC5vblJlbW92ZSh0aGlzKTtcbiAgICAgICAgcmV0dXJuIGNsZWFyQ2FjaGUodGhpcyk7XG4gICAgfVxuICAgIHJldHVybiBOYW1lc3BhY2UucHJvdG90eXBlLnJlbW92ZS5jYWxsKHRoaXMsIG9iamVjdCk7XG59O1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgaWQgaXMgcmVzZXJ2ZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gaWQgSWQgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiByZXNlcnZlZCwgb3RoZXJ3aXNlIGBmYWxzZWBcbiAqL1xuVHlwZS5wcm90b3R5cGUuaXNSZXNlcnZlZElkID0gZnVuY3Rpb24gaXNSZXNlcnZlZElkKGlkKSB7XG4gICAgcmV0dXJuIE5hbWVzcGFjZS5pc1Jlc2VydmVkSWQodGhpcy5yZXNlcnZlZCwgaWQpO1xufTtcblxuLyoqXG4gKiBUZXN0cyBpZiB0aGUgc3BlY2lmaWVkIG5hbWUgaXMgcmVzZXJ2ZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgcmVzZXJ2ZWQsIG90aGVyd2lzZSBgZmFsc2VgXG4gKi9cblR5cGUucHJvdG90eXBlLmlzUmVzZXJ2ZWROYW1lID0gZnVuY3Rpb24gaXNSZXNlcnZlZE5hbWUobmFtZSkge1xuICAgIHJldHVybiBOYW1lc3BhY2UuaXNSZXNlcnZlZE5hbWUodGhpcy5yZXNlcnZlZCwgbmFtZSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbWVzc2FnZSBvZiB0aGlzIHR5cGUgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gKiBAcmV0dXJucyB7TWVzc2FnZTx7fT59IE1lc3NhZ2UgaW5zdGFuY2VcbiAqL1xuVHlwZS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHByb3BlcnRpZXMpIHtcbiAgICByZXR1cm4gbmV3IHRoaXMuY3Rvcihwcm9wZXJ0aWVzKTtcbn07XG5cbi8qKlxuICogU2V0cyB1cCB7QGxpbmsgVHlwZSNlbmNvZGV8ZW5jb2RlfSwge0BsaW5rIFR5cGUjZGVjb2RlfGRlY29kZX0gYW5kIHtAbGluayBUeXBlI3ZlcmlmeXx2ZXJpZnl9LlxuICogQHJldHVybnMge1R5cGV9IGB0aGlzYFxuICovXG5UeXBlLnByb3RvdHlwZS5zZXR1cCA9IGZ1bmN0aW9uIHNldHVwKCkge1xuICAgIC8vIFNldHMgdXAgZXZlcnl0aGluZyBhdCBvbmNlIHNvIHRoYXQgdGhlIHByb3RvdHlwZSBjaGFpbiBkb2VzIG5vdCBoYXZlIHRvIGJlIHJlLWV2YWx1YXRlZFxuICAgIC8vIG11bHRpcGxlIHRpbWVzIChWOCwgc29mdC1kZW9wdCBwcm90b3R5cGUtY2hlY2spLlxuXG4gICAgdmFyIGZ1bGxOYW1lID0gdGhpcy5mdWxsTmFtZSxcbiAgICAgICAgdHlwZXMgICAgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IC8qIGluaXRpYWxpemVzICovIHRoaXMuZmllbGRzQXJyYXkubGVuZ3RoOyArK2kpXG4gICAgICAgIHR5cGVzLnB1c2godGhpcy5fZmllbGRzQXJyYXlbaV0ucmVzb2x2ZSgpLnJlc29sdmVkVHlwZSk7XG5cbiAgICAvLyBSZXBsYWNlIHNldHVwIG1ldGhvZHMgd2l0aCB0eXBlLXNwZWNpZmljIGdlbmVyYXRlZCBmdW5jdGlvbnNcbiAgICB0aGlzLmVuY29kZSA9IGVuY29kZXIodGhpcykoe1xuICAgICAgICBXcml0ZXIgOiBXcml0ZXIsXG4gICAgICAgIHR5cGVzICA6IHR5cGVzLFxuICAgICAgICB1dGlsICAgOiB1dGlsXG4gICAgfSk7XG4gICAgdGhpcy5kZWNvZGUgPSBkZWNvZGVyKHRoaXMpKHtcbiAgICAgICAgUmVhZGVyIDogUmVhZGVyLFxuICAgICAgICB0eXBlcyAgOiB0eXBlcyxcbiAgICAgICAgdXRpbCAgIDogdXRpbFxuICAgIH0pO1xuICAgIHRoaXMudmVyaWZ5ID0gdmVyaWZpZXIodGhpcykoe1xuICAgICAgICB0eXBlcyA6IHR5cGVzLFxuICAgICAgICB1dGlsICA6IHV0aWxcbiAgICB9KTtcbiAgICB0aGlzLmZyb21PYmplY3QgPSBjb252ZXJ0ZXIuZnJvbU9iamVjdCh0aGlzKSh7XG4gICAgICAgIHR5cGVzIDogdHlwZXMsXG4gICAgICAgIHV0aWwgIDogdXRpbFxuICAgIH0pO1xuICAgIHRoaXMudG9PYmplY3QgPSBjb252ZXJ0ZXIudG9PYmplY3QodGhpcykoe1xuICAgICAgICB0eXBlcyA6IHR5cGVzLFxuICAgICAgICB1dGlsICA6IHV0aWxcbiAgICB9KTtcblxuICAgIC8vIEluamVjdCBjdXN0b20gd3JhcHBlcnMgZm9yIGNvbW1vbiB0eXBlc1xuICAgIHZhciB3cmFwcGVyID0gd3JhcHBlcnNbZnVsbE5hbWVdO1xuICAgIGlmICh3cmFwcGVyKSB7XG4gICAgICAgIHZhciBvcmlnaW5hbFRoaXMgPSBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgICAgICAvLyBpZiAod3JhcHBlci5mcm9tT2JqZWN0KSB7XG4gICAgICAgICAgICBvcmlnaW5hbFRoaXMuZnJvbU9iamVjdCA9IHRoaXMuZnJvbU9iamVjdDtcbiAgICAgICAgICAgIHRoaXMuZnJvbU9iamVjdCA9IHdyYXBwZXIuZnJvbU9iamVjdC5iaW5kKG9yaWdpbmFsVGhpcyk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gaWYgKHdyYXBwZXIudG9PYmplY3QpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsVGhpcy50b09iamVjdCA9IHRoaXMudG9PYmplY3Q7XG4gICAgICAgICAgICB0aGlzLnRvT2JqZWN0ID0gd3JhcHBlci50b09iamVjdC5iaW5kKG9yaWdpbmFsVGhpcyk7XG4gICAgICAgIC8vIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogRW5jb2RlcyBhIG1lc3NhZ2Ugb2YgdGhpcyB0eXBlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBUeXBlI3ZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICogQHBhcmFtIHtNZXNzYWdlPHt9PnxPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBNZXNzYWdlIGluc3RhbmNlIG9yIHBsYWluIG9iamVjdFxuICogQHBhcmFtIHtXcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAqIEByZXR1cm5zIHtXcml0ZXJ9IHdyaXRlclxuICovXG5UeXBlLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGVfc2V0dXAobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0dXAoKS5lbmNvZGUobWVzc2FnZSwgd3JpdGVyKTsgLy8gb3ZlcnJpZGVzIHRoaXMgbWV0aG9kXG59O1xuXG4vKipcbiAqIEVuY29kZXMgYSBtZXNzYWdlIG9mIHRoaXMgdHlwZSBwcmVjZWVkZWQgYnkgaXRzIGJ5dGUgbGVuZ3RoIGFzIGEgdmFyaW50LiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBUeXBlI3ZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICogQHBhcmFtIHtNZXNzYWdlPHt9PnxPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBNZXNzYWdlIGluc3RhbmNlIG9yIHBsYWluIG9iamVjdFxuICogQHBhcmFtIHtXcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAqIEByZXR1cm5zIHtXcml0ZXJ9IHdyaXRlclxuICovXG5UeXBlLnByb3RvdHlwZS5lbmNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWQobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciAmJiB3cml0ZXIubGVuID8gd3JpdGVyLmZvcmsoKSA6IHdyaXRlcikubGRlbGltKCk7XG59O1xuXG4vKipcbiAqIERlY29kZXMgYSBtZXNzYWdlIG9mIHRoaXMgdHlwZS5cbiAqIEBwYXJhbSB7UmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aF0gTGVuZ3RoIG9mIHRoZSBtZXNzYWdlLCBpZiBrbm93biBiZWZvcmVoYW5kXG4gKiBAcmV0dXJucyB7TWVzc2FnZTx7fT59IERlY29kZWQgbWVzc2FnZVxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAqIEB0aHJvd3Mge3V0aWwuUHJvdG9jb2xFcnJvcjx7fT59IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICovXG5UeXBlLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGVfc2V0dXAocmVhZGVyLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy5zZXR1cCgpLmRlY29kZShyZWFkZXIsIGxlbmd0aCk7IC8vIG92ZXJyaWRlcyB0aGlzIG1ldGhvZFxufTtcblxuLyoqXG4gKiBEZWNvZGVzIGEgbWVzc2FnZSBvZiB0aGlzIHR5cGUgcHJlY2VlZGVkIGJ5IGl0cyBieXRlIGxlbmd0aCBhcyBhIHZhcmludC5cbiAqIEBwYXJhbSB7UmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gKiBAcmV0dXJucyB7TWVzc2FnZTx7fT59IERlY29kZWQgbWVzc2FnZVxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAqIEB0aHJvd3Mge3V0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gKi9cblR5cGUucHJvdG90eXBlLmRlY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZChyZWFkZXIpIHtcbiAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiBSZWFkZXIpKVxuICAgICAgICByZWFkZXIgPSBSZWFkZXIuY3JlYXRlKHJlYWRlcik7XG4gICAgcmV0dXJuIHRoaXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbn07XG5cbi8qKlxuICogVmVyaWZpZXMgdGhhdCBmaWVsZCB2YWx1ZXMgYXJlIHZhbGlkIGFuZCB0aGF0IHJlcXVpcmVkIGZpZWxkcyBhcmUgcHJlc2VudC5cbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IG1lc3NhZ2UgUGxhaW4gb2JqZWN0IHRvIHZlcmlmeVxuICogQHJldHVybnMge251bGx8c3RyaW5nfSBgbnVsbGAgaWYgdmFsaWQsIG90aGVyd2lzZSB0aGUgcmVhc29uIHdoeSBpdCBpcyBub3RcbiAqL1xuVHlwZS5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5X3NldHVwKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5zZXR1cCgpLnZlcmlmeShtZXNzYWdlKTsgLy8gb3ZlcnJpZGVzIHRoaXMgbWV0aG9kXG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbWVzc2FnZSBvZiB0aGlzIHR5cGUgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IG9iamVjdCBQbGFpbiBvYmplY3QgdG8gY29udmVydFxuICogQHJldHVybnMge01lc3NhZ2U8e30+fSBNZXNzYWdlIGluc3RhbmNlXG4gKi9cblR5cGUucHJvdG90eXBlLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KG9iamVjdCkge1xuICAgIHJldHVybiB0aGlzLnNldHVwKCkuZnJvbU9iamVjdChvYmplY3QpO1xufTtcblxuLyoqXG4gKiBDb252ZXJzaW9uIG9wdGlvbnMgYXMgdXNlZCBieSB7QGxpbmsgVHlwZSN0b09iamVjdH0gYW5kIHtAbGluayBNZXNzYWdlLnRvT2JqZWN0fS5cbiAqIEBpbnRlcmZhY2UgSUNvbnZlcnNpb25PcHRpb25zXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBbbG9uZ3NdIExvbmcgY29udmVyc2lvbiB0eXBlLlxuICogVmFsaWQgdmFsdWVzIGFyZSBgU3RyaW5nYCBhbmQgYE51bWJlcmAgKHRoZSBnbG9iYWwgdHlwZXMpLlxuICogRGVmYXVsdHMgdG8gY29weSB0aGUgcHJlc2VudCB2YWx1ZSwgd2hpY2ggaXMgYSBwb3NzaWJseSB1bnNhZmUgbnVtYmVyIHdpdGhvdXQgYW5kIGEge0BsaW5rIExvbmd9IHdpdGggYSBsb25nIGxpYnJhcnkuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBbZW51bXNdIEVudW0gdmFsdWUgY29udmVyc2lvbiB0eXBlLlxuICogT25seSB2YWxpZCB2YWx1ZSBpcyBgU3RyaW5nYCAodGhlIGdsb2JhbCB0eXBlKS5cbiAqIERlZmF1bHRzIHRvIGNvcHkgdGhlIHByZXNlbnQgdmFsdWUsIHdoaWNoIGlzIHRoZSBudW1lcmljIGlkLlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW2J5dGVzXSBCeXRlcyB2YWx1ZSBjb252ZXJzaW9uIHR5cGUuXG4gKiBWYWxpZCB2YWx1ZXMgYXJlIGBBcnJheWAgYW5kIChhIGJhc2U2NCBlbmNvZGVkKSBgU3RyaW5nYCAodGhlIGdsb2JhbCB0eXBlcykuXG4gKiBEZWZhdWx0cyB0byBjb3B5IHRoZSBwcmVzZW50IHZhbHVlLCB3aGljaCB1c3VhbGx5IGlzIGEgQnVmZmVyIHVuZGVyIG5vZGUgYW5kIGFuIFVpbnQ4QXJyYXkgaW4gdGhlIGJyb3dzZXIuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtkZWZhdWx0cz1mYWxzZV0gQWxzbyBzZXRzIGRlZmF1bHQgdmFsdWVzIG9uIHRoZSByZXN1bHRpbmcgb2JqZWN0XG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFthcnJheXM9ZmFsc2VdIFNldHMgZW1wdHkgYXJyYXlzIGZvciBtaXNzaW5nIHJlcGVhdGVkIGZpZWxkcyBldmVuIGlmIGBkZWZhdWx0cz1mYWxzZWBcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW29iamVjdHM9ZmFsc2VdIFNldHMgZW1wdHkgb2JqZWN0cyBmb3IgbWlzc2luZyBtYXAgZmllbGRzIGV2ZW4gaWYgYGRlZmF1bHRzPWZhbHNlYFxuICogQHByb3BlcnR5IHtib29sZWFufSBbb25lb2ZzPWZhbHNlXSBJbmNsdWRlcyB2aXJ0dWFsIG9uZW9mIHByb3BlcnRpZXMgc2V0IHRvIHRoZSBwcmVzZW50IGZpZWxkJ3MgbmFtZSwgaWYgYW55XG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtqc29uPWZhbHNlXSBQZXJmb3JtcyBhZGRpdGlvbmFsIEpTT04gY29tcGF0aWJpbGl0eSBjb252ZXJzaW9ucywgaS5lLiBOYU4gYW5kIEluZmluaXR5IHRvIHN0cmluZ3NcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIG1lc3NhZ2Ugb2YgdGhpcyB0eXBlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gKiBAcGFyYW0ge01lc3NhZ2U8e30+fSBtZXNzYWdlIE1lc3NhZ2UgaW5zdGFuY2VcbiAqIEBwYXJhbSB7SUNvbnZlcnNpb25PcHRpb25zfSBbb3B0aW9uc10gQ29udmVyc2lvbiBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICovXG5UeXBlLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5zZXR1cCgpLnRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBEZWNvcmF0b3IgZnVuY3Rpb24gYXMgcmV0dXJuZWQgYnkge0BsaW5rIFR5cGUuZH0gKFR5cGVTY3JpcHQpLlxuICogQHR5cGVkZWYgVHlwZURlY29yYXRvclxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtDb25zdHJ1Y3RvcjxUPn0gdGFyZ2V0IFRhcmdldCBjb25zdHJ1Y3RvclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgTWVzc2FnZTxUPlxuICovXG5cbi8qKlxuICogVHlwZSBkZWNvcmF0b3IgKFR5cGVTY3JpcHQpLlxuICogQHBhcmFtIHtzdHJpbmd9IFt0eXBlTmFtZV0gVHlwZSBuYW1lLCBkZWZhdWx0cyB0byB0aGUgY29uc3RydWN0b3IncyBuYW1lXG4gKiBAcmV0dXJucyB7VHlwZURlY29yYXRvcjxUPn0gRGVjb3JhdG9yIGZ1bmN0aW9uXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIE1lc3NhZ2U8VD5cbiAqL1xuVHlwZS5kID0gZnVuY3Rpb24gZGVjb3JhdGVUeXBlKHR5cGVOYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHR5cGVEZWNvcmF0b3IodGFyZ2V0KSB7XG4gICAgICAgIHV0aWwuZGVjb3JhdGVUeXBlKHRhcmdldCwgdHlwZU5hbWUpO1xuICAgIH07XG59O1xuIiwgIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBSb290O1xuXG4vLyBleHRlbmRzIE5hbWVzcGFjZVxudmFyIE5hbWVzcGFjZSA9IHJlcXVpcmUoXCIuL25hbWVzcGFjZVwiKTtcbigoUm9vdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE5hbWVzcGFjZS5wcm90b3R5cGUpKS5jb25zdHJ1Y3RvciA9IFJvb3QpLmNsYXNzTmFtZSA9IFwiUm9vdFwiO1xuXG52YXIgRmllbGQgICA9IHJlcXVpcmUoXCIuL2ZpZWxkXCIpLFxuICAgIEVudW0gICAgPSByZXF1aXJlKFwiLi9lbnVtXCIpLFxuICAgIE9uZU9mICAgPSByZXF1aXJlKFwiLi9vbmVvZlwiKSxcbiAgICB1dGlsICAgID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxudmFyIFR5cGUsICAgLy8gY3ljbGljXG4gICAgcGFyc2UsICAvLyBtaWdodCBiZSBleGNsdWRlZFxuICAgIGNvbW1vbjsgLy8gXCJcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IHJvb3QgbmFtZXNwYWNlIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBSb290IG5hbWVzcGFjZSB3cmFwcGluZyBhbGwgdHlwZXMsIGVudW1zLCBzZXJ2aWNlcywgc3ViLW5hbWVzcGFjZXMgZXRjLiB0aGF0IGJlbG9uZyB0b2dldGhlci5cbiAqIEBleHRlbmRzIE5hbWVzcGFjZUJhc2VcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIFRvcCBsZXZlbCBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIFJvb3Qob3B0aW9ucykge1xuICAgIE5hbWVzcGFjZS5jYWxsKHRoaXMsIFwiXCIsIG9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICogRGVmZXJyZWQgZXh0ZW5zaW9uIGZpZWxkcy5cbiAgICAgKiBAdHlwZSB7RmllbGRbXX1cbiAgICAgKi9cbiAgICB0aGlzLmRlZmVycmVkID0gW107XG5cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlZCBmaWxlIG5hbWVzIG9mIGxvYWRlZCBmaWxlcy5cbiAgICAgKiBAdHlwZSB7c3RyaW5nW119XG4gICAgICovXG4gICAgdGhpcy5maWxlcyA9IFtdO1xufVxuXG4vKipcbiAqIExvYWRzIGEgbmFtZXNwYWNlIGRlc2NyaXB0b3IgaW50byBhIHJvb3QgbmFtZXNwYWNlLlxuICogQHBhcmFtIHtJTmFtZXNwYWNlfSBqc29uIE5hbWVlc3BhY2UgZGVzY3JpcHRvclxuICogQHBhcmFtIHtSb290fSBbcm9vdF0gUm9vdCBuYW1lc3BhY2UsIGRlZmF1bHRzIHRvIGNyZWF0ZSBhIG5ldyBvbmUgaWYgb21pdHRlZFxuICogQHJldHVybnMge1Jvb3R9IFJvb3QgbmFtZXNwYWNlXG4gKi9cblJvb3QuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihqc29uLCByb290KSB7XG4gICAgaWYgKCFyb290KVxuICAgICAgICByb290ID0gbmV3IFJvb3QoKTtcbiAgICBpZiAoanNvbi5vcHRpb25zKVxuICAgICAgICByb290LnNldE9wdGlvbnMoanNvbi5vcHRpb25zKTtcbiAgICByZXR1cm4gcm9vdC5hZGRKU09OKGpzb24ubmVzdGVkKTtcbn07XG5cbi8qKlxuICogUmVzb2x2ZXMgdGhlIHBhdGggb2YgYW4gaW1wb3J0ZWQgZmlsZSwgcmVsYXRpdmUgdG8gdGhlIGltcG9ydGluZyBvcmlnaW4uXG4gKiBUaGlzIG1ldGhvZCBleGlzdHMgc28geW91IGNhbiBvdmVycmlkZSBpdCB3aXRoIHlvdXIgb3duIGxvZ2ljIGluIGNhc2UgeW91ciBpbXBvcnRzIGFyZSBzY2F0dGVyZWQgb3ZlciBtdWx0aXBsZSBkaXJlY3Rvcmllcy5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IG9yaWdpbiBUaGUgZmlsZSBuYW1lIG9mIHRoZSBpbXBvcnRpbmcgZmlsZVxuICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldCBUaGUgZmlsZSBuYW1lIGJlaW5nIGltcG9ydGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IFJlc29sdmVkIHBhdGggdG8gYHRhcmdldGAgb3IgYG51bGxgIHRvIHNraXAgdGhlIGZpbGVcbiAqL1xuUm9vdC5wcm90b3R5cGUucmVzb2x2ZVBhdGggPSB1dGlsLnBhdGgucmVzb2x2ZTtcblxuLyoqXG4gKiBGZXRjaCBjb250ZW50IGZyb20gZmlsZSBwYXRoIG9yIHVybFxuICogVGhpcyBtZXRob2QgZXhpc3RzIHNvIHlvdSBjYW4gb3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93biBsb2dpYy5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggRmlsZSBwYXRoIG9yIHVybFxuICogQHBhcmFtIHtGZXRjaENhbGxiYWNrfSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvblxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuUm9vdC5wcm90b3R5cGUuZmV0Y2ggPSB1dGlsLmZldGNoO1xuXG4vLyBBIHN5bWJvbC1saWtlIGZ1bmN0aW9uIHRvIHNhZmVseSBzaWduYWwgc3luY2hyb25vdXMgbG9hZGluZ1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIFNZTkMoKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5LWZ1bmN0aW9uXG5cbi8qKlxuICogTG9hZHMgb25lIG9yIG11bHRpcGxlIC5wcm90byBvciBwcmVwcm9jZXNzZWQgLmpzb24gZmlsZXMgaW50byB0aGlzIHJvb3QgbmFtZXNwYWNlIGFuZCBjYWxscyB0aGUgY2FsbGJhY2suXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gZmlsZW5hbWUgTmFtZXMgb2Ygb25lIG9yIG11bHRpcGxlIGZpbGVzIHRvIGxvYWRcbiAqIEBwYXJhbSB7SVBhcnNlT3B0aW9uc30gb3B0aW9ucyBQYXJzZSBvcHRpb25zXG4gKiBAcGFyYW0ge0xvYWRDYWxsYmFja30gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cblJvb3QucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiBsb2FkKGZpbGVuYW1lLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICghY2FsbGJhY2spXG4gICAgICAgIHJldHVybiB1dGlsLmFzUHJvbWlzZShsb2FkLCBzZWxmLCBmaWxlbmFtZSwgb3B0aW9ucyk7XG5cbiAgICB2YXIgc3luYyA9IGNhbGxiYWNrID09PSBTWU5DOyAvLyB1bmRvY3VtZW50ZWRcblxuICAgIC8vIEZpbmlzaGVzIGxvYWRpbmcgYnkgY2FsbGluZyB0aGUgY2FsbGJhY2sgKGV4YWN0bHkgb25jZSlcbiAgICBmdW5jdGlvbiBmaW5pc2goZXJyLCByb290KSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIWNhbGxiYWNrKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgY2IgPSBjYWxsYmFjaztcbiAgICAgICAgY2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBpZiAoc3luYylcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgY2IoZXJyLCByb290KTtcbiAgICB9XG5cbiAgICAvLyBCdW5kbGVkIGRlZmluaXRpb24gZXhpc3RlbmNlIGNoZWNraW5nXG4gICAgZnVuY3Rpb24gZ2V0QnVuZGxlZEZpbGVOYW1lKGZpbGVuYW1lKSB7XG4gICAgICAgIHZhciBpZHggPSBmaWxlbmFtZS5sYXN0SW5kZXhPZihcImdvb2dsZS9wcm90b2J1Zi9cIik7XG4gICAgICAgIGlmIChpZHggPiAtMSkge1xuICAgICAgICAgICAgdmFyIGFsdG5hbWUgPSBmaWxlbmFtZS5zdWJzdHJpbmcoaWR4KTtcbiAgICAgICAgICAgIGlmIChhbHRuYW1lIGluIGNvbW1vbikgcmV0dXJuIGFsdG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gUHJvY2Vzc2VzIGEgc2luZ2xlIGZpbGVcbiAgICBmdW5jdGlvbiBwcm9jZXNzKGZpbGVuYW1lLCBzb3VyY2UpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh1dGlsLmlzU3RyaW5nKHNvdXJjZSkgJiYgc291cmNlLmNoYXJBdCgwKSA9PT0gXCJ7XCIpXG4gICAgICAgICAgICAgICAgc291cmNlID0gSlNPTi5wYXJzZShzb3VyY2UpO1xuICAgICAgICAgICAgaWYgKCF1dGlsLmlzU3RyaW5nKHNvdXJjZSkpXG4gICAgICAgICAgICAgICAgc2VsZi5zZXRPcHRpb25zKHNvdXJjZS5vcHRpb25zKS5hZGRKU09OKHNvdXJjZS5uZXN0ZWQpO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyc2UuZmlsZW5hbWUgPSBmaWxlbmFtZTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyc2VkID0gcGFyc2Uoc291cmNlLCBzZWxmLCBvcHRpb25zKSxcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWQsXG4gICAgICAgICAgICAgICAgICAgIGkgPSAwO1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQuaW1wb3J0cylcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IGkgPCBwYXJzZWQuaW1wb3J0cy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlZCA9IGdldEJ1bmRsZWRGaWxlTmFtZShwYXJzZWQuaW1wb3J0c1tpXSkgfHwgc2VsZi5yZXNvbHZlUGF0aChmaWxlbmFtZSwgcGFyc2VkLmltcG9ydHNbaV0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoKHJlc29sdmVkKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkLndlYWtJbXBvcnRzKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFyc2VkLndlYWtJbXBvcnRzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc29sdmVkID0gZ2V0QnVuZGxlZEZpbGVOYW1lKHBhcnNlZC53ZWFrSW1wb3J0c1tpXSkgfHwgc2VsZi5yZXNvbHZlUGF0aChmaWxlbmFtZSwgcGFyc2VkLndlYWtJbXBvcnRzW2ldKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZXRjaChyZXNvbHZlZCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZmluaXNoKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzeW5jICYmICFxdWV1ZWQpXG4gICAgICAgICAgICBmaW5pc2gobnVsbCwgc2VsZik7IC8vIG9ubHkgb25jZSBhbnl3YXlcbiAgICB9XG5cbiAgICAvLyBGZXRjaGVzIGEgc2luZ2xlIGZpbGVcbiAgICBmdW5jdGlvbiBmZXRjaChmaWxlbmFtZSwgd2Vhaykge1xuXG4gICAgICAgIC8vIFNraXAgaWYgYWxyZWFkeSBsb2FkZWQgLyBhdHRlbXB0ZWRcbiAgICAgICAgaWYgKHNlbGYuZmlsZXMuaW5kZXhPZihmaWxlbmFtZSkgPiAtMSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgc2VsZi5maWxlcy5wdXNoKGZpbGVuYW1lKTtcblxuICAgICAgICAvLyBTaG9ydGN1dCBidW5kbGVkIGRlZmluaXRpb25zXG4gICAgICAgIGlmIChmaWxlbmFtZSBpbiBjb21tb24pIHtcbiAgICAgICAgICAgIGlmIChzeW5jKVxuICAgICAgICAgICAgICAgIHByb2Nlc3MoZmlsZW5hbWUsIGNvbW1vbltmaWxlbmFtZV0pO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgKytxdWV1ZWQ7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgLS1xdWV1ZWQ7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3MoZmlsZW5hbWUsIGNvbW1vbltmaWxlbmFtZV0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlIGZldGNoIGZyb20gZGlzayBvciBuZXR3b3JrXG4gICAgICAgIGlmIChzeW5jKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSB1dGlsLmZzLnJlYWRGaWxlU3luYyhmaWxlbmFtZSkudG9TdHJpbmcoXCJ1dGY4XCIpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF3ZWFrKVxuICAgICAgICAgICAgICAgICAgICBmaW5pc2goZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm9jZXNzKGZpbGVuYW1lLCBzb3VyY2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgKytxdWV1ZWQ7XG4gICAgICAgICAgICBzZWxmLmZldGNoKGZpbGVuYW1lLCBmdW5jdGlvbihlcnIsIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIC0tcXVldWVkO1xuICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICAgIGlmICghY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gdGVybWluYXRlZCBtZWFud2hpbGVcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICAgICAgICAgIGlmICghd2VhaylcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaChlcnIpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICghcXVldWVkKSAvLyBjYW4ndCBiZSBjb3ZlcmVkIHJlbGlhYmx5XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2gobnVsbCwgc2VsZik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJvY2VzcyhmaWxlbmFtZSwgc291cmNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBxdWV1ZWQgPSAwO1xuXG4gICAgLy8gQXNzZW1ibGluZyB0aGUgcm9vdCBuYW1lc3BhY2UgZG9lc24ndCByZXF1aXJlIHdvcmtpbmcgdHlwZVxuICAgIC8vIHJlZmVyZW5jZXMgYW55bW9yZSwgc28gd2UgY2FuIGxvYWQgZXZlcnl0aGluZyBpbiBwYXJhbGxlbFxuICAgIGlmICh1dGlsLmlzU3RyaW5nKGZpbGVuYW1lKSlcbiAgICAgICAgZmlsZW5hbWUgPSBbIGZpbGVuYW1lIF07XG4gICAgZm9yICh2YXIgaSA9IDAsIHJlc29sdmVkOyBpIDwgZmlsZW5hbWUubGVuZ3RoOyArK2kpXG4gICAgICAgIGlmIChyZXNvbHZlZCA9IHNlbGYucmVzb2x2ZVBhdGgoXCJcIiwgZmlsZW5hbWVbaV0pKVxuICAgICAgICAgICAgZmV0Y2gocmVzb2x2ZWQpO1xuXG4gICAgaWYgKHN5bmMpXG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgIGlmICghcXVldWVkKVxuICAgICAgICBmaW5pc2gobnVsbCwgc2VsZik7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG4vLyBmdW5jdGlvbiBsb2FkKGZpbGVuYW1lOnN0cmluZywgb3B0aW9uczpJUGFyc2VPcHRpb25zLCBjYWxsYmFjazpMb2FkQ2FsbGJhY2spOnVuZGVmaW5lZFxuXG4vKipcbiAqIExvYWRzIG9uZSBvciBtdWx0aXBsZSAucHJvdG8gb3IgcHJlcHJvY2Vzc2VkIC5qc29uIGZpbGVzIGludG8gdGhpcyByb290IG5hbWVzcGFjZSBhbmQgY2FsbHMgdGhlIGNhbGxiYWNrLlxuICogQGZ1bmN0aW9uIFJvb3QjbG9hZFxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IGZpbGVuYW1lIE5hbWVzIG9mIG9uZSBvciBtdWx0aXBsZSBmaWxlcyB0byBsb2FkXG4gKiBAcGFyYW0ge0xvYWRDYWxsYmFja30gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiBAdmFyaWF0aW9uIDJcbiAqL1xuLy8gZnVuY3Rpb24gbG9hZChmaWxlbmFtZTpzdHJpbmcsIGNhbGxiYWNrOkxvYWRDYWxsYmFjayk6dW5kZWZpbmVkXG5cbi8qKlxuICogTG9hZHMgb25lIG9yIG11bHRpcGxlIC5wcm90byBvciBwcmVwcm9jZXNzZWQgLmpzb24gZmlsZXMgaW50byB0aGlzIHJvb3QgbmFtZXNwYWNlIGFuZCByZXR1cm5zIGEgcHJvbWlzZS5cbiAqIEBmdW5jdGlvbiBSb290I2xvYWRcbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBmaWxlbmFtZSBOYW1lcyBvZiBvbmUgb3IgbXVsdGlwbGUgZmlsZXMgdG8gbG9hZFxuICogQHBhcmFtIHtJUGFyc2VPcHRpb25zfSBbb3B0aW9uc10gUGFyc2Ugb3B0aW9ucy4gRGVmYXVsdHMgdG8ge0BsaW5rIHBhcnNlLmRlZmF1bHRzfSB3aGVuIG9taXR0ZWQuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxSb290Pn0gUHJvbWlzZVxuICogQHZhcmlhdGlvbiAzXG4gKi9cbi8vIGZ1bmN0aW9uIGxvYWQoZmlsZW5hbWU6c3RyaW5nLCBbb3B0aW9uczpJUGFyc2VPcHRpb25zXSk6UHJvbWlzZTxSb290PlxuXG4vKipcbiAqIFN5bmNocm9ub3VzbHkgbG9hZHMgb25lIG9yIG11bHRpcGxlIC5wcm90byBvciBwcmVwcm9jZXNzZWQgLmpzb24gZmlsZXMgaW50byB0aGlzIHJvb3QgbmFtZXNwYWNlIChub2RlIG9ubHkpLlxuICogQGZ1bmN0aW9uIFJvb3QjbG9hZFN5bmNcbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBmaWxlbmFtZSBOYW1lcyBvZiBvbmUgb3IgbXVsdGlwbGUgZmlsZXMgdG8gbG9hZFxuICogQHBhcmFtIHtJUGFyc2VPcHRpb25zfSBbb3B0aW9uc10gUGFyc2Ugb3B0aW9ucy4gRGVmYXVsdHMgdG8ge0BsaW5rIHBhcnNlLmRlZmF1bHRzfSB3aGVuIG9taXR0ZWQuXG4gKiBAcmV0dXJucyB7Um9vdH0gUm9vdCBuYW1lc3BhY2VcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBzeW5jaHJvbm91cyBmZXRjaGluZyBpcyBub3Qgc3VwcG9ydGVkIChpLmUuIGluIGJyb3dzZXJzKSBvciBpZiBhIGZpbGUncyBzeW50YXggaXMgaW52YWxpZFxuICovXG5Sb290LnByb3RvdHlwZS5sb2FkU3luYyA9IGZ1bmN0aW9uIGxvYWRTeW5jKGZpbGVuYW1lLCBvcHRpb25zKSB7XG4gICAgaWYgKCF1dGlsLmlzTm9kZSlcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJub3Qgc3VwcG9ydGVkXCIpO1xuICAgIHJldHVybiB0aGlzLmxvYWQoZmlsZW5hbWUsIG9wdGlvbnMsIFNZTkMpO1xufTtcblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuUm9vdC5wcm90b3R5cGUucmVzb2x2ZUFsbCA9IGZ1bmN0aW9uIHJlc29sdmVBbGwoKSB7XG4gICAgaWYgKHRoaXMuZGVmZXJyZWQubGVuZ3RoKVxuICAgICAgICB0aHJvdyBFcnJvcihcInVucmVzb2x2YWJsZSBleHRlbnNpb25zOiBcIiArIHRoaXMuZGVmZXJyZWQubWFwKGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgICAgICAgICByZXR1cm4gXCInZXh0ZW5kIFwiICsgZmllbGQuZXh0ZW5kICsgXCInIGluIFwiICsgZmllbGQucGFyZW50LmZ1bGxOYW1lO1xuICAgICAgICB9KS5qb2luKFwiLCBcIikpO1xuICAgIHJldHVybiBOYW1lc3BhY2UucHJvdG90eXBlLnJlc29sdmVBbGwuY2FsbCh0aGlzKTtcbn07XG5cbi8vIG9ubHkgdXBwZXJjYXNlZCAoYW5kIHRodXMgY29uZmxpY3QtZnJlZSkgY2hpbGRyZW4gYXJlIGV4cG9zZWQsIHNlZSBiZWxvd1xudmFyIGV4cG9zZVJlID0gL15bQS1aXS87XG5cbi8qKlxuICogSGFuZGxlcyBhIGRlZmVycmVkIGRlY2xhcmluZyBleHRlbnNpb24gZmllbGQgYnkgY3JlYXRpbmcgYSBzaXN0ZXIgZmllbGQgdG8gcmVwcmVzZW50IGl0IHdpdGhpbiBpdHMgZXh0ZW5kZWQgdHlwZS5cbiAqIEBwYXJhbSB7Um9vdH0gcm9vdCBSb290IGluc3RhbmNlXG4gKiBAcGFyYW0ge0ZpZWxkfSBmaWVsZCBEZWNsYXJpbmcgZXh0ZW5zaW9uIGZpZWxkIHdpdGluIHRoZSBkZWNsYXJpbmcgdHlwZVxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiBzdWNjZXNzZnVsbHkgYWRkZWQgdG8gdGhlIGV4dGVuZGVkIHR5cGUsIGBmYWxzZWAgb3RoZXJ3aXNlXG4gKiBAaW5uZXJcbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gdHJ5SGFuZGxlRXh0ZW5zaW9uKHJvb3QsIGZpZWxkKSB7XG4gICAgdmFyIGV4dGVuZGVkVHlwZSA9IGZpZWxkLnBhcmVudC5sb29rdXAoZmllbGQuZXh0ZW5kKTtcbiAgICBpZiAoZXh0ZW5kZWRUeXBlKSB7XG4gICAgICAgIHZhciBzaXN0ZXJGaWVsZCA9IG5ldyBGaWVsZChmaWVsZC5mdWxsTmFtZSwgZmllbGQuaWQsIGZpZWxkLnR5cGUsIGZpZWxkLnJ1bGUsIHVuZGVmaW5lZCwgZmllbGQub3B0aW9ucyk7XG4gICAgICAgIHNpc3RlckZpZWxkLmRlY2xhcmluZ0ZpZWxkID0gZmllbGQ7XG4gICAgICAgIGZpZWxkLmV4dGVuc2lvbkZpZWxkID0gc2lzdGVyRmllbGQ7XG4gICAgICAgIGV4dGVuZGVkVHlwZS5hZGQoc2lzdGVyRmllbGQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENhbGxlZCB3aGVuIGFueSBvYmplY3QgaXMgYWRkZWQgdG8gdGhpcyByb290IG9yIGl0cyBzdWItbmFtZXNwYWNlcy5cbiAqIEBwYXJhbSB7UmVmbGVjdGlvbk9iamVjdH0gb2JqZWN0IE9iamVjdCBhZGRlZFxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqIEBwcml2YXRlXG4gKi9cblJvb3QucHJvdG90eXBlLl9oYW5kbGVBZGQgPSBmdW5jdGlvbiBfaGFuZGxlQWRkKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBGaWVsZCkge1xuXG4gICAgICAgIGlmICgvKiBhbiBleHRlbnNpb24gZmllbGQgKGltcGxpZXMgbm90IHBhcnQgb2YgYSBvbmVvZikgKi8gb2JqZWN0LmV4dGVuZCAhPT0gdW5kZWZpbmVkICYmIC8qIG5vdCBhbHJlYWR5IGhhbmRsZWQgKi8gIW9iamVjdC5leHRlbnNpb25GaWVsZClcbiAgICAgICAgICAgIGlmICghdHJ5SGFuZGxlRXh0ZW5zaW9uKHRoaXMsIG9iamVjdCkpXG4gICAgICAgICAgICAgICAgdGhpcy5kZWZlcnJlZC5wdXNoKG9iamVjdCk7XG5cbiAgICB9IGVsc2UgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEVudW0pIHtcblxuICAgICAgICBpZiAoZXhwb3NlUmUudGVzdChvYmplY3QubmFtZSkpXG4gICAgICAgICAgICBvYmplY3QucGFyZW50W29iamVjdC5uYW1lXSA9IG9iamVjdC52YWx1ZXM7IC8vIGV4cG9zZSBlbnVtIHZhbHVlcyBhcyBwcm9wZXJ0eSBvZiBpdHMgcGFyZW50XG5cbiAgICB9IGVsc2UgaWYgKCEob2JqZWN0IGluc3RhbmNlb2YgT25lT2YpKSAvKiBldmVyeXRoaW5nIGVsc2UgaXMgYSBuYW1lc3BhY2UgKi8ge1xuXG4gICAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBUeXBlKSAvLyBUcnkgdG8gaGFuZGxlIGFueSBkZWZlcnJlZCBleHRlbnNpb25zXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZGVmZXJyZWQubGVuZ3RoOylcbiAgICAgICAgICAgICAgICBpZiAodHJ5SGFuZGxlRXh0ZW5zaW9uKHRoaXMsIHRoaXMuZGVmZXJyZWRbaV0pKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmVycmVkLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICsraTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAvKiBpbml0aWFsaXplcyAqLyBvYmplY3QubmVzdGVkQXJyYXkubGVuZ3RoOyArK2opIC8vIHJlY3Vyc2UgaW50byB0aGUgbmFtZXNwYWNlXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVBZGQob2JqZWN0Ll9uZXN0ZWRBcnJheVtqXSk7XG4gICAgICAgIGlmIChleHBvc2VSZS50ZXN0KG9iamVjdC5uYW1lKSlcbiAgICAgICAgICAgIG9iamVjdC5wYXJlbnRbb2JqZWN0Lm5hbWVdID0gb2JqZWN0OyAvLyBleHBvc2UgbmFtZXNwYWNlIGFzIHByb3BlcnR5IG9mIGl0cyBwYXJlbnRcbiAgICB9XG5cbiAgICAvLyBUaGUgYWJvdmUgYWxzbyBhZGRzIHVwcGVyY2FzZWQgKGFuZCB0aHVzIGNvbmZsaWN0LWZyZWUpIG5lc3RlZCB0eXBlcywgc2VydmljZXMgYW5kIGVudW1zIGFzXG4gICAgLy8gcHJvcGVydGllcyBvZiBuYW1lc3BhY2VzIGp1c3QgbGlrZSBzdGF0aWMgY29kZSBkb2VzLiBUaGlzIGFsbG93cyB1c2luZyBhIC5kLnRzIGdlbmVyYXRlZCBmb3JcbiAgICAvLyBhIHN0YXRpYyBtb2R1bGUgd2l0aCByZWZsZWN0aW9uLWJhc2VkIHNvbHV0aW9ucyB3aGVyZSB0aGUgY29uZGl0aW9uIGlzIG1ldC5cbn07XG5cbi8qKlxuICogQ2FsbGVkIHdoZW4gYW55IG9iamVjdCBpcyByZW1vdmVkIGZyb20gdGhpcyByb290IG9yIGl0cyBzdWItbmFtZXNwYWNlcy5cbiAqIEBwYXJhbSB7UmVmbGVjdGlvbk9iamVjdH0gb2JqZWN0IE9iamVjdCByZW1vdmVkXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogQHByaXZhdGVcbiAqL1xuUm9vdC5wcm90b3R5cGUuX2hhbmRsZVJlbW92ZSA9IGZ1bmN0aW9uIF9oYW5kbGVSZW1vdmUob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEZpZWxkKSB7XG5cbiAgICAgICAgaWYgKC8qIGFuIGV4dGVuc2lvbiBmaWVsZCAqLyBvYmplY3QuZXh0ZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICgvKiBhbHJlYWR5IGhhbmRsZWQgKi8gb2JqZWN0LmV4dGVuc2lvbkZpZWxkKSB7IC8vIHJlbW92ZSBpdHMgc2lzdGVyIGZpZWxkXG4gICAgICAgICAgICAgICAgb2JqZWN0LmV4dGVuc2lvbkZpZWxkLnBhcmVudC5yZW1vdmUob2JqZWN0LmV4dGVuc2lvbkZpZWxkKTtcbiAgICAgICAgICAgICAgICBvYmplY3QuZXh0ZW5zaW9uRmllbGQgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy8gY2FuY2VsIHRoZSBleHRlbnNpb25cbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmRlZmVycmVkLmluZGV4T2Yob2JqZWN0KTtcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmVycmVkLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAob2JqZWN0IGluc3RhbmNlb2YgRW51bSkge1xuXG4gICAgICAgIGlmIChleHBvc2VSZS50ZXN0KG9iamVjdC5uYW1lKSlcbiAgICAgICAgICAgIGRlbGV0ZSBvYmplY3QucGFyZW50W29iamVjdC5uYW1lXTsgLy8gdW5leHBvc2UgZW51bSB2YWx1ZXNcblxuICAgIH0gZWxzZSBpZiAob2JqZWN0IGluc3RhbmNlb2YgTmFtZXNwYWNlKSB7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAvKiBpbml0aWFsaXplcyAqLyBvYmplY3QubmVzdGVkQXJyYXkubGVuZ3RoOyArK2kpIC8vIHJlY3Vyc2UgaW50byB0aGUgbmFtZXNwYWNlXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVSZW1vdmUob2JqZWN0Ll9uZXN0ZWRBcnJheVtpXSk7XG5cbiAgICAgICAgaWYgKGV4cG9zZVJlLnRlc3Qob2JqZWN0Lm5hbWUpKVxuICAgICAgICAgICAgZGVsZXRlIG9iamVjdC5wYXJlbnRbb2JqZWN0Lm5hbWVdOyAvLyB1bmV4cG9zZSBuYW1lc3BhY2VzXG5cbiAgICB9XG59O1xuXG4vLyBTZXRzIHVwIGN5Y2xpYyBkZXBlbmRlbmNpZXMgKGNhbGxlZCBpbiBpbmRleC1saWdodClcblJvb3QuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uKFR5cGVfLCBwYXJzZV8sIGNvbW1vbl8pIHtcbiAgICBUeXBlICAgPSBUeXBlXztcbiAgICBwYXJzZSAgPSBwYXJzZV87XG4gICAgY29tbW9uID0gY29tbW9uXztcbn07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogVmFyaW91cyB1dGlsaXR5IGZ1bmN0aW9ucy5cbiAqIEBuYW1lc3BhY2VcbiAqL1xudmFyIHV0aWwgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcblxudmFyIHJvb3RzID0gcmVxdWlyZShcIi4vcm9vdHNcIik7XG5cbnZhciBUeXBlLCAvLyBjeWNsaWNcbiAgICBFbnVtO1xuXG51dGlsLmNvZGVnZW4gPSByZXF1aXJlKFwiQHByb3RvYnVmanMvY29kZWdlblwiKTtcbnV0aWwuZmV0Y2ggICA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy9mZXRjaFwiKTtcbnV0aWwucGF0aCAgICA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy9wYXRoXCIpO1xuXG4vKipcbiAqIE5vZGUncyBmcyBtb2R1bGUgaWYgYXZhaWxhYmxlLlxuICogQHR5cGUge09iamVjdC48c3RyaW5nLCo+fVxuICovXG51dGlsLmZzID0gdXRpbC5pbnF1aXJlKFwiZnNcIik7XG5cbi8qKlxuICogQ29udmVydHMgYW4gb2JqZWN0J3MgdmFsdWVzIHRvIGFuIGFycmF5LlxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gb2JqZWN0IE9iamVjdCB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7QXJyYXkuPCo+fSBDb252ZXJ0ZWQgYXJyYXlcbiAqL1xudXRpbC50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheShvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0KSB7XG4gICAgICAgIHZhciBrZXlzICA9IE9iamVjdC5rZXlzKG9iamVjdCksXG4gICAgICAgICAgICBhcnJheSA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGtleXMubGVuZ3RoKVxuICAgICAgICAgICAgYXJyYXlbaW5kZXhdID0gb2JqZWN0W2tleXNbaW5kZXgrK11dO1xuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuICAgIHJldHVybiBbXTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYW4gYXJyYXkgb2Yga2V5cyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSB0aGVpciByZXNwZWN0aXZlIHZhbHVlIHRvIGFuIG9iamVjdCwgb21pdHRpbmcgdW5kZWZpbmVkIHZhbHVlcy5cbiAqIEBwYXJhbSB7QXJyYXkuPCo+fSBhcnJheSBBcnJheSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IENvbnZlcnRlZCBvYmplY3RcbiAqL1xudXRpbC50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KGFycmF5KSB7XG4gICAgdmFyIG9iamVjdCA9IHt9LFxuICAgICAgICBpbmRleCAgPSAwO1xuICAgIHdoaWxlIChpbmRleCA8IGFycmF5Lmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gYXJyYXlbaW5kZXgrK10sXG4gICAgICAgICAgICB2YWwgPSBhcnJheVtpbmRleCsrXTtcbiAgICAgICAgaWYgKHZhbCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgb2JqZWN0W2tleV0gPSB2YWw7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG59O1xuXG52YXIgc2FmZVByb3BCYWNrc2xhc2hSZSA9IC9cXFxcL2csXG4gICAgc2FmZVByb3BRdW90ZVJlICAgICA9IC9cIi9nO1xuXG4vKipcbiAqIFRlc3RzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBuYW1lIGlzIGEgcmVzZXJ2ZWQgd29yZCBpbiBKUy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiByZXNlcnZlZCwgb3RoZXJ3aXNlIGBmYWxzZWBcbiAqL1xudXRpbC5pc1Jlc2VydmVkID0gZnVuY3Rpb24gaXNSZXNlcnZlZChuYW1lKSB7XG4gICAgcmV0dXJuIC9eKD86ZG98aWZ8aW58Zm9yfGxldHxuZXd8dHJ5fHZhcnxjYXNlfGVsc2V8ZW51bXxldmFsfGZhbHNlfG51bGx8dGhpc3x0cnVlfHZvaWR8d2l0aHxicmVha3xjYXRjaHxjbGFzc3xjb25zdHxzdXBlcnx0aHJvd3x3aGlsZXx5aWVsZHxkZWxldGV8ZXhwb3J0fGltcG9ydHxwdWJsaWN8cmV0dXJufHN0YXRpY3xzd2l0Y2h8dHlwZW9mfGRlZmF1bHR8ZXh0ZW5kc3xmaW5hbGx5fHBhY2thZ2V8cHJpdmF0ZXxjb250aW51ZXxkZWJ1Z2dlcnxmdW5jdGlvbnxhcmd1bWVudHN8aW50ZXJmYWNlfHByb3RlY3RlZHxpbXBsZW1lbnRzfGluc3RhbmNlb2YpJC8udGVzdChuYW1lKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIHNhZmUgcHJvcGVydHkgYWNjZXNzb3IgZm9yIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkgbmFtZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFByb3BlcnR5IG5hbWVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFNhZmUgYWNjZXNzb3JcbiAqL1xudXRpbC5zYWZlUHJvcCA9IGZ1bmN0aW9uIHNhZmVQcm9wKHByb3ApIHtcbiAgICBpZiAoIS9eWyRcXHdfXSskLy50ZXN0KHByb3ApIHx8IHV0aWwuaXNSZXNlcnZlZChwcm9wKSlcbiAgICAgICAgcmV0dXJuIFwiW1xcXCJcIiArIHByb3AucmVwbGFjZShzYWZlUHJvcEJhY2tzbGFzaFJlLCBcIlxcXFxcXFxcXCIpLnJlcGxhY2Uoc2FmZVByb3BRdW90ZVJlLCBcIlxcXFxcXFwiXCIpICsgXCJcXFwiXVwiO1xuICAgIHJldHVybiBcIi5cIiArIHByb3A7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYSBzdHJpbmcgdG8gdXBwZXIgY2FzZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IENvbnZlcnRlZCBzdHJpbmdcbiAqL1xudXRpbC51Y0ZpcnN0ID0gZnVuY3Rpb24gdWNGaXJzdChzdHIpIHtcbiAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnN1YnN0cmluZygxKTtcbn07XG5cbnZhciBjYW1lbENhc2VSZSA9IC9fKFthLXpdKS9nO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIHRvIGNhbWVsIGNhc2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7c3RyaW5nfSBDb252ZXJ0ZWQgc3RyaW5nXG4gKi9cbnV0aWwuY2FtZWxDYXNlID0gZnVuY3Rpb24gY2FtZWxDYXNlKHN0cikge1xuICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKDAsIDEpXG4gICAgICAgICArIHN0ci5zdWJzdHJpbmcoMSlcbiAgICAgICAgICAgICAgIC5yZXBsYWNlKGNhbWVsQ2FzZVJlLCBmdW5jdGlvbigkMCwgJDEpIHsgcmV0dXJuICQxLnRvVXBwZXJDYXNlKCk7IH0pO1xufTtcblxuLyoqXG4gKiBDb21wYXJlcyByZWZsZWN0ZWQgZmllbGRzIGJ5IGlkLlxuICogQHBhcmFtIHtGaWVsZH0gYSBGaXJzdCBmaWVsZFxuICogQHBhcmFtIHtGaWVsZH0gYiBTZWNvbmQgZmllbGRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IENvbXBhcmlzb24gdmFsdWVcbiAqL1xudXRpbC5jb21wYXJlRmllbGRzQnlJZCA9IGZ1bmN0aW9uIGNvbXBhcmVGaWVsZHNCeUlkKGEsIGIpIHtcbiAgICByZXR1cm4gYS5pZCAtIGIuaWQ7XG59O1xuXG4vKipcbiAqIERlY29yYXRvciBoZWxwZXIgZm9yIHR5cGVzIChUeXBlU2NyaXB0KS5cbiAqIEBwYXJhbSB7Q29uc3RydWN0b3I8VD59IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBbdHlwZU5hbWVdIFR5cGUgbmFtZSwgZGVmYXVsdHMgdG8gdGhlIGNvbnN0cnVjdG9yJ3MgbmFtZVxuICogQHJldHVybnMge1R5cGV9IFJlZmxlY3RlZCB0eXBlXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIE1lc3NhZ2U8VD5cbiAqIEBwcm9wZXJ0eSB7Um9vdH0gcm9vdCBEZWNvcmF0b3JzIHJvb3RcbiAqL1xudXRpbC5kZWNvcmF0ZVR5cGUgPSBmdW5jdGlvbiBkZWNvcmF0ZVR5cGUoY3RvciwgdHlwZU5hbWUpIHtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChjdG9yLiR0eXBlKSB7XG4gICAgICAgIGlmICh0eXBlTmFtZSAmJiBjdG9yLiR0eXBlLm5hbWUgIT09IHR5cGVOYW1lKSB7XG4gICAgICAgICAgICB1dGlsLmRlY29yYXRlUm9vdC5yZW1vdmUoY3Rvci4kdHlwZSk7XG4gICAgICAgICAgICBjdG9yLiR0eXBlLm5hbWUgPSB0eXBlTmFtZTtcbiAgICAgICAgICAgIHV0aWwuZGVjb3JhdGVSb290LmFkZChjdG9yLiR0eXBlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3Rvci4kdHlwZTtcbiAgICB9XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICghVHlwZSlcbiAgICAgICAgVHlwZSA9IHJlcXVpcmUoXCIuL3R5cGVcIik7XG5cbiAgICB2YXIgdHlwZSA9IG5ldyBUeXBlKHR5cGVOYW1lIHx8IGN0b3IubmFtZSk7XG4gICAgdXRpbC5kZWNvcmF0ZVJvb3QuYWRkKHR5cGUpO1xuICAgIHR5cGUuY3RvciA9IGN0b3I7IC8vIHNldHMgdXAgLmVuY29kZSwgLmRlY29kZSBldGMuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0b3IsIFwiJHR5cGVcIiwgeyB2YWx1ZTogdHlwZSwgZW51bWVyYWJsZTogZmFsc2UgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0b3IucHJvdG90eXBlLCBcIiR0eXBlXCIsIHsgdmFsdWU6IHR5cGUsIGVudW1lcmFibGU6IGZhbHNlIH0pO1xuICAgIHJldHVybiB0eXBlO1xufTtcblxudmFyIGRlY29yYXRlRW51bUluZGV4ID0gMDtcblxuLyoqXG4gKiBEZWNvcmF0b3IgaGVscGVyIGZvciBlbnVtcyAoVHlwZVNjcmlwdCkuXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IEVudW0gb2JqZWN0XG4gKiBAcmV0dXJucyB7RW51bX0gUmVmbGVjdGVkIGVudW1cbiAqL1xudXRpbC5kZWNvcmF0ZUVudW0gPSBmdW5jdGlvbiBkZWNvcmF0ZUVudW0ob2JqZWN0KSB7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAob2JqZWN0LiR0eXBlKVxuICAgICAgICByZXR1cm4gb2JqZWN0LiR0eXBlO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBpZiAoIUVudW0pXG4gICAgICAgIEVudW0gPSByZXF1aXJlKFwiLi9lbnVtXCIpO1xuXG4gICAgdmFyIGVubSA9IG5ldyBFbnVtKFwiRW51bVwiICsgZGVjb3JhdGVFbnVtSW5kZXgrKywgb2JqZWN0KTtcbiAgICB1dGlsLmRlY29yYXRlUm9vdC5hZGQoZW5tKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBcIiR0eXBlXCIsIHsgdmFsdWU6IGVubSwgZW51bWVyYWJsZTogZmFsc2UgfSk7XG4gICAgcmV0dXJuIGVubTtcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGJ5IHByb3BlcnR5IHBhdGguIElmIGEgdmFsdWUgYWxyZWFkeSBleGlzdHMsIGl0IGlzIHR1cm5lZCB0byBhbiBhcnJheVxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZHN0IERlc3RpbmF0aW9uIG9iamVjdFxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggZG90ICcuJyBkZWxpbWl0ZWQgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0XG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWUgdGhlIHZhbHVlIHRvIHNldFxuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBEZXN0aW5hdGlvbiBvYmplY3RcbiAqL1xudXRpbC5zZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIHNldFByb3BlcnR5KGRzdCwgcGF0aCwgdmFsdWUpIHtcbiAgICBmdW5jdGlvbiBzZXRQcm9wKGRzdCwgcGF0aCwgdmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnQgPSBwYXRoLnNoaWZ0KCk7XG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGRzdFtwYXJ0XSA9IHNldFByb3AoZHN0W3BhcnRdIHx8IHt9LCBwYXRoLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcHJldlZhbHVlID0gZHN0W3BhcnRdO1xuICAgICAgICAgICAgaWYgKHByZXZWYWx1ZSlcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IFtdLmNvbmNhdChwcmV2VmFsdWUpLmNvbmNhdCh2YWx1ZSk7XG4gICAgICAgICAgICBkc3RbcGFydF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZHN0O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZHN0ICE9PSBcIm9iamVjdFwiKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJkc3QgbXVzdCBiZSBhbiBvYmplY3RcIik7XG4gICAgaWYgKCFwYXRoKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJwYXRoIG11c3QgYmUgc3BlY2lmaWVkXCIpO1xuXG4gICAgcGF0aCA9IHBhdGguc3BsaXQoXCIuXCIpO1xuICAgIHJldHVybiBzZXRQcm9wKGRzdCwgcGF0aCwgdmFsdWUpO1xufTtcblxuLyoqXG4gKiBEZWNvcmF0b3Igcm9vdCAoVHlwZVNjcmlwdCkuXG4gKiBAbmFtZSB1dGlsLmRlY29yYXRlUm9vdFxuICogQHR5cGUge1Jvb3R9XG4gKiBAcmVhZG9ubHlcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHV0aWwsIFwiZGVjb3JhdGVSb290XCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcm9vdHNbXCJkZWNvcmF0ZWRcIl0gfHwgKHJvb3RzW1wiZGVjb3JhdGVkXCJdID0gbmV3IChyZXF1aXJlKFwiLi9yb290XCIpKSgpKTtcbiAgICB9XG59KTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdGlvbk9iamVjdDtcblxuUmVmbGVjdGlvbk9iamVjdC5jbGFzc05hbWUgPSBcIlJlZmxlY3Rpb25PYmplY3RcIjtcblxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXG52YXIgUm9vdDsgLy8gY3ljbGljXG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyByZWZsZWN0aW9uIG9iamVjdCBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgQmFzZSBjbGFzcyBvZiBhbGwgcmVmbGVjdGlvbiBvYmplY3RzLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBPYmplY3QgbmFtZVxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIERlY2xhcmVkIG9wdGlvbnNcbiAqIEBhYnN0cmFjdFxuICovXG5mdW5jdGlvbiBSZWZsZWN0aW9uT2JqZWN0KG5hbWUsIG9wdGlvbnMpIHtcblxuICAgIGlmICghdXRpbC5pc1N0cmluZyhuYW1lKSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwibmFtZSBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuXG4gICAgaWYgKG9wdGlvbnMgJiYgIXV0aWwuaXNPYmplY3Qob3B0aW9ucykpXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcIm9wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3RcIik7XG5cbiAgICAvKipcbiAgICAgKiBPcHRpb25zLlxuICAgICAqIEB0eXBlIHtPYmplY3QuPHN0cmluZywqPnx1bmRlZmluZWR9XG4gICAgICovXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczsgLy8gdG9KU09OXG5cbiAgICAvKipcbiAgICAgKiBQYXJzZWQgT3B0aW9ucy5cbiAgICAgKiBAdHlwZSB7QXJyYXkuPE9iamVjdC48c3RyaW5nLCo+Pnx1bmRlZmluZWR9XG4gICAgICovXG4gICAgdGhpcy5wYXJzZWRPcHRpb25zID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFVuaXF1ZSBuYW1lIHdpdGhpbiBpdHMgbmFtZXNwYWNlLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcblxuICAgIC8qKlxuICAgICAqIFBhcmVudCBuYW1lc3BhY2UuXG4gICAgICogQHR5cGUge05hbWVzcGFjZXxudWxsfVxuICAgICAqL1xuICAgIHRoaXMucGFyZW50ID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgYWxyZWFkeSByZXNvbHZlZCBvciBub3QuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5yZXNvbHZlZCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ29tbWVudCB0ZXh0LCBpZiBhbnkuXG4gICAgICogQHR5cGUge3N0cmluZ3xudWxsfVxuICAgICAqL1xuICAgIHRoaXMuY29tbWVudCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBEZWZpbmluZyBmaWxlIG5hbWUuXG4gICAgICogQHR5cGUge3N0cmluZ3xudWxsfVxuICAgICAqL1xuICAgIHRoaXMuZmlsZW5hbWUgPSBudWxsO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhSZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZSwge1xuXG4gICAgLyoqXG4gICAgICogUmVmZXJlbmNlIHRvIHRoZSByb290IG5hbWVzcGFjZS5cbiAgICAgKiBAbmFtZSBSZWZsZWN0aW9uT2JqZWN0I3Jvb3RcbiAgICAgKiBAdHlwZSB7Um9vdH1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICByb290OiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcHRyID0gdGhpcztcbiAgICAgICAgICAgIHdoaWxlIChwdHIucGFyZW50ICE9PSBudWxsKVxuICAgICAgICAgICAgICAgIHB0ciA9IHB0ci5wYXJlbnQ7XG4gICAgICAgICAgICByZXR1cm4gcHRyO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZ1bGwgbmFtZSBpbmNsdWRpbmcgbGVhZGluZyBkb3QuXG4gICAgICogQG5hbWUgUmVmbGVjdGlvbk9iamVjdCNmdWxsTmFtZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgZnVsbE5hbWU6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBwYXRoID0gWyB0aGlzLm5hbWUgXSxcbiAgICAgICAgICAgICAgICBwdHIgPSB0aGlzLnBhcmVudDtcbiAgICAgICAgICAgIHdoaWxlIChwdHIpIHtcbiAgICAgICAgICAgICAgICBwYXRoLnVuc2hpZnQocHRyLm5hbWUpO1xuICAgICAgICAgICAgICAgIHB0ciA9IHB0ci5wYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGF0aC5qb2luKFwiLlwiKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoaXMgcmVmbGVjdGlvbiBvYmplY3QgdG8gaXRzIGRlc2NyaXB0b3IgcmVwcmVzZW50YXRpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IERlc2NyaXB0b3JcbiAqIEBhYnN0cmFjdFxuICovXG5SZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZS50b0pTT04gPSAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgdGhyb3cgRXJyb3IoKTsgLy8gbm90IGltcGxlbWVudGVkLCBzaG91bGRuJ3QgaGFwcGVuXG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIHRoaXMgb2JqZWN0IGlzIGFkZGVkIHRvIGEgcGFyZW50LlxuICogQHBhcmFtIHtSZWZsZWN0aW9uT2JqZWN0fSBwYXJlbnQgUGFyZW50IGFkZGVkIHRvXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5SZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZS5vbkFkZCA9IGZ1bmN0aW9uIG9uQWRkKHBhcmVudCkge1xuICAgIGlmICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudCAhPT0gcGFyZW50KVxuICAgICAgICB0aGlzLnBhcmVudC5yZW1vdmUodGhpcyk7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5yZXNvbHZlZCA9IGZhbHNlO1xuICAgIHZhciByb290ID0gcGFyZW50LnJvb3Q7XG4gICAgaWYgKHJvb3QgaW5zdGFuY2VvZiBSb290KVxuICAgICAgICByb290Ll9oYW5kbGVBZGQodGhpcyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIHRoaXMgb2JqZWN0IGlzIHJlbW92ZWQgZnJvbSBhIHBhcmVudC5cbiAqIEBwYXJhbSB7UmVmbGVjdGlvbk9iamVjdH0gcGFyZW50IFBhcmVudCByZW1vdmVkIGZyb21cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cblJlZmxlY3Rpb25PYmplY3QucHJvdG90eXBlLm9uUmVtb3ZlID0gZnVuY3Rpb24gb25SZW1vdmUocGFyZW50KSB7XG4gICAgdmFyIHJvb3QgPSBwYXJlbnQucm9vdDtcbiAgICBpZiAocm9vdCBpbnN0YW5jZW9mIFJvb3QpXG4gICAgICAgIHJvb3QuX2hhbmRsZVJlbW92ZSh0aGlzKTtcbiAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgdGhpcy5yZXNvbHZlZCA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBSZXNvbHZlcyB0aGlzIG9iamVjdHMgdHlwZSByZWZlcmVuY2VzLlxuICogQHJldHVybnMge1JlZmxlY3Rpb25PYmplY3R9IGB0aGlzYFxuICovXG5SZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSgpIHtcbiAgICBpZiAodGhpcy5yZXNvbHZlZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgaWYgKHRoaXMucm9vdCBpbnN0YW5jZW9mIFJvb3QpXG4gICAgICAgIHRoaXMucmVzb2x2ZWQgPSB0cnVlOyAvLyBvbmx5IGlmIHBhcnQgb2YgYSByb290XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEdldHMgYW4gb3B0aW9uIHZhbHVlLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgT3B0aW9uIG5hbWVcbiAqIEByZXR1cm5zIHsqfSBPcHRpb24gdmFsdWUgb3IgYHVuZGVmaW5lZGAgaWYgbm90IHNldFxuICovXG5SZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZS5nZXRPcHRpb24gPSBmdW5jdGlvbiBnZXRPcHRpb24obmFtZSkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMpXG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbbmFtZV07XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbi8qKlxuICogU2V0cyBhbiBvcHRpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBPcHRpb24gbmFtZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBPcHRpb24gdmFsdWVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lmTm90U2V0XSBTZXRzIHRoZSBvcHRpb24gb25seSBpZiBpdCBpc24ndCBjdXJyZW50bHkgc2V0XG4gKiBAcmV0dXJucyB7UmVmbGVjdGlvbk9iamVjdH0gYHRoaXNgXG4gKi9cblJlZmxlY3Rpb25PYmplY3QucHJvdG90eXBlLnNldE9wdGlvbiA9IGZ1bmN0aW9uIHNldE9wdGlvbihuYW1lLCB2YWx1ZSwgaWZOb3RTZXQpIHtcbiAgICBpZiAoIWlmTm90U2V0IHx8ICF0aGlzLm9wdGlvbnMgfHwgdGhpcy5vcHRpb25zW25hbWVdID09PSB1bmRlZmluZWQpXG4gICAgICAgICh0aGlzLm9wdGlvbnMgfHwgKHRoaXMub3B0aW9ucyA9IHt9KSlbbmFtZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyBhIHBhcnNlZCBvcHRpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBwYXJzZWQgT3B0aW9uIG5hbWVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgT3B0aW9uIHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcE5hbWUgZG90ICcuJyBkZWxpbWl0ZWQgZnVsbCBwYXRoIG9mIHByb3BlcnR5IHdpdGhpbiB0aGUgb3B0aW9uIHRvIHNldC4gaWYgdW5kZWZpbmVkXFxlbXB0eSwgd2lsbCBhZGQgYSBuZXcgb3B0aW9uIHdpdGggdGhhdCB2YWx1ZVxuICogQHJldHVybnMge1JlZmxlY3Rpb25PYmplY3R9IGB0aGlzYFxuICovXG5SZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZS5zZXRQYXJzZWRPcHRpb24gPSBmdW5jdGlvbiBzZXRQYXJzZWRPcHRpb24obmFtZSwgdmFsdWUsIHByb3BOYW1lKSB7XG4gICAgaWYgKCF0aGlzLnBhcnNlZE9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5wYXJzZWRPcHRpb25zID0gW107XG4gICAgfVxuICAgIHZhciBwYXJzZWRPcHRpb25zID0gdGhpcy5wYXJzZWRPcHRpb25zO1xuICAgIGlmIChwcm9wTmFtZSkge1xuICAgICAgICAvLyBJZiBzZXR0aW5nIGEgc3ViIHByb3BlcnR5IG9mIGFuIG9wdGlvbiB0aGVuIHRyeSB0byBtZXJnZSBpdFxuICAgICAgICAvLyB3aXRoIGFuIGV4aXN0aW5nIG9wdGlvblxuICAgICAgICB2YXIgb3B0ID0gcGFyc2VkT3B0aW9ucy5maW5kKGZ1bmN0aW9uIChvcHQpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3B0LCBuYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChvcHQpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGZvdW5kIGFuIGV4aXN0aW5nIG9wdGlvbiAtIGp1c3QgbWVyZ2UgdGhlIHByb3BlcnR5IHZhbHVlXG4gICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBvcHRbbmFtZV07XG4gICAgICAgICAgICB1dGlsLnNldFByb3BlcnR5KG5ld1ZhbHVlLCBwcm9wTmFtZSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlLCBjcmVhdGUgYSBuZXcgb3B0aW9uLCBzZXQgaXQncyBwcm9wZXJ0eSBhbmQgYWRkIGl0IHRvIHRoZSBsaXN0XG4gICAgICAgICAgICBvcHQgPSB7fTtcbiAgICAgICAgICAgIG9wdFtuYW1lXSA9IHV0aWwuc2V0UHJvcGVydHkoe30sIHByb3BOYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICBwYXJzZWRPcHRpb25zLnB1c2gob3B0KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEFsd2F5cyBjcmVhdGUgYSBuZXcgb3B0aW9uIHdoZW4gc2V0dGluZyB0aGUgdmFsdWUgb2YgdGhlIG9wdGlvbiBpdHNlbGZcbiAgICAgICAgdmFyIG5ld09wdCA9IHt9O1xuICAgICAgICBuZXdPcHRbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgcGFyc2VkT3B0aW9ucy5wdXNoKG5ld09wdCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIG11bHRpcGxlIG9wdGlvbnMuXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBvcHRpb25zIE9wdGlvbnMgdG8gc2V0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpZk5vdFNldF0gU2V0cyBhbiBvcHRpb24gb25seSBpZiBpdCBpc24ndCBjdXJyZW50bHkgc2V0XG4gKiBAcmV0dXJucyB7UmVmbGVjdGlvbk9iamVjdH0gYHRoaXNgXG4gKi9cblJlZmxlY3Rpb25PYmplY3QucHJvdG90eXBlLnNldE9wdGlvbnMgPSBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMsIGlmTm90U2V0KSB7XG4gICAgaWYgKG9wdGlvbnMpXG4gICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgdGhpcy5zZXRPcHRpb24oa2V5c1tpXSwgb3B0aW9uc1trZXlzW2ldXSwgaWZOb3RTZXQpO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIGluc3RhbmNlIHRvIGl0cyBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBDbGFzcyBuYW1lWywgc3BhY2UsIGZ1bGwgbmFtZV1cbiAqL1xuUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5jbGFzc05hbWUsXG4gICAgICAgIGZ1bGxOYW1lICA9IHRoaXMuZnVsbE5hbWU7XG4gICAgaWYgKGZ1bGxOYW1lLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGNsYXNzTmFtZSArIFwiIFwiICsgZnVsbE5hbWU7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbn07XG5cbi8vIFNldHMgdXAgY3ljbGljIGRlcGVuZGVuY2llcyAoY2FsbGVkIGluIGluZGV4LWxpZ2h0KVxuUmVmbGVjdGlvbk9iamVjdC5fY29uZmlndXJlID0gZnVuY3Rpb24oUm9vdF8pIHtcbiAgICBSb290ID0gUm9vdF87XG59O1xuIiwgIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBFbnVtO1xuXG4vLyBleHRlbmRzIFJlZmxlY3Rpb25PYmplY3RcbnZhciBSZWZsZWN0aW9uT2JqZWN0ID0gcmVxdWlyZShcIi4vb2JqZWN0XCIpO1xuKChFbnVtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUpKS5jb25zdHJ1Y3RvciA9IEVudW0pLmNsYXNzTmFtZSA9IFwiRW51bVwiO1xuXG52YXIgTmFtZXNwYWNlID0gcmVxdWlyZShcIi4vbmFtZXNwYWNlXCIpLFxuICAgIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgZW51bSBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgUmVmbGVjdGVkIGVudW0uXG4gKiBAZXh0ZW5kcyBSZWZsZWN0aW9uT2JqZWN0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFVuaXF1ZSBuYW1lIHdpdGhpbiBpdHMgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLG51bWJlcj59IFt2YWx1ZXNdIEVudW0gdmFsdWVzIGFzIGFuIG9iamVjdCwgYnkgbmFtZVxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIERlY2xhcmVkIG9wdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29tbWVudF0gVGhlIGNvbW1lbnQgZm9yIHRoaXMgZW51bVxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZyxzdHJpbmc+fSBbY29tbWVudHNdIFRoZSB2YWx1ZSBjb21tZW50cyBmb3IgdGhpcyBlbnVtXG4gKi9cbmZ1bmN0aW9uIEVudW0obmFtZSwgdmFsdWVzLCBvcHRpb25zLCBjb21tZW50LCBjb21tZW50cykge1xuICAgIFJlZmxlY3Rpb25PYmplY3QuY2FsbCh0aGlzLCBuYW1lLCBvcHRpb25zKTtcblxuICAgIGlmICh2YWx1ZXMgJiYgdHlwZW9mIHZhbHVlcyAhPT0gXCJvYmplY3RcIilcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwidmFsdWVzIG11c3QgYmUgYW4gb2JqZWN0XCIpO1xuXG4gICAgLyoqXG4gICAgICogRW51bSB2YWx1ZXMgYnkgaWQuXG4gICAgICogQHR5cGUge09iamVjdC48bnVtYmVyLHN0cmluZz59XG4gICAgICovXG4gICAgdGhpcy52YWx1ZXNCeUlkID0ge307XG5cbiAgICAvKipcbiAgICAgKiBFbnVtIHZhbHVlcyBieSBuYW1lLlxuICAgICAqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxudW1iZXI+fVxuICAgICAqL1xuICAgIHRoaXMudmFsdWVzID0gT2JqZWN0LmNyZWF0ZSh0aGlzLnZhbHVlc0J5SWQpOyAvLyB0b0pTT04sIG1hcmtlclxuXG4gICAgLyoqXG4gICAgICogRW51bSBjb21tZW50IHRleHQuXG4gICAgICogQHR5cGUge3N0cmluZ3xudWxsfVxuICAgICAqL1xuICAgIHRoaXMuY29tbWVudCA9IGNvbW1lbnQ7XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZSBjb21tZW50IHRleHRzLCBpZiBhbnkuXG4gICAgICogQHR5cGUge09iamVjdC48c3RyaW5nLHN0cmluZz59XG4gICAgICovXG4gICAgdGhpcy5jb21tZW50cyA9IGNvbW1lbnRzIHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogUmVzZXJ2ZWQgcmFuZ2VzLCBpZiBhbnkuXG4gICAgICogQHR5cGUge0FycmF5LjxudW1iZXJbXXxzdHJpbmc+fVxuICAgICAqL1xuICAgIHRoaXMucmVzZXJ2ZWQgPSB1bmRlZmluZWQ7IC8vIHRvSlNPTlxuXG4gICAgLy8gTm90ZSB0aGF0IHZhbHVlcyBpbmhlcml0IHZhbHVlc0J5SWQgb24gdGhlaXIgcHJvdG90eXBlIHdoaWNoIG1ha2VzIHRoZW0gYSBUeXBlU2NyaXB0LVxuICAgIC8vIGNvbXBhdGlibGUgZW51bS4gVGhpcyBpcyB1c2VkIGJ5IHBidHMgdG8gd3JpdGUgYWN0dWFsIGVudW0gZGVmaW5pdGlvbnMgdGhhdCB3b3JrIGZvclxuICAgIC8vIHN0YXRpYyBhbmQgcmVmbGVjdGlvbiBjb2RlIGFsaWtlIGluc3RlYWQgb2YgZW1pdHRpbmcgZ2VuZXJpYyBvYmplY3QgZGVmaW5pdGlvbnMuXG5cbiAgICBpZiAodmFsdWVzKVxuICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWVzKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZXNba2V5c1tpXV0gPT09IFwibnVtYmVyXCIpIC8vIHVzZSBmb3J3YXJkIGVudHJpZXMgb25seVxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzQnlJZFsgdGhpcy52YWx1ZXNba2V5c1tpXV0gPSB2YWx1ZXNba2V5c1tpXV0gXSA9IGtleXNbaV07XG59XG5cbi8qKlxuICogRW51bSBkZXNjcmlwdG9yLlxuICogQGludGVyZmFjZSBJRW51bVxuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZyxudW1iZXI+fSB2YWx1ZXMgRW51bSB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBFbnVtIG9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYW4gZW51bSBmcm9tIGFuIGVudW0gZGVzY3JpcHRvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEVudW0gbmFtZVxuICogQHBhcmFtIHtJRW51bX0ganNvbiBFbnVtIGRlc2NyaXB0b3JcbiAqIEByZXR1cm5zIHtFbnVtfSBDcmVhdGVkIGVudW1cbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYXJndW1lbnRzIGFyZSBpbnZhbGlkXG4gKi9cbkVudW0uZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihuYW1lLCBqc29uKSB7XG4gICAgdmFyIGVubSA9IG5ldyBFbnVtKG5hbWUsIGpzb24udmFsdWVzLCBqc29uLm9wdGlvbnMsIGpzb24uY29tbWVudCwganNvbi5jb21tZW50cyk7XG4gICAgZW5tLnJlc2VydmVkID0ganNvbi5yZXNlcnZlZDtcbiAgICByZXR1cm4gZW5tO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIGVudW0gdG8gYW4gZW51bSBkZXNjcmlwdG9yLlxuICogQHBhcmFtIHtJVG9KU09OT3B0aW9uc30gW3RvSlNPTk9wdGlvbnNdIEpTT04gY29udmVyc2lvbiBvcHRpb25zXG4gKiBAcmV0dXJucyB7SUVudW19IEVudW0gZGVzY3JpcHRvclxuICovXG5FbnVtLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04odG9KU09OT3B0aW9ucykge1xuICAgIHZhciBrZWVwQ29tbWVudHMgPSB0b0pTT05PcHRpb25zID8gQm9vbGVhbih0b0pTT05PcHRpb25zLmtlZXBDb21tZW50cykgOiBmYWxzZTtcbiAgICByZXR1cm4gdXRpbC50b09iamVjdChbXG4gICAgICAgIFwib3B0aW9uc1wiICAsIHRoaXMub3B0aW9ucyxcbiAgICAgICAgXCJ2YWx1ZXNcIiAgICwgdGhpcy52YWx1ZXMsXG4gICAgICAgIFwicmVzZXJ2ZWRcIiAsIHRoaXMucmVzZXJ2ZWQgJiYgdGhpcy5yZXNlcnZlZC5sZW5ndGggPyB0aGlzLnJlc2VydmVkIDogdW5kZWZpbmVkLFxuICAgICAgICBcImNvbW1lbnRcIiAgLCBrZWVwQ29tbWVudHMgPyB0aGlzLmNvbW1lbnQgOiB1bmRlZmluZWQsXG4gICAgICAgIFwiY29tbWVudHNcIiAsIGtlZXBDb21tZW50cyA/IHRoaXMuY29tbWVudHMgOiB1bmRlZmluZWRcbiAgICBdKTtcbn07XG5cbi8qKlxuICogQWRkcyBhIHZhbHVlIHRvIHRoaXMgZW51bS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFZhbHVlIG5hbWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpZCBWYWx1ZSBpZFxuICogQHBhcmFtIHtzdHJpbmd9IFtjb21tZW50XSBDb21tZW50LCBpZiBhbnlcbiAqIEByZXR1cm5zIHtFbnVtfSBgdGhpc2BcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYXJndW1lbnRzIGFyZSBpbnZhbGlkXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgaXMgYWxyZWFkeSBhIHZhbHVlIHdpdGggdGhpcyBuYW1lIG9yIGlkXG4gKi9cbkVudW0ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChuYW1lLCBpZCwgY29tbWVudCkge1xuICAgIC8vIHV0aWxpemVkIGJ5IHRoZSBwYXJzZXIgYnV0IG5vdCBieSAuZnJvbUpTT05cblxuICAgIGlmICghdXRpbC5pc1N0cmluZyhuYW1lKSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwibmFtZSBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuXG4gICAgaWYgKCF1dGlsLmlzSW50ZWdlcihpZCkpXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcImlkIG11c3QgYmUgYW4gaW50ZWdlclwiKTtcblxuICAgIGlmICh0aGlzLnZhbHVlc1tuYW1lXSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICB0aHJvdyBFcnJvcihcImR1cGxpY2F0ZSBuYW1lICdcIiArIG5hbWUgKyBcIicgaW4gXCIgKyB0aGlzKTtcblxuICAgIGlmICh0aGlzLmlzUmVzZXJ2ZWRJZChpZCkpXG4gICAgICAgIHRocm93IEVycm9yKFwiaWQgXCIgKyBpZCArIFwiIGlzIHJlc2VydmVkIGluIFwiICsgdGhpcyk7XG5cbiAgICBpZiAodGhpcy5pc1Jlc2VydmVkTmFtZShuYW1lKSlcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJuYW1lICdcIiArIG5hbWUgKyBcIicgaXMgcmVzZXJ2ZWQgaW4gXCIgKyB0aGlzKTtcblxuICAgIGlmICh0aGlzLnZhbHVlc0J5SWRbaWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKCEodGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5hbGxvd19hbGlhcykpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcImR1cGxpY2F0ZSBpZCBcIiArIGlkICsgXCIgaW4gXCIgKyB0aGlzKTtcbiAgICAgICAgdGhpcy52YWx1ZXNbbmFtZV0gPSBpZDtcbiAgICB9IGVsc2VcbiAgICAgICAgdGhpcy52YWx1ZXNCeUlkW3RoaXMudmFsdWVzW25hbWVdID0gaWRdID0gbmFtZTtcblxuICAgIHRoaXMuY29tbWVudHNbbmFtZV0gPSBjb21tZW50IHx8IG51bGw7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgYSB2YWx1ZSBmcm9tIHRoaXMgZW51bVxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVmFsdWUgbmFtZVxuICogQHJldHVybnMge0VudW19IGB0aGlzYFxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBhcmd1bWVudHMgYXJlIGludmFsaWRcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBgbmFtZWAgaXMgbm90IGEgbmFtZSBvZiB0aGlzIGVudW1cbiAqL1xuRW51bS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcblxuICAgIGlmICghdXRpbC5pc1N0cmluZyhuYW1lKSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwibmFtZSBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuXG4gICAgdmFyIHZhbCA9IHRoaXMudmFsdWVzW25hbWVdO1xuICAgIGlmICh2YWwgPT0gbnVsbClcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJuYW1lICdcIiArIG5hbWUgKyBcIicgZG9lcyBub3QgZXhpc3QgaW4gXCIgKyB0aGlzKTtcblxuICAgIGRlbGV0ZSB0aGlzLnZhbHVlc0J5SWRbdmFsXTtcbiAgICBkZWxldGUgdGhpcy52YWx1ZXNbbmFtZV07XG4gICAgZGVsZXRlIHRoaXMuY29tbWVudHNbbmFtZV07XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCBpZCBpcyByZXNlcnZlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpZCBJZCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHJlc2VydmVkLCBvdGhlcndpc2UgYGZhbHNlYFxuICovXG5FbnVtLnByb3RvdHlwZS5pc1Jlc2VydmVkSWQgPSBmdW5jdGlvbiBpc1Jlc2VydmVkSWQoaWQpIHtcbiAgICByZXR1cm4gTmFtZXNwYWNlLmlzUmVzZXJ2ZWRJZCh0aGlzLnJlc2VydmVkLCBpZCk7XG59O1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgbmFtZSBpcyByZXNlcnZlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiByZXNlcnZlZCwgb3RoZXJ3aXNlIGBmYWxzZWBcbiAqL1xuRW51bS5wcm90b3R5cGUuaXNSZXNlcnZlZE5hbWUgPSBmdW5jdGlvbiBpc1Jlc2VydmVkTmFtZShuYW1lKSB7XG4gICAgcmV0dXJuIE5hbWVzcGFjZS5pc1Jlc2VydmVkTmFtZSh0aGlzLnJlc2VydmVkLCBuYW1lKTtcbn07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGVuY29kZXI7XG5cbnZhciBFbnVtICAgICA9IHJlcXVpcmUoXCIuL2VudW1cIiksXG4gICAgdHlwZXMgICAgPSByZXF1aXJlKFwiLi90eXBlc1wiKSxcbiAgICB1dGlsICAgICA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgcGFydGlhbCBtZXNzYWdlIHR5cGUgZW5jb2Rlci5cbiAqIEBwYXJhbSB7Q29kZWdlbn0gZ2VuIENvZGVnZW4gaW5zdGFuY2VcbiAqIEBwYXJhbSB7RmllbGR9IGZpZWxkIFJlZmxlY3RlZCBmaWVsZFxuICogQHBhcmFtIHtudW1iZXJ9IGZpZWxkSW5kZXggRmllbGQgaW5kZXhcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWYgVmFyaWFibGUgcmVmZXJlbmNlXG4gKiBAcmV0dXJucyB7Q29kZWdlbn0gQ29kZWdlbiBpbnN0YW5jZVxuICogQGlnbm9yZVxuICovXG5mdW5jdGlvbiBnZW5UeXBlUGFydGlhbChnZW4sIGZpZWxkLCBmaWVsZEluZGV4LCByZWYpIHtcbiAgICByZXR1cm4gZmllbGQucmVzb2x2ZWRUeXBlLmdyb3VwXG4gICAgICAgID8gZ2VuKFwidHlwZXNbJWldLmVuY29kZSglcyx3LnVpbnQzMiglaSkpLnVpbnQzMiglaSlcIiwgZmllbGRJbmRleCwgcmVmLCAoZmllbGQuaWQgPDwgMyB8IDMpID4+PiAwLCAoZmllbGQuaWQgPDwgMyB8IDQpID4+PiAwKVxuICAgICAgICA6IGdlbihcInR5cGVzWyVpXS5lbmNvZGUoJXMsdy51aW50MzIoJWkpLmZvcmsoKSkubGRlbGltKClcIiwgZmllbGRJbmRleCwgcmVmLCAoZmllbGQuaWQgPDwgMyB8IDIpID4+PiAwKTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYW4gZW5jb2RlciBzcGVjaWZpYyB0byB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UgdHlwZS5cbiAqIEBwYXJhbSB7VHlwZX0gbXR5cGUgTWVzc2FnZSB0eXBlXG4gKiBAcmV0dXJucyB7Q29kZWdlbn0gQ29kZWdlbiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBlbmNvZGVyKG10eXBlKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUsIGJsb2NrLXNjb3BlZC12YXIsIG5vLXJlZGVjbGFyZSAqL1xuICAgIHZhciBnZW4gPSB1dGlsLmNvZGVnZW4oW1wibVwiLCBcIndcIl0sIG10eXBlLm5hbWUgKyBcIiRlbmNvZGVcIilcbiAgICAoXCJpZighdylcIilcbiAgICAgICAgKFwidz1Xcml0ZXIuY3JlYXRlKClcIik7XG5cbiAgICB2YXIgaSwgcmVmO1xuXG4gICAgLy8gXCJ3aGVuIGEgbWVzc2FnZSBpcyBzZXJpYWxpemVkIGl0cyBrbm93biBmaWVsZHMgc2hvdWxkIGJlIHdyaXR0ZW4gc2VxdWVudGlhbGx5IGJ5IGZpZWxkIG51bWJlclwiXG4gICAgdmFyIGZpZWxkcyA9IC8qIGluaXRpYWxpemVzICovIG10eXBlLmZpZWxkc0FycmF5LnNsaWNlKCkuc29ydCh1dGlsLmNvbXBhcmVGaWVsZHNCeUlkKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmllbGRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBmaWVsZCAgICA9IGZpZWxkc1tpXS5yZXNvbHZlKCksXG4gICAgICAgICAgICBpbmRleCAgICA9IG10eXBlLl9maWVsZHNBcnJheS5pbmRleE9mKGZpZWxkKSxcbiAgICAgICAgICAgIHR5cGUgICAgID0gZmllbGQucmVzb2x2ZWRUeXBlIGluc3RhbmNlb2YgRW51bSA/IFwiaW50MzJcIiA6IGZpZWxkLnR5cGUsXG4gICAgICAgICAgICB3aXJlVHlwZSA9IHR5cGVzLmJhc2ljW3R5cGVdO1xuICAgICAgICAgICAgcmVmICAgICAgPSBcIm1cIiArIHV0aWwuc2FmZVByb3AoZmllbGQubmFtZSk7XG5cbiAgICAgICAgLy8gTWFwIGZpZWxkc1xuICAgICAgICBpZiAoZmllbGQubWFwKSB7XG4gICAgICAgICAgICBnZW5cbiAgICAoXCJpZiglcyE9bnVsbCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwlaikpe1wiLCByZWYsIGZpZWxkLm5hbWUpIC8vICE9PSB1bmRlZmluZWQgJiYgIT09IG51bGxcbiAgICAgICAgKFwiZm9yKHZhciBrcz1PYmplY3Qua2V5cyglcyksaT0wO2k8a3MubGVuZ3RoOysraSl7XCIsIHJlZilcbiAgICAgICAgICAgIChcIncudWludDMyKCVpKS5mb3JrKCkudWludDMyKCVpKS4lcyhrc1tpXSlcIiwgKGZpZWxkLmlkIDw8IDMgfCAyKSA+Pj4gMCwgOCB8IHR5cGVzLm1hcEtleVtmaWVsZC5rZXlUeXBlXSwgZmllbGQua2V5VHlwZSk7XG4gICAgICAgICAgICBpZiAod2lyZVR5cGUgPT09IHVuZGVmaW5lZCkgZ2VuXG4gICAgICAgICAgICAoXCJ0eXBlc1slaV0uZW5jb2RlKCVzW2tzW2ldXSx3LnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKS5sZGVsaW0oKVwiLCBpbmRleCwgcmVmKTsgLy8gY2FuJ3QgYmUgZ3JvdXBzXG4gICAgICAgICAgICBlbHNlIGdlblxuICAgICAgICAgICAgKFwiLnVpbnQzMiglaSkuJXMoJXNba3NbaV1dKS5sZGVsaW0oKVwiLCAxNiB8IHdpcmVUeXBlLCB0eXBlLCByZWYpO1xuICAgICAgICAgICAgZ2VuXG4gICAgICAgIChcIn1cIilcbiAgICAoXCJ9XCIpO1xuXG4gICAgICAgICAgICAvLyBSZXBlYXRlZCBmaWVsZHNcbiAgICAgICAgfSBlbHNlIGlmIChmaWVsZC5yZXBlYXRlZCkgeyBnZW5cbiAgICAoXCJpZiglcyE9bnVsbCYmJXMubGVuZ3RoKXtcIiwgcmVmLCByZWYpOyAvLyAhPT0gdW5kZWZpbmVkICYmICE9PSBudWxsXG5cbiAgICAgICAgICAgIC8vIFBhY2tlZCByZXBlYXRlZFxuICAgICAgICAgICAgaWYgKGZpZWxkLnBhY2tlZCAmJiB0eXBlcy5wYWNrZWRbdHlwZV0gIT09IHVuZGVmaW5lZCkgeyBnZW5cblxuICAgICAgICAoXCJ3LnVpbnQzMiglaSkuZm9yaygpXCIsIChmaWVsZC5pZCA8PCAzIHwgMikgPj4+IDApXG4gICAgICAgIChcImZvcih2YXIgaT0wO2k8JXMubGVuZ3RoOysraSlcIiwgcmVmKVxuICAgICAgICAgICAgKFwidy4lcyglc1tpXSlcIiwgdHlwZSwgcmVmKVxuICAgICAgICAoXCJ3LmxkZWxpbSgpXCIpO1xuXG4gICAgICAgICAgICAvLyBOb24tcGFja2VkXG4gICAgICAgICAgICB9IGVsc2UgeyBnZW5cblxuICAgICAgICAoXCJmb3IodmFyIGk9MDtpPCVzLmxlbmd0aDsrK2kpXCIsIHJlZik7XG4gICAgICAgICAgICAgICAgaWYgKHdpcmVUeXBlID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBnZW5UeXBlUGFydGlhbChnZW4sIGZpZWxkLCBpbmRleCwgcmVmICsgXCJbaV1cIik7XG4gICAgICAgICAgICAgICAgZWxzZSBnZW5cbiAgICAgICAgICAgIChcIncudWludDMyKCVpKS4lcyglc1tpXSlcIiwgKGZpZWxkLmlkIDw8IDMgfCB3aXJlVHlwZSkgPj4+IDAsIHR5cGUsIHJlZik7XG5cbiAgICAgICAgICAgIH0gZ2VuXG4gICAgKFwifVwiKTtcblxuICAgICAgICAvLyBOb24tcmVwZWF0ZWRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmaWVsZC5vcHRpb25hbCkgZ2VuXG4gICAgKFwiaWYoJXMhPW51bGwmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sJWopKVwiLCByZWYsIGZpZWxkLm5hbWUpOyAvLyAhPT0gdW5kZWZpbmVkICYmICE9PSBudWxsXG5cbiAgICAgICAgICAgIGlmICh3aXJlVHlwZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICBnZW5UeXBlUGFydGlhbChnZW4sIGZpZWxkLCBpbmRleCwgcmVmKTtcbiAgICAgICAgICAgIGVsc2UgZ2VuXG4gICAgICAgIChcIncudWludDMyKCVpKS4lcyglcylcIiwgKGZpZWxkLmlkIDw8IDMgfCB3aXJlVHlwZSkgPj4+IDAsIHR5cGUsIHJlZik7XG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBnZW5cbiAgICAoXCJyZXR1cm4gd1wiKTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lLCBibG9jay1zY29wZWQtdmFyLCBuby1yZWRlY2xhcmUgKi9cbn1cbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciBwcm90b2J1ZiA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vaW5kZXgtbWluaW1hbFwiKTtcblxucHJvdG9idWYuYnVpbGQgPSBcImxpZ2h0XCI7XG5cbi8qKlxuICogQSBub2RlLXN0eWxlIGNhbGxiYWNrIGFzIHVzZWQgYnkge0BsaW5rIGxvYWR9IGFuZCB7QGxpbmsgUm9vdCNsb2FkfS5cbiAqIEB0eXBlZGVmIExvYWRDYWxsYmFja1xuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtFcnJvcnxudWxsfSBlcnJvciBFcnJvciwgaWYgYW55LCBvdGhlcndpc2UgYG51bGxgXG4gKiBAcGFyYW0ge1Jvb3R9IFtyb290XSBSb290LCBpZiB0aGVyZSBoYXNuJ3QgYmVlbiBhbiBlcnJvclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuXG4vKipcbiAqIExvYWRzIG9uZSBvciBtdWx0aXBsZSAucHJvdG8gb3IgcHJlcHJvY2Vzc2VkIC5qc29uIGZpbGVzIGludG8gYSBjb21tb24gcm9vdCBuYW1lc3BhY2UgYW5kIGNhbGxzIHRoZSBjYWxsYmFjay5cbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBmaWxlbmFtZSBPbmUgb3IgbXVsdGlwbGUgZmlsZXMgdG8gbG9hZFxuICogQHBhcmFtIHtSb290fSByb290IFJvb3QgbmFtZXNwYWNlLCBkZWZhdWx0cyB0byBjcmVhdGUgYSBuZXcgb25lIGlmIG9taXR0ZWQuXG4gKiBAcGFyYW0ge0xvYWRDYWxsYmFja30gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiBAc2VlIHtAbGluayBSb290I2xvYWR9XG4gKi9cbmZ1bmN0aW9uIGxvYWQoZmlsZW5hbWUsIHJvb3QsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiByb290ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSByb290O1xuICAgICAgICByb290ID0gbmV3IHByb3RvYnVmLlJvb3QoKTtcbiAgICB9IGVsc2UgaWYgKCFyb290KVxuICAgICAgICByb290ID0gbmV3IHByb3RvYnVmLlJvb3QoKTtcbiAgICByZXR1cm4gcm9vdC5sb2FkKGZpbGVuYW1lLCBjYWxsYmFjayk7XG59XG5cbi8qKlxuICogTG9hZHMgb25lIG9yIG11bHRpcGxlIC5wcm90byBvciBwcmVwcm9jZXNzZWQgLmpzb24gZmlsZXMgaW50byBhIGNvbW1vbiByb290IG5hbWVzcGFjZSBhbmQgY2FsbHMgdGhlIGNhbGxiYWNrLlxuICogQG5hbWUgbG9hZFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gZmlsZW5hbWUgT25lIG9yIG11bHRpcGxlIGZpbGVzIHRvIGxvYWRcbiAqIEBwYXJhbSB7TG9hZENhbGxiYWNrfSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvblxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqIEBzZWUge0BsaW5rIFJvb3QjbG9hZH1cbiAqIEB2YXJpYXRpb24gMlxuICovXG4vLyBmdW5jdGlvbiBsb2FkKGZpbGVuYW1lOnN0cmluZywgY2FsbGJhY2s6TG9hZENhbGxiYWNrKTp1bmRlZmluZWRcblxuLyoqXG4gKiBMb2FkcyBvbmUgb3IgbXVsdGlwbGUgLnByb3RvIG9yIHByZXByb2Nlc3NlZCAuanNvbiBmaWxlcyBpbnRvIGEgY29tbW9uIHJvb3QgbmFtZXNwYWNlIGFuZCByZXR1cm5zIGEgcHJvbWlzZS5cbiAqIEBuYW1lIGxvYWRcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IGZpbGVuYW1lIE9uZSBvciBtdWx0aXBsZSBmaWxlcyB0byBsb2FkXG4gKiBAcGFyYW0ge1Jvb3R9IFtyb290XSBSb290IG5hbWVzcGFjZSwgZGVmYXVsdHMgdG8gY3JlYXRlIGEgbmV3IG9uZSBpZiBvbWl0dGVkLlxuICogQHJldHVybnMge1Byb21pc2U8Um9vdD59IFByb21pc2VcbiAqIEBzZWUge0BsaW5rIFJvb3QjbG9hZH1cbiAqIEB2YXJpYXRpb24gM1xuICovXG4vLyBmdW5jdGlvbiBsb2FkKGZpbGVuYW1lOnN0cmluZywgW3Jvb3Q6Um9vdF0pOlByb21pc2U8Um9vdD5cblxucHJvdG9idWYubG9hZCA9IGxvYWQ7XG5cbi8qKlxuICogU3luY2hyb25vdXNseSBsb2FkcyBvbmUgb3IgbXVsdGlwbGUgLnByb3RvIG9yIHByZXByb2Nlc3NlZCAuanNvbiBmaWxlcyBpbnRvIGEgY29tbW9uIHJvb3QgbmFtZXNwYWNlIChub2RlIG9ubHkpLlxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IGZpbGVuYW1lIE9uZSBvciBtdWx0aXBsZSBmaWxlcyB0byBsb2FkXG4gKiBAcGFyYW0ge1Jvb3R9IFtyb290XSBSb290IG5hbWVzcGFjZSwgZGVmYXVsdHMgdG8gY3JlYXRlIGEgbmV3IG9uZSBpZiBvbWl0dGVkLlxuICogQHJldHVybnMge1Jvb3R9IFJvb3QgbmFtZXNwYWNlXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgc3luY2hyb25vdXMgZmV0Y2hpbmcgaXMgbm90IHN1cHBvcnRlZCAoaS5lLiBpbiBicm93c2Vycykgb3IgaWYgYSBmaWxlJ3Mgc3ludGF4IGlzIGludmFsaWRcbiAqIEBzZWUge0BsaW5rIFJvb3QjbG9hZFN5bmN9XG4gKi9cbmZ1bmN0aW9uIGxvYWRTeW5jKGZpbGVuYW1lLCByb290KSB7XG4gICAgaWYgKCFyb290KVxuICAgICAgICByb290ID0gbmV3IHByb3RvYnVmLlJvb3QoKTtcbiAgICByZXR1cm4gcm9vdC5sb2FkU3luYyhmaWxlbmFtZSk7XG59XG5cbnByb3RvYnVmLmxvYWRTeW5jID0gbG9hZFN5bmM7XG5cbi8vIFNlcmlhbGl6YXRpb25cbnByb3RvYnVmLmVuY29kZXIgICAgICAgICAgPSByZXF1aXJlKFwiLi9lbmNvZGVyXCIpO1xucHJvdG9idWYuZGVjb2RlciAgICAgICAgICA9IHJlcXVpcmUoXCIuL2RlY29kZXJcIik7XG5wcm90b2J1Zi52ZXJpZmllciAgICAgICAgID0gcmVxdWlyZShcIi4vdmVyaWZpZXJcIik7XG5wcm90b2J1Zi5jb252ZXJ0ZXIgICAgICAgID0gcmVxdWlyZShcIi4vY29udmVydGVyXCIpO1xuXG4vLyBSZWZsZWN0aW9uXG5wcm90b2J1Zi5SZWZsZWN0aW9uT2JqZWN0ID0gcmVxdWlyZShcIi4vb2JqZWN0XCIpO1xucHJvdG9idWYuTmFtZXNwYWNlICAgICAgICA9IHJlcXVpcmUoXCIuL25hbWVzcGFjZVwiKTtcbnByb3RvYnVmLlJvb3QgICAgICAgICAgICAgPSByZXF1aXJlKFwiLi9yb290XCIpO1xucHJvdG9idWYuRW51bSAgICAgICAgICAgICA9IHJlcXVpcmUoXCIuL2VudW1cIik7XG5wcm90b2J1Zi5UeXBlICAgICAgICAgICAgID0gcmVxdWlyZShcIi4vdHlwZVwiKTtcbnByb3RvYnVmLkZpZWxkICAgICAgICAgICAgPSByZXF1aXJlKFwiLi9maWVsZFwiKTtcbnByb3RvYnVmLk9uZU9mICAgICAgICAgICAgPSByZXF1aXJlKFwiLi9vbmVvZlwiKTtcbnByb3RvYnVmLk1hcEZpZWxkICAgICAgICAgPSByZXF1aXJlKFwiLi9tYXBmaWVsZFwiKTtcbnByb3RvYnVmLlNlcnZpY2UgICAgICAgICAgPSByZXF1aXJlKFwiLi9zZXJ2aWNlXCIpO1xucHJvdG9idWYuTWV0aG9kICAgICAgICAgICA9IHJlcXVpcmUoXCIuL21ldGhvZFwiKTtcblxuLy8gUnVudGltZVxucHJvdG9idWYuTWVzc2FnZSAgICAgICAgICA9IHJlcXVpcmUoXCIuL21lc3NhZ2VcIik7XG5wcm90b2J1Zi53cmFwcGVycyAgICAgICAgID0gcmVxdWlyZShcIi4vd3JhcHBlcnNcIik7XG5cbi8vIFV0aWxpdHlcbnByb3RvYnVmLnR5cGVzICAgICAgICAgICAgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbnByb3RvYnVmLnV0aWwgICAgICAgICAgICAgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXG4vLyBTZXQgdXAgcG9zc2libHkgY3ljbGljIHJlZmxlY3Rpb24gZGVwZW5kZW5jaWVzXG5wcm90b2J1Zi5SZWZsZWN0aW9uT2JqZWN0Ll9jb25maWd1cmUocHJvdG9idWYuUm9vdCk7XG5wcm90b2J1Zi5OYW1lc3BhY2UuX2NvbmZpZ3VyZShwcm90b2J1Zi5UeXBlLCBwcm90b2J1Zi5TZXJ2aWNlLCBwcm90b2J1Zi5FbnVtKTtcbnByb3RvYnVmLlJvb3QuX2NvbmZpZ3VyZShwcm90b2J1Zi5UeXBlKTtcbnByb3RvYnVmLkZpZWxkLl9jb25maWd1cmUocHJvdG9idWYuVHlwZSk7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IHRva2VuaXplO1xuXG52YXIgZGVsaW1SZSAgICAgICAgPSAvW1xcc3t9PTs6W1xcXSwnXCIoKTw+XS9nLFxuICAgIHN0cmluZ0RvdWJsZVJlID0gLyg/OlwiKFteXCJcXFxcXSooPzpcXFxcLlteXCJcXFxcXSopKilcIikvZyxcbiAgICBzdHJpbmdTaW5nbGVSZSA9IC8oPzonKFteJ1xcXFxdKig/OlxcXFwuW14nXFxcXF0qKSopJykvZztcblxudmFyIHNldENvbW1lbnRSZSA9IC9eICpbKi9dKyAqLyxcbiAgICBzZXRDb21tZW50QWx0UmUgPSAvXlxccypcXCo/XFwvKi8sXG4gICAgc2V0Q29tbWVudFNwbGl0UmUgPSAvXFxuL2csXG4gICAgd2hpdGVzcGFjZVJlID0gL1xccy8sXG4gICAgdW5lc2NhcGVSZSA9IC9cXFxcKC4/KS9nO1xuXG52YXIgdW5lc2NhcGVNYXAgPSB7XG4gICAgXCIwXCI6IFwiXFwwXCIsXG4gICAgXCJyXCI6IFwiXFxyXCIsXG4gICAgXCJuXCI6IFwiXFxuXCIsXG4gICAgXCJ0XCI6IFwiXFx0XCJcbn07XG5cbi8qKlxuICogVW5lc2NhcGVzIGEgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gdW5lc2NhcGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFVuZXNjYXBlZCBzdHJpbmdcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsc3RyaW5nPn0gbWFwIFNwZWNpYWwgY2hhcmFjdGVycyBtYXBcbiAqIEBtZW1iZXJvZiB0b2tlbml6ZVxuICovXG5mdW5jdGlvbiB1bmVzY2FwZShzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UodW5lc2NhcGVSZSwgZnVuY3Rpb24oJDAsICQxKSB7XG4gICAgICAgIHN3aXRjaCAoJDEpIHtcbiAgICAgICAgICAgIGNhc2UgXCJcXFxcXCI6XG4gICAgICAgICAgICBjYXNlIFwiXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuICQxO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5lc2NhcGVNYXBbJDFdIHx8IFwiXCI7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxudG9rZW5pemUudW5lc2NhcGUgPSB1bmVzY2FwZTtcblxuLyoqXG4gKiBHZXRzIHRoZSBuZXh0IHRva2VuIGFuZCBhZHZhbmNlcy5cbiAqIEB0eXBlZGVmIFRva2VuaXplckhhbmRsZU5leHRcbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH0gTmV4dCB0b2tlbiBvciBgbnVsbGAgb24gZW9mXG4gKi9cblxuLyoqXG4gKiBQZWVrcyBmb3IgdGhlIG5leHQgdG9rZW4uXG4gKiBAdHlwZWRlZiBUb2tlbml6ZXJIYW5kbGVQZWVrXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IE5leHQgdG9rZW4gb3IgYG51bGxgIG9uIGVvZlxuICovXG5cbi8qKlxuICogUHVzaGVzIGEgdG9rZW4gYmFjayB0byB0aGUgc3RhY2suXG4gKiBAdHlwZWRlZiBUb2tlbml6ZXJIYW5kbGVQdXNoXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcGFyYW0ge3N0cmluZ30gdG9rZW4gVG9rZW5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cblxuLyoqXG4gKiBTa2lwcyB0aGUgbmV4dCB0b2tlbi5cbiAqIEB0eXBlZGVmIFRva2VuaXplckhhbmRsZVNraXBcbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEBwYXJhbSB7c3RyaW5nfSBleHBlY3RlZCBFeHBlY3RlZCB0b2tlblxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9uYWw9ZmFsc2VdIElmIG9wdGlvbmFsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdG9rZW4gbWF0Y2hlZFxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSB0b2tlbiBkaWRuJ3QgbWF0Y2ggYW5kIGlzIG5vdCBvcHRpb25hbFxuICovXG5cbi8qKlxuICogR2V0cyB0aGUgY29tbWVudCBvbiB0aGUgcHJldmlvdXMgbGluZSBvciwgYWx0ZXJuYXRpdmVseSwgdGhlIGxpbmUgY29tbWVudCBvbiB0aGUgc3BlY2lmaWVkIGxpbmUuXG4gKiBAdHlwZWRlZiBUb2tlbml6ZXJIYW5kbGVDbW50XG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcGFyYW0ge251bWJlcn0gW2xpbmVdIExpbmUgbnVtYmVyXG4gKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IENvbW1lbnQgdGV4dCBvciBgbnVsbGAgaWYgbm9uZVxuICovXG5cbi8qKlxuICogSGFuZGxlIG9iamVjdCByZXR1cm5lZCBmcm9tIHtAbGluayB0b2tlbml6ZX0uXG4gKiBAaW50ZXJmYWNlIElUb2tlbml6ZXJIYW5kbGVcbiAqIEBwcm9wZXJ0eSB7VG9rZW5pemVySGFuZGxlTmV4dH0gbmV4dCBHZXRzIHRoZSBuZXh0IHRva2VuIGFuZCBhZHZhbmNlcyAoYG51bGxgIG9uIGVvZilcbiAqIEBwcm9wZXJ0eSB7VG9rZW5pemVySGFuZGxlUGVla30gcGVlayBQZWVrcyBmb3IgdGhlIG5leHQgdG9rZW4gKGBudWxsYCBvbiBlb2YpXG4gKiBAcHJvcGVydHkge1Rva2VuaXplckhhbmRsZVB1c2h9IHB1c2ggUHVzaGVzIGEgdG9rZW4gYmFjayB0byB0aGUgc3RhY2tcbiAqIEBwcm9wZXJ0eSB7VG9rZW5pemVySGFuZGxlU2tpcH0gc2tpcCBTa2lwcyBhIHRva2VuLCByZXR1cm5zIGl0cyBwcmVzZW5jZSBhbmQgYWR2YW5jZXMgb3IsIGlmIG5vbi1vcHRpb25hbCBhbmQgbm90IHByZXNlbnQsIHRocm93c1xuICogQHByb3BlcnR5IHtUb2tlbml6ZXJIYW5kbGVDbW50fSBjbW50IEdldHMgdGhlIGNvbW1lbnQgb24gdGhlIHByZXZpb3VzIGxpbmUgb3IgdGhlIGxpbmUgY29tbWVudCBvbiB0aGUgc3BlY2lmaWVkIGxpbmUsIGlmIGFueVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGxpbmUgQ3VycmVudCBsaW5lIG51bWJlclxuICovXG5cbi8qKlxuICogVG9rZW5pemVzIHRoZSBnaXZlbiAucHJvdG8gc291cmNlIGFuZCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHVzZWZ1bCB1dGlsaXR5IGZ1bmN0aW9ucy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgU291cmNlIGNvbnRlbnRzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGFsdGVybmF0ZUNvbW1lbnRNb2RlIFdoZXRoZXIgd2Ugc2hvdWxkIGFjdGl2YXRlIGFsdGVybmF0ZSBjb21tZW50IHBhcnNpbmcgbW9kZS5cbiAqIEByZXR1cm5zIHtJVG9rZW5pemVySGFuZGxlfSBUb2tlbml6ZXIgaGFuZGxlXG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplKHNvdXJjZSwgYWx0ZXJuYXRlQ29tbWVudE1vZGUpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBjYWxsYmFjay1yZXR1cm4gKi9cbiAgICBzb3VyY2UgPSBzb3VyY2UudG9TdHJpbmcoKTtcblxuICAgIHZhciBvZmZzZXQgPSAwLFxuICAgICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoLFxuICAgICAgICBsaW5lID0gMSxcbiAgICAgICAgY29tbWVudFR5cGUgPSBudWxsLFxuICAgICAgICBjb21tZW50VGV4dCA9IG51bGwsXG4gICAgICAgIGNvbW1lbnRMaW5lID0gMCxcbiAgICAgICAgY29tbWVudExpbmVFbXB0eSA9IGZhbHNlLFxuICAgICAgICBjb21tZW50SXNMZWFkaW5nID0gZmFsc2U7XG5cbiAgICB2YXIgc3RhY2sgPSBbXTtcblxuICAgIHZhciBzdHJpbmdEZWxpbSA9IG51bGw7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gZXJyb3IgZm9yIGlsbGVnYWwgc3ludGF4LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdWJqZWN0IFN1YmplY3RcbiAgICAgKiBAcmV0dXJucyB7RXJyb3J9IEVycm9yIGNyZWF0ZWRcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbGxlZ2FsKHN1YmplY3QpIHtcbiAgICAgICAgcmV0dXJuIEVycm9yKFwiaWxsZWdhbCBcIiArIHN1YmplY3QgKyBcIiAobGluZSBcIiArIGxpbmUgKyBcIilcIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVhZHMgYSBzdHJpbmcgdGlsbCBpdHMgZW5kLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFN0cmluZyByZWFkXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVhZFN0cmluZygpIHtcbiAgICAgICAgdmFyIHJlID0gc3RyaW5nRGVsaW0gPT09IFwiJ1wiID8gc3RyaW5nU2luZ2xlUmUgOiBzdHJpbmdEb3VibGVSZTtcbiAgICAgICAgcmUubGFzdEluZGV4ID0gb2Zmc2V0IC0gMTtcbiAgICAgICAgdmFyIG1hdGNoID0gcmUuZXhlYyhzb3VyY2UpO1xuICAgICAgICBpZiAoIW1hdGNoKVxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbChcInN0cmluZ1wiKTtcbiAgICAgICAgb2Zmc2V0ID0gcmUubGFzdEluZGV4O1xuICAgICAgICBwdXNoKHN0cmluZ0RlbGltKTtcbiAgICAgICAgc3RyaW5nRGVsaW0gPSBudWxsO1xuICAgICAgICByZXR1cm4gdW5lc2NhcGUobWF0Y2hbMV0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGNoYXJhY3RlciBhdCBgcG9zYCB3aXRoaW4gdGhlIHNvdXJjZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcG9zIFBvc2l0aW9uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gQ2hhcmFjdGVyXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhckF0KHBvcykge1xuICAgICAgICByZXR1cm4gc291cmNlLmNoYXJBdChwb3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgY29tbWVudCB0ZXh0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBTdGFydCBvZmZzZXRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIEVuZCBvZmZzZXRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzTGVhZGluZyBzZXQgaWYgYSBsZWFkaW5nIGNvbW1lbnRcbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENvbW1lbnQoc3RhcnQsIGVuZCwgaXNMZWFkaW5nKSB7XG4gICAgICAgIGNvbW1lbnRUeXBlID0gc291cmNlLmNoYXJBdChzdGFydCsrKTtcbiAgICAgICAgY29tbWVudExpbmUgPSBsaW5lO1xuICAgICAgICBjb21tZW50TGluZUVtcHR5ID0gZmFsc2U7XG4gICAgICAgIGNvbW1lbnRJc0xlYWRpbmcgPSBpc0xlYWRpbmc7XG4gICAgICAgIHZhciBsb29rYmFjaztcbiAgICAgICAgaWYgKGFsdGVybmF0ZUNvbW1lbnRNb2RlKSB7XG4gICAgICAgICAgICBsb29rYmFjayA9IDI7ICAvLyBhbHRlcm5hdGUgY29tbWVudCBwYXJzaW5nOiBcIi8vXCIgb3IgXCIvKlwiXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb29rYmFjayA9IDM7ICAvLyBcIi8vL1wiIG9yIFwiLyoqXCJcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29tbWVudE9mZnNldCA9IHN0YXJ0IC0gbG9va2JhY2ssXG4gICAgICAgICAgICBjO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoLS1jb21tZW50T2Zmc2V0IDwgMCB8fFxuICAgICAgICAgICAgICAgICAgICAoYyA9IHNvdXJjZS5jaGFyQXQoY29tbWVudE9mZnNldCkpID09PSBcIlxcblwiKSB7XG4gICAgICAgICAgICAgICAgY29tbWVudExpbmVFbXB0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGMgPT09IFwiIFwiIHx8IGMgPT09IFwiXFx0XCIpO1xuICAgICAgICB2YXIgbGluZXMgPSBzb3VyY2VcbiAgICAgICAgICAgIC5zdWJzdHJpbmcoc3RhcnQsIGVuZClcbiAgICAgICAgICAgIC5zcGxpdChzZXRDb21tZW50U3BsaXRSZSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICBsaW5lc1tpXSA9IGxpbmVzW2ldXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYWx0ZXJuYXRlQ29tbWVudE1vZGUgPyBzZXRDb21tZW50QWx0UmUgOiBzZXRDb21tZW50UmUsIFwiXCIpXG4gICAgICAgICAgICAgICAgLnRyaW0oKTtcbiAgICAgICAgY29tbWVudFRleHQgPSBsaW5lc1xuICAgICAgICAgICAgLmpvaW4oXCJcXG5cIilcbiAgICAgICAgICAgIC50cmltKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEb3VibGVTbGFzaENvbW1lbnRMaW5lKHN0YXJ0T2Zmc2V0KSB7XG4gICAgICAgIHZhciBlbmRPZmZzZXQgPSBmaW5kRW5kT2ZMaW5lKHN0YXJ0T2Zmc2V0KTtcblxuICAgICAgICAvLyBzZWUgaWYgcmVtYWluaW5nIGxpbmUgbWF0Y2hlcyBjb21tZW50IHBhdHRlcm5cbiAgICAgICAgdmFyIGxpbmVUZXh0ID0gc291cmNlLnN1YnN0cmluZyhzdGFydE9mZnNldCwgZW5kT2Zmc2V0KTtcbiAgICAgICAgLy8gbG9vayBmb3IgMSBvciAyIHNsYXNoZXMgc2luY2Ugc3RhcnRPZmZzZXQgd291bGQgYWxyZWFkeSBwb2ludCBwYXN0XG4gICAgICAgIC8vIHRoZSBmaXJzdCBzbGFzaCB0aGF0IHN0YXJ0ZWQgdGhlIGNvbW1lbnQuXG4gICAgICAgIHZhciBpc0NvbW1lbnQgPSAvXlxccypcXC97MSwyfS8udGVzdChsaW5lVGV4dCk7XG4gICAgICAgIHJldHVybiBpc0NvbW1lbnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmluZEVuZE9mTGluZShjdXJzb3IpIHtcbiAgICAgICAgLy8gZmluZCBlbmQgb2YgY3Vyc29yJ3MgbGluZVxuICAgICAgICB2YXIgZW5kT2Zmc2V0ID0gY3Vyc29yO1xuICAgICAgICB3aGlsZSAoZW5kT2Zmc2V0IDwgbGVuZ3RoICYmIGNoYXJBdChlbmRPZmZzZXQpICE9PSBcIlxcblwiKSB7XG4gICAgICAgICAgICBlbmRPZmZzZXQrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW5kT2Zmc2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9idGFpbnMgdGhlIG5leHQgdG9rZW4uXG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBOZXh0IHRva2VuIG9yIGBudWxsYCBvbiBlb2ZcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICBpZiAoc3RhY2subGVuZ3RoID4gMClcbiAgICAgICAgICAgIHJldHVybiBzdGFjay5zaGlmdCgpO1xuICAgICAgICBpZiAoc3RyaW5nRGVsaW0pXG4gICAgICAgICAgICByZXR1cm4gcmVhZFN0cmluZygpO1xuICAgICAgICB2YXIgcmVwZWF0LFxuICAgICAgICAgICAgcHJldixcbiAgICAgICAgICAgIGN1cnIsXG4gICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgIGlzRG9jLFxuICAgICAgICAgICAgaXNMZWFkaW5nQ29tbWVudCA9IG9mZnNldCA9PT0gMDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKG9mZnNldCA9PT0gbGVuZ3RoKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgcmVwZWF0ID0gZmFsc2U7XG4gICAgICAgICAgICB3aGlsZSAod2hpdGVzcGFjZVJlLnRlc3QoY3VyciA9IGNoYXJBdChvZmZzZXQpKSkge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyID09PSBcIlxcblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzTGVhZGluZ0NvbW1lbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICArK2xpbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgrK29mZnNldCA9PT0gbGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNoYXJBdChvZmZzZXQpID09PSBcIi9cIikge1xuICAgICAgICAgICAgICAgIGlmICgrK29mZnNldCA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGlsbGVnYWwoXCJjb21tZW50XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2hhckF0KG9mZnNldCkgPT09IFwiL1wiKSB7IC8vIExpbmVcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbHRlcm5hdGVDb21tZW50TW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIHRyaXBsZS1zbGFzaCBjb21tZW50XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0RvYyA9IGNoYXJBdChzdGFydCA9IG9mZnNldCArIDEpID09PSBcIi9cIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNoYXJBdCgrK29mZnNldCkgIT09IFwiXFxuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2Zmc2V0ID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKytvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNEb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDb21tZW50KHN0YXJ0LCBvZmZzZXQgLSAxLCBpc0xlYWRpbmdDb21tZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICsrbGluZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBmb3IgZG91YmxlLXNsYXNoIGNvbW1lbnRzLCBjb25zb2xpZGF0aW5nIGNvbnNlY3V0aXZlIGxpbmVzXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRG9jID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNEb3VibGVTbGFzaENvbW1lbnRMaW5lKG9mZnNldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0RvYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBmaW5kRW5kT2ZMaW5lKG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPT09IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoaXNEb3VibGVTbGFzaENvbW1lbnRMaW5lKG9mZnNldCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBNYXRoLm1pbihsZW5ndGgsIGZpbmRFbmRPZkxpbmUob2Zmc2V0KSArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRG9jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q29tbWVudChzdGFydCwgb2Zmc2V0LCBpc0xlYWRpbmdDb21tZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChjdXJyID0gY2hhckF0KG9mZnNldCkpID09PSBcIipcIikgeyAvKiBCbG9jayAqL1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBmb3IgLyoqIChyZWd1bGFyIGNvbW1lbnQgbW9kZSkgb3IgLyogKGFsdGVybmF0ZSBjb21tZW50IG1vZGUpXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gb2Zmc2V0ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgaXNEb2MgPSBhbHRlcm5hdGVDb21tZW50TW9kZSB8fCBjaGFyQXQoc3RhcnQpID09PSBcIipcIjtcbiAgICAgICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnIgPT09IFwiXFxuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArK2xpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKytvZmZzZXQgPT09IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGlsbGVnYWwoXCJjb21tZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldiA9IGN1cnI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyID0gY2hhckF0KG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKHByZXYgIT09IFwiKlwiIHx8IGN1cnIgIT09IFwiL1wiKTtcbiAgICAgICAgICAgICAgICAgICAgKytvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0RvYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q29tbWVudChzdGFydCwgb2Zmc2V0IC0gMiwgaXNMZWFkaW5nQ29tbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVwZWF0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIvXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChyZXBlYXQpO1xuXG4gICAgICAgIC8vIG9mZnNldCAhPT0gbGVuZ3RoIGlmIHdlIGdvdCBoZXJlXG5cbiAgICAgICAgdmFyIGVuZCA9IG9mZnNldDtcbiAgICAgICAgZGVsaW1SZS5sYXN0SW5kZXggPSAwO1xuICAgICAgICB2YXIgZGVsaW0gPSBkZWxpbVJlLnRlc3QoY2hhckF0KGVuZCsrKSk7XG4gICAgICAgIGlmICghZGVsaW0pXG4gICAgICAgICAgICB3aGlsZSAoZW5kIDwgbGVuZ3RoICYmICFkZWxpbVJlLnRlc3QoY2hhckF0KGVuZCkpKVxuICAgICAgICAgICAgICAgICsrZW5kO1xuICAgICAgICB2YXIgdG9rZW4gPSBzb3VyY2Uuc3Vic3RyaW5nKG9mZnNldCwgb2Zmc2V0ID0gZW5kKTtcbiAgICAgICAgaWYgKHRva2VuID09PSBcIlxcXCJcIiB8fCB0b2tlbiA9PT0gXCInXCIpXG4gICAgICAgICAgICBzdHJpbmdEZWxpbSA9IHRva2VuO1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVzaGVzIGEgdG9rZW4gYmFjayB0byB0aGUgc3RhY2suXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRva2VuIFRva2VuXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdXNoKHRva2VuKSB7XG4gICAgICAgIHN0YWNrLnB1c2godG9rZW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlZWtzIGZvciB0aGUgbmV4dCB0b2tlbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IFRva2VuIG9yIGBudWxsYCBvbiBlb2ZcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwZWVrKCkge1xuICAgICAgICBpZiAoIXN0YWNrLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHRva2VuID0gbmV4dCgpO1xuICAgICAgICAgICAgaWYgKHRva2VuID09PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgcHVzaCh0b2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YWNrWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNraXBzIGEgdG9rZW4uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cGVjdGVkIEV4cGVjdGVkIHRva2VuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9uYWw9ZmFsc2VdIFdoZXRoZXIgdGhlIHRva2VuIGlzIG9wdGlvbmFsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCB3aGVuIHNraXBwZWQsIGBmYWxzZWAgaWYgbm90XG4gICAgICogQHRocm93cyB7RXJyb3J9IFdoZW4gYSByZXF1aXJlZCB0b2tlbiBpcyBub3QgcHJlc2VudFxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNraXAoZXhwZWN0ZWQsIG9wdGlvbmFsKSB7XG4gICAgICAgIHZhciBhY3R1YWwgPSBwZWVrKCksXG4gICAgICAgICAgICBlcXVhbHMgPSBhY3R1YWwgPT09IGV4cGVjdGVkO1xuICAgICAgICBpZiAoZXF1YWxzKSB7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbmFsKVxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbChcInRva2VuICdcIiArIGFjdHVhbCArIFwiJywgJ1wiICsgZXhwZWN0ZWQgKyBcIicgZXhwZWN0ZWRcIik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgY29tbWVudC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3RyYWlsaW5nTGluZV0gTGluZSBudW1iZXIgaWYgbG9va2luZyBmb3IgYSB0cmFpbGluZyBjb21tZW50XG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBDb21tZW50IHRleHRcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbW50KHRyYWlsaW5nTGluZSkge1xuICAgICAgICB2YXIgcmV0ID0gbnVsbDtcbiAgICAgICAgaWYgKHRyYWlsaW5nTGluZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoY29tbWVudExpbmUgPT09IGxpbmUgLSAxICYmIChhbHRlcm5hdGVDb21tZW50TW9kZSB8fCBjb21tZW50VHlwZSA9PT0gXCIqXCIgfHwgY29tbWVudExpbmVFbXB0eSkpIHtcbiAgICAgICAgICAgICAgICByZXQgPSBjb21tZW50SXNMZWFkaW5nID8gY29tbWVudFRleHQgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICAgIGlmIChjb21tZW50TGluZSA8IHRyYWlsaW5nTGluZSkge1xuICAgICAgICAgICAgICAgIHBlZWsoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb21tZW50TGluZSA9PT0gdHJhaWxpbmdMaW5lICYmICFjb21tZW50TGluZUVtcHR5ICYmIChhbHRlcm5hdGVDb21tZW50TW9kZSB8fCBjb21tZW50VHlwZSA9PT0gXCIvXCIpKSB7XG4gICAgICAgICAgICAgICAgcmV0ID0gY29tbWVudElzTGVhZGluZyA/IG51bGwgOiBjb21tZW50VGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe1xuICAgICAgICBuZXh0OiBuZXh0LFxuICAgICAgICBwZWVrOiBwZWVrLFxuICAgICAgICBwdXNoOiBwdXNoLFxuICAgICAgICBza2lwOiBza2lwLFxuICAgICAgICBjbW50OiBjbW50XG4gICAgfSwgXCJsaW5lXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIGxpbmU7IH1cbiAgICB9KTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIGNhbGxiYWNrLXJldHVybiAqL1xufVxuIiwgIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBwYXJzZTtcblxucGFyc2UuZmlsZW5hbWUgPSBudWxsO1xucGFyc2UuZGVmYXVsdHMgPSB7IGtlZXBDYXNlOiBmYWxzZSB9O1xuXG52YXIgdG9rZW5pemUgID0gcmVxdWlyZShcIi4vdG9rZW5pemVcIiksXG4gICAgUm9vdCAgICAgID0gcmVxdWlyZShcIi4vcm9vdFwiKSxcbiAgICBUeXBlICAgICAgPSByZXF1aXJlKFwiLi90eXBlXCIpLFxuICAgIEZpZWxkICAgICA9IHJlcXVpcmUoXCIuL2ZpZWxkXCIpLFxuICAgIE1hcEZpZWxkICA9IHJlcXVpcmUoXCIuL21hcGZpZWxkXCIpLFxuICAgIE9uZU9mICAgICA9IHJlcXVpcmUoXCIuL29uZW9mXCIpLFxuICAgIEVudW0gICAgICA9IHJlcXVpcmUoXCIuL2VudW1cIiksXG4gICAgU2VydmljZSAgID0gcmVxdWlyZShcIi4vc2VydmljZVwiKSxcbiAgICBNZXRob2QgICAgPSByZXF1aXJlKFwiLi9tZXRob2RcIiksXG4gICAgdHlwZXMgICAgID0gcmVxdWlyZShcIi4vdHlwZXNcIiksXG4gICAgdXRpbCAgICAgID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxudmFyIGJhc2UxMFJlICAgID0gL15bMS05XVswLTldKiQvLFxuICAgIGJhc2UxME5lZ1JlID0gL14tP1sxLTldWzAtOV0qJC8sXG4gICAgYmFzZTE2UmUgICAgPSAvXjBbeF1bMC05YS1mQS1GXSskLyxcbiAgICBiYXNlMTZOZWdSZSA9IC9eLT8wW3hdWzAtOWEtZkEtRl0rJC8sXG4gICAgYmFzZThSZSAgICAgPSAvXjBbMC03XSskLyxcbiAgICBiYXNlOE5lZ1JlICA9IC9eLT8wWzAtN10rJC8sXG4gICAgbnVtYmVyUmUgICAgPSAvXig/IVtlRV0pWzAtOV0qKD86XFwuWzAtOV0qKT8oPzpbZUVdWystXT9bMC05XSspPyQvLFxuICAgIG5hbWVSZSAgICAgID0gL15bYS16QS1aX11bYS16QS1aXzAtOV0qJC8sXG4gICAgdHlwZVJlZlJlICAgPSAvXig/OlxcLj9bYS16QS1aX11bYS16QS1aXzAtOV0qKSg/OlxcLlthLXpBLVpfXVthLXpBLVpfMC05XSopKiQvLFxuICAgIGZxVHlwZVJlZlJlID0gL14oPzpcXC5bYS16QS1aX11bYS16QS1aXzAtOV0qKSskLztcblxuLyoqXG4gKiBSZXN1bHQgb2JqZWN0IHJldHVybmVkIGZyb20ge0BsaW5rIHBhcnNlfS5cbiAqIEBpbnRlcmZhY2UgSVBhcnNlclJlc3VsdFxuICogQHByb3BlcnR5IHtzdHJpbmd8dW5kZWZpbmVkfSBwYWNrYWdlIFBhY2thZ2UgbmFtZSwgaWYgZGVjbGFyZWRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nW118dW5kZWZpbmVkfSBpbXBvcnRzIEltcG9ydHMsIGlmIGFueVxuICogQHByb3BlcnR5IHtzdHJpbmdbXXx1bmRlZmluZWR9IHdlYWtJbXBvcnRzIFdlYWsgaW1wb3J0cywgaWYgYW55XG4gKiBAcHJvcGVydHkge3N0cmluZ3x1bmRlZmluZWR9IHN5bnRheCBTeW50YXgsIGlmIHNwZWNpZmllZCAoZWl0aGVyIGBcInByb3RvMlwiYCBvciBgXCJwcm90bzNcImApXG4gKiBAcHJvcGVydHkge1Jvb3R9IHJvb3QgUG9wdWxhdGVkIHJvb3QgaW5zdGFuY2VcbiAqL1xuXG4vKipcbiAqIE9wdGlvbnMgbW9kaWZ5aW5nIHRoZSBiZWhhdmlvciBvZiB7QGxpbmsgcGFyc2V9LlxuICogQGludGVyZmFjZSBJUGFyc2VPcHRpb25zXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtrZWVwQ2FzZT1mYWxzZV0gS2VlcHMgZmllbGQgY2FzaW5nIGluc3RlYWQgb2YgY29udmVydGluZyB0byBjYW1lbCBjYXNlXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFthbHRlcm5hdGVDb21tZW50TW9kZT1mYWxzZV0gUmVjb2duaXplIGRvdWJsZS1zbGFzaCBjb21tZW50cyBpbiBhZGRpdGlvbiB0byBkb2MtYmxvY2sgY29tbWVudHMuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtwcmVmZXJUcmFpbGluZ0NvbW1lbnQ9ZmFsc2VdIFVzZSB0cmFpbGluZyBjb21tZW50IHdoZW4gYm90aCBsZWFkaW5nIGNvbW1lbnQgYW5kIHRyYWlsaW5nIGNvbW1lbnQgZXhpc3QuXG4gKi9cblxuLyoqXG4gKiBPcHRpb25zIG1vZGlmeWluZyB0aGUgYmVoYXZpb3Igb2YgSlNPTiBzZXJpYWxpemF0aW9uLlxuICogQGludGVyZmFjZSBJVG9KU09OT3B0aW9uc1xuICogQHByb3BlcnR5IHtib29sZWFufSBba2VlcENvbW1lbnRzPWZhbHNlXSBTZXJpYWxpemVzIGNvbW1lbnRzLlxuICovXG5cbi8qKlxuICogUGFyc2VzIHRoZSBnaXZlbiAucHJvdG8gc291cmNlIGFuZCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSBwYXJzZWQgY29udGVudHMuXG4gKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFNvdXJjZSBjb250ZW50c1xuICogQHBhcmFtIHtSb290fSByb290IFJvb3QgdG8gcG9wdWxhdGVcbiAqIEBwYXJhbSB7SVBhcnNlT3B0aW9uc30gW29wdGlvbnNdIFBhcnNlIG9wdGlvbnMuIERlZmF1bHRzIHRvIHtAbGluayBwYXJzZS5kZWZhdWx0c30gd2hlbiBvbWl0dGVkLlxuICogQHJldHVybnMge0lQYXJzZXJSZXN1bHR9IFBhcnNlciByZXN1bHRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBmaWxlbmFtZT1udWxsIEN1cnJlbnRseSBwcm9jZXNzaW5nIGZpbGUgbmFtZSBmb3IgZXJyb3IgcmVwb3J0aW5nLCBpZiBrbm93blxuICogQHByb3BlcnR5IHtJUGFyc2VPcHRpb25zfSBkZWZhdWx0cyBEZWZhdWx0IHtAbGluayBJUGFyc2VPcHRpb25zfVxuICovXG5mdW5jdGlvbiBwYXJzZShzb3VyY2UsIHJvb3QsIG9wdGlvbnMpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBjYWxsYmFjay1yZXR1cm4gKi9cbiAgICBpZiAoIShyb290IGluc3RhbmNlb2YgUm9vdCkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHJvb3Q7XG4gICAgICAgIHJvb3QgPSBuZXcgUm9vdCgpO1xuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMpXG4gICAgICAgIG9wdGlvbnMgPSBwYXJzZS5kZWZhdWx0cztcblxuICAgIHZhciBwcmVmZXJUcmFpbGluZ0NvbW1lbnQgPSBvcHRpb25zLnByZWZlclRyYWlsaW5nQ29tbWVudCB8fCBmYWxzZTtcbiAgICB2YXIgdG4gPSB0b2tlbml6ZShzb3VyY2UsIG9wdGlvbnMuYWx0ZXJuYXRlQ29tbWVudE1vZGUgfHwgZmFsc2UpLFxuICAgICAgICBuZXh0ID0gdG4ubmV4dCxcbiAgICAgICAgcHVzaCA9IHRuLnB1c2gsXG4gICAgICAgIHBlZWsgPSB0bi5wZWVrLFxuICAgICAgICBza2lwID0gdG4uc2tpcCxcbiAgICAgICAgY21udCA9IHRuLmNtbnQ7XG5cbiAgICB2YXIgaGVhZCA9IHRydWUsXG4gICAgICAgIHBrZyxcbiAgICAgICAgaW1wb3J0cyxcbiAgICAgICAgd2Vha0ltcG9ydHMsXG4gICAgICAgIHN5bnRheCxcbiAgICAgICAgaXNQcm90bzMgPSBmYWxzZTtcblxuICAgIHZhciBwdHIgPSByb290O1xuXG4gICAgdmFyIGFwcGx5Q2FzZSA9IG9wdGlvbnMua2VlcENhc2UgPyBmdW5jdGlvbihuYW1lKSB7IHJldHVybiBuYW1lOyB9IDogdXRpbC5jYW1lbENhc2U7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGZ1bmN0aW9uIGlsbGVnYWwodG9rZW4sIG5hbWUsIGluc2lkZVRyeUNhdGNoKSB7XG4gICAgICAgIHZhciBmaWxlbmFtZSA9IHBhcnNlLmZpbGVuYW1lO1xuICAgICAgICBpZiAoIWluc2lkZVRyeUNhdGNoKVxuICAgICAgICAgICAgcGFyc2UuZmlsZW5hbWUgPSBudWxsO1xuICAgICAgICByZXR1cm4gRXJyb3IoXCJpbGxlZ2FsIFwiICsgKG5hbWUgfHwgXCJ0b2tlblwiKSArIFwiICdcIiArIHRva2VuICsgXCInIChcIiArIChmaWxlbmFtZSA/IGZpbGVuYW1lICsgXCIsIFwiIDogXCJcIikgKyBcImxpbmUgXCIgKyB0bi5saW5lICsgXCIpXCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlYWRTdHJpbmcoKSB7XG4gICAgICAgIHZhciB2YWx1ZXMgPSBbXSxcbiAgICAgICAgICAgIHRva2VuO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgIGlmICgodG9rZW4gPSBuZXh0KCkpICE9PSBcIlxcXCJcIiAmJiB0b2tlbiAhPT0gXCInXCIpXG4gICAgICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbik7XG5cbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKG5leHQoKSk7XG4gICAgICAgICAgICBza2lwKHRva2VuKTtcbiAgICAgICAgICAgIHRva2VuID0gcGVlaygpO1xuICAgICAgICB9IHdoaWxlICh0b2tlbiA9PT0gXCJcXFwiXCIgfHwgdG9rZW4gPT09IFwiJ1wiKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlcy5qb2luKFwiXCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlYWRWYWx1ZShhY2NlcHRUeXBlUmVmKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IG5leHQoKTtcbiAgICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICAgICAgY2FzZSBcIidcIjpcbiAgICAgICAgICAgIGNhc2UgXCJcXFwiXCI6XG4gICAgICAgICAgICAgICAgcHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRTdHJpbmcoKTtcbiAgICAgICAgICAgIGNhc2UgXCJ0cnVlXCI6IGNhc2UgXCJUUlVFXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBjYXNlIFwiZmFsc2VcIjogY2FzZSBcIkZBTFNFXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VOdW1iZXIodG9rZW4sIC8qIGluc2lkZVRyeUNhdGNoICovIHRydWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG5cbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICBpZiAoYWNjZXB0VHlwZVJlZiAmJiB0eXBlUmVmUmUudGVzdCh0b2tlbikpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbiwgXCJ2YWx1ZVwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlYWRSYW5nZXModGFyZ2V0LCBhY2NlcHRTdHJpbmdzKSB7XG4gICAgICAgIHZhciB0b2tlbiwgc3RhcnQ7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRTdHJpbmdzICYmICgodG9rZW4gPSBwZWVrKCkpID09PSBcIlxcXCJcIiB8fCB0b2tlbiA9PT0gXCInXCIpKVxuICAgICAgICAgICAgICAgIHRhcmdldC5wdXNoKHJlYWRTdHJpbmcoKSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGFyZ2V0LnB1c2goWyBzdGFydCA9IHBhcnNlSWQobmV4dCgpKSwgc2tpcChcInRvXCIsIHRydWUpID8gcGFyc2VJZChuZXh0KCkpIDogc3RhcnQgXSk7XG4gICAgICAgIH0gd2hpbGUgKHNraXAoXCIsXCIsIHRydWUpKTtcbiAgICAgICAgc2tpcChcIjtcIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VOdW1iZXIodG9rZW4sIGluc2lkZVRyeUNhdGNoKSB7XG4gICAgICAgIHZhciBzaWduID0gMTtcbiAgICAgICAgaWYgKHRva2VuLmNoYXJBdCgwKSA9PT0gXCItXCIpIHtcbiAgICAgICAgICAgIHNpZ24gPSAtMTtcbiAgICAgICAgICAgIHRva2VuID0gdG9rZW4uc3Vic3RyaW5nKDEpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgICAgIGNhc2UgXCJpbmZcIjogY2FzZSBcIklORlwiOiBjYXNlIFwiSW5mXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpZ24gKiBJbmZpbml0eTtcbiAgICAgICAgICAgIGNhc2UgXCJuYW5cIjogY2FzZSBcIk5BTlwiOiBjYXNlIFwiTmFuXCI6IGNhc2UgXCJOYU5cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICAgICAgY2FzZSBcIjBcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmFzZTEwUmUudGVzdCh0b2tlbikpXG4gICAgICAgICAgICByZXR1cm4gc2lnbiAqIHBhcnNlSW50KHRva2VuLCAxMCk7XG4gICAgICAgIGlmIChiYXNlMTZSZS50ZXN0KHRva2VuKSlcbiAgICAgICAgICAgIHJldHVybiBzaWduICogcGFyc2VJbnQodG9rZW4sIDE2KTtcbiAgICAgICAgaWYgKGJhc2U4UmUudGVzdCh0b2tlbikpXG4gICAgICAgICAgICByZXR1cm4gc2lnbiAqIHBhcnNlSW50KHRva2VuLCA4KTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAobnVtYmVyUmUudGVzdCh0b2tlbikpXG4gICAgICAgICAgICByZXR1cm4gc2lnbiAqIHBhcnNlRmxvYXQodG9rZW4pO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4sIFwibnVtYmVyXCIsIGluc2lkZVRyeUNhdGNoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUlkKHRva2VuLCBhY2NlcHROZWdhdGl2ZSkge1xuICAgICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgICAgICBjYXNlIFwibWF4XCI6IGNhc2UgXCJNQVhcIjogY2FzZSBcIk1heFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiA1MzY4NzA5MTE7XG4gICAgICAgICAgICBjYXNlIFwiMFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghYWNjZXB0TmVnYXRpdmUgJiYgdG9rZW4uY2hhckF0KDApID09PSBcIi1cIilcbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4sIFwiaWRcIik7XG5cbiAgICAgICAgaWYgKGJhc2UxME5lZ1JlLnRlc3QodG9rZW4pKVxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHRva2VuLCAxMCk7XG4gICAgICAgIGlmIChiYXNlMTZOZWdSZS50ZXN0KHRva2VuKSlcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh0b2tlbiwgMTYpO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmIChiYXNlOE5lZ1JlLnRlc3QodG9rZW4pKVxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHRva2VuLCA4KTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuLCBcImlkXCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlUGFja2FnZSgpIHtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHBrZyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbChcInBhY2thZ2VcIik7XG5cbiAgICAgICAgcGtnID0gbmV4dCgpO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIXR5cGVSZWZSZS50ZXN0KHBrZykpXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHBrZywgXCJuYW1lXCIpO1xuXG4gICAgICAgIHB0ciA9IHB0ci5kZWZpbmUocGtnKTtcbiAgICAgICAgc2tpcChcIjtcIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VJbXBvcnQoKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IHBlZWsoKTtcbiAgICAgICAgdmFyIHdoaWNoSW1wb3J0cztcbiAgICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICAgICAgY2FzZSBcIndlYWtcIjpcbiAgICAgICAgICAgICAgICB3aGljaEltcG9ydHMgPSB3ZWFrSW1wb3J0cyB8fCAod2Vha0ltcG9ydHMgPSBbXSk7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInB1YmxpY1wiOlxuICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWZhbGx0aHJvdWdoXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHdoaWNoSW1wb3J0cyA9IGltcG9ydHMgfHwgKGltcG9ydHMgPSBbXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdG9rZW4gPSByZWFkU3RyaW5nKCk7XG4gICAgICAgIHNraXAoXCI7XCIpO1xuICAgICAgICB3aGljaEltcG9ydHMucHVzaCh0b2tlbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VTeW50YXgoKSB7XG4gICAgICAgIHNraXAoXCI9XCIpO1xuICAgICAgICBzeW50YXggPSByZWFkU3RyaW5nKCk7XG4gICAgICAgIGlzUHJvdG8zID0gc3ludGF4ID09PSBcInByb3RvM1wiO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIWlzUHJvdG8zICYmIHN5bnRheCAhPT0gXCJwcm90bzJcIilcbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwoc3ludGF4LCBcInN5bnRheFwiKTtcblxuICAgICAgICBza2lwKFwiO1wiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUNvbW1vbihwYXJlbnQsIHRva2VuKSB7XG4gICAgICAgIHN3aXRjaCAodG9rZW4pIHtcblxuICAgICAgICAgICAgY2FzZSBcIm9wdGlvblwiOlxuICAgICAgICAgICAgICAgIHBhcnNlT3B0aW9uKHBhcmVudCwgdG9rZW4pO1xuICAgICAgICAgICAgICAgIHNraXAoXCI7XCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgIHBhcnNlVHlwZShwYXJlbnQsIHRva2VuKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgICAgICAgICBwYXJzZUVudW0ocGFyZW50LCB0b2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgICAgIGNhc2UgXCJzZXJ2aWNlXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VTZXJ2aWNlKHBhcmVudCwgdG9rZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgICAgICBjYXNlIFwiZXh0ZW5kXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VFeHRlbnNpb24ocGFyZW50LCB0b2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlmQmxvY2sob2JqLCBmbklmLCBmbkVsc2UpIHtcbiAgICAgICAgdmFyIHRyYWlsaW5nTGluZSA9IHRuLmxpbmU7XG4gICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgIGlmKHR5cGVvZiBvYmouY29tbWVudCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICBvYmouY29tbWVudCA9IGNtbnQoKTsgLy8gdHJ5IGJsb2NrLXR5cGUgY29tbWVudFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2JqLmZpbGVuYW1lID0gcGFyc2UuZmlsZW5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNraXAoXCJ7XCIsIHRydWUpKSB7XG4gICAgICAgICAgICB2YXIgdG9rZW47XG4gICAgICAgICAgICB3aGlsZSAoKHRva2VuID0gbmV4dCgpKSAhPT0gXCJ9XCIpXG4gICAgICAgICAgICAgICAgZm5JZih0b2tlbik7XG4gICAgICAgICAgICBza2lwKFwiO1wiLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmbkVsc2UpXG4gICAgICAgICAgICAgICAgZm5FbHNlKCk7XG4gICAgICAgICAgICBza2lwKFwiO1wiKTtcbiAgICAgICAgICAgIGlmIChvYmogJiYgKHR5cGVvZiBvYmouY29tbWVudCAhPT0gXCJzdHJpbmdcIiB8fCBwcmVmZXJUcmFpbGluZ0NvbW1lbnQpKVxuICAgICAgICAgICAgICAgIG9iai5jb21tZW50ID0gY21udCh0cmFpbGluZ0xpbmUpIHx8IG9iai5jb21tZW50OyAvLyB0cnkgbGluZS10eXBlIGNvbW1lbnRcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlVHlwZShwYXJlbnQsIHRva2VuKSB7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghbmFtZVJlLnRlc3QodG9rZW4gPSBuZXh0KCkpKVxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbiwgXCJ0eXBlIG5hbWVcIik7XG5cbiAgICAgICAgdmFyIHR5cGUgPSBuZXcgVHlwZSh0b2tlbik7XG4gICAgICAgIGlmQmxvY2sodHlwZSwgZnVuY3Rpb24gcGFyc2VUeXBlX2Jsb2NrKHRva2VuKSB7XG4gICAgICAgICAgICBpZiAocGFyc2VDb21tb24odHlwZSwgdG9rZW4pKVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgc3dpdGNoICh0b2tlbikge1xuXG4gICAgICAgICAgICAgICAgY2FzZSBcIm1hcFwiOlxuICAgICAgICAgICAgICAgICAgICBwYXJzZU1hcEZpZWxkKHR5cGUsIHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFwicmVxdWlyZWRcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwib3B0aW9uYWxcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwicmVwZWF0ZWRcIjpcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VGaWVsZCh0eXBlLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBcIm9uZW9mXCI6XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlT25lT2YodHlwZSwgdG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgXCJleHRlbnNpb25zXCI6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRSYW5nZXModHlwZS5leHRlbnNpb25zIHx8ICh0eXBlLmV4dGVuc2lvbnMgPSBbXSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgXCJyZXNlcnZlZFwiOlxuICAgICAgICAgICAgICAgICAgICByZWFkUmFuZ2VzKHR5cGUucmVzZXJ2ZWQgfHwgKHR5cGUucmVzZXJ2ZWQgPSBbXSksIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUHJvdG8zIHx8ICF0eXBlUmVmUmUudGVzdCh0b2tlbikpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuKTtcblxuICAgICAgICAgICAgICAgICAgICBwdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VGaWVsZCh0eXBlLCBcIm9wdGlvbmFsXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHBhcmVudC5hZGQodHlwZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VGaWVsZChwYXJlbnQsIHJ1bGUsIGV4dGVuZCkge1xuICAgICAgICB2YXIgdHlwZSA9IG5leHQoKTtcbiAgICAgICAgaWYgKHR5cGUgPT09IFwiZ3JvdXBcIikge1xuICAgICAgICAgICAgcGFyc2VHcm91cChwYXJlbnQsIHJ1bGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghdHlwZVJlZlJlLnRlc3QodHlwZSkpXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHR5cGUsIFwidHlwZVwiKTtcblxuICAgICAgICB2YXIgbmFtZSA9IG5leHQoKTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCFuYW1lUmUudGVzdChuYW1lKSlcbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwobmFtZSwgXCJuYW1lXCIpO1xuXG4gICAgICAgIG5hbWUgPSBhcHBseUNhc2UobmFtZSk7XG4gICAgICAgIHNraXAoXCI9XCIpO1xuXG4gICAgICAgIHZhciBmaWVsZCA9IG5ldyBGaWVsZChuYW1lLCBwYXJzZUlkKG5leHQoKSksIHR5cGUsIHJ1bGUsIGV4dGVuZCk7XG4gICAgICAgIGlmQmxvY2soZmllbGQsIGZ1bmN0aW9uIHBhcnNlRmllbGRfYmxvY2sodG9rZW4pIHtcblxuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICAgIGlmICh0b2tlbiA9PT0gXCJvcHRpb25cIikge1xuICAgICAgICAgICAgICAgIHBhcnNlT3B0aW9uKGZpZWxkLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgc2tpcChcIjtcIik7XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuKTtcblxuICAgICAgICB9LCBmdW5jdGlvbiBwYXJzZUZpZWxkX2xpbmUoKSB7XG4gICAgICAgICAgICBwYXJzZUlubGluZU9wdGlvbnMoZmllbGQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcGFyZW50LmFkZChmaWVsZCk7XG5cbiAgICAgICAgLy8gSlNPTiBkZWZhdWx0cyB0byBwYWNrZWQ9dHJ1ZSBpZiBub3Qgc2V0IHNvIHdlIGhhdmUgdG8gc2V0IHBhY2tlZD1mYWxzZSBleHBsaWNpdHkgd2hlblxuICAgICAgICAvLyBwYXJzaW5nIHByb3RvMiBkZXNjcmlwdG9ycyB3aXRob3V0IHRoZSBvcHRpb24sIHdoZXJlIGFwcGxpY2FibGUuIFRoaXMgbXVzdCBiZSBkb25lIGZvclxuICAgICAgICAvLyBhbGwga25vd24gcGFja2FibGUgdHlwZXMgYW5kIGFueXRoaW5nIHRoYXQgY291bGQgYmUgYW4gZW51bSAoPSBpcyBub3QgYSBiYXNpYyB0eXBlKS5cbiAgICAgICAgaWYgKCFpc1Byb3RvMyAmJiBmaWVsZC5yZXBlYXRlZCAmJiAodHlwZXMucGFja2VkW3R5cGVdICE9PSB1bmRlZmluZWQgfHwgdHlwZXMuYmFzaWNbdHlwZV0gPT09IHVuZGVmaW5lZCkpXG4gICAgICAgICAgICBmaWVsZC5zZXRPcHRpb24oXCJwYWNrZWRcIiwgZmFsc2UsIC8qIGlmTm90U2V0ICovIHRydWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlR3JvdXAocGFyZW50LCBydWxlKSB7XG4gICAgICAgIHZhciBuYW1lID0gbmV4dCgpO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIW5hbWVSZS50ZXN0KG5hbWUpKVxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbChuYW1lLCBcIm5hbWVcIik7XG5cbiAgICAgICAgdmFyIGZpZWxkTmFtZSA9IHV0aWwubGNGaXJzdChuYW1lKTtcbiAgICAgICAgaWYgKG5hbWUgPT09IGZpZWxkTmFtZSlcbiAgICAgICAgICAgIG5hbWUgPSB1dGlsLnVjRmlyc3QobmFtZSk7XG4gICAgICAgIHNraXAoXCI9XCIpO1xuICAgICAgICB2YXIgaWQgPSBwYXJzZUlkKG5leHQoKSk7XG4gICAgICAgIHZhciB0eXBlID0gbmV3IFR5cGUobmFtZSk7XG4gICAgICAgIHR5cGUuZ3JvdXAgPSB0cnVlO1xuICAgICAgICB2YXIgZmllbGQgPSBuZXcgRmllbGQoZmllbGROYW1lLCBpZCwgbmFtZSwgcnVsZSk7XG4gICAgICAgIGZpZWxkLmZpbGVuYW1lID0gcGFyc2UuZmlsZW5hbWU7XG4gICAgICAgIGlmQmxvY2sodHlwZSwgZnVuY3Rpb24gcGFyc2VHcm91cF9ibG9jayh0b2tlbikge1xuICAgICAgICAgICAgc3dpdGNoICh0b2tlbikge1xuXG4gICAgICAgICAgICAgICAgY2FzZSBcIm9wdGlvblwiOlxuICAgICAgICAgICAgICAgICAgICBwYXJzZU9wdGlvbih0eXBlLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIHNraXAoXCI7XCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgXCJyZXF1aXJlZFwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJvcHRpb25hbFwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJyZXBlYXRlZFwiOlxuICAgICAgICAgICAgICAgICAgICBwYXJzZUZpZWxkKHR5cGUsIHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4pOyAvLyB0aGVyZSBhcmUgbm8gZ3JvdXBzIHdpdGggcHJvdG8zIHNlbWFudGljc1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcGFyZW50LmFkZCh0eXBlKVxuICAgICAgICAgICAgICAuYWRkKGZpZWxkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU1hcEZpZWxkKHBhcmVudCkge1xuICAgICAgICBza2lwKFwiPFwiKTtcbiAgICAgICAgdmFyIGtleVR5cGUgPSBuZXh0KCk7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICh0eXBlcy5tYXBLZXlba2V5VHlwZV0gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwoa2V5VHlwZSwgXCJ0eXBlXCIpO1xuXG4gICAgICAgIHNraXAoXCIsXCIpO1xuICAgICAgICB2YXIgdmFsdWVUeXBlID0gbmV4dCgpO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIXR5cGVSZWZSZS50ZXN0KHZhbHVlVHlwZSkpXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHZhbHVlVHlwZSwgXCJ0eXBlXCIpO1xuXG4gICAgICAgIHNraXAoXCI+XCIpO1xuICAgICAgICB2YXIgbmFtZSA9IG5leHQoKTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCFuYW1lUmUudGVzdChuYW1lKSlcbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwobmFtZSwgXCJuYW1lXCIpO1xuXG4gICAgICAgIHNraXAoXCI9XCIpO1xuICAgICAgICB2YXIgZmllbGQgPSBuZXcgTWFwRmllbGQoYXBwbHlDYXNlKG5hbWUpLCBwYXJzZUlkKG5leHQoKSksIGtleVR5cGUsIHZhbHVlVHlwZSk7XG4gICAgICAgIGlmQmxvY2soZmllbGQsIGZ1bmN0aW9uIHBhcnNlTWFwRmllbGRfYmxvY2sodG9rZW4pIHtcblxuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICAgIGlmICh0b2tlbiA9PT0gXCJvcHRpb25cIikge1xuICAgICAgICAgICAgICAgIHBhcnNlT3B0aW9uKGZpZWxkLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgc2tpcChcIjtcIik7XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuKTtcblxuICAgICAgICB9LCBmdW5jdGlvbiBwYXJzZU1hcEZpZWxkX2xpbmUoKSB7XG4gICAgICAgICAgICBwYXJzZUlubGluZU9wdGlvbnMoZmllbGQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcGFyZW50LmFkZChmaWVsZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VPbmVPZihwYXJlbnQsIHRva2VuKSB7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghbmFtZVJlLnRlc3QodG9rZW4gPSBuZXh0KCkpKVxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbiwgXCJuYW1lXCIpO1xuXG4gICAgICAgIHZhciBvbmVvZiA9IG5ldyBPbmVPZihhcHBseUNhc2UodG9rZW4pKTtcbiAgICAgICAgaWZCbG9jayhvbmVvZiwgZnVuY3Rpb24gcGFyc2VPbmVPZl9ibG9jayh0b2tlbikge1xuICAgICAgICAgICAgaWYgKHRva2VuID09PSBcIm9wdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VPcHRpb24ob25lb2YsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBza2lwKFwiO1wiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgcGFyc2VGaWVsZChvbmVvZiwgXCJvcHRpb25hbFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHBhcmVudC5hZGQob25lb2YpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlRW51bShwYXJlbnQsIHRva2VuKSB7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghbmFtZVJlLnRlc3QodG9rZW4gPSBuZXh0KCkpKVxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbiwgXCJuYW1lXCIpO1xuXG4gICAgICAgIHZhciBlbm0gPSBuZXcgRW51bSh0b2tlbik7XG4gICAgICAgIGlmQmxvY2soZW5tLCBmdW5jdGlvbiBwYXJzZUVudW1fYmxvY2sodG9rZW4pIHtcbiAgICAgICAgICBzd2l0Y2godG9rZW4pIHtcbiAgICAgICAgICAgIGNhc2UgXCJvcHRpb25cIjpcbiAgICAgICAgICAgICAgcGFyc2VPcHRpb24oZW5tLCB0b2tlbik7XG4gICAgICAgICAgICAgIHNraXAoXCI7XCIpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcInJlc2VydmVkXCI6XG4gICAgICAgICAgICAgIHJlYWRSYW5nZXMoZW5tLnJlc2VydmVkIHx8IChlbm0ucmVzZXJ2ZWQgPSBbXSksIHRydWUpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgcGFyc2VFbnVtVmFsdWUoZW5tLCB0b2tlbik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcGFyZW50LmFkZChlbm0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlRW51bVZhbHVlKHBhcmVudCwgdG9rZW4pIHtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCFuYW1lUmUudGVzdCh0b2tlbikpXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuLCBcIm5hbWVcIik7XG5cbiAgICAgICAgc2tpcChcIj1cIik7XG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcnNlSWQobmV4dCgpLCB0cnVlKSxcbiAgICAgICAgICAgIGR1bW15ID0ge307XG4gICAgICAgIGlmQmxvY2soZHVtbXksIGZ1bmN0aW9uIHBhcnNlRW51bVZhbHVlX2Jsb2NrKHRva2VuKSB7XG5cbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICBpZiAodG9rZW4gPT09IFwib3B0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBwYXJzZU9wdGlvbihkdW1teSwgdG9rZW4pOyAvLyBza2lwXG4gICAgICAgICAgICAgICAgc2tpcChcIjtcIik7XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuKTtcblxuICAgICAgICB9LCBmdW5jdGlvbiBwYXJzZUVudW1WYWx1ZV9saW5lKCkge1xuICAgICAgICAgICAgcGFyc2VJbmxpbmVPcHRpb25zKGR1bW15KTsgLy8gc2tpcFxuICAgICAgICB9KTtcbiAgICAgICAgcGFyZW50LmFkZCh0b2tlbiwgdmFsdWUsIGR1bW15LmNvbW1lbnQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlT3B0aW9uKHBhcmVudCwgdG9rZW4pIHtcbiAgICAgICAgdmFyIGlzQ3VzdG9tID0gc2tpcChcIihcIiwgdHJ1ZSk7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghdHlwZVJlZlJlLnRlc3QodG9rZW4gPSBuZXh0KCkpKVxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbiwgXCJuYW1lXCIpO1xuXG4gICAgICAgIHZhciBuYW1lID0gdG9rZW47XG4gICAgICAgIHZhciBvcHRpb24gPSBuYW1lO1xuICAgICAgICB2YXIgcHJvcE5hbWU7XG5cbiAgICAgICAgaWYgKGlzQ3VzdG9tKSB7XG4gICAgICAgICAgICBza2lwKFwiKVwiKTtcbiAgICAgICAgICAgIG5hbWUgPSBcIihcIiArIG5hbWUgKyBcIilcIjtcbiAgICAgICAgICAgIG9wdGlvbiA9IG5hbWU7XG4gICAgICAgICAgICB0b2tlbiA9IHBlZWsoKTtcbiAgICAgICAgICAgIGlmIChmcVR5cGVSZWZSZS50ZXN0KHRva2VuKSkge1xuICAgICAgICAgICAgICAgIHByb3BOYW1lID0gdG9rZW4uc3Vic3RyKDEpOyAvL3JlbW92ZSAnLicgYmVmb3JlIHByb3BlcnR5IG5hbWVcbiAgICAgICAgICAgICAgICBuYW1lICs9IHRva2VuO1xuICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBza2lwKFwiPVwiKTtcbiAgICAgICAgdmFyIG9wdGlvblZhbHVlID0gcGFyc2VPcHRpb25WYWx1ZShwYXJlbnQsIG5hbWUpO1xuICAgICAgICBzZXRQYXJzZWRPcHRpb24ocGFyZW50LCBvcHRpb24sIG9wdGlvblZhbHVlLCBwcm9wTmFtZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VPcHRpb25WYWx1ZShwYXJlbnQsIG5hbWUpIHtcbiAgICAgICAgaWYgKHNraXAoXCJ7XCIsIHRydWUpKSB7IC8vIHsgYTogXCJmb29cIiBiIHsgYzogXCJiYXJcIiB9IH1cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgICAgICAgIHdoaWxlICghc2tpcChcIn1cIiwgdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgICBpZiAoIW5hbWVSZS50ZXN0KHRva2VuID0gbmV4dCgpKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbiwgXCJuYW1lXCIpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBwcm9wTmFtZSA9IHRva2VuO1xuICAgICAgICAgICAgICAgIGlmIChwZWVrKCkgPT09IFwie1wiKVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnNlT3B0aW9uVmFsdWUocGFyZW50LCBuYW1lICsgXCIuXCIgKyB0b2tlbik7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNraXAoXCI6XCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVlaygpID09PSBcIntcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2VPcHRpb25WYWx1ZShwYXJlbnQsIG5hbWUgKyBcIi5cIiArIHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlYWRWYWx1ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldE9wdGlvbihwYXJlbnQsIG5hbWUgKyBcIi5cIiArIHRva2VuLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHByZXZWYWx1ZSA9IHJlc3VsdFtwcm9wTmFtZV07XG4gICAgICAgICAgICAgICAgaWYgKHByZXZWYWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBbXS5jb25jYXQocHJldlZhbHVlKS5jb25jYXQodmFsdWUpO1xuICAgICAgICAgICAgICAgIHJlc3VsdFtwcm9wTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBza2lwKFwiLFwiLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2ltcGxlVmFsdWUgPSByZWFkVmFsdWUodHJ1ZSk7XG4gICAgICAgIHNldE9wdGlvbihwYXJlbnQsIG5hbWUsIHNpbXBsZVZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHNpbXBsZVZhbHVlO1xuICAgICAgICAvLyBEb2VzIG5vdCBlbmZvcmNlIGEgZGVsaW1pdGVyIHRvIGJlIHVuaXZlcnNhbFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9wdGlvbihwYXJlbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmIChwYXJlbnQuc2V0T3B0aW9uKVxuICAgICAgICAgICAgcGFyZW50LnNldE9wdGlvbihuYW1lLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0UGFyc2VkT3B0aW9uKHBhcmVudCwgbmFtZSwgdmFsdWUsIHByb3BOYW1lKSB7XG4gICAgICAgIGlmIChwYXJlbnQuc2V0UGFyc2VkT3B0aW9uKVxuICAgICAgICAgICAgcGFyZW50LnNldFBhcnNlZE9wdGlvbihuYW1lLCB2YWx1ZSwgcHJvcE5hbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlSW5saW5lT3B0aW9ucyhwYXJlbnQpIHtcbiAgICAgICAgaWYgKHNraXAoXCJbXCIsIHRydWUpKSB7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgcGFyc2VPcHRpb24ocGFyZW50LCBcIm9wdGlvblwiKTtcbiAgICAgICAgICAgIH0gd2hpbGUgKHNraXAoXCIsXCIsIHRydWUpKTtcbiAgICAgICAgICAgIHNraXAoXCJdXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VTZXJ2aWNlKHBhcmVudCwgdG9rZW4pIHtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCFuYW1lUmUudGVzdCh0b2tlbiA9IG5leHQoKSkpXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuLCBcInNlcnZpY2UgbmFtZVwiKTtcblxuICAgICAgICB2YXIgc2VydmljZSA9IG5ldyBTZXJ2aWNlKHRva2VuKTtcbiAgICAgICAgaWZCbG9jayhzZXJ2aWNlLCBmdW5jdGlvbiBwYXJzZVNlcnZpY2VfYmxvY2sodG9rZW4pIHtcbiAgICAgICAgICAgIGlmIChwYXJzZUNvbW1vbihzZXJ2aWNlLCB0b2tlbikpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgICAgaWYgKHRva2VuID09PSBcInJwY1wiKVxuICAgICAgICAgICAgICAgIHBhcnNlTWV0aG9kKHNlcnZpY2UsIHRva2VuKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHBhcmVudC5hZGQoc2VydmljZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VNZXRob2QocGFyZW50LCB0b2tlbikge1xuICAgICAgICAvLyBHZXQgdGhlIGNvbW1lbnQgb2YgdGhlIHByZWNlZGluZyBsaW5lIG5vdyAoaWYgb25lIGV4aXN0cykgaW4gY2FzZSB0aGVcbiAgICAgICAgLy8gbWV0aG9kIGlzIGRlZmluZWQgYWNyb3NzIG11bHRpcGxlIGxpbmVzLlxuICAgICAgICB2YXIgY29tbWVudFRleHQgPSBjbW50KCk7XG5cbiAgICAgICAgdmFyIHR5cGUgPSB0b2tlbjtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCFuYW1lUmUudGVzdCh0b2tlbiA9IG5leHQoKSkpXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuLCBcIm5hbWVcIik7XG5cbiAgICAgICAgdmFyIG5hbWUgPSB0b2tlbixcbiAgICAgICAgICAgIHJlcXVlc3RUeXBlLCByZXF1ZXN0U3RyZWFtLFxuICAgICAgICAgICAgcmVzcG9uc2VUeXBlLCByZXNwb25zZVN0cmVhbTtcblxuICAgICAgICBza2lwKFwiKFwiKTtcbiAgICAgICAgaWYgKHNraXAoXCJzdHJlYW1cIiwgdHJ1ZSkpXG4gICAgICAgICAgICByZXF1ZXN0U3RyZWFtID0gdHJ1ZTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCF0eXBlUmVmUmUudGVzdCh0b2tlbiA9IG5leHQoKSkpXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuKTtcblxuICAgICAgICByZXF1ZXN0VHlwZSA9IHRva2VuO1xuICAgICAgICBza2lwKFwiKVwiKTsgc2tpcChcInJldHVybnNcIik7IHNraXAoXCIoXCIpO1xuICAgICAgICBpZiAoc2tpcChcInN0cmVhbVwiLCB0cnVlKSlcbiAgICAgICAgICAgIHJlc3BvbnNlU3RyZWFtID0gdHJ1ZTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCF0eXBlUmVmUmUudGVzdCh0b2tlbiA9IG5leHQoKSkpXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuKTtcblxuICAgICAgICByZXNwb25zZVR5cGUgPSB0b2tlbjtcbiAgICAgICAgc2tpcChcIilcIik7XG5cbiAgICAgICAgdmFyIG1ldGhvZCA9IG5ldyBNZXRob2QobmFtZSwgdHlwZSwgcmVxdWVzdFR5cGUsIHJlc3BvbnNlVHlwZSwgcmVxdWVzdFN0cmVhbSwgcmVzcG9uc2VTdHJlYW0pO1xuICAgICAgICBtZXRob2QuY29tbWVudCA9IGNvbW1lbnRUZXh0O1xuICAgICAgICBpZkJsb2NrKG1ldGhvZCwgZnVuY3Rpb24gcGFyc2VNZXRob2RfYmxvY2sodG9rZW4pIHtcblxuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICAgIGlmICh0b2tlbiA9PT0gXCJvcHRpb25cIikge1xuICAgICAgICAgICAgICAgIHBhcnNlT3B0aW9uKG1ldGhvZCwgdG9rZW4pO1xuICAgICAgICAgICAgICAgIHNraXAoXCI7XCIpO1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbik7XG5cbiAgICAgICAgfSk7XG4gICAgICAgIHBhcmVudC5hZGQobWV0aG9kKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUV4dGVuc2lvbihwYXJlbnQsIHRva2VuKSB7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghdHlwZVJlZlJlLnRlc3QodG9rZW4gPSBuZXh0KCkpKVxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbiwgXCJyZWZlcmVuY2VcIik7XG5cbiAgICAgICAgdmFyIHJlZmVyZW5jZSA9IHRva2VuO1xuICAgICAgICBpZkJsb2NrKG51bGwsIGZ1bmN0aW9uIHBhcnNlRXh0ZW5zaW9uX2Jsb2NrKHRva2VuKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRva2VuKSB7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFwicmVxdWlyZWRcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwicmVwZWF0ZWRcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwib3B0aW9uYWxcIjpcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VGaWVsZChwYXJlbnQsIHRva2VuLCByZWZlcmVuY2UpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUHJvdG8zIHx8ICF0eXBlUmVmUmUudGVzdCh0b2tlbikpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgcHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlRmllbGQocGFyZW50LCBcIm9wdGlvbmFsXCIsIHJlZmVyZW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgdG9rZW47XG4gICAgd2hpbGUgKCh0b2tlbiA9IG5leHQoKSkgIT09IG51bGwpIHtcbiAgICAgICAgc3dpdGNoICh0b2tlbikge1xuXG4gICAgICAgICAgICBjYXNlIFwicGFja2FnZVwiOlxuXG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgICAgaWYgKCFoZWFkKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuKTtcblxuICAgICAgICAgICAgICAgIHBhcnNlUGFja2FnZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwiaW1wb3J0XCI6XG5cbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgICBpZiAoIWhlYWQpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4pO1xuXG4gICAgICAgICAgICAgICAgcGFyc2VJbXBvcnQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcInN5bnRheFwiOlxuXG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgICAgaWYgKCFoZWFkKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuKTtcblxuICAgICAgICAgICAgICAgIHBhcnNlU3ludGF4KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJvcHRpb25cIjpcblxuICAgICAgICAgICAgICAgIHBhcnNlT3B0aW9uKHB0ciwgdG9rZW4pO1xuICAgICAgICAgICAgICAgIHNraXAoXCI7XCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuXG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VDb21tb24ocHRyLCB0b2tlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGFyc2UuZmlsZW5hbWUgPSBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICAgIFwicGFja2FnZVwiICAgICA6IHBrZyxcbiAgICAgICAgXCJpbXBvcnRzXCIgICAgIDogaW1wb3J0cyxcbiAgICAgICAgIHdlYWtJbXBvcnRzICA6IHdlYWtJbXBvcnRzLFxuICAgICAgICAgc3ludGF4ICAgICAgIDogc3ludGF4LFxuICAgICAgICAgcm9vdCAgICAgICAgIDogcm9vdFxuICAgIH07XG59XG5cbi8qKlxuICogUGFyc2VzIHRoZSBnaXZlbiAucHJvdG8gc291cmNlIGFuZCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSBwYXJzZWQgY29udGVudHMuXG4gKiBAbmFtZSBwYXJzZVxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFNvdXJjZSBjb250ZW50c1xuICogQHBhcmFtIHtJUGFyc2VPcHRpb25zfSBbb3B0aW9uc10gUGFyc2Ugb3B0aW9ucy4gRGVmYXVsdHMgdG8ge0BsaW5rIHBhcnNlLmRlZmF1bHRzfSB3aGVuIG9taXR0ZWQuXG4gKiBAcmV0dXJucyB7SVBhcnNlclJlc3VsdH0gUGFyc2VyIHJlc3VsdFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGZpbGVuYW1lPW51bGwgQ3VycmVudGx5IHByb2Nlc3NpbmcgZmlsZSBuYW1lIGZvciBlcnJvciByZXBvcnRpbmcsIGlmIGtub3duXG4gKiBAcHJvcGVydHkge0lQYXJzZU9wdGlvbnN9IGRlZmF1bHRzIERlZmF1bHQge0BsaW5rIElQYXJzZU9wdGlvbnN9XG4gKiBAdmFyaWF0aW9uIDJcbiAqL1xuIiwgIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBjb21tb247XG5cbnZhciBjb21tb25SZSA9IC9cXC98XFwuLztcblxuLyoqXG4gKiBQcm92aWRlcyBjb21tb24gdHlwZSBkZWZpbml0aW9ucy5cbiAqIENhbiBhbHNvIGJlIHVzZWQgdG8gcHJvdmlkZSBhZGRpdGlvbmFsIGdvb2dsZSB0eXBlcyBvciB5b3VyIG93biBjdXN0b20gdHlwZXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBTaG9ydCBuYW1lIGFzIGluIGBnb29nbGUvcHJvdG9idWYvW25hbWVdLnByb3RvYCBvciBmdWxsIGZpbGUgbmFtZVxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0ganNvbiBKU09OIGRlZmluaXRpb24gd2l0aGluIGBnb29nbGUucHJvdG9idWZgIGlmIGEgc2hvcnQgbmFtZSwgb3RoZXJ3aXNlIHRoZSBmaWxlJ3Mgcm9vdCBkZWZpbml0aW9uXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogQHByb3BlcnR5IHtJTmFtZXNwYWNlfSBnb29nbGUvcHJvdG9idWYvYW55LnByb3RvIEFueVxuICogQHByb3BlcnR5IHtJTmFtZXNwYWNlfSBnb29nbGUvcHJvdG9idWYvZHVyYXRpb24ucHJvdG8gRHVyYXRpb25cbiAqIEBwcm9wZXJ0eSB7SU5hbWVzcGFjZX0gZ29vZ2xlL3Byb3RvYnVmL2VtcHR5LnByb3RvIEVtcHR5XG4gKiBAcHJvcGVydHkge0lOYW1lc3BhY2V9IGdvb2dsZS9wcm90b2J1Zi9maWVsZF9tYXNrLnByb3RvIEZpZWxkTWFza1xuICogQHByb3BlcnR5IHtJTmFtZXNwYWNlfSBnb29nbGUvcHJvdG9idWYvc3RydWN0LnByb3RvIFN0cnVjdCwgVmFsdWUsIE51bGxWYWx1ZSBhbmQgTGlzdFZhbHVlXG4gKiBAcHJvcGVydHkge0lOYW1lc3BhY2V9IGdvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8gVGltZXN0YW1wXG4gKiBAcHJvcGVydHkge0lOYW1lc3BhY2V9IGdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90byBXcmFwcGVyc1xuICogQGV4YW1wbGVcbiAqIC8vIG1hbnVhbGx5IHByb3ZpZGVzIGRlc2NyaXB0b3IucHJvdG8gKGFzc3VtZXMgZ29vZ2xlL3Byb3RvYnVmLyBuYW1lc3BhY2UgYW5kIC5wcm90byBleHRlbnNpb24pXG4gKiBwcm90b2J1Zi5jb21tb24oXCJkZXNjcmlwdG9yXCIsIGRlc2NyaXB0b3JKc29uKTtcbiAqXG4gKiAvLyBtYW51YWxseSBwcm92aWRlcyBhIGN1c3RvbSBkZWZpbml0aW9uICh1c2VzIG15LmZvbyBuYW1lc3BhY2UpXG4gKiBwcm90b2J1Zi5jb21tb24oXCJteS9mb28vYmFyLnByb3RvXCIsIG15Rm9vQmFySnNvbik7XG4gKi9cbmZ1bmN0aW9uIGNvbW1vbihuYW1lLCBqc29uKSB7XG4gICAgaWYgKCFjb21tb25SZS50ZXN0KG5hbWUpKSB7XG4gICAgICAgIG5hbWUgPSBcImdvb2dsZS9wcm90b2J1Zi9cIiArIG5hbWUgKyBcIi5wcm90b1wiO1xuICAgICAgICBqc29uID0geyBuZXN0ZWQ6IHsgZ29vZ2xlOiB7IG5lc3RlZDogeyBwcm90b2J1ZjogeyBuZXN0ZWQ6IGpzb24gfSB9IH0gfSB9O1xuICAgIH1cbiAgICBjb21tb25bbmFtZV0gPSBqc29uO1xufVxuXG4vLyBOb3QgcHJvdmlkZWQgYmVjYXVzZSBvZiBsaW1pdGVkIHVzZSAoZmVlbCBmcmVlIHRvIGRpc2N1c3Mgb3IgdG8gcHJvdmlkZSB5b3Vyc2VsZik6XG4vL1xuLy8gZ29vZ2xlL3Byb3RvYnVmL2Rlc2NyaXB0b3IucHJvdG9cbi8vIGdvb2dsZS9wcm90b2J1Zi9zb3VyY2VfY29udGV4dC5wcm90b1xuLy8gZ29vZ2xlL3Byb3RvYnVmL3R5cGUucHJvdG9cbi8vXG4vLyBTdHJpcHBlZCBhbmQgcHJlLXBhcnNlZCB2ZXJzaW9ucyBvZiB0aGVzZSBub24tYnVuZGxlZCBmaWxlcyBhcmUgaW5zdGVhZCBhdmFpbGFibGUgYXMgcGFydCBvZlxuLy8gdGhlIHJlcG9zaXRvcnkgb3IgcGFja2FnZSB3aXRoaW4gdGhlIGdvb2dsZS9wcm90b2J1ZiBkaXJlY3RvcnkuXG5cbmNvbW1vbihcImFueVwiLCB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLkFueSBtZXNzYWdlLlxuICAgICAqIEBpbnRlcmZhY2UgSUFueVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt0eXBlVXJsXVxuICAgICAqIEBwcm9wZXJ0eSB7VWludDhBcnJheX0gW2J5dGVzXVxuICAgICAqIEBtZW1iZXJvZiBjb21tb25cbiAgICAgKi9cbiAgICBBbnk6IHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICB0eXBlX3VybDoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgaWQ6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBpZDogMlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSk7XG5cbnZhciB0aW1lVHlwZTtcblxuY29tbW9uKFwiZHVyYXRpb25cIiwge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBvZiBhIGdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbiBtZXNzYWdlLlxuICAgICAqIEBpbnRlcmZhY2UgSUR1cmF0aW9uXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfSBbc2Vjb25kc11cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gW25hbm9zXVxuICAgICAqIEBtZW1iZXJvZiBjb21tb25cbiAgICAgKi9cbiAgICBEdXJhdGlvbjogdGltZVR5cGUgPSB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgc2Vjb25kczoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiaW50NjRcIixcbiAgICAgICAgICAgICAgICBpZDogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5hbm9zOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbnQzMlwiLFxuICAgICAgICAgICAgICAgIGlkOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuY29tbW9uKFwidGltZXN0YW1wXCIsIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnRpZXMgb2YgYSBnb29nbGUucHJvdG9idWYuVGltZXN0YW1wIG1lc3NhZ2UuXG4gICAgICogQGludGVyZmFjZSBJVGltZXN0YW1wXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfSBbc2Vjb25kc11cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gW25hbm9zXVxuICAgICAqIEBtZW1iZXJvZiBjb21tb25cbiAgICAgKi9cbiAgICBUaW1lc3RhbXA6IHRpbWVUeXBlXG59KTtcblxuY29tbW9uKFwiZW1wdHlcIiwge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBvZiBhIGdvb2dsZS5wcm90b2J1Zi5FbXB0eSBtZXNzYWdlLlxuICAgICAqIEBpbnRlcmZhY2UgSUVtcHR5XG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxuICAgICAqL1xuICAgIEVtcHR5OiB7XG4gICAgICAgIGZpZWxkczoge31cbiAgICB9XG59KTtcblxuY29tbW9uKFwic3RydWN0XCIsIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnRpZXMgb2YgYSBnb29nbGUucHJvdG9idWYuU3RydWN0IG1lc3NhZ2UuXG4gICAgICogQGludGVyZmFjZSBJU3RydWN0XG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLElWYWx1ZT59IFtmaWVsZHNdXG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxuICAgICAqL1xuICAgIFN0cnVjdDoge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICAgIGtleVR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJWYWx1ZVwiLFxuICAgICAgICAgICAgICAgIGlkOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBvZiBhIGdvb2dsZS5wcm90b2J1Zi5WYWx1ZSBtZXNzYWdlLlxuICAgICAqIEBpbnRlcmZhY2UgSVZhbHVlXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2tpbmRdXG4gICAgICogQHByb3BlcnR5IHswfSBbbnVsbFZhbHVlXVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbnVtYmVyVmFsdWVdXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtzdHJpbmdWYWx1ZV1cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtib29sVmFsdWVdXG4gICAgICogQHByb3BlcnR5IHtJU3RydWN0fSBbc3RydWN0VmFsdWVdXG4gICAgICogQHByb3BlcnR5IHtJTGlzdFZhbHVlfSBbbGlzdFZhbHVlXVxuICAgICAqIEBtZW1iZXJvZiBjb21tb25cbiAgICAgKi9cbiAgICBWYWx1ZToge1xuICAgICAgICBvbmVvZnM6IHtcbiAgICAgICAgICAgIGtpbmQ6IHtcbiAgICAgICAgICAgICAgICBvbmVvZjogW1xuICAgICAgICAgICAgICAgICAgICBcIm51bGxWYWx1ZVwiLFxuICAgICAgICAgICAgICAgICAgICBcIm51bWJlclZhbHVlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwic3RyaW5nVmFsdWVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJib29sVmFsdWVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJzdHJ1Y3RWYWx1ZVwiLFxuICAgICAgICAgICAgICAgICAgICBcImxpc3RWYWx1ZVwiXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIG51bGxWYWx1ZToge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiTnVsbFZhbHVlXCIsXG4gICAgICAgICAgICAgICAgaWQ6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBudW1iZXJWYWx1ZToge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZG91YmxlXCIsXG4gICAgICAgICAgICAgICAgaWQ6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJpbmdWYWx1ZToge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgaWQ6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBib29sVmFsdWU6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgICBpZDogNFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0cnVjdFZhbHVlOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJTdHJ1Y3RcIixcbiAgICAgICAgICAgICAgICBpZDogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpc3RWYWx1ZToge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiTGlzdFZhbHVlXCIsXG4gICAgICAgICAgICAgICAgaWQ6IDZcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBOdWxsVmFsdWU6IHtcbiAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICBOVUxMX1ZBTFVFOiAwXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBvZiBhIGdvb2dsZS5wcm90b2J1Zi5MaXN0VmFsdWUgbWVzc2FnZS5cbiAgICAgKiBAaW50ZXJmYWNlIElMaXN0VmFsdWVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPElWYWx1ZT59IFt2YWx1ZXNdXG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxuICAgICAqL1xuICAgIExpc3RWYWx1ZToge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgICAgIHJ1bGU6IFwicmVwZWF0ZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcIlZhbHVlXCIsXG4gICAgICAgICAgICAgICAgaWQ6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5jb21tb24oXCJ3cmFwcGVyc1wiLCB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlIG1lc3NhZ2UuXG4gICAgICogQGludGVyZmFjZSBJRG91YmxlVmFsdWVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbdmFsdWVdXG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxuICAgICAqL1xuICAgIERvdWJsZVZhbHVlOiB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImRvdWJsZVwiLFxuICAgICAgICAgICAgICAgIGlkOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBvZiBhIGdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlIG1lc3NhZ2UuXG4gICAgICogQGludGVyZmFjZSBJRmxvYXRWYWx1ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFt2YWx1ZV1cbiAgICAgKiBAbWVtYmVyb2YgY29tbW9uXG4gICAgICovXG4gICAgRmxvYXRWYWx1ZToge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJmbG9hdFwiLFxuICAgICAgICAgICAgICAgIGlkOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBvZiBhIGdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlIG1lc3NhZ2UuXG4gICAgICogQGludGVyZmFjZSBJSW50NjRWYWx1ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ30gW3ZhbHVlXVxuICAgICAqIEBtZW1iZXJvZiBjb21tb25cbiAgICAgKi9cbiAgICBJbnQ2NFZhbHVlOiB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImludDY0XCIsXG4gICAgICAgICAgICAgICAgaWQ6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLlVJbnQ2NFZhbHVlIG1lc3NhZ2UuXG4gICAgICogQGludGVyZmFjZSBJVUludDY0VmFsdWVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd9IFt2YWx1ZV1cbiAgICAgKiBAbWVtYmVyb2YgY29tbW9uXG4gICAgICovXG4gICAgVUludDY0VmFsdWU6IHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDY0XCIsXG4gICAgICAgICAgICAgICAgaWQ6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUgbWVzc2FnZS5cbiAgICAgKiBAaW50ZXJmYWNlIElJbnQzMlZhbHVlXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gW3ZhbHVlXVxuICAgICAqIEBtZW1iZXJvZiBjb21tb25cbiAgICAgKi9cbiAgICBJbnQzMlZhbHVlOiB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImludDMyXCIsXG4gICAgICAgICAgICAgICAgaWQ6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLlVJbnQzMlZhbHVlIG1lc3NhZ2UuXG4gICAgICogQGludGVyZmFjZSBJVUludDMyVmFsdWVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbdmFsdWVdXG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxuICAgICAqL1xuICAgIFVJbnQzMlZhbHVlOiB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQzMlwiLFxuICAgICAgICAgICAgICAgIGlkOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBvZiBhIGdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUgbWVzc2FnZS5cbiAgICAgKiBAaW50ZXJmYWNlIElCb29sVmFsdWVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3ZhbHVlXVxuICAgICAqIEBtZW1iZXJvZiBjb21tb25cbiAgICAgKi9cbiAgICBCb29sVmFsdWU6IHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgICAgIGlkOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBvZiBhIGdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZSBtZXNzYWdlLlxuICAgICAqIEBpbnRlcmZhY2UgSVN0cmluZ1ZhbHVlXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3ZhbHVlXVxuICAgICAqIEBtZW1iZXJvZiBjb21tb25cbiAgICAgKi9cbiAgICBTdHJpbmdWYWx1ZToge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBpZDogMVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnRpZXMgb2YgYSBnb29nbGUucHJvdG9idWYuQnl0ZXNWYWx1ZSBtZXNzYWdlLlxuICAgICAqIEBpbnRlcmZhY2UgSUJ5dGVzVmFsdWVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7VWludDhBcnJheX0gW3ZhbHVlXVxuICAgICAqIEBtZW1iZXJvZiBjb21tb25cbiAgICAgKi9cbiAgICBCeXRlc1ZhbHVlOiB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgaWQ6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5jb21tb24oXCJmaWVsZF9tYXNrXCIsIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnRpZXMgb2YgYSBnb29nbGUucHJvdG9idWYuRmllbGRNYXNrIG1lc3NhZ2UuXG4gICAgICogQGludGVyZmFjZSBJRG91YmxlVmFsdWVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbdmFsdWVdXG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxuICAgICAqL1xuICAgIEZpZWxkTWFzazoge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIHBhdGhzOiB7XG4gICAgICAgICAgICAgICAgcnVsZTogXCJyZXBlYXRlZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgaWQ6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG4vKipcbiAqIEdldHMgdGhlIHJvb3QgZGVmaW5pdGlvbiBvZiB0aGUgc3BlY2lmaWVkIGNvbW1vbiBwcm90byBmaWxlLlxuICpcbiAqIEJ1bmRsZWQgZGVmaW5pdGlvbnMgYXJlOlxuICogLSBnb29nbGUvcHJvdG9idWYvYW55LnByb3RvXG4gKiAtIGdvb2dsZS9wcm90b2J1Zi9kdXJhdGlvbi5wcm90b1xuICogLSBnb29nbGUvcHJvdG9idWYvZW1wdHkucHJvdG9cbiAqIC0gZ29vZ2xlL3Byb3RvYnVmL2ZpZWxkX21hc2sucHJvdG9cbiAqIC0gZ29vZ2xlL3Byb3RvYnVmL3N0cnVjdC5wcm90b1xuICogLSBnb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvXG4gKiAtIGdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90b1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlIFByb3RvIGZpbGUgbmFtZVxuICogQHJldHVybnMge0lOYW1lc3BhY2V8bnVsbH0gUm9vdCBkZWZpbml0aW9uIG9yIGBudWxsYCBpZiBub3QgZGVmaW5lZFxuICovXG5jb21tb24uZ2V0ID0gZnVuY3Rpb24gZ2V0KGZpbGUpIHtcbiAgICByZXR1cm4gY29tbW9uW2ZpbGVdIHx8IG51bGw7XG59O1xuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIHByb3RvYnVmID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9pbmRleC1saWdodFwiKTtcblxucHJvdG9idWYuYnVpbGQgPSBcImZ1bGxcIjtcblxuLy8gUGFyc2VyXG5wcm90b2J1Zi50b2tlbml6ZSAgICAgICAgID0gcmVxdWlyZShcIi4vdG9rZW5pemVcIik7XG5wcm90b2J1Zi5wYXJzZSAgICAgICAgICAgID0gcmVxdWlyZShcIi4vcGFyc2VcIik7XG5wcm90b2J1Zi5jb21tb24gICAgICAgICAgID0gcmVxdWlyZShcIi4vY29tbW9uXCIpO1xuXG4vLyBDb25maWd1cmUgcGFyc2VyXG5wcm90b2J1Zi5Sb290Ll9jb25maWd1cmUocHJvdG9idWYuVHlwZSwgcHJvdG9idWYucGFyc2UsIHByb3RvYnVmLmNvbW1vbik7XG4iLCAiLy8gZnVsbCBsaWJyYXJ5IGVudHJ5IHBvaW50LlxuXG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vc3JjL2luZGV4XCIpO1xuIiwgIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwgIi8qISBpZWVlNzU0LiBCU0QtMy1DbGF1c2UgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICovXG5leHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCAiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxuY29uc3QgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbmNvbnN0IGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbmNvbnN0IGN1c3RvbUluc3BlY3RTeW1ib2wgPVxuICAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sWydmb3InXSA9PT0gJ2Z1bmN0aW9uJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA/IFN5bWJvbFsnZm9yJ10oJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA6IG51bGxcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG5jb25zdCBLX01BWF9MRU5HVEggPSAweDdmZmZmZmZmXG5leHBvcnRzLmtNYXhMZW5ndGggPSBLX01BWF9MRU5HVEhcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgUHJpbnQgd2FybmluZyBhbmQgcmVjb21tZW5kIHVzaW5nIGBidWZmZXJgIHY0Lnggd2hpY2ggaGFzIGFuIE9iamVjdFxuICogICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogV2UgcmVwb3J0IHRoYXQgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0eXBlZCBhcnJheXMgaWYgdGhlIGFyZSBub3Qgc3ViY2xhc3NhYmxlXG4gKiB1c2luZyBfX3Byb3RvX18uIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgXG4gKiAoU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzgpLiBJRSAxMCBsYWNrcyBzdXBwb3J0XG4gKiBmb3IgX19wcm90b19fIGFuZCBoYXMgYSBidWdneSB0eXBlZCBhcnJheSBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbmlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgY29uc29sZS5lcnJvcihcbiAgICAnVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5ICcgK1xuICAgICdgYnVmZmVyYCB2NS54LiBVc2UgYGJ1ZmZlcmAgdjQueCBpZiB5b3UgcmVxdWlyZSBvbGQgYnJvd3NlciBzdXBwb3J0LidcbiAgKVxufVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIC8vIENhbiB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZD9cbiAgdHJ5IHtcbiAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGNvbnN0IHByb3RvID0geyBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH0gfVxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihwcm90bywgVWludDhBcnJheS5wcm90b3R5cGUpXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGFyciwgcHJvdG8pXG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDJcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAncGFyZW50Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLmJ1ZmZlclxuICB9XG59KVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ29mZnNldCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5ieXRlT2Zmc2V0XG4gIH1cbn0pXG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAobGVuZ3RoKSB7XG4gIGlmIChsZW5ndGggPiBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIGxlbmd0aCArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyLnByb3RvdHlwZSlcbiAgcmV0dXJuIGJ1ZlxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKGFyZylcbiAgfVxuICByZXR1cm4gZnJvbShhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbmZ1bmN0aW9uIGZyb20gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheVZpZXcodmFsdWUpXG4gIH1cblxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgICAnb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdmFsdWUpXG4gICAgKVxuICB9XG5cbiAgaWYgKGlzSW5zdGFuY2UodmFsdWUsIEFycmF5QnVmZmVyKSB8fFxuICAgICAgKHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBBcnJheUJ1ZmZlcikpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIChpc0luc3RhbmNlKHZhbHVlLCBTaGFyZWRBcnJheUJ1ZmZlcikgfHxcbiAgICAgICh2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgU2hhcmVkQXJyYXlCdWZmZXIpKSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwidmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSBudW1iZXInXG4gICAgKVxuICB9XG5cbiAgY29uc3QgdmFsdWVPZiA9IHZhbHVlLnZhbHVlT2YgJiYgdmFsdWUudmFsdWVPZigpXG4gIGlmICh2YWx1ZU9mICE9IG51bGwgJiYgdmFsdWVPZiAhPT0gdmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVPZiwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgY29uc3QgYiA9IGZyb21PYmplY3QodmFsdWUpXG4gIGlmIChiKSByZXR1cm4gYlxuXG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9QcmltaXRpdmUgIT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHZhbHVlW1N5bWJvbC50b1ByaW1pdGl2ZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSgnc3RyaW5nJyksIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICdvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB2YWx1ZSlcbiAgKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIE5vdGU6IENoYW5nZSBwcm90b3R5cGUgKmFmdGVyKiBCdWZmZXIuZnJvbSBpcyBkZWZpbmVkIHRvIHdvcmthcm91bmQgQ2hyb21lIGJ1Zzpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvMTQ4XG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLnByb3RvdHlwZSwgVWludDhBcnJheS5wcm90b3R5cGUpXG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLCBVaW50OEFycmF5KVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgc2l6ZSArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAoc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gIH1cblxuICBjb25zdCBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICBsZXQgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcblxuICBjb25zdCBhY3R1YWwgPSBidWYud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIGJ1ZiA9IGJ1Zi5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKGFycmF5KSB7XG4gIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICBjb25zdCBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgYnVmW2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheVZpZXcgKGFycmF5Vmlldykge1xuICBpZiAoaXNJbnN0YW5jZShhcnJheVZpZXcsIFVpbnQ4QXJyYXkpKSB7XG4gICAgY29uc3QgY29weSA9IG5ldyBVaW50OEFycmF5KGFycmF5VmlldylcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKGNvcHkuYnVmZmVyLCBjb3B5LmJ5dGVPZmZzZXQsIGNvcHkuYnl0ZUxlbmd0aClcbiAgfVxuICByZXR1cm4gZnJvbUFycmF5TGlrZShhcnJheVZpZXcpXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJvZmZzZXRcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcImxlbmd0aFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBsZXQgYnVmXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYnVmLCBCdWZmZXIucHJvdG90eXBlKVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAob2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIGNvbnN0IGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgY29uc3QgYnVmID0gY3JlYXRlQnVmZmVyKGxlbilcblxuICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gYnVmXG4gICAgfVxuXG4gICAgb2JqLmNvcHkoYnVmLCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIGJ1ZlxuICB9XG5cbiAgaWYgKG9iai5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgbnVtYmVySXNOYU4ob2JqLmxlbmd0aCkpIHtcbiAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIoMClcbiAgICB9XG4gICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqKVxuICB9XG5cbiAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBBcnJheS5pc0FycmF5KG9iai5kYXRhKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iai5kYXRhKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBLX01BWF9MRU5HVEhgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIEtfTUFYX0xFTkdUSC50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuIGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlciA9PT0gdHJ1ZSAmJlxuICAgIGIgIT09IEJ1ZmZlci5wcm90b3R5cGUgLy8gc28gQnVmZmVyLmlzQnVmZmVyKEJ1ZmZlci5wcm90b3R5cGUpIHdpbGwgYmUgZmFsc2Vcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmIChpc0luc3RhbmNlKGEsIFVpbnQ4QXJyYXkpKSBhID0gQnVmZmVyLmZyb20oYSwgYS5vZmZzZXQsIGEuYnl0ZUxlbmd0aClcbiAgaWYgKGlzSW5zdGFuY2UoYiwgVWludDhBcnJheSkpIGIgPSBCdWZmZXIuZnJvbShiLCBiLm9mZnNldCwgYi5ieXRlTGVuZ3RoKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJidWYxXCIsIFwiYnVmMlwiIGFyZ3VtZW50cyBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5J1xuICAgIClcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIGxldCB4ID0gYS5sZW5ndGhcbiAgbGV0IHkgPSBiLmxlbmd0aFxuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgbGV0IGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICBsZXQgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIGxldCBidWYgPSBsaXN0W2ldXG4gICAgaWYgKGlzSW5zdGFuY2UoYnVmLCBVaW50OEFycmF5KSkge1xuICAgICAgaWYgKHBvcyArIGJ1Zi5sZW5ndGggPiBidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIGJ1ZiA9IEJ1ZmZlci5mcm9tKGJ1ZilcbiAgICAgICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgYnVmLFxuICAgICAgICAgIHBvc1xuICAgICAgICApXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIH1cbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBpc0luc3RhbmNlKHN0cmluZywgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBvciBBcnJheUJ1ZmZlci4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHN0cmluZ1xuICAgIClcbiAgfVxuXG4gIGNvbnN0IGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgY29uc3QgbXVzdE1hdGNoID0gKGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSA9PT0gdHJ1ZSlcbiAgaWYgKCFtdXN0TWF0Y2ggJiYgbGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICBsZXQgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB7XG4gICAgICAgICAgcmV0dXJuIG11c3RNYXRjaCA/IC0xIDogdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgfVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJjaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCAoYW5kIHRoZSBgaXMtYnVmZmVyYCBucG0gcGFja2FnZSlcbi8vIHRvIGRldGVjdCBhIEJ1ZmZlciBpbnN0YW5jZS4gSXQncyBub3QgcG9zc2libGUgdG8gdXNlIGBpbnN0YW5jZW9mIEJ1ZmZlcmBcbi8vIHJlbGlhYmx5IGluIGEgYnJvd3NlcmlmeSBjb250ZXh0IGJlY2F1c2UgdGhlcmUgY291bGQgYmUgbXVsdGlwbGUgZGlmZmVyZW50XG4vLyBjb3BpZXMgb2YgdGhlICdidWZmZXInIHBhY2thZ2UgaW4gdXNlLiBUaGlzIG1ldGhvZCB3b3JrcyBldmVuIGZvciBCdWZmZXJcbi8vIGluc3RhbmNlcyB0aGF0IHdlcmUgY3JlYXRlZCBmcm9tIGFub3RoZXIgY29weSBvZiB0aGUgYGJ1ZmZlcmAgcGFja2FnZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE1NFxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgY29uc3QgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcgPSBCdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nXG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgbGV0IHN0ciA9ICcnXG4gIGNvbnN0IG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5yZXBsYWNlKC8oLnsyfSkvZywgJyQxICcpLnRyaW0oKVxuICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5pZiAoY3VzdG9tSW5zcGVjdFN5bWJvbCkge1xuICBCdWZmZXIucHJvdG90eXBlW2N1c3RvbUluc3BlY3RTeW1ib2xdID0gQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmIChpc0luc3RhbmNlKHRhcmdldCwgVWludDhBcnJheSkpIHtcbiAgICB0YXJnZXQgPSBCdWZmZXIuZnJvbSh0YXJnZXQsIHRhcmdldC5vZmZzZXQsIHRhcmdldC5ieXRlTGVuZ3RoKVxuICB9XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInRhcmdldFwiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXkuICcgK1xuICAgICAgJ1JlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdGFyZ2V0KVxuICAgIClcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIGxldCB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICBsZXQgeSA9IGVuZCAtIHN0YXJ0XG4gIGNvbnN0IGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgY29uc3QgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgY29uc3QgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKG51bWJlcklzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgW3ZhbF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIGxldCBpbmRleFNpemUgPSAxXG4gIGxldCBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIGxldCB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIGxldCBpXG4gIGlmIChkaXIpIHtcbiAgICBsZXQgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBsZXQgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIGNvbnN0IHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBsZXQgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb25zdCBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKG51bWJlcklzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPj4+IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICBjb25zdCByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIGxldCBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgY29uc3QgcmVzID0gW11cblxuICBsZXQgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgY29uc3QgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgbGV0IGNvZGVQb2ludCA9IG51bGxcbiAgICBsZXQgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKVxuICAgICAgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKVxuICAgICAgICAgID8gM1xuICAgICAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpXG4gICAgICAgICAgICAgID8gMlxuICAgICAgICAgICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIGxldCBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbmNvbnN0IE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICBjb25zdCBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIGxldCByZXMgPSAnJ1xuICBsZXQgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGxldCByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGNvbnN0IGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICBsZXQgb3V0ID0gJydcbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gaGV4U2xpY2VMb29rdXBUYWJsZVtidWZbaV1dXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBjb25zdCBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICBsZXQgcmVzID0gJydcbiAgLy8gSWYgYnl0ZXMubGVuZ3RoIGlzIG9kZCwgdGhlIGxhc3QgOCBiaXRzIG11c3QgYmUgaWdub3JlZCAoc2FtZSBhcyBub2RlLmpzKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aCAtIDE7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgKGJ5dGVzW2kgKyAxXSAqIDI1NikpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICBjb25zdCBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihuZXdCdWYsIEJ1ZmZlci5wcm90b3R5cGUpXG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludExFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0XVxuICBsZXQgbXVsID0gMVxuICBsZXQgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50QkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICBsZXQgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIGxldCBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDggPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDE2TEUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MTZCRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQzMkxFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDMyQkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnVUludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ1VJbnQ2NExFIChvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGNvbnN0IGZpcnN0ID0gdGhpc1tvZmZzZXRdXG4gIGNvbnN0IGxhc3QgPSB0aGlzW29mZnNldCArIDddXG4gIGlmIChmaXJzdCA9PT0gdW5kZWZpbmVkIHx8IGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgdGhpcy5sZW5ndGggLSA4KVxuICB9XG5cbiAgY29uc3QgbG8gPSBmaXJzdCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDI0XG5cbiAgY29uc3QgaGkgPSB0aGlzWysrb2Zmc2V0XSArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgbGFzdCAqIDIgKiogMjRcblxuICByZXR1cm4gQmlnSW50KGxvKSArIChCaWdJbnQoaGkpIDw8IEJpZ0ludCgzMikpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRCaWdVSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnVUludDY0QkUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCBoaSA9IGZpcnN0ICogMiAqKiAyNCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF1cblxuICBjb25zdCBsbyA9IHRoaXNbKytvZmZzZXRdICogMiAqKiAyNCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgbGFzdFxuXG4gIHJldHVybiAoQmlnSW50KGhpKSA8PCBCaWdJbnQoMzIpKSArIEJpZ0ludChsbylcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIGxldCB2YWwgPSB0aGlzW29mZnNldF1cbiAgbGV0IG11bCA9IDFcbiAgbGV0IGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICBsZXQgaSA9IGJ5dGVMZW5ndGhcbiAgbGV0IG11bCA9IDFcbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIGNvbnN0IHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICBjb25zdCB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnSW50NjRMRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnSW50NjRMRSAob2Zmc2V0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBjb25zdCBmaXJzdCA9IHRoaXNbb2Zmc2V0XVxuICBjb25zdCBsYXN0ID0gdGhpc1tvZmZzZXQgKyA3XVxuICBpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCB8fCBsYXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIHRoaXMubGVuZ3RoIC0gOClcbiAgfVxuXG4gIGNvbnN0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgNF0gK1xuICAgIHRoaXNbb2Zmc2V0ICsgNV0gKiAyICoqIDggK1xuICAgIHRoaXNbb2Zmc2V0ICsgNl0gKiAyICoqIDE2ICtcbiAgICAobGFzdCA8PCAyNCkgLy8gT3ZlcmZsb3dcblxuICByZXR1cm4gKEJpZ0ludCh2YWwpIDw8IEJpZ0ludCgzMikpICtcbiAgICBCaWdJbnQoZmlyc3QgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAyNClcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEJpZ0ludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ0ludDY0QkUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCB2YWwgPSAoZmlyc3QgPDwgMjQpICsgLy8gT3ZlcmZsb3dcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XVxuXG4gIHJldHVybiAoQmlnSW50KHZhbCkgPDwgQmlnSW50KDMyKSkgK1xuICAgIEJpZ0ludCh0aGlzWysrb2Zmc2V0XSAqIDIgKiogMjQgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIGxhc3QpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnRMRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICBsZXQgbXVsID0gMVxuICBsZXQgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludEJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjb25zdCBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIGxldCBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgbGV0IG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50OCA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQxNkxFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MTZCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDMyTEUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQzMkJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIHdydEJpZ1VJbnQ2NExFIChidWYsIHZhbHVlLCBvZmZzZXQsIG1pbiwgbWF4KSB7XG4gIGNoZWNrSW50QkkodmFsdWUsIG1pbiwgbWF4LCBidWYsIG9mZnNldCwgNylcblxuICBsZXQgbG8gPSBOdW1iZXIodmFsdWUgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0KytdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsZXQgaGkgPSBOdW1iZXIodmFsdWUgPj4gQmlnSW50KDMyKSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0KytdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIHJldHVybiBvZmZzZXRcbn1cblxuZnVuY3Rpb24gd3J0QmlnVUludDY0QkUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbWluLCBtYXgpIHtcbiAgY2hlY2tJbnRCSSh2YWx1ZSwgbWluLCBtYXgsIGJ1Ziwgb2Zmc2V0LCA3KVxuXG4gIGxldCBsbyA9IE51bWJlcih2YWx1ZSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCArIDddID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQgKyA2XSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0ICsgNV0gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCArIDRdID0gbG9cbiAgbGV0IGhpID0gTnVtYmVyKHZhbHVlID4+IEJpZ0ludCgzMikgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQgKyAzXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0ICsgMl0gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCArIDFdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXRdID0gaGlcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ1VJbnQ2NExFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHdyaXRlQmlnVUludDY0TEUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRMRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBCaWdJbnQoMCksIEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnVUludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdVSW50NjRCRSAodmFsdWUsIG9mZnNldCA9IDApIHtcbiAgcmV0dXJuIHdydEJpZ1VJbnQ2NEJFKHRoaXMsIHZhbHVlLCBvZmZzZXQsIEJpZ0ludCgwKSwgQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgbGV0IGkgPSAwXG4gIGxldCBtdWwgPSAxXG4gIGxldCBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgbGV0IGkgPSBieXRlTGVuZ3RoIC0gMVxuICBsZXQgbXVsID0gMVxuICBsZXQgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ0ludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdJbnQ2NExFICh2YWx1ZSwgb2Zmc2V0ID0gMCkge1xuICByZXR1cm4gd3J0QmlnVUludDY0TEUodGhpcywgdmFsdWUsIG9mZnNldCwgLUJpZ0ludCgnMHg4MDAwMDAwMDAwMDAwMDAwJyksIEJpZ0ludCgnMHg3ZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiB3cml0ZUJpZ0ludDY0QkUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRCRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAtQmlnSW50KCcweDgwMDAwMDAwMDAwMDAwMDAnKSwgQmlnSW50KCcweDdmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHNob3VsZCBiZSBhIEJ1ZmZlcicpXG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICBjb25zdCBsZW4gPSBlbmQgLSBzdGFydFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBVc2UgYnVpbHQtaW4gd2hlbiBhdmFpbGFibGUsIG1pc3NpbmcgZnJvbSBJRTExXG4gICAgdGhpcy5jb3B5V2l0aGluKHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKChlbmNvZGluZyA9PT0gJ3V0ZjgnICYmIGNvZGUgPCAxMjgpIHx8XG4gICAgICAgICAgZW5jb2RpbmcgPT09ICdsYXRpbjEnKSB7XG4gICAgICAgIC8vIEZhc3QgcGF0aDogSWYgYHZhbGAgZml0cyBpbnRvIGEgc2luZ2xlIGJ5dGUsIHVzZSB0aGF0IG51bWVyaWMgdmFsdWUuXG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnYm9vbGVhbicpIHtcbiAgICB2YWwgPSBOdW1iZXIodmFsKVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIGxldCBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgICBjb25zdCBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgdmFsdWUgXCInICsgdmFsICtcbiAgICAgICAgJ1wiIGlzIGludmFsaWQgZm9yIGFyZ3VtZW50IFwidmFsdWVcIicpXG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIENVU1RPTSBFUlJPUlNcbi8vID09PT09PT09PT09PT1cblxuLy8gU2ltcGxpZmllZCB2ZXJzaW9ucyBmcm9tIE5vZGUsIGNoYW5nZWQgZm9yIEJ1ZmZlci1vbmx5IHVzYWdlXG5jb25zdCBlcnJvcnMgPSB7fVxuZnVuY3Rpb24gRSAoc3ltLCBnZXRNZXNzYWdlLCBCYXNlKSB7XG4gIGVycm9yc1tzeW1dID0gY2xhc3MgTm9kZUVycm9yIGV4dGVuZHMgQmFzZSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgc3VwZXIoKVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ21lc3NhZ2UnLCB7XG4gICAgICAgIHZhbHVlOiBnZXRNZXNzYWdlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pXG5cbiAgICAgIC8vIEFkZCB0aGUgZXJyb3IgY29kZSB0byB0aGUgbmFtZSB0byBpbmNsdWRlIGl0IGluIHRoZSBzdGFjayB0cmFjZS5cbiAgICAgIHRoaXMubmFtZSA9IGAke3RoaXMubmFtZX0gWyR7c3ltfV1gXG4gICAgICAvLyBBY2Nlc3MgdGhlIHN0YWNrIHRvIGdlbmVyYXRlIHRoZSBlcnJvciBtZXNzYWdlIGluY2x1ZGluZyB0aGUgZXJyb3IgY29kZVxuICAgICAgLy8gZnJvbSB0aGUgbmFtZS5cbiAgICAgIHRoaXMuc3RhY2sgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgICAgIC8vIFJlc2V0IHRoZSBuYW1lIHRvIHRoZSBhY3R1YWwgbmFtZS5cbiAgICAgIGRlbGV0ZSB0aGlzLm5hbWVcbiAgICB9XG5cbiAgICBnZXQgY29kZSAoKSB7XG4gICAgICByZXR1cm4gc3ltXG4gICAgfVxuXG4gICAgc2V0IGNvZGUgKHZhbHVlKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NvZGUnLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9KVxuICAgIH1cblxuICAgIHRvU3RyaW5nICgpIHtcbiAgICAgIHJldHVybiBgJHt0aGlzLm5hbWV9IFske3N5bX1dOiAke3RoaXMubWVzc2FnZX1gXG4gICAgfVxuICB9XG59XG5cbkUoJ0VSUl9CVUZGRVJfT1VUX09GX0JPVU5EUycsXG4gIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiBgJHtuYW1lfSBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHNgXG4gICAgfVxuXG4gICAgcmV0dXJuICdBdHRlbXB0IHRvIGFjY2VzcyBtZW1vcnkgb3V0c2lkZSBidWZmZXIgYm91bmRzJ1xuICB9LCBSYW5nZUVycm9yKVxuRSgnRVJSX0lOVkFMSURfQVJHX1RZUEUnLFxuICBmdW5jdGlvbiAobmFtZSwgYWN0dWFsKSB7XG4gICAgcmV0dXJuIGBUaGUgXCIke25hbWV9XCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSAke3R5cGVvZiBhY3R1YWx9YFxuICB9LCBUeXBlRXJyb3IpXG5FKCdFUlJfT1VUX09GX1JBTkdFJyxcbiAgZnVuY3Rpb24gKHN0ciwgcmFuZ2UsIGlucHV0KSB7XG4gICAgbGV0IG1zZyA9IGBUaGUgdmFsdWUgb2YgXCIke3N0cn1cIiBpcyBvdXQgb2YgcmFuZ2UuYFxuICAgIGxldCByZWNlaXZlZCA9IGlucHV0XG4gICAgaWYgKE51bWJlci5pc0ludGVnZXIoaW5wdXQpICYmIE1hdGguYWJzKGlucHV0KSA+IDIgKiogMzIpIHtcbiAgICAgIHJlY2VpdmVkID0gYWRkTnVtZXJpY2FsU2VwYXJhdG9yKFN0cmluZyhpbnB1dCkpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdiaWdpbnQnKSB7XG4gICAgICByZWNlaXZlZCA9IFN0cmluZyhpbnB1dClcbiAgICAgIGlmIChpbnB1dCA+IEJpZ0ludCgyKSAqKiBCaWdJbnQoMzIpIHx8IGlucHV0IDwgLShCaWdJbnQoMikgKiogQmlnSW50KDMyKSkpIHtcbiAgICAgICAgcmVjZWl2ZWQgPSBhZGROdW1lcmljYWxTZXBhcmF0b3IocmVjZWl2ZWQpXG4gICAgICB9XG4gICAgICByZWNlaXZlZCArPSAnbidcbiAgICB9XG4gICAgbXNnICs9IGAgSXQgbXVzdCBiZSAke3JhbmdlfS4gUmVjZWl2ZWQgJHtyZWNlaXZlZH1gXG4gICAgcmV0dXJuIG1zZ1xuICB9LCBSYW5nZUVycm9yKVxuXG5mdW5jdGlvbiBhZGROdW1lcmljYWxTZXBhcmF0b3IgKHZhbCkge1xuICBsZXQgcmVzID0gJydcbiAgbGV0IGkgPSB2YWwubGVuZ3RoXG4gIGNvbnN0IHN0YXJ0ID0gdmFsWzBdID09PSAnLScgPyAxIDogMFxuICBmb3IgKDsgaSA+PSBzdGFydCArIDQ7IGkgLT0gMykge1xuICAgIHJlcyA9IGBfJHt2YWwuc2xpY2UoaSAtIDMsIGkpfSR7cmVzfWBcbiAgfVxuICByZXR1cm4gYCR7dmFsLnNsaWNlKDAsIGkpfSR7cmVzfWBcbn1cblxuLy8gQ0hFQ0sgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gY2hlY2tCb3VuZHMgKGJ1Ziwgb2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGlmIChidWZbb2Zmc2V0XSA9PT0gdW5kZWZpbmVkIHx8IGJ1ZltvZmZzZXQgKyBieXRlTGVuZ3RoXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCBidWYubGVuZ3RoIC0gKGJ5dGVMZW5ndGggKyAxKSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0ludEJJICh2YWx1ZSwgbWluLCBtYXgsIGJ1Ziwgb2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikge1xuICAgIGNvbnN0IG4gPSB0eXBlb2YgbWluID09PSAnYmlnaW50JyA/ICduJyA6ICcnXG4gICAgbGV0IHJhbmdlXG4gICAgaWYgKGJ5dGVMZW5ndGggPiAzKSB7XG4gICAgICBpZiAobWluID09PSAwIHx8IG1pbiA9PT0gQmlnSW50KDApKSB7XG4gICAgICAgIHJhbmdlID0gYD49IDAke259IGFuZCA8IDIke259ICoqICR7KGJ5dGVMZW5ndGggKyAxKSAqIDh9JHtufWBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJhbmdlID0gYD49IC0oMiR7bn0gKiogJHsoYnl0ZUxlbmd0aCArIDEpICogOCAtIDF9JHtufSkgYW5kIDwgMiAqKiBgICtcbiAgICAgICAgICAgICAgICBgJHsoYnl0ZUxlbmd0aCArIDEpICogOCAtIDF9JHtufWBcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmFuZ2UgPSBgPj0gJHttaW59JHtufSBhbmQgPD0gJHttYXh9JHtufWBcbiAgICB9XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfT1VUX09GX1JBTkdFKCd2YWx1ZScsIHJhbmdlLCB2YWx1ZSlcbiAgfVxuICBjaGVja0JvdW5kcyhidWYsIG9mZnNldCwgYnl0ZUxlbmd0aClcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVOdW1iZXIgKHZhbHVlLCBuYW1lKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfSU5WQUxJRF9BUkdfVFlQRShuYW1lLCAnbnVtYmVyJywgdmFsdWUpXG4gIH1cbn1cblxuZnVuY3Rpb24gYm91bmRzRXJyb3IgKHZhbHVlLCBsZW5ndGgsIHR5cGUpIHtcbiAgaWYgKE1hdGguZmxvb3IodmFsdWUpICE9PSB2YWx1ZSkge1xuICAgIHZhbGlkYXRlTnVtYmVyKHZhbHVlLCB0eXBlKVxuICAgIHRocm93IG5ldyBlcnJvcnMuRVJSX09VVF9PRl9SQU5HRSh0eXBlIHx8ICdvZmZzZXQnLCAnYW4gaW50ZWdlcicsIHZhbHVlKVxuICB9XG5cbiAgaWYgKGxlbmd0aCA8IDApIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9CVUZGRVJfT1VUX09GX0JPVU5EUygpXG4gIH1cblxuICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9PVVRfT0ZfUkFOR0UodHlwZSB8fCAnb2Zmc2V0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA+PSAke3R5cGUgPyAxIDogMH0gYW5kIDw9ICR7bGVuZ3RofWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSlcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG5jb25zdCBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXisvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHRha2VzIGVxdWFsIHNpZ25zIGFzIGVuZCBvZiB0aGUgQmFzZTY0IGVuY29kaW5nXG4gIHN0ciA9IHN0ci5zcGxpdCgnPScpWzBdXG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHIudHJpbSgpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgbGV0IGNvZGVQb2ludFxuICBjb25zdCBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIGxldCBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICBjb25zdCBieXRlcyA9IFtdXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIGNvbnN0IGJ5dGVBcnJheSA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgbGV0IGMsIGhpLCBsb1xuICBjb25zdCBieXRlQXJyYXkgPSBbXVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGxldCBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG4vLyBBcnJheUJ1ZmZlciBvciBVaW50OEFycmF5IG9iamVjdHMgZnJvbSBvdGhlciBjb250ZXh0cyAoaS5lLiBpZnJhbWVzKSBkbyBub3QgcGFzc1xuLy8gdGhlIGBpbnN0YW5jZW9mYCBjaGVjayBidXQgdGhleSBzaG91bGQgYmUgdHJlYXRlZCBhcyBvZiB0aGF0IHR5cGUuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNjZcbmZ1bmN0aW9uIGlzSW5zdGFuY2UgKG9iaiwgdHlwZSkge1xuICByZXR1cm4gb2JqIGluc3RhbmNlb2YgdHlwZSB8fFxuICAgIChvYmogIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IgIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IubmFtZSAhPSBudWxsICYmXG4gICAgICBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gdHlwZS5uYW1lKVxufVxuZnVuY3Rpb24gbnVtYmVySXNOYU4gKG9iaikge1xuICAvLyBGb3IgSUUxMSBzdXBwb3J0XG4gIHJldHVybiBvYmogIT09IG9iaiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuXG4vLyBDcmVhdGUgbG9va3VwIHRhYmxlIGZvciBgdG9TdHJpbmcoJ2hleCcpYFxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMjE5XG5jb25zdCBoZXhTbGljZUxvb2t1cFRhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OWFiY2RlZidcbiAgY29uc3QgdGFibGUgPSBuZXcgQXJyYXkoMjU2KVxuICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICBjb25zdCBpMTYgPSBpICogMTZcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDE2OyArK2opIHtcbiAgICAgIHRhYmxlW2kxNiArIGpdID0gYWxwaGFiZXRbaV0gKyBhbHBoYWJldFtqXVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGFibGVcbn0pKClcblxuLy8gUmV0dXJuIG5vdCBmdW5jdGlvbiB3aXRoIEVycm9yIGlmIEJpZ0ludCBub3Qgc3VwcG9ydGVkXG5mdW5jdGlvbiBkZWZpbmVCaWdJbnRNZXRob2QgKGZuKSB7XG4gIHJldHVybiB0eXBlb2YgQmlnSW50ID09PSAndW5kZWZpbmVkJyA/IEJ1ZmZlckJpZ0ludE5vdERlZmluZWQgOiBmblxufVxuXG5mdW5jdGlvbiBCdWZmZXJCaWdJbnROb3REZWZpbmVkICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdCaWdJbnQgbm90IHN1cHBvcnRlZCcpXG59XG4iLCAiZnVuY3Rpb24gQnJvdGxpSW5wdXQoYnVmZmVyKSB7XG4gIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICB0aGlzLnBvcyA9IDA7XG59XG5cbkJyb3RsaUlucHV0LnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24oYnVmLCBpLCBjb3VudCkge1xuICBpZiAodGhpcy5wb3MgKyBjb3VudCA+IHRoaXMuYnVmZmVyLmxlbmd0aCkge1xuICAgIGNvdW50ID0gdGhpcy5idWZmZXIubGVuZ3RoIC0gdGhpcy5wb3M7XG4gIH1cbiAgXG4gIGZvciAodmFyIHAgPSAwOyBwIDwgY291bnQ7IHArKylcbiAgICBidWZbaSArIHBdID0gdGhpcy5idWZmZXJbdGhpcy5wb3MgKyBwXTtcbiAgXG4gIHRoaXMucG9zICs9IGNvdW50O1xuICByZXR1cm4gY291bnQ7XG59XG5cbmV4cG9ydHMuQnJvdGxpSW5wdXQgPSBCcm90bGlJbnB1dDtcblxuZnVuY3Rpb24gQnJvdGxpT3V0cHV0KGJ1Zikge1xuICB0aGlzLmJ1ZmZlciA9IGJ1ZjtcbiAgdGhpcy5wb3MgPSAwO1xufVxuXG5Ccm90bGlPdXRwdXQucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oYnVmLCBjb3VudCkge1xuICBpZiAodGhpcy5wb3MgKyBjb3VudCA+IHRoaXMuYnVmZmVyLmxlbmd0aClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ091dHB1dCBidWZmZXIgaXMgbm90IGxhcmdlIGVub3VnaCcpO1xuICBcbiAgdGhpcy5idWZmZXIuc2V0KGJ1Zi5zdWJhcnJheSgwLCBjb3VudCksIHRoaXMucG9zKTtcbiAgdGhpcy5wb3MgKz0gY291bnQ7XG4gIHJldHVybiBjb3VudDtcbn07XG5cbmV4cG9ydHMuQnJvdGxpT3V0cHV0ID0gQnJvdGxpT3V0cHV0O1xuIiwgIi8qIENvcHlyaWdodCAyMDEzIEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiAgIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAgIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbiAgIEJpdCByZWFkaW5nIGhlbHBlcnNcbiovXG5cbnZhciBCUk9UTElfUkVBRF9TSVpFID0gNDA5NjtcbnZhciBCUk9UTElfSUJVRl9TSVpFID0gICgyICogQlJPVExJX1JFQURfU0laRSArIDMyKTtcbnZhciBCUk9UTElfSUJVRl9NQVNLID0gICgyICogQlJPVExJX1JFQURfU0laRSAtIDEpO1xuXG52YXIga0JpdE1hc2sgPSBuZXcgVWludDMyQXJyYXkoW1xuICAwLCAxLCAzLCA3LCAxNSwgMzEsIDYzLCAxMjcsIDI1NSwgNTExLCAxMDIzLCAyMDQ3LCA0MDk1LCA4MTkxLCAxNjM4MywgMzI3NjcsXG4gIDY1NTM1LCAxMzEwNzEsIDI2MjE0MywgNTI0Mjg3LCAxMDQ4NTc1LCAyMDk3MTUxLCA0MTk0MzAzLCA4Mzg4NjA3LCAxNjc3NzIxNVxuXSk7XG5cbi8qIElucHV0IGJ5dGUgYnVmZmVyLCBjb25zaXN0IG9mIGEgcmluZ2J1ZmZlciBhbmQgYSBcInNsYWNrXCIgcmVnaW9uIHdoZXJlICovXG4vKiBieXRlcyBmcm9tIHRoZSBzdGFydCBvZiB0aGUgcmluZ2J1ZmZlciBhcmUgY29waWVkLiAqL1xuZnVuY3Rpb24gQnJvdGxpQml0UmVhZGVyKGlucHV0KSB7XG4gIHRoaXMuYnVmXyA9IG5ldyBVaW50OEFycmF5KEJST1RMSV9JQlVGX1NJWkUpO1xuICB0aGlzLmlucHV0XyA9IGlucHV0OyAgICAvKiBpbnB1dCBjYWxsYmFjayAqL1xuICBcbiAgdGhpcy5yZXNldCgpO1xufVxuXG5Ccm90bGlCaXRSZWFkZXIuUkVBRF9TSVpFID0gQlJPVExJX1JFQURfU0laRTtcbkJyb3RsaUJpdFJlYWRlci5JQlVGX01BU0sgPSBCUk9UTElfSUJVRl9NQVNLO1xuXG5Ccm90bGlCaXRSZWFkZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuYnVmX3B0cl8gPSAwOyAgICAgIC8qIG5leHQgaW5wdXQgd2lsbCB3cml0ZSBoZXJlICovXG4gIHRoaXMudmFsXyA9IDA7ICAgICAgICAgIC8qIHByZS1mZXRjaGVkIGJpdHMgKi9cbiAgdGhpcy5wb3NfID0gMDsgICAgICAgICAgLyogYnl0ZSBwb3NpdGlvbiBpbiBzdHJlYW0gKi9cbiAgdGhpcy5iaXRfcG9zXyA9IDA7ICAgICAgLyogY3VycmVudCBiaXQtcmVhZGluZyBwb3NpdGlvbiBpbiB2YWxfICovXG4gIHRoaXMuYml0X2VuZF9wb3NfID0gMDsgIC8qIGJpdC1yZWFkaW5nIGVuZCBwb3NpdGlvbiBmcm9tIExTQiBvZiB2YWxfICovXG4gIHRoaXMuZW9zXyA9IDA7ICAgICAgICAgIC8qIGlucHV0IHN0cmVhbSBpcyBmaW5pc2hlZCAqL1xuICBcbiAgdGhpcy5yZWFkTW9yZUlucHV0KCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdGhpcy52YWxfIHw9IHRoaXMuYnVmX1t0aGlzLnBvc19dIDw8ICg4ICogaSk7XG4gICAgKyt0aGlzLnBvc187XG4gIH1cbiAgXG4gIHJldHVybiB0aGlzLmJpdF9lbmRfcG9zXyA+IDA7XG59O1xuXG4vKiBGaWxscyB1cCB0aGUgaW5wdXQgcmluZ2J1ZmZlciBieSBjYWxsaW5nIHRoZSBpbnB1dCBjYWxsYmFjay5cblxuICAgRG9lcyBub3RoaW5nIGlmIHRoZXJlIGFyZSBhdCBsZWFzdCAzMiBieXRlcyBwcmVzZW50IGFmdGVyIGN1cnJlbnQgcG9zaXRpb24uXG5cbiAgIFJldHVybnMgMCBpZiBlaXRoZXI6XG4gICAgLSB0aGUgaW5wdXQgY2FsbGJhY2sgcmV0dXJuZWQgYW4gZXJyb3IsIG9yXG4gICAgLSB0aGVyZSBpcyBubyBtb3JlIGlucHV0IGFuZCB0aGUgcG9zaXRpb24gaXMgcGFzdCB0aGUgZW5kIG9mIHRoZSBzdHJlYW0uXG5cbiAgIEFmdGVyIGVuY291bnRlcmluZyB0aGUgZW5kIG9mIHRoZSBpbnB1dCBzdHJlYW0sIDMyIGFkZGl0aW9uYWwgemVybyBieXRlcyBhcmVcbiAgIGNvcGllZCB0byB0aGUgcmluZ2J1ZmZlciwgdGhlcmVmb3JlIGl0IGlzIHNhZmUgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uIGFmdGVyXG4gICBldmVyeSAzMiBieXRlcyBvZiBpbnB1dCBpcyByZWFkLlxuKi9cbkJyb3RsaUJpdFJlYWRlci5wcm90b3R5cGUucmVhZE1vcmVJbnB1dCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5iaXRfZW5kX3Bvc18gPiAyNTYpIHtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAodGhpcy5lb3NfKSB7XG4gICAgaWYgKHRoaXMuYml0X3Bvc18gPiB0aGlzLmJpdF9lbmRfcG9zXylcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBlbmQgb2YgaW5wdXQgJyArIHRoaXMuYml0X3Bvc18gKyAnICcgKyB0aGlzLmJpdF9lbmRfcG9zXyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGRzdCA9IHRoaXMuYnVmX3B0cl87XG4gICAgdmFyIGJ5dGVzX3JlYWQgPSB0aGlzLmlucHV0Xy5yZWFkKHRoaXMuYnVmXywgZHN0LCBCUk9UTElfUkVBRF9TSVpFKTtcbiAgICBpZiAoYnl0ZXNfcmVhZCA8IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBlbmQgb2YgaW5wdXQnKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKGJ5dGVzX3JlYWQgPCBCUk9UTElfUkVBRF9TSVpFKSB7XG4gICAgICB0aGlzLmVvc18gPSAxO1xuICAgICAgLyogU3RvcmUgMzIgYnl0ZXMgb2YgemVybyBhZnRlciB0aGUgc3RyZWFtIGVuZC4gKi9cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgMzI7IHArKylcbiAgICAgICAgdGhpcy5idWZfW2RzdCArIGJ5dGVzX3JlYWQgKyBwXSA9IDA7XG4gICAgfVxuICAgIFxuICAgIGlmIChkc3QgPT09IDApIHtcbiAgICAgIC8qIENvcHkgdGhlIGhlYWQgb2YgdGhlIHJpbmdidWZmZXIgdG8gdGhlIHNsYWNrIHJlZ2lvbi4gKi9cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgMzI7IHArKylcbiAgICAgICAgdGhpcy5idWZfWyhCUk9UTElfUkVBRF9TSVpFIDw8IDEpICsgcF0gPSB0aGlzLmJ1Zl9bcF07XG5cbiAgICAgIHRoaXMuYnVmX3B0cl8gPSBCUk9UTElfUkVBRF9TSVpFO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmJ1Zl9wdHJfID0gMDtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5iaXRfZW5kX3Bvc18gKz0gYnl0ZXNfcmVhZCA8PCAzO1xuICB9XG59O1xuXG4vKiBHdWFyYW50ZWVzIHRoYXQgdGhlcmUgYXJlIGF0IGxlYXN0IDI0IGJpdHMgaW4gdGhlIGJ1ZmZlci4gKi9cbkJyb3RsaUJpdFJlYWRlci5wcm90b3R5cGUuZmlsbEJpdFdpbmRvdyA9IGZ1bmN0aW9uKCkgeyAgICBcbiAgd2hpbGUgKHRoaXMuYml0X3Bvc18gPj0gOCkge1xuICAgIHRoaXMudmFsXyA+Pj49IDg7XG4gICAgdGhpcy52YWxfIHw9IHRoaXMuYnVmX1t0aGlzLnBvc18gJiBCUk9UTElfSUJVRl9NQVNLXSA8PCAyNDtcbiAgICArK3RoaXMucG9zXztcbiAgICB0aGlzLmJpdF9wb3NfID0gdGhpcy5iaXRfcG9zXyAtIDggPj4+IDA7XG4gICAgdGhpcy5iaXRfZW5kX3Bvc18gPSB0aGlzLmJpdF9lbmRfcG9zXyAtIDggPj4+IDA7XG4gIH1cbn07XG5cbi8qIFJlYWRzIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGJpdHMgZnJvbSBSZWFkIEJ1ZmZlci4gKi9cbkJyb3RsaUJpdFJlYWRlci5wcm90b3R5cGUucmVhZEJpdHMgPSBmdW5jdGlvbihuX2JpdHMpIHtcbiAgaWYgKDMyIC0gdGhpcy5iaXRfcG9zXyA8IG5fYml0cykge1xuICAgIHRoaXMuZmlsbEJpdFdpbmRvdygpO1xuICB9XG4gIFxuICB2YXIgdmFsID0gKCh0aGlzLnZhbF8gPj4+IHRoaXMuYml0X3Bvc18pICYga0JpdE1hc2tbbl9iaXRzXSk7XG4gIHRoaXMuYml0X3Bvc18gKz0gbl9iaXRzO1xuICByZXR1cm4gdmFsO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCcm90bGlCaXRSZWFkZXI7XG4iLCAibW9kdWxlLmV4cG9ydHM9XCJXNS9mY1FMbjVnS2YyWFViQWlRMVhVTFgrVFp6NkFEVG9Ec2dxazZxVmZlQzBlNG02T08yd2NRMUo3NlpCVlJWMWZSa0VzZHUvLzYyelFzRkVaV1NUQ25NaGNzUUtsUzJxT2h1VllZTUdDa1YwZlhXRW9NRmJFU1hyS0VaOXdkVUVzeXc5ZzRiSmxFdDFZNm9WTXhNUlRFVmJDSXdaekp6Ym9LNWo4bTRZSDAycWdYWWh2MVYrUE00MzVzTFZ4eUhKaWhhSlJFRWhaR3FMMDN0eEdGUUxtNzZjYUdPL292eEt2ekNieS8zdk1UdFgvNDU5ZjBpZ2k3V3V0bktpTVE2d09EU29SaC84THgxVjNROTlNdkt0d0I2YkhkRVJZUlkwaFN0Sm9Nak5lVHNOWDdibitZN2U0RVEzYmY4eEJjN0wwQnN5ZkZQSzQzZEdTWHBMNmNsWUMvSTMyOGg1NC9WWXJRNWkwNjQ4RmdiR3RsODM3c3ZKMzVMM01vdC8rblBsTnBXZ0t4MWdHWFFZcVg2bitiYlo3d3V5Q0hLY1VvazEyWGpxdWI3TlhaR3pxQngwU0QrdXppTmY4N3Q3dmU0Mmp4U0tRb1czbnl4VnJXSUdsRlNoaENLeGpwWlo1TWVHbmEwK2xCa2sra2FOOEY5cUZCQUZnRW9neU1CZGNYL1QxVy9Xbk1PaS83eWNXVVFsb0VCS0dlQzQ4TWtpd3FKa0pPKzEyZVFpT0ZITW1jazZxL0lqV1czUlpsYW55MjNUQm0rY05yLzg0L29pNUdHbUdCWldyWjZqK3p5a1Zveno1ZlQvUUgvRGE2V1RiWllZUHluVk5PN2t4enVOTjJreEtLV2NoZTVXdmVpdFBLQWVjQjhZY0FIei8relhMamNMemtkRFNrdE5JRHdaRTlKOVgrdHRvNDNvSnk2NXdBcE0zbUR6WXRDd1g5bE0rTjVWUjNrWFlvMFozdDBUdFhmZ0JGZzdnVThvTjBEZ2w3ZlpsVWJoTmxsKzB1dW9oUlZLanJFZDhlZ3JTbmR5NS9UZ2QyZ3FqQTRDQVZ1QzdFU1VtTDNEWm9HbmZoUVY4dXducGk4RUd2QVZWc293TlJ4UHVkY2s3K29xQVVEa3dab3BXcUZuVzFyaXNzMHQxejZpQ0lTVktyZVlHTnZRY1h2KzFMOStqYlA4Y2QvZFBVaXFCc28ycSs3WnlGQnZFTkNra1ZyNDRpeVBidE9vT29DZWNXc2l1cU1TTUw1bHYrdk41TXpVcitEbmg3M0c3UTFZblJZSlZZWEhSSmFOQU9CeWlhSzZDdXNnRmRCUEU0MHIwcnZxWFY3dGtzS08yRHJIWVhCVHY4UDV5c3F4RXg4VkRYVUREcWtQSDZOTk9WL2EyV0g4emxrWFJFTFNhOFAraGVOeUpCQlA3UGdzRzFFdFd0TmVmNi9pK2xjYXl6UXdRQ3NkdWlkcGJLZmhXVURnQUVteWhHdS96VlRhY0k2UlMwelRBQnJPWXVlZW1uVmExOXU5ZlQyM04vVGE2UnZUcG9mNURXeWdxcmVDcXJEQWdNNExJRDErMVQvdGFVNnlURlZMcVhPdisvTXVRT0ZuYUY4dkxNS0Q3dEtXRG9CZEFMZ3hGMzN6UWNjQ2NkSHg4ZktJVmRXNjlPN3FIdFhwZUdyOWpiYnBGQStxUk1XcjVocDBzNjdGUGM3SEFpTFYwZzAvcGVabFc3aEpQWUVoWnlocFN3YWhuZjkzL3RaZ2ZxWldYRmRtZFhCenF4R0hMclFLeG9BWTZmUm9CaGdDUlBtbUd1ZVlaNUpleFRWREtVSVh6a0cvZnFwLzBVM2hBZ1FkSjl6dW11dEs2bnFXYmFxdm0xcGd1MDNJWVIrRys4czBqREJCejhjQXBaRlNCZXVXYXN5cW8yT01ES0FaQ296UytHV1N2TC9Ic0U5ckh4b29lMTdVM3MvbFRFK1ZaQWs0ajNkcDZ1SUdhQzBKTWlxUjVDVXNhYlB5TTBkT1lEUjdFYTdpcDRVU1pseWEzOFlmUHR2clgvdEJsaEhpbGo1NW5aMW5mTjI0QU9BaTlCVnR6L01ibjhBRURKQ3FKZ3NWVWE2blFuU3h2MkZzN2wvTmxDenBmWUVqbVByTnlpYi8rdDBlaTJlRU1qdk5oTGtIQ1psY2k0V2hCZTdlUFpUbXpZcWxZOSsxcHh0UzRHQis1bE0xQkhUOXRTMjcwRVdVRFlGcTFJMHlZL2ZOaUFrNGJrOXlCZ21lZi9mMms2QWxZUVpIc05Gblc4d0JReENkNjhpV3Y3LzM1YlhmejNKWm1mR2xpZ1dBS1JqSXMzSXB6eFEyN3ZBZ2xIU2lPekNZeko5TDlBMUNkaXlGdnlSNjZ1Y0E0aktpZnU1ZWh3RVIyNnlWN0hqS3FuNU1mb3pvN0NveHh0OExXV1BUNDdCZU14WDhwMFBqYjdoWm4rNmJ3N3ozTHcrNzY1M2o1c0k4Q0x1NWtUaHBNbGoxbTRjMmNoM2pHY1AxRnNUMTN2dUszcWplY0tUWmsya0hjT1pZNDBVWCtxZGF4c3RacXNxUXFnWHorUUdGOTlaSkxxcjNWWXU0YWVjbDFBYjVHbXFTOGsvR1Y1Yjk1enhRNWQ0RWZYVUo2a1RTL0NYRi9haXFLRE9UMVQ3Sno1ejBQd0RVY3dyOWNsTE4xT0pHQ2lLZnF2YWgraDNYenJCT2lMT1c4d3ZuOGdXNnFFOHZQeGkrRWZ2K1VINTVUN1BRRlZNaDZjWjFwWlFsekpwS1o3UDd1V3Z3UEdKNkRUbFI2d2J5ajNJdjJIeWVmblJvL2R2N2ROeCtxYWEwTjM4aUJzUisrVWlsN1dkNGFmd0ROc3J6REFLNGZYWnd2RVkvamRLdUlLWGxmclFkMkMzOWRXN250blJiSXA5T3RHeTlwUEJuL1YyQVNvaS8yVUpaZlMreHVHTEg4Ym5MdVBsemRUTlM2emR5azhEdC9oNnNmT1c1bXl4aDFmK3pmM3paM01YL21POWNRUHA1cE94OTY3WkE2L3BxSHZjbE5mblVGRitycStWZDdhbEtyNktXUGNJRGhwbjZ2Mks2TmxVdTZMcktvOGIvcFlwVS9HYXpmdnR3aG43dEVPVXVYaHQ1clVKZFNmNnNMallmMFZUWURnd0o4MXlhcUtUVVllai90Ykhja1NSYi9IWmljd0dKcWgxbUFIQi9JdU5zOWRjOXl1dkYzRDVYb2NtM2VsV0ZkcTVvRXk3MGRZRml0Nzl5YUxpTmpQajVVVWNWbVpVVmhRRWhXNVYyWjZDbTRIVkgvUjhxbGFtUll3QmlsZXVoMDdDYkVjZTNUWGEySm1YV0JmK296dDMxOXBzYm9vYmVaaFZud2hNWnpPZVFKemhwVERiUDcxVHY4SHVaeHhVSS8rbWEzWFc2REZERHM0K3FtcEVSd0hHQmQyZWR4d1VLbE9EUmRVV1ovZzBHT2V6cmJ6T1phdUZNYWk0UVU2R1ZIVjZhUE5CaUJuZEhTc1Y0SXpwdlVpaVl5ZzZPeXlyTDREajVxL0x3M041a0F3ZnRFVmw5ck5kN0prNVBEaWoyaFRINndJWG5zeVhrS2VQeGJtSFlnQzhBNmFuNUZvYi9LSDVHdEMwbDRlRnNvK1ZweGVkdEpIZEhwTm0rQnZ5NEM3OXlWT2tyWnNMclEzT0hDZUIwUmEra0JJUmxkVUdsRENFbXEyUndYbmZ5aDZEeithbGs2ZWZ0STJuNnNhc3RSckd3YndzekJlRFJTL0ZhL0t3UkprQ3pUc0xyL0pDczVoT1BFL01QTFlkWjFGMWZ2N0QrVm15c1g2TnBPQzhhVTlGNFFzNkh2RHlVeTlQdkZHREtaL1A1MTAxVFlIRmw4cGpqNndtL3F5Uzc1ZXRaaGhmZzBVRUw0T1ltSGs2bTZkTzE5MkF6b0l5UFNWOVFlZERBNE1sMjNyUmJxeE1QTXhmN0ZKbkRjNUZURWxWUy9QeXFnZVB6bXdWWjI2TldoUkRRK29hVDdseTdlbGw0czNEeXBTMXMwZyt0T3I3WEhycmtaajkreC9tSkJ0dHJMeDk4bEZJYVJaekh6NGFDN3I1Mi9KUTRWakhhaFkyL1lWWFpuL1FDMnp0UWIvc1kzdVJseWM1dlFTOG5MUEdUL24yNzQ5NWk4SFBBMTUyejdGaDVhRnB5bjFHUEpLSHVQTDhJdzk0RHVXM0tqa1VSQVdaWG40RVF5ODl4aUtFSE4xbWsvdGtNNGdZREJ4d05vWXZSZkU2TEZxc3hXSnRQckRHYnNuTE1hcDNLYTNNVW95dFcwY3ZpZW96T21kRVJtaGNxekcrM0htWnYyeVplaUllUVRLR2RSVDRISE54ZWttMXRZKy9uMDZyR21GbGVxTHNjU0VSemN0VEtNNkc5UDBQYzFSbVZ2cmFzY0l4YU8xQ1FDaVlQRTE1YkQ3YzN4U2VXN2dYeFlqZ3hjclVsY2JJdk8wcitZcGxoeDBrVHQzcWFmRE9tRnlNamdHeFh1NzNyZGRNSHBWMXdNdWJ5QUdjZi92NWRMcjVQNzJUYTlsQkYrZnpNSnJNeWN3dis5dm5VM0FOSWwxY0g5dGZXN2FmOHUwL0hHMHZWNDdqTkZYekZUdGFoYTF4dnplL3M4S010Q1l1Y1hjMW56ZmQvTVF5ZFVYbi9iNzJSQnQ1d08vM2pSY01IOUJkaEMveWN0S0JJdmVSWVByTnBEV3FCc084Vk1tUCtXdlJhT2NBNHpSTVIxUHZTb085MnJTN3BZRXYrZlpmRWZUTXpFZE0rNlg1dExseXhFeGhxTFJrbXM1RXVMb3ZMZng2NmRlNWZMMi95WDAySDUyRlBWd2FoclBxbU4vRTBvVlhuc0NLaGJpL3lSeFg4M25SYlVLV2h6WWNlWE9udGZ1WG41MU5zeko2TU83M3BRZjVQbDRpbjNlYzRKVThoRjdwcFYzNCttbTlyMUxZMGVlL2kxTzF3cGQ4K3pmTHp0RTBjcUJ4Z2dpQmk1QnU5NXY5bDNyOXIvVTVod2VMbitUYmZ4b3dyV0RxZEphdUtkOCtxL2RIOHNiUGtjOXR0dXlPOTRmNy9YSy9uSFg0Nk1QRkxFYjVxUWxOUHZoSjUwLzU5dDlmdDNMWHU3dVZhV2FPMmJEckRDblJTelp5V3ZGS3hPMSt2VDhNd3d1blIzYlgwQ2tmUGpxYjRLOU8xOXRuNVg1MFB2bVlwRXdIdGlXOVd0enVWL3M3NkIxenZMTE5rVmlOZDh5U3hJbC8zb3JmcVA5MFR5VEdhZjcvcng4alF6ZUhKWGRtaC9ONllEdmJ2bVRCd0NkeGZFUTFOY0w2d05NZFNJWE5xN2IxRVV6UnkxL0F4c3lrNXAyMkdNRzFiK0d4RmdiSEVyWmg5Mnd1dmNvMEF1T0xYY3Q5aHZ3Mm53L0xxSWNEUlJtSm1tWnpjZ1VhN0pwTS9XVi9TOUlVZmJGNTZUTDJvcnpxd2ViZFJEOG5JWU5KNDFEL2h6MzdGbzExcDJZMjF3elBjbjcxM3FWR2hxdGV2U3RZZkdING42OU9FSnRQdmJiTFlXdnNjRHFjM0hnbnUxNjYrdEF5TG54clgwWTV6b1lqVisrMXNJN3Q1a01yMDJLVC8rdXd0a2MrclpMT2YvcW4vczNuWUNmMTNEZzgvc0IyZGlKZ2pHcWpRK1RMaHhienl1ZTJPYjdYNi85bFV3VzdhK2xiem5Iek9ZeThMS1cxQy91UlBiUVkzS1cvMGdPOUxYdW5ITHZQTDk3YWZiYTliRnRjOWhtejdHQXR0alZZbEN2UUFpT3dBay9nQzUraGtMRXM2dHIzQVpLeExKdE9Fd2syZEx4VFlXc0lCL2ovVG9XdElXem85MDZGclNHOGlhcXFxcXFxaUlpSWlBZ3pNek16TnorQXlLKzAxL3ppOG44UytZMU1qb1JhUTgwV1UvRzhNQmxPKzUzVlBYQU5yV200d3pHVVZaVWpqQkpaVmRocGNma2pzbWNXYU8rVUVsZFhpMWUrenErSE9zQ3BrbllzaHVoOHBPTElTSnVuN1ROMEVJR1cyeFRubE9JbWVlY25vR1c0cmF4ZTJHMVQzSEV2ZllVWU1oRytnQUZPQXdoNW5LOG1aaHdKTW1ON3IyMjRRVnNORnZaODdaMHFhdHZrbmtseVBESzNIeTQ1UGdWS1hqaTUyV2VuNGQ0UGxGVlZZR25OYXArZlNwRmJLOTByWW5oVWM2bjkxUTNBWTlFMHRKT0ZyY2ZadG0vNDkxWGJjRy9qc1ZpVVBQWDc2cW1ldWl6K3FZMUhrNy8xVlBNNDA1eldWdW9oZUxVaW1wV1lkVnpDbVVkS0hlYk1kemdyWXJiOG1MMmVlTFNuUldIZG9uZlphOFJzT1U5RjM3dys1OTFsNUZMWUhpT3FXZUh0RS9sV3JCSGNSS3AzdWh0cjh5WG04TFUvNW1zK05NNlpLc3F1OTBjRlo0bzU4K2s0cmRydEI5N05BREZid21FRzdsWHF2aXJoT1RPcVUxNHh1VUYybXlJalVSY1BIclBPUTRsbU0zUGVNZzdiVXVrMG5uWmk2N2JYc1U2SDhsaHFJbzhUYU9yRWFmQ08xQVJLOVBqQzBRT29xMkJ4bU1kZ1lCOUcvbEliOSsrZnFOSjJzN0JIR0Z5Qk5tWkFSOEozS0NvMDEyaWthU1A4QkNyZjZWSTBYNXhkbmJoSElPK0I1cmJPeUI1NHpYa3pmT2J5SjRlY3d4ZnFCSk1MRmM3bTU5ck5jdzdob0huRlowYjAwemVlK2dUcXZqbTYxUGI0eG4wa2NEWDRqdkhNMHJCWFp5cEczRENLbkQvV2FhL1p0SG10RlBnTzVlRVR4K2s3UnJWZzNhU3dtMllvTlhuQ3MzWFBRRGhObitGaWE2SWxPT3VJRzZWSkg3VFA2YXZhMjZlaEtIUWEyVDROMHRjWjlkUENHbzNaZG5ObHRzSFFiZVl0NXZQbkplelYvY0FlTnlwZG1sMXZDSEk4TTgxblNSUDVRaTIrbUk4di9zeGlacnU5MTg3blJ0cDNmLzQyTmVtY09OYSs0ZVZDM1BDWnpjODhhWmg4NTFDcVNzc2hlNzB1UHhlTi9kbVl3bHdiM3Ryd01yTjFHcThqYm5BcGNWRHgveURQZVlzNS83cjYydHNRNmxMZytEaUZYVEVoelI5ZEhxdjBpVDR0Z2o4MjVXK0gzWGlSVU5VWlQya1I5UmkwK2xwK1VNM2lRdFM4dU9FMjNMeTRLWXR2cUgxM2pnaFVudEpSQWV3dXpOTERYcDhSeGRjYUEzY01ZNlRPMkllU0ZSWGV6ZVdJakNxeWhzVWRNWXVDZ1lUWlNLcEJ5cGUxelJmcThGc2h2ZkJQYzZCQVFXbDcvUXhJRHAzVkdvMUozdm40Mk9FczNxem53cytZTFJYYnlteUIxOWE5WEJ4Nm4vb3djeXhsRVl5RldDaStrRzlGK0V5RC80eW44MCthZ2FaOVA3YXkyRG55OTlhSzJvOTFGa2ZFT1k4aEJ3eWZpNXV3eDJ5NVNhSG1HK29xL3psMUZYLzhpck9mOFkzdkFjWC82dUxQNkE2bnZNTzI0ZWRTR1BqUWM4MjdSdzJhdFgrejJiS3EwQ21XOW1PdFlucjUvQWZEYTFaZlBhWG5LdGxXYm9ydXA3UVl4K09yMnVXYitOM04vLzIreURjWE1xSUpkZjU1eGw3L3ZzajRXb1BQbHhMeHRWcmtKNHcvdFRlM21MZEFUT09Zd3hjcTUydzVXeHo1TWJQZFZzNU84L2xoZkU3ZFBqMGJJaVBRM1FWMGlxbTRtM1lYOGhSZmM2alEzZldlcGV2TXFVREpkODZaNHZ3TTQwQ1dIbm4rV3Boc0dIZmllRjAyRDN0bVp2cFdEK2tCcE5DRmNMblpoY21tcmhwR3p6YmRBK3NRMWFyMThPSkQ4N0lPS09Gb1JOem5hSFBOSFVmVU5odlkxaVUrdWh2RXZwS0hhVW4zcUszZXhWVnlYNGpvaXBwM3VtN0ZtWUpXbUErV2JJRHNoUnBiVlJ4NS9ucXN0Q2d5ODdGR2JmVkI4eURHQ3FTKzJxQ3NuUnduU0FONnpnenhmZEIybkJUL3ZaNC82dXhiNm9IOGI0VkJSeGlJQjkzd0xhNDdoRzN3MlNMLzJaMjd5T1hKRndacFNKYUJZeXZhakE3dlJSWU5LcWxqWEtwdC9DRkQvdFNNcjE4REtLYndCMHhnZ0JlUGF0bDFua2kweXZxVzV6Y2hseVptSjBPVHhKM0QrZnNZSnMvbXhZTjUrTGU1b2FndGNsK1lzVnZ5OGtTakkyWUd2R2p2bXBrUlM5VzJkdFhxV25WdXhVaFVSbTFsS3RvdS9oZEVxMTlWQnA5T2pHdkhFUVNtcnB1ZjJSMjRtWEdoZWlsOEtlaUFOWThmVzFWRVJVZkJJbWI2NGoxMmNhQlptUlZpWkhiZVZNakNyUERnOUE5MElYcnRuc1lDdVp0UlEwUHlyS0RqQk5Pc1BmS3NnMXBBMDJnSGxWcjBPWGlGaHRwNm5KcVhWemNiZk0wS256QzNnZ09FTlBFOVZCZG1IS042TFlhaWpiNHdYeEpuNUEwRlNERjVqK2gxb29aeDg4NUp0M1pLek81bjdaNVdmTkVPdHl5UHFRRW5uN1dMdjVGaXMzUGRnTXNoakYxRlJ5ZGJOeWVCYnlLSTFvTjFUUlZyVks3a2dzYi96alg0TkRQSVJNY3RWZWF4VkIzOFZoMXg1S2JlSmJVMTM4QU01S3ptWnUzdW55MEVyeWd4aUpGN0dWWFVyUHpGeHJseDF1RmRBYVpGRE45Y3ZJYjc0cUQ5dHpCTW83TDdXSUVZSytzbGExRFZNSHBGMEY3YjMrWTZTK3pqdkxlRE1DcGFwbUpvMXdlQld1eEtGM3JPb2NpaDFndW40Qm9KaDFrV25WL0ptaXE2dU9oSzNWZkt4RUhFa2FmakxnSzNvdWphUHpZNlNYZzhwaGhMNFROUjF4dkpkMVdhMGFZRmZQVU1Mck5CRENoNEF1R1JUYnRLTWM2WjFVZGo4ZXZZL1pwQ3VNQVVlZmRvNjlEWlVuZ29xRTFQOUEzUEpmT2Y3V2l4Q0VqK1k2dDdmWWVIYmJ4VUFvRlYzTTg5Y0NLZm1hM2ZjMStqS1JlN01GV0ViUXFFZnl6TzJ4L3dyTzJWWUg3aVlkUTlCa1B5STgvM2tYQnBMYUNwVTdlQzBZdi9hbS90RUR1N0hacHFnMEV2SG8wbmYvUi9nUnpVV3kzMy9IWE1KUWV1MUd5bEttT2tYemxDZkdGcnVBY1BQaGFHcVpPdHUxOXpzSjFTTzJKejRadHRoNWNCWDZtUlF3V21Ed3J5RzlGVU1sWnpOY2tNZEsrSW9NSnYxck9XbkJhbVMydzJLSGlhUE1QTEMxNWhDWm00S1Rwb1p5ajRFMlRxQy9QNnI3L0VobkRNaEtpY1paMVp3eHVDN0RQekRHczUzcThnWGFJOWtGVEsrMkxUcTdiaHdzVGJyTVY4UnNmdWE1bE1TMEZ3YlRpdFVWblZhMXlUYjVJWDUxbW1ZblVjUDl3UHI4SmkxdGlZSmVKVjlHWlRyUWhGN3Z2ZFUyT1RVNDJvZ0o5RkR3aG15Y0kyTElnKyswM0M2c2NZaFV5VXVNVjV0a3c2a0dVb0wrbWpOQzM4K3dNZFdObGpuNnRHUHBSRVM3dmVxclNuNVRSdXYrZGg2SlZML2lESFUxZGI0YzlXSzMrK09ySDNQcXppRjkxNlVNVUtuOEc2N25ONjBHZldpSHJYWWhVRzN5VldteVlhazU5TkhqOHQxc21HNFVEaVd6MnJQSE5yS25ONFpvMUxCYnIyL2VGOVlaMG4wYmx4Mm5HNFgrRUtGeHZTM1cyOEpFU0QrRldrNjFWQ0Qzei9VUkdIaUpsKys3VGRCd2tDajZ0R09IM3FEYjBRcWNPRjlLenBqMEhVYi9LeUZXM1loajJWTUtKcUdabGVGQkg3dnF2ZjdXcUxDM1hNdUhWOHE4YTRzVEZ1eFV0a0QvNkpJQnZLYVZqdjk2bmRncnVLWjFrL0JIenFmMks5ZkxrN0hHWEFOeUxEZDF2eGtLL2kwNTVwbnpsK3p3NnpMbndYbFZZVnRmbWFjSmdFcFJQMWhiR2dyWVBWTjZ2MmxHK2lkUU5HbXdjS1h1Lzh4RWovUDZxZS9zQjJXbXdOcDZwcDhqYUlTTWt3ZGxlRlhZSzU1TkhXTFRUYnV0U1VxakJmREdXby9ZZzkxOHFRKzhCUlpTQUhaYmZ1Tlp6Mk8wc292MVVlNENXbFZnM3JGaE0zS2xqajlrc0dkL05VaGs0bkgrYTVVTjIrMWk4K05NM3ZSTnA3dVE2c3FleFNDdWtFVmxWWnJpSE5xRmk1ckxtOVRNV2E0cW0zaWRKcXBwUUFDb2wybDRWU3V2V0xmdGE0SmNYeTNiUk9QTmJYT2dkT2hHNDdMQzBDd1cvZE1sU3g0SmYxN2FFVTN5QTF4OXArWWMwanVwWGdjTXVZTmt1NjRpWU9rR1RvVkR1SnZsYkVLbEpxc21pSGJ2TnJJVlpFSCt5RmRGOERibGVaNmlOaVd3TXF2dE1wL21TcHd4NUt4UnJUOXAzTUFQVEhHdE1iZnZkRmh5ajl2aGFLY24zQXQ4TGMxNkFpK3ZCY1NwMXp0WGk3ckNKWngvcWw3VFhjY2xxNlE3NlVlS1dEeTlib1MwV0hJalV1V2hQRzhMQm1XNXkycmh1VHBNNXZzTHQrSE9MaDFZZjBEcVhhOXRzZkMra2FLdDJodEEwYWkvTDJpN1JLb05qRXd6dGttUlUwR2ZnVzFUeFV2UEZoZzBWN0RkZldKazVnZnJjY3BZditNQTlNMGRrR1RMRUNlWXdVaXhSempSRmRtakc3emRaSWwzWEtCOVlsaU5LSTMxbGZhN2kySkc1QzhTcytySGUwRDdaNjk2L1YzREVBT1dIblE5eU5haE1VbDVrRU5XUzZwSEtLcDJEMUJhU3JySGRFMXcycU54SXp0cFhnVUlyRjBibTE1WU1MNGI2VjFrK0dwTnlzVGFoS01WcnJTODVsVFZvOU9HSjk2STQ3ZUF5NXJZV3BSZi9tSXplb1lVMURLYVFDVFVWd3JoSGV5Tm9EcUhlbCtsTHhyOVdLemhTWXc3dnJSNitWNXEwcGZpMmszTDF6cWt1Ylk2cnJkOVpMdlN1V05mMHVxbmtZK0ZwVHZGelNXOUZwMGI5bDhKQTdUSFY5ZUNpL1BZL1NDWklVWXgzQlUyYWxqN0NtM1ZWNmVZcGlvczRiNld1Tk9KZFlYVUszelRxajVDVkcyRnFZTTRaN0N1SVUwcU8wNVhSMGQ3MUZITTBZaFptSm1UUmZMbFhFdW1OODJCR3R6ZFgwUzE5dDFlK2JVaWVLOHpSbXFwYTRRYzVUU2ppZm1hUXNZMkVUTGpoSTM2Z01SMSs3cXBqZFhYSGljZVVla2ZCYXVjSFNoQU9pRlhtdjNzTm1HUXlVNWlWZ25vb2N1b25RWEVQVEZ3c2xIdFM4UitBNDdTdEk5d2owaVNydGJpNXJNeXNjekZpSW1zUStiZEZDbG5GampwWFh3TXk2TzdxZmpPcjhGYjBhN09ESXRpc2pubjNFUU8xNit5cGQxY3d5YUFXNVl6eHo1UWtuZk1PNzY0M2ZYVy9JOXkzVTJ4SDI3T2FwcXI1NlovdEV6Z2xqNkliVDZIRUhqb3BpWHFlUmJlNW1RUXZ4dGNiRE9WdmVyTjBaZ01kenFSWVJqYVh0TVJkNTZRNGNaU21kUHZaSmRTcmhKMUQ5ek5YUHFBRXFQSWF2UGRmdWJ0NW9rZTJrbXYwZHp0SXN6U3YyVll1b3lmMVV1b3Bic1liK3VYOWg2V3B3anBndFo2Zk5OYXdOSjRxOE8zQ0ZvU2Jpb0FhT1NaTXgyR1lhUFlCK3JFYjZxalFpTlJGUTc2VHZ3TkZWS0QrQmhIOVZoY0tHc1h6bU1JN0JwdFUvQ05Xb2xNN1l6Uk92cEZBbnRzaVdKcDZlUjJkM0dhcmNZU2hWWVNVcWhtWU9XajVFOTZOSzJXdm1ZTlRlWTdaczRSVUVkdjloOVFUNEVzZUt0Nkx6THJxRU9zM2h4QVkxTWFOV3BTYTZ6Wng4RjNZT1ZlQ1lNUzg4VytDWUhEdVdlNHlvYzZZSytkakR1RU9yQlI1bHZoMHIrUTl1TTg4bHJqeDl4OUF0Z3BRVk5FOHIrM082R3Z3NTlEK2tCRi9VTVh5aGxpWVV0UGptdlhHWTZEazN4K2tFT1crR3RkTVZDNEVaVHFvUy9qbVIwUDBMUzc1RE9jL3cydm5yaTk3TTRTZGJaOHFlVTdnZzhEVmJFUmtVNWdlYU1RTzNtWXJTWXlBbmdlVVFxck4wQzAvdnNGbWNnV05YTmVpZHNUQWo3LzRNbmNKUjBjYWFCVXBiTEsxeUJDQk5SakV2Nkt2dVZTZHBQbkVNSmRzUlJ0cUorVTh0TjFnWEE0ZVBIYzZaVDBldmlJNzNVT0pGMGZFWjhZYW5lQVFxUWRHcGhOdndNNG5JcVBuWHhWMHhBMGZuQ1Qrb0FoSnV5dy9xOGpPMHk4Q2pTdGVaRXh3QnBJTjZTdk5wNkE1Ry9hYmk2ZWdlTkQvMUdUZ3VodU5qYVViYm5TYkdkNEw4OTM3RXptMzRFeWk2bjFtYWVPQnhoM1BJMGp6SkRmNW1oL0JzTEQ3RjJHT0t2bEEvNWd0dnhJMy9lVjRzTGZLVzVXeStvaW8rZXMvdTZUOFVVK25zb2Z5NTdJY2IvSmxaSFBGdENnZC94K2J3dDNaVCt4WFR0VHRUckdBYjRRZWhDNlg5Rys4WVQrb3pjTHhEc2RDanN1T3F3UEZucmRMWWFGYzkyVWkwbTRmcjM5bFltbENhcVRpdDdHNk8vM2tXRGtndFhqTkg0QmlFbS8ramVnUW5paE90ZmZmbjMzV3hzRmpoZk1kNDhIVCtmNm82WDY1ajdYUjhXTFNITUZreGJ2T1lzclJzRjFib3dEdVNRMThNa3hrNHF6MnpvR1BMNWZ1OWgySHFtdDFhc2wzUTNZdTNzek9jK3NwaUNtWDRBRVRCTTNwTG9UWVNwM3NWeGFoeWhMOGVDNG1QTjlrMngzbzB4a2lpeEl6TTNDWkZ6ZjVvUjRtZWNRNStheDJ3Q2FoMy9jcm1uSG9xUjArS01hT1B4UmlmMW9FRlJGT08va1RQUG10d3crTmZNWHhFSzZnbjZpVTMyVTZmRnJ1SXo4UTRXZ2xqdG5hQ1ZUQmdXeDdkaVVkc2hDOVpFYTV5S3BSQkJlVzEyci9pTmMvK0VnTnFtaHN3TkI4U0JvaWhIWGVERjdycldETGNtdDNWOEdZWU43cFhSeTREWmpqNERKdVVCTDVpQzNEUUFhb280dmtmdHFWVFlSR0xTM21IWjdnZG1kVFRxYmdOTi9QVGRUQ09UZ1hvbGM4OE1oWEFFVU1kWDBpeTFKTXVrNXdMc2dldTBRVVlsejJTNHNrVFd3Sno2cE9tLzhpaHJtZ0dmRmdyaStaV1VLMmdBUEhnYldhOGphb2NkU3VNNEZKWW9LaWNZWC9aU0VOa2c5UTFaekpmd1NjZlZuUjJEZWdPR3dDdm1vZ2FXSkNMUWVwdjlXTmxVNlFnc21Pd0lDcXVVMjhNbGszZDlXNUU4MWxVLzVFejBMY1g2bHdLTVdETmx1TktmQkRVeS9waEpnQmNNbmZraDlpUnhyZE96Z3MwOEpkUEI4NUx3bytHVVNiNHQzbkMrMGJ5cU1adE8yZlFKNFUyekdJcjQ5dC8yOHFtbUd2MlJhbkREN2EzRkVjZHR1dGtXOHR3d3dsVVNwYjhRYWxvZGRkYkJmTkhLRFE4MjhCZEU3T0JnRmRpS1lvaExhd0ZZcXB5YlFveEFUWnJoZUxoZEk3KzBabHU5UTFteVJjZDE1cjlVSW04SzJMR0p4cVRlZ250cU5WTUtuZjFhOHpRaXlVUjFyeG9xamlGeGVIeHFGY1lVVEhmRHU3cmhiV25nNnFPeE9zSSs1QTFwOW1SeUVQZFZrVGxFMjR2WTU0VzdiV2M2ak1nWnZOWGRmQzkvOXE3NDA4S0RzYmRMN1V0ejdRRlNEZXR6MnBpY0FyenJkcEw4T2FDSEM5VjI2UnJvZW10RFo1eU5NL0tHa1dNeVRtZm5JbkV2d3RTRDIzVWNGY2poYUUzVkt6a29hRU1LR0JmdDRYYklPNmZvclRZMWxtR1F3Vm1LaWNCQ2lBckR6RSsxb0l4RTA4ZldldmlJT0Q1VHpucUgrT29IYWR2b09QMjBkck1QZTVJcmczWEJRemlXMlhEdUhZempxUVE0d3lTc3NqWFVzNUgrdDNGV1lNSHBwVW5CSE14L25ZSVQ1ZDdPbWpEYmdEOUY2bmEzbTRsN0tka2VTTzNrVEVQWGFmaVdpbm9nYWc3YjUydGFpWmhMMVRTdkJGbUVaYWZGcTJIOGtoUWFaWHVpdENld1Q1RkJnVnRQSzBqNHhVSFBmVXozUTI4ZWFjMVoxMzlEQVAyM2Rna2k5NEVDOHZiRFBUUUM5N0hQUFNXalVORzV0V0tNc2F4QUVNS0MwNjY1WHZvMU50ZDA3d0NMTmY4UTU2bXJFUFZwQ3hsSU1WbFFsV1J4TTNvQWZwZ0ljKzhLQzNyRVhVb2c1ZzA2dnQ3emdYWThnckg3aGh3VlNhZXV2QzA2WVlSQXdwYnlrL1Vuemo5aExFWk5zMm94UFFCOXljK0duTDZ6VGdxN3JJKytLREp3WDJTUDhTZDZZelR1dzVsVi9rVTZlUXhSRDEyb21mUUFXNmNhVFI0TGlrWWtCQjFDTU9ydmdSci9WWTc1K05TQjQwQ25pNmJBREF0YUsrdnl4VldwZjlOZUtKeE4yS1lROFEyeFBCM0sxczdmdWh2V2JyMlhwZ1cwNDRWRDZEUnMwcVhvcUtmMU5Gc2FHdktKYzQ3bGVVVjNwcHBQLzVWVEtGaGFHdW9sNEVzZmpmNXp5Q3lVSG1IdGhDaGNZaDRoWUxRRitBRldzdXE0dDB3SnlXZ2R3UVZPWmlWMGVmUkhQb0s1K0Uxdmp6OXdUSm1Wa0lUQzlvRXN0QXN5WlNnRS9kYmljd0tyODlZVXhLWkkrb3dEMjA1VG01bG5ubURSdVAvSm56eFgzZ010bHJjWDBVZXNaZHh5UXFZUXVFVzRSNTF2bVE1eE9adGVVZDhTSnJ1TWxUVXpodFZ3L05xN2VVQmNxTjIvSFZvdGdmbmdpZjYweUtFdG9VeDNXWU9abFZKdUpPaDh1NTlmelNEUEZZdFFncURVQUd5R2hRT0F2S3JvWE1jT1lZMHFqblN0SlIvRzNhUCtKdDFzTFZsR1Y4UE93ci82T0dzcWV0bnlGM1RtVHFaakVOZm5YaDUxb3hlOXFWVXcyTTc4RXpBSitJTThsWjFNQlBROVpXU1ZjNEozbVdTckxLck1IUmVBNXFkR296ME9EUnNhQSt2d3hYQTJjQU00cWxmekJKQTY1ODFtNGh6eEl0UXc1ZHhyckJMM1k2a0NiVWNGeG8xUzhqeVY0NHEvLys3QVNOTnVkWjZ4ZWFOT1NJVWZmcU1uNEE5bElqRmN0WW4yZ3BFUEFiM2Y3cDNpSUJOOEgxNEZVR1E5Y3QyaFBzTCtjRXNUZ1VyUjQ3dUpWTjRuNHd0L3dnZnd3SHVPbkxkNHlvYmtvZnk4SnZ4U1FUQTdyTXBESWM2MDhTbFpGSmZaWWNtYlQwdEFIcFBFOE1ydFE0MnNpVFVOV3hxdldaT212dTlmMEpQb1FtZys2bDdzWld3eWZpNlBYa3hKbndCcmFVRzBNWUc0ellIUXozaWd5L1hzRmt4NXROUXh3NDNxdkk5ZFUzZjBEZGhPVWxIS2ptaTFWQXIyS2l5MEhad0Q4VmVFYmhoME9pRGRNWXNwb2xRc1lkU3dqQ2NqZW93SVhOWlZVUG1MMnd3SWtZaG1YS2hHb3pkQ0o0bFJLYnNmNE5CaC9YblFvUzkyTkpFV09WT0ZzMlloTjhjNVFaRmVLMHBSZEFHNDBocXZMYm1vU0E4eFFtek9PRWM3d0xjbWU5Sk9zalBDRWdwQ3dVczlFMkRvaE1IUmhVZXlHSU42VEZ2cmJueThuRHVpbHNEcHpySDVtUzc2QVBvSUVKbUl0UzY3c1FKK25md2Rkem1qUHhjQkVCQkN3MGtXRHdkMEVaQ2tOZU9EN05OUWh0Qm03S0hMOW1SeGo2VTF5V1UycHV6bElEdHBZeGRINFpQZVhCSmtUR0FKZlVyL29UQ3ovaXlwWTZ1WGFSMlYxZG9QeEpZbHJ3MmdoSDBENWdicmhGY0l4ell3aTRhLzRocVZkZjJEZHhCcDZ2R1lEamF2eE1BQW95KzErM2FpTzZTM1cvUUFLTlZYYWdEdHZzTnR4N0tzK0hLZ282VTIxQitRU1pnSW9nVjVCdCtCblhpc2RWZnk5VnlYVisyUDVmTXV2ZHBBak0xby9LOVorWG5FNEVPQ3J1ZStrY2RZSHFBUTAvWS9PbU5sUTZPSTMzakgvdUQxUmFsUGFIcEpBbTJhdjAveHRwcWRYVktORHJjOUYyaXpvMjNXdTdmaXJnYlVSRkROWDllR0dlWUJoaXlweVhaZnQyajNoVHZ6RTZQTVdLc29kLy9yRUlMRGt6QlhmaTd4aDBlRmtmYjMvMXp6UEsvUEk1TmszRmJaeVRsNG1xNUJmQm9Wb3FpUEhPNFE0UUtaQWxyUTNNZE5maTNveElqdnNNM2tBRnYzZmR1ZnVycVlSM1BTd1gvbXBHeS9HRkkvQjJNTlBpTmRPcHBXVmJzL2dqRjNZSCtRQTlqTWhsQWJodmFzQUhzdEIwSUpldzA5aUFrbVhIbDEvVEVqK2p2SE9wT0dyUFJRWGJQQURNK0lnMi9PRWNVY3BnUFRJdE10VzREZHFnZllWSS8rNGhBRldZalVHcE9QL1V3TnVCNytCYktPY0FMYmpvYmRnemVCUWZqZ05TcDJHT3B4ekdMajcwVnZxNWN3MkFvWUVOd0tMVXRKVVg4c0dSb3g0ZFZhL1RONHhLd2FLY2w5WGF3UVIvdU51czcwMEhmMTdweU5uZXpyVWdhWTllNE1BRGhFREJwc0pUNnkxZ0RKczFxNndsd0dodVV6R1I3QzhrZ3BqUHlIV3dzdnJmM3luMXpKRUlSYTVlU3hvTEFaT0NSOXhidXp0eEZSSlc5Wm1NWWZDRkowZXZtOUYyZlZudWplOTJSYzRQbDZBOGJsdU44TVp5eUpHWjArc05TYi8vRHZBRnhDMkJxbEVzRndjY1dlQWw2Q3lCY1FWMWJ4NG1RTUJQMUp4cWsxRVVBRE5MZWllUzJkVUZiUS9jL2t2d0l0Ylo3dHgwc3QxNnZpcWQ1M1dzUm1QVEt2MkFEOENVbmh0UFdnNWFVZWdOcHNZZ2FzYXcyK0VWb29lTkttclczTUZ0ajc2YllISm01SzlncEFYWlhzRTVVOERNOFhtVk9TSjFGMVduTHk2blF1cCtqeDUyYkFiK3JDcTZ5OVdYbDJCMm9aRGhmRGtXN0gzb1lmVC80eHg1Vm5jQnV4TVhQMmxOZmhVVlFqU1N6U1JidVpGRTR2RmF3bHp2ZVh4YVlLVnM4THB2QWI4SVJZRjNaSGlSbm0wQURlTlBXb2N3eFN6TnNlRzdOclNFVlpvSGRLV3FhR0VCejFOOFB0N2tGYnFoM0xZbUFibTlpMUlDaElwTHBNNUFTNm1yNk9BUEhNd3d6blZ5NjFZcEJZWDh4WkROL2ErbHQ3bit4NWo0Yk5PVnRlWjhsajNocEFIU3gxVlI4dlpIZWM0QUhPOVhGQ2RqWjllUmtTVjY1bGpNbVpWemFlajJxRm4vcXQxbHZXek5aRWZIeEszcU9KckhMNmNycjBDUnpNb3g1ZjJlOEFMQkI0VUdGWktBM3RONkY2SVhkMzJHVEpYR1E3RFRpOWovZE5jTEY5akNiRGNXR0t4b0tUWWJsSXdiTERSZUwwMExSY0RQTWNRdVhMTWg1WXpndGZqa0ZLMURQMWlEenpZWVZaejVNL2tXWVJsUnBpZzFodFZSalZDa25tK2gxTTVMaUVEWE95SFJFaHZ6Q0dwRlpqSFMwUnNLMjdvMmF2Z2RpbHJKa2FsV3FQVzNEOWdtd1YzN0hLbWZNM0Y4WVpqMmFyK3ZIRnZmM0I4Q1JvSDRrREhJSzltckFnK293aUV3TmpqZDlWK0ZzUUtZUjhjekpyVWtmN1FvaTJZYVc2RVZEWnA1ellscWlZdHVYT1RIazRmQWNaN3FCYmRMRGlKcTBXTlYxbDIrSG50azFtTVd2eHJZbWM4a0l4OEczclczNko2UmE0bExyVE9DZ2lPaWhtb3crWW56VVQxOWpiVjJCM1JXcVNIeXhraG1nc0JxTVlXdk9jVW9tMWpEUTQzNitmY2J1M3hmMmJiZXFVL2NhK0M0RE9LRStlM3F2bWVNcVczQXhlamZ6QlJGVmN3VllQcTRMMEFQU1dXb0p1KzVVWVg0cWc1VTZZVGlvcVFHUEc5WHJudVovQmt4dVlwZTZMaTg3KzE4RXNreVFXL3VBK3VrMnJwSHByNmh1dDJUbFZiS2dXa0ZweCtBWmZmd2VpdzIrVml0dGtFeWYvaWZpblMvMEl0UkwySnEzdFFPY3hQYVdPMnhyRzY4R2RGb1VwWmdGWGFQMndZVnRSYzZ4WUNmSTFDYUJxeVdwZzRieDhPSEJRd3NWNFhXTWliWlowTFlqV0V5Mkl4UTFtWnJmMS9VTmJZQ0pwbFd1M25aNFdwb2RJR1ZBMDVkK1JXU1MrRVQ5dEgzUmZHR21OSTFjSVk3ZXZaWnE3bythMGJqanlncG1SM21WZmFsa1QvU1pHVDI3UThRR2Fsd0dsRE9TOVZIQ3lGQUlMMGExUTdKaVczc2F6OWdxWThscUt5bkZyUEN6eGtVNFNJZkxjOVZmQ0k1ZWRnUmhEWHMwZWRPOTkybmhUS0hyaVJFUDFOSkM2U1JPTWdRMHhPNWtOTlpPaE1PSVQ5OUFVRWxieHFlWkY4QTN4cmZESnNXdERuVWVuQUhkWVdTd0FiWWpGcVFaK0Q1Z2kzaE5LOENTeFU5aTZmNkNsTDlJR2xqMU9QTVFBc3I4NFlHNmlqc0pwQ2FHV2o3NWMzeU9aS0JCOW1OcFFOUFVLa0swRDZ3Z0xIOE1Hb3lSeFRYNlkwNVE0QW5ZTlhNWndYTTRlaWovOVdwc00vOUNvUm5GUVhHUjZNRWFZK0ZYdlhFTzNSTzBKYVN0azZPWHVIVkFUSEpFKzFXK1RVM2JTWjJrc010cWpPMHpmU0pDZEJ2N3kyZDhETXg2VGZWbWUzcTBacFRLTU11NFlML3Q3Y2lUTnRkRGt3UG9naDNDbmp4N3FrMDhTSHdmK2Rrc1o3TTJ2Q09sZnNGMGhRNko0ZWhQQ2FIVE5yTS96QlNPcUQ4M2RCRUJDVy9GL0xFbWVoMG5PSGQ3b1ZsMy9Rby85R1VEa2tiajd5eis5Y3Z2dStkREF0eDhOekNEVFA0aUtkWnZrOU1XaWl6dnRJTExlcHlzZmxTdlRMRkJaMzdSTHdpcmlxeVJ4WXYvenJnRmQvOVhWSGgvT216QnZEWDRtaXRNUi9sVWF2czJWeDZjUjk0bHpBa3BsbTNJUk55NFRGZnU0N3R1WXM5RVFQSVBWdGE0UDY0dFYrc1o3bjN1ZWQzY2dFeDJZSytRTDUreG1zNm9zazhxUWJUeXVLVkdkYVg5RlFxazZxZkRuVDV5a3hrMFZLN0taNjJiNkRORFVmUWxxR0h4U01LdjFQMFhONUJxTWVLRzFQNFdwNVFmWkRVQ0VsZHBwb1gwVTZzczJqSWtvMlhwVVJLQ0loZmFPcUxQZlNoZHRTMzdaclQrakZSU0gyeFlWVjFybVQvTUJ0UlFoeGlPNE1RM2lBR2xhWmkrOVBXQkVJWE9WbnU5ak4xZjkyMWxXTFpreTlicWJNM0oyTUFBSTlqbXVBeDNneW9FVWE2UDJpdnMwRWVOdi9PUitBWDZxNVNXNmw1SGFvRnVTNmpyNnlnOWxpbXUrUDBLWUt6Zk1YV2NRU2ZUWHpwT3pLRUtwd0kzWUdYWnBTU3kyTFRsTWdmbUZBM0NGNlI1Yzl4V0V0UnVDZzJaUFVRMk5iNmRSRlROZDRUZkdIcm5FV1NLSFB1UnlpSlNEQVorS1gwVnhtU0hqR1BiUVRMVnBxaXhpYTJ1eWhRMzk0Z0JNdDdDM1pBbXhuL0RKUytsMWZCc0FvMkVpci9DMGpHOWNzZDQrL3RwMTJwUGMvQlZKR2FLOW1mdnI3TS9DZXp0cm1DTzVxWTA2RWRpNHhBR3RpRWhuV0Fiekx5MlZFeWF6RTFKNW5QbWdVNFJwVzRTYTBUbk9UNnc1bGd0My90TXBST2lnSEhtZXhCR0FNWTBtZGNEYkR4V0l6NDFOZ2RENm94Z0hzSlJncjVSblQ2d1pBa1RPY1N0VTROTU9RTmVtU083Z3hHYWhkRXNDK05SVkd4TVVoUW1tTTBsbFdSYmJtRkdIekVxTE00SXcwSDc1NzdLeW8rWmYrMmNVRklPdzkzZ0VZMTcxdlFhTTBITHdwanBkUlI2Sno3VjBja0U3WHpZSjBUbVk5em5MZHprdmEwdk5yQUdHVDVTVVo1dWFIRGtjR3ZJMHlTcHdrYXNFZ1pQTXNlWWN1ODV3OEhQZFNOaSs0VDZBODNpQXdEYnhnZUZjQjFaTTJpR1h6RmNFT1VsWVZyRWNrYU95b2RmdmFZU1E3R3VCNElTRTBuWUpjMTVYLzFjaURUUGJQQ2dZSks1NVZrRW9yNEx2ekw5UzJXRHk0eGorNkZPcVZ5VEFDMlpOb3doZWVlU0k1aEEvMDJsOFVZa3Y0bms5aWFWbitrQ1ZFVXN0Z2s1SHlxK2dKbTZSOXZHM3JodU05MDRoZS9oRm1OUWFVSUFUQjF5M3Z3K09teFA0WDVZaTZBNUk1akp1ZkhDakY5K0FHTnduRWxsWmpVY282WGhzTzVUNStSM3l4ejV5TFZPbkFuMHp1Uys2emRqMG5USmJFWkNiWEpkdHBmWVpmQ2VDT3FKSG9FMnZQUEZTNmVSTGpJSmxHNjlYOTNuZlIwbXhTRlh6cDFaYzBsdC9WYWZEYUltaFVNdGJucVdWYjlNNG5HTlFMTjY4QkhQN0FSOElsOWRrY3h6bUJ2OFBDWmx3OWd1WTBsdXJiQnNtTllsd0pac0EvQjE1L0hma2JqYndQZGRhVmVjbHMvZWxtREhOVzJyNGNyQXg0M2ZlTmtmUndzYU5xL3l5SjBkL3A1aFo2QVphano3REJmVW9rMFpVNjJnQ3p6N3g4ZVZmSlRLQThJV240NXZJTkxTTTFxK0hGOUNWOXFGM3pQNk1sMjFrUFBMM0NYemt1WVVsblNxVCtJajR0SS9vZDVLd0lzK3REYWpEczY0b3dON3RPQWQ2ZXVjR3orS2ZPMjZpTmNCRnBiV0E1NzMyYkJOV080a0hOcHI5RDk1NUw2MWJ2SENGL213U3J6NmVRYURqZkRFQU5xR01rRmMrTkd4cEtaekNEMnNqL0pySGQremxQUThJejdRKzJKVklpVkN1Q0tvSy9obEFFSHp2ay9QaXEzbVJMMXJUL2ZFaDlob1Q1R0ptZVlzd2cxb3RpS3lkaXpKL2ZTMlNlS0hWdTZaM0pFSGppVzhOYVRRZ1A1eGRCbGk4bkM1N1hpTjlocnF1QnU5OWhuOXpxd285MitQTTJKWHRwZVZaUzBQZHFSNW1EeURyZU1NdEV3cytDcHdhUnl5em9ZdGZjdnQ5UEpJVzBmSlZOTmkvRkZ5UnNlYTdwZUx2SnJMKzViNEdPWEo4dEFyK0FUazlmOEttaUlzUmhxUnkwdkZ6d1JWM1o1ZFozUXFJVThKUS91UXBrSmJqTVVNRmoyRjlzQ0ZlYUJqSTQrZkwvb04zK0xRZ2pJNHp1QWZRKzNJUElQRlFCY2NmMGNsSnBzZnBuQnhEODRhdHd0dXBrR3FLdnJIN2NHTmwvUWNXY1NpNndjVkRNTDZsak9nWWJvKzJCT0FXTk5qbFVCUGl5aXRVQXdibmhGdkxibnF3NDJrUjNZcDJrdjJkTWVEZGNHT1g1a1Q0UzZNNDRLSEVCL1NwQ2ZsN3hnc1V2cytKTlk5RzNPMlgvNkZFdDlGeUFuNTdscmJpdSt0bDgzc0N5bVN2cTllWmJlOW1jaEw3TVRmL1RhNzhlODB6U2YwaFlZNWVVVTcrZmYxNGp2N1h5OHFqemZ6enp2YUpucklkdkZiNUJMV0tjV0d5NS93Nyt2VjJjdklmd0hxZFRCK1J1Sks1b2o5bWJ0MEh5OTRBbWpNamp3WU5abE5TNnVpeXhObndOeXQzZ2RyZUxiNjRwLzMrMDhuWGtiOTJMVGtrUmdGT3drMW9HRVZsbGNPajVsdjFoZkFaeXdEb3dzMDk0NFU4dlVGdytBL251VnEvVUN5Z3NybVdJQm5IeVUwMWQwWEpQd3JpRU92eC9JU0s2UGs0eTJ3MGdtb2paczdsVThUdGFrQkFkbmU0di9hTnhtTXBLNFZjR01wN3NpMHlxc2lvbFhSdU9pMVoxUDdTcUQzWm1wMENXY3lLNFVibXAyU1hpWHVJNW5HTENpZUZIS0hOUklsY1kzUHlzMmR3TVRZQ2FxbHlXU0lUd3Iyb0dYdnlVM2gxUGY4ZVEzdzFibkQ3aWxvY1ZqWURrY1hSM09vMUJYZ01MVFVqTncyeE1Wd2p0cDk5TmhTVmM1YUlXckRRVDVESFBLdEN0aGVCUDR6SGN3NGR6MmVSZFRNYW1obEhodGZncUpKSEk3TkdEVXcxWEw4dnNTZVNIeUtxRHRxb0FtclFxc1l3dndpN0hXM29qV3loSWE1b3o1eEpUYXExNE5BekZMalZMUjEyclJOVVE2eG9oRG5yV0ZiNWJHOXlmOGFDRDhkNXBob2Fja2NOSnArRHczRHVlM1JNKzVSaWQ3RXVJZ3Nud2dwWDByVVdoL25xUHRCeU1oTVpaNjlOcGd2UlRLWjYyVmlaK1E3RHA1cjRLMGQ3RWZKdWl5MDZLdUlZYXVSaDVFY3JoZHQyUXBUUzFrMUFzY0VIdmFwTmJVM0hMMUYyVEZ5UjMzV3hiNU12SDVpWnNybjNTRGNzeGxubnNoTzhQTHdtZEdOK3BhV25RdU9SdFpHWDM3dWhGVDY0U2V1UHN4OFVPb2tZNk9OODVXZFExZGtpNXpFcnNKR2F6Y0JPZGRXSkVLcU5QaUpwc01EMUdyVkxyVlkrQU9kUFdRbmVUeXlQMWhSWC9sTU00Wm9nR0dPaFl1QWRyN0YvRE9pQW9jKytjbjV2bGYwemtNVUo0MFoxcmxndjlCZWxQcVZPcHhLZU9wektkRjhtYUsrMVZ2MjNNTzlrLzgrcXBMb3hySUdIMkVEUWxuR21IOENEMzFHOFFxbHlRSWNwbVI1YndtU1Z3OS9OczZJSGd1bENSZWh2Wi8rVnJNNjBDdS9yM0FvbnRGZnJsamV3NzRza1llMnV5bjdKS1F0RlFCUVJKOXJ5R2ljL3pRT3NiUzRzY1VCY3RBOGNQVG9RM3g2WkJRdTZEUHU1bTFibkN0UDhUbGxMWUEwVVRRTlZxemE1bmZldzNNb3B5MUdQVXdHNWpzbDBPVlhuaVBtQWNtTHFPNUhHOEh2M25TTGVjRTlvT2pQRFhjc1R4b0NCeFl5ekJkajR3bW55RVY0a3ZGRHVuaXBTOFNTa3ZkYU1uVEJOOWJySFVSOHhkbW1FQXAvUGRxazl1ZXh0cDF0K0pydFh3cE4vTUcydy9xaFJNcFNOeFExdWhnL2tLTzMwZVEvRnlIVURrV0hUOFY2Z0dSVTREaERNeFp1N3hYaWo5VWk2amxwV21RQ3FKZzNGa09UcTNXS25lQ1JZWnhCWE1OQVZMUWdIWFNDR1NxTmRqZWJZOTRveUlwVmpNWWVoQWlGeC90cXpCWEZIWmFMNVBlZUQ3NHJXNU95c0ZvVVhZOHNlYlVabGVGVFVhLyt6QktWVEZEb3BUUmVYTnVacTQ3UWprV254amlyQ29tbU80TC9HckZ0VlYyMUVwTXl3OHd5VGhMNVk1OWQ4OHh0bHgxZzF0dFNJQ0R3bm9mNmx0LzZ6bGlQemdWVUw4aldCakMwbzJENktnK2pOdVRoa0FsYURKc3EvQUcyYUtBLy9BNzZhdncyS05xdHYyMjNQK1dxM1N0UkRETktGRmd0c0Z1a1l0MUdGRFdvb0ZWWGl0YU5oYjNSQ3lKaTRjTWVOalJPaVBFRGI0aytHMytoRDh0c2crNWhobVNjLzh0MkpUU3dZb0N6QUk3NWRvcThRVEhlK0UvVHcwUlFTVURsVSs2dUJlTk4zaDZqSkdYL21IOG9qMGkzY2FDTnNqdlRub2g3M0J0eVpwc2ZsSExxNkFmd0pOQ0RYNFM5OGg0K3BDT2hHS0RoVjNydGtLSE1hM0VHNEo5eTh6RldJNFVzZk56Qy9SbDVtaWRObjdnd29OOWoyM0hHQ1FRK09BWnBUVFBNZGlWb3c3NDBnSXl1RXRkMHFWeE15TlhoSGNudVhSS2R3NXdEVVNMMzU4a3RqTVhtQWt2SUI3M0JMYTF2ZkY5QkFVWkluUFlKaXd4cUZXUVFCVms3Z1FING9qZlVRL0tFam4rQS9XUjZFRWU0Q3RicG9MZTFtekhrYWpnVElvRTBTTERIVmF1S2hycTEyenJBWEJHYlBQV0tDdDRER2VkcTNKeUdSYm1QRlczMmJFN1QyMCs3M0JhdFYvcVFoaEJXZldCRkhmaFlXWGpBTHRzMzhGZW1ub1QrOWJuMWpEQk1jVU1tWWdTYzBlN0dRanYyTVVCd0xVOGlvbkNwZ1YrUXJoZzdpVUlmVVk2SkZ4UjBZK1pUQ1BNK3JWdXEwR05MeUpYWDZuclVUdDhIekZCUlkxRS9GSW0yRWVWQTlOY1hyajdTNllZSUNoVlFDV3IvbTJmWVVqQzRqMFhMa3paOEdDU0xmbWtXM1BCL3hxK25sWHNLVkJPajd2VHZxS0NPTXE3WnRxcjNjUStOOGdCblBhQXBzK29Hd1dPa2J1eG5SWWoveC9XamlEY2xWcnMyMnhNSzRxQXJFMVp0azE0NTZraUpyaXc2YWJrTmVSSG9nYVBSQmdiZ0Y5WjhpL3RieldFTE40Q3ZicXRycVY5VHRHU25tUFMyRjlrcU9JQmFhekhZYUo5YmkzQW9EQnZsWmFzTWx1eHQwQkRYZmhwMDJKbjQxMWFWdDZTNFRVQjhaZ0ZEa0k2VFA2Z3dQWTg1dytvVVFTc2pJZVhWbWlucndJZEsyWkFhd2I4U2U2WE9KYk9hbGlReEhTcm5BZU9OREx1Q25GZWpJYnA0WUR0QmNRQ3dNc1lpUlpmSGVmdUVKcUpjd0tUVEo4c3g1aGpIbUpJMXNQRkhPcjZXOUFoWjJOQW9kMzhtbkxRazFnT3oyTENBb2hvUWJnTWJVSzlSTUVBM0xraUY3U3I5dExacDZsa2NpSUdoRTJWNTQ2dzNNYW01M1Z0VmtHYkI5dzBZazJYaVJuQ21icHhtSHIyazRlU0MwUnVOYmpOc1VmRElmYzhEWnZSdmdVRGUxSWxLZFpUemNUNFpHRWI1M2RwOFZ0c29abHlYekxIT2RBYnNwMUxQVFZhSHZMQTBHWURGTWJBVy9XVUJmVUFkSHdxTEZBViszdUh2WVdyQ2ZoVU9SMmk4OXF2Q0JvT2I0OHVzQUdkY0YyTTRhS243OWsvNDNXekJaK3hSMUwwdVpmaWE3MFhQOXNvUVJlZXVoWmlVblhGREcxVDgvT1hObXNzVFNuWU8rM2tWTEFnZWlZNzE5dUR3TDlGUXljZ0xQZXNzTmloTVpiQUtHN3F3UFp5RzExRzErWkEzakFYMnlkZHBZZm1hS0JsbWZjSy9WMG13SVJVREMwbkpTT1BVbDJLQjhoMTNGNGRsVlppUmhkR1k1ZmFyd04rZjloRWIxY1JpNDFaY0dEbjZYZTlNTVNUT1k4MVVMSnlYSUhTV0ZJUUhzdFZZTGlKRWlVamt0bEhpR2pudE41L2J0QjhGdSt2cDI4emwyZlpYTitkSkR5TjZFWGhTKzB5enFwbC9MU0pORVVWeG11N0JzTmRqQVkwalZzQWhrTnV1WTBFMUc0OGVqMjVtU3QrMDB5UGJRNFNSQ1ZrSXdiNklTdll0bUpSUHo5WnQ1ZGs3NmJsZitsSndBUEg1S0RGK3ZIQW1BQ0xvQ2RHMkFkaWk2ZE9Ibk5KblRtWnRvT0dPOFExankxdmVNdzZnYkxGVG9RbWZKYTduVDdBbDg5bVJiUmtaWlF4SlRLZ0s1S2M5SU56bVRKRnAwdHBBUHpObXlML0YwOGJYM25oQ3VtTS9jUi8yUlBuOWVtWjNWbGpva3R0WkQxelZXWGxVSXFFVTdTTGs1STBsRlJVMEFjRU5YQllhek5hVnpzVkhBL3NEM285aG00MndiSElSYi9CQlFUS3pBaThzMytiTXRwT09aZ0xkUXpDWVBmWDNVVXhLZDFXWVZrR0g3bGgvUkJCZ01aWndYelU5K0dZeGRCcWxHczBMUCtEWjVnMkJXTmg2RkFjUjk0NEIrSy9KVFdJM3Q5WXlWeVJobFA0Q0NvVWsvbW1GNytyMnBpbFZCanhYQkhGYUJmQnRyOWhiVm4yekR1STBrRU9HM2tCeDhDR2RQT2pYMXBoMVBPT1pKVU8xSkVHRzBqelV5MnRLNFgwQ2dWTllobWtxcVF5c1JOdEt1UGRDSnFLM1dXNTdrYVYxN3ZYZ2l5UHJsNEtFRVdnaUdGMWV1STRRa1NGSEZmMFREcm9RaUxOS0ppTGJkaEgwWUJocmlSTkNIUHhTcUptTk5va2V0YWlvb2hxTWdsaDZ3THRFR1dTTTFFWmJRZzcyaDBVSkFJUFZGQ0FKT1RocFFHR2RLZkZvdmN3RWVpQnVaSE4yT2I0dVZNNytnd1pMejFEOUU3dGE0Um1NWjI0T0JCQWc3RWg2ZExYR29mWjRVMlRGT0NRTUtqd2hWY2tqcnlkUlMrWWFxQ3cxa1l0NlVleHV6Yk5FRHlZTFRabnJZMVB6c0haSlQ0VSthd08yeGxxVFNZdTZuL1UyOU8yd1BYZ0dPRUtETVNxK3pUVXR5YzgrNmlMcDBpdmF2NEZLeCt4eFZ5NEZ4aElGL3B1Y1ZEcXBzVmUyakZPZmRaaFR6THoyUWp0enZzVEN2RFBVN2J6REgyZVhWS1VWOVRaK3FGdGFTU3huWWdZZFhLd1ZyZUlndldoVDllR0RCMk92bld5UExmSUlJZk5uZkl4VThuVzdNYmNIMDVuaGxzWXRhVzlFWlJzeFdjS2RFcUlucTFEaVpQS0N6N2lHbUFVOS9jY25uUXVkMnBOZ0lHRllPVEFXamhJcmQ2M2FQRGdmajgvc2RsRDRsK1VUbGN4VEk5amJhTXFxTjBnUXhTSHM2MElBY1czY0g0cDNWMWFTY2lUS0IyOUwxdHoyZVVRaFJpVGdUdm1xYytzR3RCTmg0a3kwbVFKR3NkeWNCUkVQK2ZBYVNzMUVSRURWbzVndmdpNSthQ043TkVDdzMwb3diQ2MxbVNwamlhaHlOVndKZDFqaUdnelN3ZlRwemYyYzVYSnZHL2cxbjBmSDg4S0hObmYrdTdaaVJNbFh1ZVNJc2xvSkJVdFc5ZXp2c3g5Z3Jmc1gvRk54bmJ4VTFMdmcwaEx4aXh5cEhLR0ZBYVB1MHhDRDhvRFRlRlN5ZlJUNnM4MTA5R01VWkw4bTJ4WHA4WDJkcFBDV1dkWDg0aWdhNEJyVGxPZnFveDRzaHFFZ2gvSHQ0cVJzdDUyY0ExeE9JVXVPeGdmVWl2cDZ2NWY4SVZ5YXJ5RWRwVms3MkVSQXdkVDRhb1kxdXNCZ21QKzBtMDZRMjE2SC9udWJ0Tll4SGFPSVlqY2FjaDNBOEV6L3pjMEtjU2hoZWwwSENZakZzQTBGallxeUo1WlVIMWFadzMreldDMGhMcE02R0RmY0FkbjlmcTJvclBtWmJXNlhYcmYrS3JjOVJ0dklJNWplRDNkRm9UMUt3Wkp3eGZVTXZjNUtMZm44clJPVzIzSnc4OXNKMmE1ZHBCM3FXRFVCV0YyaVg4T0N1S3BySG9zSjJtZmxCUitXcXM4NlZ2Z0kvWE1uc3FiOTcrVmxLZFBWeXNjelBqOEpoemYrV0N2R0JIaWpBcVlsYXZiRjYwc29NV2xIYnZLVCtTY3ZocHJnZVRsbjUxeFgwc0YrRWFkYy9sMnMyYTVCZ2tWYkhZeXowRTg1cDBMc3RxSCtnRUdpUjg0bkJSUkZJbjhoTFNackd3cWpaM0UyOWN1R2krNVo1YnA3RU04TVdGYTlzc1Mvdnk0VnJEZkVDU3Y3RFNVODREYVAwc1hJM0FwNGxXem5RNjVuUW9US1JXVTMwZ2Q3Tm44Wm93VXZHSXg0YXF5WEd3bUEvUEI0cU44bXNKVU9EZXpVSEVsMFZQOXVvK2NaOHZQRm9kU0lCNEM3bFFZakVGajh5dTQ5QzJLSVYzcXhNRllUZXZHOEtxQXIwVFBsa2J6SEhuVHBEcHZwenppQWlORmg4eGlUN0MvVGl5SDBFZ3VVdzR2eEFncG5FMjdXSXlwVit1Rk4yelc3eG5pRi9uNzV0cnM5SUo1YW1CMXpYWFoxTEZrSjZHYlMvZEZva3psNGNjMm1hbVZ3aEw0WFUwQXY1Z0RXQWwrYUVXaEFQN3QyVkl3VStFcHZmT1BEY0xBU1g3SDdsWnBYQTJYUWZiU2xENHFVMThOZmZOUG9BS01OU2NjQmZPOVlWVmdtbFc0UnlkQnFmSEFWNytoclo4NFdKR2hvNmJOVDBZTWh4eExkT3gvZHdHajBveWFrOWFBa05KOGxSSnpVdUE4c1IrZlB5aXlUZ1VIaW81K1BwK1lhS2xIcmhSNDFqWTVORVNQUzN4K3pUTWUwUzJIbkxPS0NPUVBwZHhLeXZpQnZkSHJDRFJxTytsOTZIaGhOQkxYV3Y0eUVNdUVVWW84a1huWUpNOG9JZ1ZNNFhKK3hYT2V2NFliV2Vxc3ZncTBsbXc0L1BpWXI5c1lMdCtXNUVBdVlTRm5KRWFuOEN3SndidEFTQmZMQkJwSlppUlBvci9hQ0pCWnNNK01odlM3WmVweUh2VThtNVdTbWFabnh1THRzOG9qbDZLa1M4b1NBSGtxNUdXbENCL05nSjVXM3JPMkNqMU1LN2FoeHNDcmJUVDNhMFYvUVFIK3NFcnhWNFhVV0RIeDBra0Z5MjViUG1CTUJRNkJVM0hvSGhoWWNKQjlKaFA2TlhVV0t4bkUwcmFYSEI2VTlLSHBXZFFDUUk3MnFldnA1Zk16Y20rQXZDODVyc3luVlFocnVEQTlmcDlDT2U3TjU2Y2cxVUtHU2FzODl2ck4rV2xHTFlUd2k1VysweFlkS0VHdEdDZU5Kd1hLRFUwWHFVNXVRWW5Xc013VEVOTEd0YlFNdm9HaklGSUVNekNSYWw0cm5CQWc3RC9DU244TXNDdlMrRkRKSkF6b2lpb0pFaFpKZ0FwOW4yKzFZem5yN0grNmVUNFlrSjlNcGo2MEltY1c0aTRpSERMbjlSeWRCOGR4M1FZbTNyc1g2bjRWUnJaRHNZSzZEQ0d3a3dkNW4zL0lORkVwazE2ZllwUDZKdE1RcHFFTXpjT2ZRR0FIWEJURUd6dUxKMDNHWVFMOWJtVjIvN0V4RGxSZitVdmYxc00yZnJSdENXbWFsMTJwTWd0b252U0N0UjRuMUNMVVpSZFRIREhQMU90d3FkK3JjZGxhdm5LalVCL09ZWFFIVUp6cE55Rm9LcFFLKzJPZ3JFS3BHeUlnSUJnbjJ5OVFIblRKaWhaT3BFdk9LSW9IQU1HQVhIbWoyMUx5bTM5TWJpb3c0SUYrNzd4TnVld3ppTlZCeHI2S0Q1ZSs5SHpaU0JJbFVhL0Ftc0RGSkZYZXlyUWFrUjNGd293VEdjQURKSGNFZmhHa1hZTkdTWW80ZGg0Ynh3TE0rMjh4amlxa2RuMC8zUjRVRWt2Y0JyQmZuL1N6QmMxWGhLTTJWUGxKZ0tTb3JqRGFjOTZWMlVuUVlYbDEveVpQVDREVmVsZ08rc29NamV4WHdZTzU4VkxsNXhJblFVWkk4amMzSDJDUG5DTmI5WDA1bk94SXk0TWxlY2FzVHFHSzZzMmF6NFJqcEYyY1FQMkcyOFIrN3dEUHNaRFpDL2tXdGpkb0hDN1NwZFBtcVFyVUFoTXdLVnV4Q21ZVGlEOXEvTzdHSHRadlBTTjBDQVVRTi9yeW1YWk5uaVlMbEpERTcwYnNrNlh4c2g0a0RPZHhlN0Eyd283UDlGNVl2cXFSREk2YnJmNzl5UENTcDRJMGpWb080WW5MWXRYNW56c3BSNVdCNEFLT1l0UjF1alhiT1FwUHlZRHZmUkUzRk41encwaTdyZWVoZGk3eVYwWURSS1JsbEdDR1JrNVl6K1V2MWZZbDJad3JuR3Nxc2pnQVZvMHhFVWJhOG9oamFOTUpOd1R3WkEvd0JEV0ZTQ3BnMWVVSDhNWUwyemRpb3hSVHFnR1FyRFp4UXlOenlCSlBYWkYwK294SVRKQWJqN29OQzVKd2dETVVKYU01R3FsR0NXYy8vS0NJckkrYWNsRWU0SUEwdXp2N2N1ajZHQ2RhSk9OcGkxM081NDR2YnRJSEJGK0ErSmVERlVRTnk2MUdraTNydHlRNGFVeXduNnJ1MzE0L2RrR2lQOEl3am8wSi8yVHhzNDlaa3dFbDRteCtpWVVVTzU1STZwSnpVNFArN1JScytEWFpreUtVWVpxVldyUEY0STk0bTRXeDF0WGVFNzRvOUd1WDk3N3l2Si9qa2RhazgrQW1vSFZqSTE1VitXd0JkQVJGVjJJUGlySmdWTWRzZzFQZXoyVk5IcWE3RUhXZFRrbDNYVGN5akc5Qml1ZVdGdlFmWEk4YVdTa3V1Um1xaS9IVXV6cXl2TEpmTmZzMHR4TXFsZFlZZmxXQjFCUzMxV2t1UEpHR3dYVUNwamlRU2t0a3VCTVd3SGpTa1F4ZWVocXcxS2d6MFRyem03UWJ0Z3hpRVBEVm1XQ05DQWVDZlJPVHBoZDFaTk9oekx5NlhmSnlHNlhnZDVNQ0FadzR4aWUwU2o1QW5ZMS9ha0RnTlM5WUZsM1kwNnZkNkZBc2cyZ1ZRSnR6RzdMVnExT0gyZnJiWE5IV0gvTlk4OU5OWjRRVVNKcUwyeUVjR0FEYlQzOFgwYkdkdWtxWWxTb2xpS09jc1NUdXFoY2FlbVVlWUxMb0k4K01ab3IyUnhYVFJUaEYxTHJIZnFmLzVMY0xBamRsNEVFUmdVeXNZUzJnZUUreUZkYXNVOTFVZ1VEc2MyY1NRMVpvVDkrdUxPd2RnQW1pZndRcUYwMjhJTmMySVFFRGZUbVV3M2VaeHZ6N1VkMXozeGMxUFFmZUN2ZktzQjlqT2hSajdyRnliOVhjRFdMY1lqMGJCeW9zeWNoTWV6TUxWa0ZpWWNkQkJRdHZJNkswS1J1T1pRSDJrQnNZSEphWFRrdXA4RjBlSWhPMS9HY0l3V0twcjJtb3VCN2c1VFVESk52T1JYUFhhL21VOGJoMjdUQVpZQmUyc0t4NE5TdjVPam5ISVdEMlJ1eXNDekJsVWZlTlhoRGQyanhuSG9VbGhlSjNqQkFwelVSeTBmd20yRnd3c1NVMGNhUUdsMEt2OGhvcFJRRTIxMU5udnRMUnNtQ05yaGhwRURvTmlaRXpEMlFkSldLYlJSV25hRmVkWEhBRUxTTjB0MGJmc0NzTWYwa3RmQm9YQm9OQStuWk45K3BTbG11enNwRmV2bXNxcWNNbGx6enZreVhyem9BK1J5bzFlUFhwZEdPb0p2aHlydStFQlJzbU9wN01YWjB2TlVNVXFITFVvS2dsZzFwNzNzV2VabVBjK0tBdzBwRTJ6SXNGRkU1SDQxOTJLd0R2RHhkeEVZb0RCRE5aamJnMmJtQURUZVVLSzU3SVBENGZUWUY0YzZFblh4L3RlWU1PUkJEdEloUEpuZWlabnk3TnYvekcrWW1la0lLQ294cjZrYXVFMmJadEJMdWZldE5HMEJ0Qlk3ZisvSW1VeXBNQnZkV3UvUTd2VE1Senc1YVFHWld1YzFWMEhFc0l0RllNSUJub0tHWjB4Y2FyYmEvVFlacTUwa0NhZmxGeXNZakE0RURLSHFHZHBZV2RLWW1tK2E3VEFEbVczNXlmbk9ZcFpZcmtwVkV0aXFGMEV1akkwMGFlcGxOczJrK3F5RlpOZUUzQ0RQTDlQNmI0UFEva2F0YUhrVnBMU0VWR0s3RVg2ckFhN0lWTnJ2WnRGdk9BNm9rS3ZCZ010RkRBR1pPeDg4TWVCY0o4QVIzQWdVVWVJem5BTjZ0akNVaXBHRFpPTm0xRmpXSnA0QTNRSXpTYUlPbVo3RHZGL3lzWVliTS9mRkRPVjBqbnRBalJkYXB4SnhMMGVUaHBFaEtPakNERHEya3MrM0dyd3hxSUZLTGUxV2RPeklJOFhJT1BHbnd5NkxLWFZmcFNET1RFZmFSc0d1amhwUzRoQklzTU9xSGJsMTZQSnhjNEVrYVZ1OXdwRVlsRi84NE5TdjVadW00ZHJNZnA5eVhienpBT0pxcVM0WWtJNGNCckZyQzdiTVBpQ2ZnSTNuTlpBcWtrM1FPWnFSK3l5cXgrbkRRS0JCQlo3UUtyZkdNQ0wrWHBxRmFCSlUwd3BrQmRBaGJSNGhKc21UNWF5bmx2a291b3htL05qRDVvZTZCelZJTzl1a3RNKy81ZEVDNVA3dlp2YXJtdU8vbEtYejRzQmFiVlBJQVR1S1Ryd2JKUDhYVWtkTTZ1RWN0SEtYSUNVSkdqYVpJV1JiWnA4Y3pxdVFZZlk2eW5CVUNmSVUrZ0c2d3FTSUJtWUltOXBacFhkYUwxMjFWN3EwVmpEam1Rblh2TWU3eXNvRVpuWkwxNUIwU3B4UzFqamQ4M3VOSU9LWnd1NU1QemcyTmhPeDN4TU9QWXdFbjJDVXpiU3J3QXM1T0F0cnozR0FhVWtKT1U3NFh3amFZVW1HSmRaQlMxTkpWa0dZclRvSU5MS0RqeGN1SWx5ZlZzS1FTRy9HNER5aU8yU2xRdkowZDBPdDF1T0c1SUZTQWtxK1BSVk1nVk1Edk9JSk1kcWplQ0ZLVUdSV0JXOXdpZ1l2Y2JVN0NRTC83bWVGMktaQWFXbCs0eTl1aG93QVg3ZWxvZ0F2SXRBQXhvMitTRnhHUnNIR0VXOUJuaGxUdVdpZ1l4UmNuVlVCUlFIVjQxTFYrRnI1Q0pZVjdzSGZleXdzd3g0WE10VXg2RWtCaFIrcThBWFhVQTh1UEo3M1BiNDlpOUtHOWZPbGp2WGV5Rmo5aXhnYm82Q2NiQUo3V0hXcUtIeS9oK1lqQndwNlZjTjdNODlGR3pRMDRxYnJRdGdyT0Z5YmczZ1FSVFlHNXhuNzNBcmtmUVdqQ0pST3d5M0ozOER4L0Q3ak9hNkJCTnNpdEV3MXdHcTc4MEVFaW9PZUQrWkdwMko2NkFEaVZHTWF5aUhZdWNNazhuVEsyenpUOUNuRXJhQWs5NWtRank0azBHUkVsTEw1WUFLTFFFcko1cnAxZWF5OU80RmI2eUpHbTlVNEZhTXdQR3h0S0Q2b2RJSUhLb1duaEtvMVU4S0lwRkMrTVZuNTlaWG1jN1pUQlpmc2c2RlE4VzEwWWZUcjR1MG5ZcnBIWmJaMWpYaUxtb29GMGNPbTArbVBuSkJYUXRlcGM3bjBCcU9pcE5DcUk2eXlsb1RlUlNoTktIMDRGSW8wZ2NNazBIL3hUaHlONHBQQVdqRERrRXAzbE5OUFJOVmZwTUk0NENXUmxSZ1ZpUDY0ZUswSlNScDBXVXZDV1l1bWxXL2M1OFZjei95TXdWY1c1b1liOSsyNlRFaHd2YnhpTmc0OGhsMVZJMVVYVFUvL0V0YStCTUtuR1VpdmN0Zkw1d0lOREQwZ2lRTDFpcHQ2VTdDOWNkNCtsZ3FZMmxNVVowMlV2NlBycytaRVplcjdaZldCWFZnaGxmT09yQ2x3c29PRkt6V0VmejZSWnUxZUNzK0s4Zkx2a3RzNStCWDBneXJGWXZlMEMzcUhybjVVL09oNkQvQ2lobVdJclk3SFVaUmhKYXhkZSt0bGR1NmFkWUorTGVYdXBRdzBYRXhDMzZSRVRkTkZ4Y3E5Z2xNdTRjTlFTWDljcVIvR1FZcCtJeFVrSWNOR1dWVTdadEdhNlAzWEF5b2RSdDBYZVMzVHAwMUFuQ2gwWmJVaDRWclNaZVY5UldmU29XeXhuWTNoemNaMzBHL0luRHE0d3hSckVlanJlQnhuaElRYmt4ZW54a2F4bCtrN2VMVVFrVVI2dktKMmlERk5HWDNXbVZBMXlhT0grbXZoQmQrc0U2dmFjUXpGb2J3WTVCcUVBRm1landXNW5lN0h0Vk5vbE9VZ0pjOENzVXhtYy9MQmk4TjVtdTlWc0lBNUh5RXJuUzZ6ZUN6N1ZMSTkrbi9oYlQ2aFRva01YVFZ5WEpSS1NHMmhkMmxhYlhUYnRtSzRmTkgzSVpCUHJlU0E0Rk1lVm91Vk4zekc1eDlDaUdwTHcvM3BjZW80cUdxcCtyVnAreis3eVE5OG9FZitueUg0RjMrSjlJaGVEQmE5NFdpNjN6SmJMQkNJWm03UDBhc0hHcElKdDNQekUzbTBTNFlJV3lYQkNWWEdpa2o4TXVkRFBCLzZObTJ2NEl4SjVnVTBpaTBndXk1U1VIcUdVWXpUUDBqSUpVNUU4MlJIVVh0WDRsRGRyaWhCTGRQMVlhRzFBR1VDMTJyUUt1SWFHdkNwTWpaQzliV1NDWW5qRGx2cFdia2RYTVROZUJITEtpdW9vek1HSXZrY3ptUDBhUkpTSjhQWW5MQ1ZOaEtIWEJOY2tINzllOFo4S2Myd1VlajRzUVpvSDhxRFJHa2c4Nm1hVy9aUVdHTm5MY1htcTNGbFhNNnNzUi8zUDZFL2JITXZtNkhMcnYxeVJpeGl0MjVKc0gzL0lPcjJVVjRCV0poeFhXNUJKNlhkcjA3bjlrRjNaTkFrNi9YcGM1TVNGbVlKMlI3YmRMOEtrN3ExT1U5RWxnL3RDeEo4Z2lUMjd3U1R5U0YwR094ZzRQYllKZGkvTnlpYTlObjg5Q0dEdWxmSmVtbTFhaUVyL2VsZUdTTis1TVJyVko0SzZsZ3lUVElXM2k5Y1EwZEFpNkZIdDBZTWJIM3dEU0F0R0xTQWNjZXp6eEhpdHQxUWRoVzM2Q1FnUGNBOHZJSUJoMy9KTmpmL09ibWMyeXpwazhlZFNsUzRsVmR3Z1c1dnpiWUV5Rm9GNEdDQkJieTFrZVZOdWVIQUgrZXZpK0g3b09WZlMzWHVQUVNOVFhPT05BYnpKZVNiNXN0d2RRSGwxWmpyR29FNDlJOCtBOWozdCthaGhRajc0RkNTV3Bacmo3d1JTRkpKbm53aTFUOUhMNXFyQ0ZXL0pacTZQNjJYa01XVGIrdTRsR3BLZm1td2lKV3gxNzhHT0c3S2JyWkdxeVd3bXV5S1dQa05zd2taMXE4dXB0VWx2aUlpK0FYaDJiT09UT0xzcnROa2ZxYlFKZWgyNHJlZWJrSU5Ma2p1dDVyNGQ5R1IvcjhDQmE5U1UwVVFoc25acDVjUCtScVdDaXhSbTdpNFlSRmJ0WjRFQWtodE5hNmpIYjZnUFlRdjdNS3FrUExSbVgzZEZzSzhYc1JMVlo2SUVWckNibU5EYzhvNW1xc29nakFRZm9DOUJjN1I2Z2Z3MDNtK2xRcHY2a1RmaHhzY0RJWDZzMHcrZkJ4dGtoalhBWHIxMFVvdVdDeDNDL3AvRll3SlJTL0FYUktrak9iNUNMbUs0WFJlMCt4ZUREd1ZrSlBaYXU1MmJ6TEVESENxVjBmNDRwUGdLT2tZS2dUWkozM2ZtazNUdThTZHhKMDJTSE04RmVtNVNNc1dxUnlpMkYxeW5mUkpzemNGS3lrZFdsTnFnREEvTDlsS1lCbWM3WnUvcTlpaTFGUEY0N1ZKa3FoaXJVb2I1M3pvaUp0VlZSVndNUjM0Z1Y5aXFjQmFIYlJ1OWtrdnFrM3lNcGZSRkc0OXBLS2pJaXE3aC9WcFJ3UEdUSG9ZNGNnMDVYNTAyOGlIc0x2VVcvdXora2pQeUlFaGhjS1V3Q2tKQXdiUjlwSUVHT244ejZzdkFPOGk4OXNKM2RMNXFEV0ZZYlMrSEdQUk14WXdKSXRGUU44NllFU2VKUWhuMnVyR2lMUmZmUWVMcHREbDhkQWdiK1RwNDdVUVB4V093MTdPZUNoTE4xV256bGtQTDFUNU8rTzNNZW5wbjRDM0lZNUxFZXBIcG5QZVpIYnZ1V2ZlVnRQbGtINExaalBiQnJrSlQzTm9SSnpCdDg2Q08wWHE1OW9RKzhkc20weW1SY21ReW44dzcxbWhtY3VFSTVieXVGK0M4OFZQWWx5MnNFempsekFRM3Zkbi8xK0h6Z3V3NnFGTk5icWVuaFpHYmRpRzZSd1phVEc3alRBMlg5UmRYakROOXlqMXVRcHlPNEx4OEtSQWNaY2JaTWFmcDR3UE9kNU1kWG9GWTUyVjFBOE05aGkzc3NvOTMrdXByRTBxWU5NamtFMjJDdks0SHVVeHFON29JejVwV3VFVHExbFFBanFsU2xxZEQyUm5yL2dncC9UVmtRWWpuOWxNZlllbGsyc0g1SFBkb3BZbzdNSHdsVjFvcjlCeGYrUUN5THptOTJ2ekcyd2ppSWpDL1pIRUp6ZXJvSmw2YmRGUFRwWmhvNU1WMlU4NmZMUXF4TmxHSU1xQ0d5KzlXWWhKOG9iMXIwK1doeGRlOUwyUGR5c0VUdjk3Tyt4VncrVk5OMVRaU1FONUk2bDltNUlwNnBMSXFMbTRhMUIxZmZINmdIeXFUOXA4Mk5Pam50UldHSW9mTzNiSno1R2hrdlNXYnNYdWVUQU1hSkRvdTk5a0dMcURsaHdCWk5FUTRtS1B1RHZWd1NLNFdtTGx1SHloQTk3cFppVmU4ZytKeG1uSkY4SWtWL3RDczRKcS9IZ09vQUVHUjl0Q0RzRGJEbWkzT3ZpVVFwRzVEOFhtS2NTQVVhRkxSWGIybG1KVE5ZZGh0WXlmakJZWlFtTjVxVDVDTnVhRDNCVm5sa0NrN2JzTVczQXRYa05NTVR1VzRIalVFUlNKblZRMHZzQkdhMXdvM1FoNzExNVhHZVRGM05Uejh3MDQ0MEFnVTdjM2JTWE8vS01JTmFJV1hkMG9McG9xLzAvUUp4Q1FTSjlYbll5MVc3VFlMQkpwSHNWV0QxYWhzQTdGak52UmQ2bXhDaUhzbThnNlowcG56cUlwRjFkSFV0UDJJVFU1WjFoWkhidStMM0JFRVN0QmJMOVhZdkdmRWFrdjFibWYrYk9aR25vaXVIRWRsQm5hQ2h4WUtOekIyM2I4c3c4WXlUN0FqeGZrNDllSklBdmRiVmtkRkNlMkowZ01lZmhRMGJJWnhoeDNmek1JeXNRTmlOOFBnT1VLeE9NdXIxMExkdWlnUkVEUk1aeVA0b0dXclAxR0ZZNHQ2Z3JvQVNzWjQyMW9zNDh3QWRucmJvdk5oTHQ3U2NOVUxrd1o1QUlaSlRyYmFLWVRMakExb0ozc0l1Ti9hWW9jbS85dW9RSEVJbGFjRjFzL1RNMWZMY1BUTDM4TzlmT3NqTUVJd29QS2Z2dDdvcHVJOUcySGYvUFI0YUNMRFE3d05tSWRFdVhKL1FOTDcyazVxNE5lakFsZFBmZTNVVlZxemt5czhZWi9qWU9HT3A2YytZelJDckN1cTBNMTF5N1RpTjZxazdZWFJNbi9ndWt4ckVpbWJNUWpyM2p3Uk02ZEtWWjRSVWZXUXI4bm9QWExKcTZ5aDVSM0VIMUlWT0hFU3N0L0xJdGJHMkQydlJzWlJrQU9ienZRQUFEM21iMy9HNE56b3BJMEZBaUhmYnBxMFg3MmFkZzZTUmorOE9ITVNodEZ4eExabGYvbkxnUkxiQ2x3bDVXbWFZU3MreUVqa3E0OHRZN1oyYkUwTjkxbUp3dCt1YTBObFJKSURoMEhpa0Y0VXZTVm9yRmoyWVZ1OVllUzV0ZnZsVmpQU29OdS9adTZkRVVmQk9UNTU1aGFoQmROM1NhNVh1ajJSdmF1MWxRTklhQzk0NHkwUldqOVVpTkRza0FLMVdvTCtFZlhjQzZJYkJYRlJ5VmZYL1dLWHhQQXdVeUlBR1c4Z2daMDhoY2lqS1R0MVlLblVPNlFQdmNybURWQWIwRkNMSVhuNWlkNGZEL0p4NHR3L2diWHM3V0Y5YjJSZ1h0UGhMQkc5dkY1RkVrZEhBS3JRSFpBSkMvSFd2azdudnp6RHpJWFpsZkZUSm9DM0pwR2dMUEJZN1NRVGpHbFV2RzU3N3lOdXRaMWhUZnM5LzFua1NYSzl6ektMUlozVk9EZUtVb3ZKZTBXQ3ExelZNWXhDSk1lbm1OelBJVTJTOFRBNEU3d1dtYk5reHE5ckkyZGQ2djBWcGNBUFZNeG5Ec3ZXVFdGYXl5cXZLWk83WjA4YTYyaS9vSDIvanhmOHJwbWZPNjRpbjNGTGlMMUdYOElHdFZFOU0yM3lHc0lxSmJ4RFR5K0x0YU1XRGFQcWt5bWI1VnJRZHpPdnFsZGVVMFNVaTZJaXJHOFVaM2pjcFJid0hhMUMwRHd3OUcvU0ZYM2dQdlRKUUUra3l6K2cxQmVNSUxLS08rb2xjSHpjdE9XZ3p4WUhuT0Q3ZHBDUnR1WkVYQUNqZ3Flc1pNYXNvUGdudURDNG5VdmlBQXhEYzVwbmdqb0FJVElrdmhLd2c1ZDYwOHBkclpjQStxbjVUTVQ2VW8vUXpCYU94QkNMVEpYM01nazg1ck1mc25XeDg2b0x4ZjdwMlBYNU9OcWllVGEvcU0zdFB3NFpYdmxBcDgzTlNEOEY3K1pnY3RLMVRwb1l3dGlVMmgwMkhDR2lvSDV0a1ZDcU5WVE1INXAwMHNSeTJKVTFxeURCUDJDSUkvRGc0V0RzSWwremdlWDc1ODlzcng2WU9SUlFNQmZLYm9kYkI3NDNUbDRXTEtPRW53V1VWQnNtOTRTT2xDcmFjVTcyTVN5ajA2OHdkcFlqeXoxRndDMmJqUW54bkI2TXAvcForeXlaWHRndUVhWUIra3FoalE2VVVtd1NGYXpPYityaFlqTGFvaU0rYU45LzhLS24wemFDVEZwTjllS3dXeTcvdTRFSHpPNDZUZEZTTmpNZm4yaVBTSndEUENGSGMwSTErdmpkQVp3NVpqcVIvdXppOVpuMjBvQWE1Sm5MRWsvRUEzVlJXRTdKL1hydXBmRkpQdENVdXFIUHBubEw3SVNKdFJwU1ZjQjhxc1pDbTJRRWtXb1JPdENLS3hVaDN5RWNNYldZSndrNkRsRUJHMGJaUDZlZzA2RkwzdjZSUGI3b2RHdXdtN0ZOOGZHNHdvcXRCOGU3TTVrbFBwbzk3R29PYk53dCtsdWRUQW14eUM1aG1jRngrZEl2RVpLSTZpZ0ZLSHFMSDAxaVkxbzc5MDNWekc5UUdldHlWeDVSTm1CWVVVK3pJdVN2YS95SWNFQ1VpNHBSbUUzVmtGMmF2cXVsUUVVWTR5Wi93bU5ib0J6UG1BUGV5MytkU1l0QlpVamVXV1QwcFB3Q3o0Vm96eHA5eGVDbElVNjBxdkVGTVFDYVB2UGFBNzBXbE9QOWYvZXkzOW1hY3ZwR0NWYSt6ZmE4Z080NHdieHBKVWxDOEdOL3BSTVRRdHpZOFo4L2hpTnJVK1pxNjRaZkZHSWtkajdtN2FiY0sxRUJ0d3MxWDRKL2hucXZhc1B2dkRTRFlXTitRY1FWR01xWGFsa0R0VGFkNXJZWTBUSVIxRXFveDNjendQTWpLUHZGNXNGdjE3VGh1anIxSVoxWXRsNFZYMUowdmpYS21MWTRsbVhpcFJBcm8wcVZHRWNYeEVWTU1FbDU0alFNZDRKN1JqZ29tVTBqMXB0anl4WStjTGlTeVhQZmlFY0lTMmxXREszSVNBeTZVWjNIYjV2blBuY0E5NDQxMWpjeTc1YXk2QjZEU1R6SzZVVENaUjl1REFOdFBCcnZJRGdqc2Zhck1pd29heDJPbEx4YVNvWW40aVJna3BFR3FFa3dveDV0eUk4YUtrTGxmWjEybE8xMVR4c3FSTVk4OWo1SmFPNTVYZlBKUERMMUxHU25DODhSZTlBaStOdTViWmp0d1JydkZJVFVGSFBSNFpteEdzbFFNZWNnYlpPN25IazMycUh4WWtkdldwdXAwN29qY01DYVZycEZBeUZaSkpiTnZCcFpmZGYzOUhkbzJrUHRUN3YwL2Y4Ui9CNU56NGYxdDkvM3pOTS83bjZTVUhmY1drNWRmUUZKdmNKTWdQb2xHQ3BPRmIvV0MwRkdXVTJhc3VReVQrcm04OFpLWjc4Q2VpL0NBaDkzOUNIMEpZYnBaSVB0eGMydWZYcWpTM3BISDlsbldLNGlKN09qUi9FRVNwQ28yUjNNWUt5RTdySGZoVHZXaG80Y0wxUWRONGpGVHlSNnN5TXdGbTEyNFRWRERSWE1OdmVJMURwL250d2R6OGs4a3h3N2lGU3g2K1l4Nk8rMUx6TVZyTjBCQnp6aVppOWtuZVpTemdvbGxCblZ3Qmg2b1NPUEhYcmdsck9qK1FtUi9BRVNyaERwS3JXVCs4L0FpTUR4Uy81d3dSTnVHUVBMbEo5b3ZvbWhKV244c01MVkl0UThOLzdJWHZ0RDhrZE9vSGF3K3ZCU2JGSW1Rc3YvT0NBSXVpOTlFK1lTSU9NbE12QlhrQXQrTkFaSzh3QjlKZjhDUHRCK1RPVU9SK3o3MWQvQUZYcFBCVDYrQTVGTGp4TWpMSUVvSnpyUWZxdXZ4RUlpK1dvVXpHUjFJelFGTnZiWU9ueGIyUHlRMGtHZHlYS3pXMmF4UUw4bE5BWFBrNk5FanFyUkQxb1p0S0xsRm9vZnJYdzBkQ05XQVNIenkrN1BTek9VSjNYdGFQWnN4TERqcitvNDFmS3VLV05tamladGZrT3pJdHZsVjJNREdTaGVHRjBtYTA0cUUzVFVFZnFKTXJYRm03RHBLKzI3RFN2Q1VWZjdyYk5vbGpQaGhhNVc3S0JxVnEwU2hVU1RiUm11cVB0UXJlVldINEpFVDV5TWh1cU1vU2Q0ci9OOHNEbWVRaVFRdmkxdGNadjdNb2M3ZFQ1WDVBdENENmtORUdaT3pWY05ZbHBYNEFiVHNMZ1NZWWxpaVB5Vm9uaXVZWXlTeHNCeTVjZ2IzcEQrRUswR3BiMHdKZzAzMWRQZ2FMOEpadDZzSXZ6TlBFSGZWUE9qWG1hWGo0YmQ0dm9YenBaNUdBcE1oSUxnTWJDRVdaMnp3Z2RlUWdqTkhMYlBJdCtLcXhSd1dQTFRONkh3WjBPdWlqajRVRitTZzBBdThYdUlLVzBXeGxleGRyRnJEY1pKOFNoYXVhdDNYMFhtSHlncWdMMW5BdTJockpGYjR3WlhrY1MraTM2S015VTF5RnZZdjIzYlFVSmkvM3lRcHFyL25hVU9vaUVXT3hja3lxL2dxNDNkRm91MURWRGFZTVpLOXRobzcrSVhYb2tCQ3M1R1JmT2NCSzdnM0EralhRMzlLNFlBOFBCUlc0bTUreVIwWkF4V0puY2pSVmJJVHZJQVBIWVJ0MUVKM1lMaVVicUl2b0tIdHpIS3RVeTFkZFJVUTBBVU80MXZvblpEVU9XK21yc3p3K1NXLzZRL0lVZ05wY1hGamtNN0Y0Q1NTUTJFeFpnODVvdHNNczdrcXNRRDRPeFllQk5EY1NwaWZqTW9MYjdHRWJHV1R3YXNWT2JtQi9iZlBjVWxxMHdZaFhDWUVEV1JXMDJUUDViQnJZc0tUR1dqbldEREoxRjd6V2FpMHpXLzJYc0N1dkJRalBGY1RZYVFYM3RTWFJTbThoc0FvRGRqQXJLL09GcDZ2Y1dZT0U3bGl6UDBZYys4cDE2aTcvTmlYSWlpUVRwN2M3WHVzOTI1VkV0bEtBalVkRmh5YWlMVDdWeERhZ3ByTUZ3aXg0d1owNXUwcWo3Y0RXRmQwVzlPWUhJdTNKYkpLTVhSSjFhWU5vdnVnZytRcVJON2ZOSFNpMjZWU2dCcG4rSmZNdVBvM2FlcVBXaWsvd0k1UnozQldhclBRWDRpNStkTTBucHdWT3NYK0tzT2hDN3ZEZytPSnN6NFE1emxuSWVmbFVXTDZRWU1iZjlXRGZMbW9zTEY0UWV2M21KaU91SGpvb3IvZE1lQnBBOWlLRGtNallCTmJSbzQxNEhDeGpzSHJCNEVYTmJIek5NREhDTHVOQkc2U2YrSjRNWi9FbFZzRFNMeGpJaUdzVFBodzhCUGp4YmZRdHNraitkeU5NS09PY1VZSVJCRUlxYmF6ejNsbWpsUlFocGx4cTY3M1ZrbE1NWTY1OTd2dStkODllYy96cTdNaTRnUXZoODdlaFlicE91WkVYajVnL1E3UzdCRkRBQUI5RHpHMzVTQzg1M3h0V1ZjblpRb0g1NGplT3FZTFI5TkR1d3hzVnRoVFY3Vjk5bi9CN0hTYkF5dGJFeVZUei81TmhKOGdHSWpHMEU1ajNncmlVTFVkNVJnN3RRUis5MGhKZ05RS1FIMmJ0YlNmUGNhVE9mSWV4YzFkYjFCeFVPaE0xdldDcExhWXVLcjNGZE5UdC9UM1BXQ3BFVVdES0V0ellyanB6bEwvd3JpM01JVEtzRnZ0RjhRVlYvTmhWbzk3YUtJQmdkbGlOYzEwZFdkWFZEcFZ0c05uKzJVSW9scmdxZFdBNEVZOHNvMFl2QjRhK2FMek1YaU1BdU9IUXJYWTB0citDTDEwSmJ2WnpnakpKdUIxY1JrZFQ3RFVxVHZuc3dWVXA1a2tVU0ZWdElJRllLMDUrdFF4VDY5OTJISE5XVmhXeFVzRDFQa2NlSXJsWHVVVlJvZ3dtZmRoeXJmNnp6YUw4K2MwTDdHWE1aT3RlQWhBVlFWd2RKaCs3bnJYN3g0TGFJSWZ6MkYydjdEZy91RGZ6MkZhKzRnRm0yekhBb3I4VXFpbUpHM1ZUSnRaRW9GWGhuRFlYdnhNSkZjNmt1MmJoYkN4emlqMno1VU51SzBqbXAxbW52a1ZOVWZSK1NFbWoxTHI5NEx5bTc1UE83RnMwTUlyM0dkc1dYUlhTZmdMVFZZMEZMcWJhOTd1MUluOE5BY1k3SUM2VGpXTGlnd0tFSW00M054VGRhVlR2OW1jS2t6dXpCa0tkOHgveHQxcC85QmJQN1d5YjRicG8xSzFnbk9wYkx2S3o1OHBXbDNCNTVSSi9aNW1SRExQdE5RZzE0amRPRXM5K2gvVjVVVnB3ckFJOGtHYlg4S1BWUERJTWZJcUtEakpEOVV5RE9QaGpaM3ZGQXllY3d5cTRha1VFOW1ET3RKRUsxaHBEeWk2QWU4N3NXQUNsWEdUaXdQd043UFhXd2p4YVI3OUFySFJJUGVZS1R1blZXMjRzUHIvM0hQejJJd0g4b0tINE9sV0VtdDRCTE02VzVnNGtNY1liTHdqMnVzb2REMTA4OHN0WkE3Vk9zVVNwRVZsNHc3Tk1iMUVVSE1SeEF4TEYwQ0lWKzBMM2laYitla0IxdlNEU0ZqQVozaGZMSmY3Z0ZhWHJPS24rbWhSK3JXdy9lVFhJY0FnbDRIdkZ1QmcxTE9tT0F3SkgzZW9WRWpqd2hlS0E0aWNiclFDbXZBdHBRMG1YRzBhZ1lwNW1qNFJiNm1kUStSVjRRQlBieE1xaDlDN284blAwV2tvMm9jbkNIZVJHaE4xWFZ5VDJiOUFDc0wrNnlsVXkreUMzUUVuYUtSSUpLOTFZdGFvU3JjV1pNTXd4dU0wRTlKNjhaK1l5akEwZzhwMVBmSEFBSVJPeTZTYTA0VlhPdVQ2QTM1MUZPV2hLZlRHc0ZKM1JUSkdXWVBvTGs1RlZLNE9hWVI5aGtKdmV6d0Y5dlFOMTEyNnI2aXNNR1hXVHFGVyszSEwzSS9qdXJsSWREV0lWdllZK3M2eXE3bHJGU1BBR1JkblU3UFZ3WS9TdldiWkdwWHp5M0JRMkxtQUpsck9OVXNaczRvR2tseTBWMjY3eGJENUtNWTh3b05Oc21XRzFWVmdMQ3JhOGFRQkJjSTREUDJCbE53eGhpQ3RIbGF6Nk9XRm9DVzB2TVIzRXJyRzdKeU1qVFNDbnZSY3NFSGdtUG53QTZpTnBKMkRyRmI0Z0xsaEtKeVpHYVdrQTk3SDZGRmR3RWNMVDZEUlFRTCsrZk9rVkM0Y1lHVzFURy8zaUs1ZFNoUlN1aUJ1bG1paHFnalI0NVZpMDNvMlJiUWJQM3N4dDkwVnhRNnZ6ZGxHZmtYbW1LbWpPaTA4MEpTSGtMbnRqdnNCSm52N2dLc2NPYVRPa0VhUlFxQW5DQTRIV3RCNFhuTXRPaHBSbUgyRkg4dFRYcklqQUdOV0VtdWRRTENrY1ZsR1RROTY1S2gwSDZpeFhiZ0ltUVA2YjQyQjQ5c081QzhwYzdpUmxneXZTWXZjbkg5RmdRM2F6TGJRRzJjVVc5NlNEb2pUUVN0eGtPSnlPdURHVEhBbm5Xa3oyOWFFd045RlQ4RUo0eWhYT2crakxUckNQS2VFb0o5YTdsRFhPakVyOEFnWDRCbW5NUTY2OG9XMHpZUHlRaVZNUHhLUkh0cGZuRUV5YUtoZHpOVlRobHh4RFFOZHJIZVppVUZiNk5vWTJLd3ZTYjdCblJjcEp5Ky9nL3pBWXgzZllTTjVRRWFWRDJZMVZzTld4QjBCU08xMk1Sc1JZOEpMZkFlelJNejVsVVJ1TFVuRzFUb0trNlEzMEZ1Z2hxV042Z0JOY0Z4UC9uWS9pditpYVVRT2ErMk51eW00Nnd0SS9EdlNmelNwMWpFaTRTZFlCRTdZaFRpVlY1Y1g5Z3dib1ZETVZnWnA1WUJRbEhPUXZhRE5mY0NvQ0p1WWhmNWt6NWt3aUlLUGp6Z3BjUkpIUGJPaEphamVvZVJMNTNjdU1haGhWOFo3SVJyNk00aFcwSnpUN216YU1VelFwbTg2Nnp3TTdDczA3ZkpZWHVXdmpBTWtiZTVPNlY0YnU3MXNPRzZKUTRvTDh6SWVYSGhlRlZhdnp4bWxJeUJrZ2M5SVpsRURwbE1Qcjh4bGN5c3M0cFZVZHdLMWU3Q0sya1RzU2RxN2c1U0hSQWwzcFlVQjlLbzRmc2g0cWxlT3lKdjF6M0tGU1RTdndFY1JPL0V3OG96RURZWlNxcGZvVlc5dWhKZllyTkFYUjBaM1ZtZW9BRCtyVld0d1AvMTNzRS8zSUNYM0hoREczQ01jNDc2ZEVFQzBLM3VtU0FENGorWlFMVmRGT3NXTDJDMVRINSs0S2lTV0grbE1pYm8rQjU1aFIzR3E0MEcxbjI1c0djTjBtRWNvVTJ3TjlGQ1Z5UUxCaFlPdTlhSFZMV2pFS3gySklVWmk1eVNvSFVBSTliOGhHemFMTXhDWkRNTGh2OE1rY3BUcUV3ejlLRkRwQ3BxUWhWbXNHUU44bTI0d3lCODJGQUtObWpnZktSc1hSbXNTRVNvdkF3WGpCSW9NS1NHNTFwNlVtOGIzaTdHSVNzN2tqVHEvUFpvaW9DZkp6ZktkSlROMFE0NWtRRVF1aDlIODhNM3lFczNEYnRSVEtBTHJhTTBZQzhsYWlNaU9PZTZBRG1UY0NpUkVlQVdaZWxCYUVYUmFTdWoybHgweEhhUllxRjY1TzBMbzVPQ0ZVMThBOGNNREU0TUxZbTl3MlFTcjlOZ1FBSWNSeFpzTnBBN1VKUjBlNzFKTCtWVStJU1dGazVJOTdscmE4dUdnN0dsUVloR2Q0R2M2cnhzTEZSaUllR080YWJQNFM0ZWtRMWZpcURDeTg3R1pIZDUyZm41YWFER3V2T21Jb2ZyenBWd012dGJyZVovODU1T2FYVFJjTmlORTB3ekdaU3hiamcyNnY4a284TDUzN3YvWENDV1AyTUZhQXJKcHZua2VwMHBBK084Nk1XalJBWlBRUmZ6blppU0lhVHBweTZtM3A2SHJOU3NZN2ZEdHo3Q2w0Vi9ESkFqUURveWlMMnV3ZjFVSFZkMkFJcnpCVVNsSmFUajRrNk5MOTdhL0dxaFdLVTlSVW1qbllLcG0ycitKWVVjcmtDdVpLdmNZdnJnOHBEb1VLUXl3WTlHRFdnMDNEVUZTaXJsVVhCUzVTV24vS0FudG5mMElkSEdMLzdtd1hxREcrTFpZamJFZFFtcVVxcTR5NTRUTm1XVVA3SWdjQXc1ODE2WUJ6d2lOSUppRTlNNGxQQ3plSS9GR0JlWXkzcDZJQW1INEFqWFhtdlE0SXkwWTgyTlRvYmNBZ2dUMkNkcXo2TXg0VGRHb3E5Zm4yZXRyV0tVTkZ5YXRBSHlkUVRWVVEyUzVPV1ZVbHVnY052b1VybEE4Y0pKejlNcU9hL1czaVZubzR6REhmRTd6aG9ZNWY1bFJUVlpEaHJRYlI4TFM0ZVJMejhpUE15Qkw2bzRQaUxscDg5Rmpkb2tRTGFTQm1LSFV3V3AwbmE1ZkUzdjl6bnkyWWNEWEcvamZJOXNjdHVsSFJiZGtJNWE0R09QSng0b0FKUXpWWi95WUFhZG84S05aVWRFRnM5WlBpQnNhdXNvdFhNTmViRWdyMGR5b3B1cWZTY0ZKM09ETlBIZ2NsQUNQZGNjd3YwWUpHUWRzTjJsaG9WNEhWR0J4Y0VVZVVYL2FscjRucXBjYzFDQ1IzdlI3ZzQwenRlUWcvSnZXbUZsVUU0bUFpVHBIbFlHckI3dytVMktkU3dRejJRSktCZS81ZWlpeFdpcG1mUDE1QUZXcks4U2gxR0JCWUxnemtpMXdUTWhHUW1hZ1hxSjIrRnVxSjhmMFh6WENWSkZIUWRNQXc4eGNvMTFIaE0zNDdhbHJBdSt3bVgzcERGQUJPdmtDK1dQWDBVaGcxWjVNVkhLTlJPeGFSODRZVjNzMTJVY00rNzBjSjQ2MFN6RWFLTHloNDcydk9NRDNYbmFLN3p4WmNYbFdxZW5FdmNqbWdHTlIyT0tiSTFzOFUraXdpVytIb3RIYWxwM2UxTUdEeTZCTVZJdmFqbkF6a0ZIYmVWc2dqbUpVa3JQOU9Bd25FSFlYVkJxWXgzcTdMdlhqb1ZSMG1ZOGgrWmFPbmgwNTNwZHNHa21icWh5cnlOMDFlVkh5U3IrQ2tEWWtTTWVaMXhqUE5WTStnVkxUREt1MlZHc01VSnFXTzRUd1BEUDBWT2cyLzhJVGJBVWFNR2I0TGpMN0wrUGkxMWxFVk1YVFlJbEFaL1FIbVRFTmp5eDNrRGtCZGZjdnZRdDZ0S2s2allGTTRFRzVVWERUYUY1KzFaalJ6Nlc3TWRKUEMrd1RrYkRVaW00cDVRUUgzYjlrR2syQmtpbHlldXI4QmMyMHdtNXVKU0JPOTVHZllESTFFWmlwb1JhSDd1VnZlbmVxejQzdGxUWkdSUTRhN0NObU1IZ1h5T1FRT0w2V1FrZ01VVFFEVDh2aDIxYVNkejdFUmlaVDFqSzlGK3Y2d2dGdnVFbUduZ1N2SVVSMkNKa2M1dHgxUXlnZlpuQXJ1T05vYkIxaWRDTEIxRkNmTzdOMVpkUm9jVDgvV3llK0VuRGlPOXB6cUlwbkxEbDRia2FSS1crZWtCVndIbjQ2U2h3MVgwdGNsdC8wUk9panVVQjRrSUluclZKVTRidVdmNFlJVEp0ak9KNmlLZHIxdStmbGdRZUZINzBHeEtqaGRndC9NcndmQjRLL3NYY3pRKzl6WWNyRDRkaFk2cVpoWjAxMHJyeGdnV0E4SmFaeWcycFlpajhpZVlFZzFhWkprWks5TzFSZTdzQjBpb3VmNjBySzBHZCtBWWxwN3NvcUNCQ0RHd2ZLZVVRaENCbjBFMG8wR1M2UGRtakxpMFR0Q1laZXFhenF3Tit5TklOSUE4TGszaVBEbldVaUlQTEdOY0htWkR4ZmVLMGlBZHhtL1Q3TG5OK2dlbVJMNjFoSEljME5DQVphaVlKUitPSG5MV1NlOHNMcks5MDVCNWVFSkhObFdxNFJtRVhJYUZUbW80OWY4dzYxK053ZkVVeXVKQXdWcVpDTEZjeUhCS0FjSVZqM3NOemZFT1h6VktJbmR4SHcrQVI5M293aGJDeFVaZjZHczhjejYvMVZkckZFUHJ2MzMwKzlzNkJ0TVZQSjN6bC9VZjlyVWkwWi9vcGV4ZmRMM3lrRjc2ZTk5OUdQZlZ2OGZKdi9ZLysvNWhFTW9uMXRxTkZ5VlJldlY5eTkvdUl2c0czZGJCOEdSUnJnYUVYZmh4KzJ4ZU9GdCtjRW4zUlphbk54ZEVlMitCNk1IcE5iclJFNTNQbERpZlB2RmNwNGtPNzhJTFIwVDR4eVcvV0dQeUJzcUdkb0E3ekpKQ3UxVEtiR2ZobnFnblJieGJCMkIzVVpvZVEyYnoyc1RWblV3b2tUY1RVMjFSeE4xUFlQUzNTYXI3VDBlUklzeUNOb3dyOWFtd29NVS9vZDlzMkFQdGlLTkw2RU5PbHlLQURzdEFFV0tBK3NkS0Rocko2Qk9oUkptWitRSmJBYVozLzVGcTAvbHVtQ2dFekdFYnUzeWkwWTRJNEVnVkFqcXhoNEhidVFuMEdyUmhPV3lBZnNnbFFKQVZMMXkvNnllelMyazhSRTJNc3RKTGg5Mk5PQjNHQ1lnRlh6bkY0ZDI1cWlQNFpDeUk0UllHZXN1dDZGWEs2R3dQcEtLOFdIRWtoWXVpMEF5RW1yNU1sM3VCRnRQRmRuaW9JOFJpQ29vYTdaMUcxV3V5SWkzblNOZ2x1dGMreFk4QmtlVzNKSlhQSzZqZDJWSU1wYVN4cFZ0RnErUit5U0s5SjZXRzVRdnQrQytRSDFoeVlVT1ZLNzg1N25GbXlEQllnWi9vK0FuaWJ6TlZxeVlDSlF2eURYRFRLK2lYZGtBNzFiWTdUTDNidnVMeExCUThrYlR2VEVZOWFxa1EzK01pTFdiRWdqTHpPSCtsWGdjbzFFUmd6ZDgwckRDeW1scGFSUWJPWW5LRy9PRG9GbDQ2bHpUMGNqTTVGWVZ2djBxTFViRDVseUp0TVVhQzFwRmxUa05PTng2bGxpYVg5bzBpLzF2d3M1Yk5LbjVPdUVOUUVLbUxsY1A0bzJabUpqRDR6emQzRmszMnVRNHVSV2tQU1VxYjRMQmUzRVhIZE9STkIyQldzd3M1ZGFSbk1mTlZYN2lzUFNiMWhNUWRBSmkxL3FtRE1mUlVsQ1U3NHBtbnpqYlhmTDhQVkc4TnNXNklRTTJOZTIzaUNQSXByeUpqWWJWbm01aEN2S3BNYTdITFZpTmlOYyt4VGZESWFLbTNqY3RWaUQ4QTFNOVlQSk5rMDAzVlZyNFpvMk11R1c4dmlsOFNMYUdwUFhxRzdJNERMZHRsOGE0UmJ4MUx0NHc1SHVxYWExWHpaQnRqMjA4RUpWR2NtS1lFdWFlTjI3elQ5RUU2YTA5SmVyWGRFYnBhTmdOcVlKZGhQMU5kcWlQS3NiRFJVaTg2WHZ2TkM3ck1FNW1yU1F0cnpBWlZuZHRTakNNcWQ4Qm1hZUdSNGw0WUZVTEdSQmVYSVY5WTR5eExGZHlvVU5waXkySWhlUFNXekJvZllQUDBlSWEycTVKUDRqOUc4YXQvQXFvU3NMQVV1Ulh0dmdzcVgvell3c0Urb2Y2b1NEYlVPbzRSTUp3K0RPVVRKcStobnF3S2ltOVl5L25hcHlaTlRjMnJDcTZWOWpIdEpieEdQRHdseldqL1NrM3pGL0JIT2xUL2ZTalNxN0ZxbFBJMXE2SitydThBa3UwMDhTRklOWFpmT2ZuWk5PdkdQTXRFbW4yZ0xQdCtINFFMQSsvU1llNGozOThhdXpoS0lwMlBvazNtUEM1cTFJTjFIZ1IrbW5FZmM0TmVlSFl3ZDIva3BzelIzY0JuN25pOU5iSXFodFNXRlc4eGJVSnVVUFZPZWVYdTNqMElHWm1GTml3YU5aNnJINC96UTJPRHo2dEZ4UkxzVVladTFiZmQxdUl2ZlFEdDRZRC9lZktZdjhWRjhiSEdEZ0syMncyV3F3cGk0M3ZOQ09YRkpaQ0dNcVdpUGJMOG1pbDZ0c21PVFhBV0N5TUN3NzNlMnJBRFpqMklLNnJxa3NNM0VYRjJjYkxiNHZqQjE0d2EveVhLNXZ3VSswNU16RVJKNW5Yc1hzVzIxbzdNK2dPMGpzMk95S2NpUDV1RjJpWHliMkRpcHR3UWVIZXF5Z2tyTnNxVkNTbGxkeEJNcHdIaTF2ZmM4UktwUC80TDNMbXBxNkRaY3ZoRERmeFRDRTNzcGxhY1RjT3RYZEsyZzMwM2RJV0JWZTJ3RC9HdmphMWNDbEZRNjdndzB0MVpVdHRzVWdRMVZla3k4b09wUzZrc1lFYzRicXNlQ2JaeTc2NlN2TDNGb2RtbmFobFdKUmdWQ05qUHhoTC9mazJ3eXZsS2hJVEgvVlFDaXBPSTBkTmNSYTVCMU01SG1PQmpUTGVaUUp5MjM3ZTJtb2J3bUR5Sk5IZVBoZERtaWtudkxLYURiU2hMK0lzMVhUQ0p1TFFkMndtZEpMNyttS3ZzMjk0d2hYUUQrdnRkODhLS2swRFhQOEIxWHU5Sit4bzY5Vk91RmdleGdUcmN2STZTeWx0dUxpeDlPUHVFNi9pUkpZb0JNRVh4VTRzaFFNZjRGanF3ZjFQdG5KL3dXU1pkMjlyaFpqUm1UR2dpR1RBVVFxUnorbkNkamVNZlloc0JENUx2NjBLSUxXRXZORUhmbXNEczJMMEEyNTIzNTFlVW9ZeEF5c1ZhQ0pWTGRIOVFGV0FtcUpEQ09EVWNkb28xMitnZDZiVzJib1kwcEJWSFdMNkxRREs1YllXaDFWOHZGdmkwY1JwZnd2N2NKaU1YM0FaTkp1VGRkSGVoVElkVTBZUS9zUTFkTG9GMnhRUGNDdUhLaXVDV09ZMzBESGUxT3djQ2xMQWhxQUt5cWxuSWJILzh1OVNjSnBjUzRrZ3A2SEtEVWRpT2dSYVJHU2lVQ1JCanpJNWdTa3NNWktxeTdTZDUxYWVnMHRnSit4MFRIOVlIMk1nc2FwOU43RU5aZEVCMGJleTJETVRyQkExaG41NlNFck5IZjN0S3RxeUw5YjZ5WEVQOTcvcmMramdEMk4xTE5VSDZSTTlBelAza1NpcHIwNlJrS09vbFI3SE83NjhqaldpSDFYOTJqQTdka2c3Z2NOY2pxc1pDZ2ZxV3cwdFBYZExnMjBjRjZ2blF5cGc3Z0x0a2F6ckhBb2R5WWZFTlBRWnNkZm5qTVppTnU0bkpPOTdEMS9zUUUrM3ZORnpyU0RPS3cra2VMRUNZZjdSSndWSGVQL2o3OTgzM29aMGVnb25ZQjJGbEZFNXFqMDJCL0xWT01KUWxzQjh1TmczTGVnNHF0WndudHNPU05pZFIwYWJiWm1BSzRzQ3p2dDhZaXV6MnlyTkNKb0g1TzhYdlgvdkxlUi9CQllUV2owc09QWU0vanl4UmQ1Ky9KemlLQUFCYVBjdy8zNFVBM2FqL2dMWnhaZ1JDV042bTRtM2RlbWFuTmdzeDBQMjM3L1ErRXc1VlluSlBreUNZMGNJVkhvRm4yQXkvZTdVNFAxOUFQYlBGWEVIWDk0TjZLaEVNUEc3aXdCMytJK08xamQ1bjZWU2dIZWd4Z2FTYXdPNmlRQ1lGZ0RzUFNNc05PY1VqNHEzc0Y2S3pHYUgvMHU1UFFvQWovOHpxNlVjOU1vTnJHcWhZZWIyalFvMFdsR2xYanh0YW5aTFMyNC9PSU41R3gvMmc2ODRCUERRcHdscW5rRmN4cG1QL29zbk9YckZ1dTRQcWlmb3VRSDBlRjVxQ2t2SVRRYkp3L1p2eTVtQUhXQzlvVStjVGlZaEptU2ZLc0N5dDFjR1Z4aXNLdStOeW1FUUlBeWFDZ3VkL1YwOXFUM25rLzlzL1NXc1l0aGE3eU5wekJJTU00MHJDU0dhSjl1NmxFa2wwMHZYQmlFdDdwOVA1SUJDaWF2eW5FT3Y3RmdMcVBkZXF4UmlDd3VGVk1vbFNJVUJjb3lmVUMyZTJGSlNBVWdZZFZHRmYwYjBLbjJFWmxLOTd5eXhyVDJNVmd2dFJpa2ZkYUFXOFJ3RUVmTitCNy9lSzhiQmRwN1VScGJxbjF4Y3JDNmQyVWpkc0tiekNqQkZxa0trb1p0N01yaGc2WWFnRTdzcGtxajBqT3JXTStVR1EwTVVsRzJldlAxdUUxcDJ4U3Y0ZE1LMGRuYTZFTmNOVUYreGthSjdCNzY0TmR4TENwdXZoYmxsdFZSQWY3dks1cVB0dEovOVJZRlVVU0djTGRpYm56Nm1mN1drUE8zTWtVVWhSMm1BT3VHdjhJV3c1WEcxWnZvVk1ualNBWmU2VDdXWUE5OUdFTnhvSGtNaUt4SGxDdUs1R2QwSU5ySVNJbUhRclFtdjZGNG1xVS9UVFE4bkhNRHpDUml2S3lTUThkcWtwUWduVU1ud0lrYUF1YzYvRkdxMWh3M2IyU2JhMzk4QmhVd1VaU0FJTzhYWnZudUxkWTJuNmhPWHdzK2dxOUJIVUtjS0ZBNmt6NkZEbnB4TFBJQ2EzcUdobmM5N2JvMUZUL1hKazQ4THJrSEoyQ0F0QnYwUnROOTdOMjFwbGZwWEh2WjhnTUpiN1pjNGNmSTZNYlB3c1c3QWlsQ1NYTUZJRVVFbWlyOFhMRWtsQTB6dFliR3BUVEdxdHRwNWhwRlRUSXFVeWFBSXF2TVQ5QS94K0ppNWVqQTRCaHhiL2NsMXBVZE9ENmVwZDN5aWxJZE82ajI5N3hJbm9pQlB1RURXMi9VZnNsRHloR2tRczdXeTI1M2JWbmxUK1NXZzg5ellJSy85S1hGbDVmZStqb3cycmQ1Rlh2OHpEUHJtZk1YaVVQdDlRQk8vaUs0UUdiWDVqLzdSeDFjMXZ6c1k4T05iUDNsVklhUHJoTDQrMVFyRUNUTjNueUthdkdHMGdCQnRIdlRLaEdvQkhnTVhIU3RGb3dOK0hLclByaVl1K09aMDVGcm44b2tRclBhYXhvS1AxVUxDUy9jbUtGTjNnY0g3SFFsVmpyYUNlUW10amcxcFNReGV1cVhpU0tnTHB4Yy8xT2lac1U0K240bHo0aHBhaEd5V0JVUkxpNDY0Mm4xZ245cXo5YklzYUNlRVBKMHVKbWVuTVdwMnRKbUl3TFE2VlNnRFlFck9lQkNmU2o5UDRHL3ZJN29JRitsL241ZnA5NTZRZ3hHdnVyNzd5bmF3QXUzRzlNZEZiSmJ1NDlOWm5Xbm5GY1FIanhSdWhVWXZnMVUvZTg0TjRKVGVjY2lEQUtiL0tZSUZYemxveXVFMWVZWGY1NE1taGpUcTdCL3lCVG9EenpweDN0SkNUbzNIQ21WUFlmbXRCUmUzbVBZRUUvNlJsVEl4YmY0ZlNPY2FLRkdrNGdiYVVXZTQ0aFZrOVNaemhXODB5Zlc1UVdCSHhtdFV6dk1oZlZRbGk0Z1pUa3RJT1pkOW1qSjVoc2JtenR0YUhRQjI5QW0zZFprbXgzZy9xdllvY3loWjJQWEFXc05RaUlhZitROFcvTVdQSUs3L1RqdkN4NXEyWFJwNGxWV3lkTWMyd0lRa2hhZERCMHhzbncva1NFeUdqTEtqSTRjb1ZJd3R1YlRGM0U3TUo2TFM2VU9zSktqODJYVkFWUEpKY2VwZmV3YnpFOTFpdlhadk92WWZzbU1ldnd0UHBmTXpHbUM3V0pseVcyajBqaDdBRjFKTG13RUpTS1l3SXZ1NkRIYzNZbnlMSDlaZElCblErbk9WRFJpUCtSRXBxdisrdHlwWUhJdm9KeUlDR0E0MGQ4YlI3SFIyazdkbzZVUVRIRjRvcmlZZUlRYnhLZTRUaDYrL2wxQmpVdFM5aHFPUmgzTWJndllyU3RYVGZTd2FCT21BVlFaenBZTnFzQW1ReWpZNTZNVXF0eTNjL3hINkd1aE52TmFHOXZHYkc2Y1B0Qk04VUEzZThyNTFEMEFSOWtvekt1R0dTTWdMejNuQUh4RE5uYzdHVHdwTGo3LzZIZVdwMWlrc0RlVGp3Q0xweGVqdU10cE1uR0pnc2lrdTFzT0FDd1E5dWt6RVNpRFJONzdZTkVTeFI1THBoT2xjQVNYQTV1SXRzMUxuQkljbjFKN0JMV3M0OURNQUxTbnV6OTVnZE9yVFpyMHUxU2VZSGlubm8vcEU1OHhZb1hiVk8vUytGRU1NczVxeVdrTW5wOFEzQ2x5VGxaUDUyWTlucTdiOGZJVFB1VlhVazlvaEc1RUZIdzRnQUVjakZ4ZktiM3h1QXNFangyejF3eE5iU1pNY2dTOUdLeVczUjZLd0pPTmd0QTY0TFR5eFdtOEJ2dWRwME0xRmRKUEVHb3BNNEZ2ZzdHL2hzcHRraENmSEZlZ3Y0RU53eFBlWG1ZaHh3Wnk3anMrQmVNMjd0OU9EQk15blZDTEo3UldjQk10ZVpKdHZqT1lIYjVsT25DTFlXTkVNS0M1OUJBN2NvdnUxY0FOYTJQWEwwNWlHZHVmT3prZ0ZxcUhCT3JnUVZVbUxFYytNa3o0UnE4TzZXa05yN2F0TmtINE04ZCtTRDF0L3RTenQzb0ZxbCtuZVZzK0F3RUk1SmFCSmF4QVJ0WTJaNG1Lb1VxeGRzNFVwWjBzdjN6SWJOb28wSjRmaWhsZFFUWDNYTmN1TmNabWNyQjVMVFdNZHplUnVBdEJrM2NaSFlRRjZnVGkzUE51REowbm1SKzRMUExvSHZ4UUl4UmdKOWlOTlhxZjJTWUpoY3ZDdEppVldvODVUc3lGT3VxN0V5QlBKckFkaEVnRTBjVHExNkZRWGhZUEpGcVNmaVZuMElRblBPeTBMYlU0QmVHOTRRamRZTkIwQ2lRM1FheFFxRDJlYlNNaU5qYVZhdzhXYU00WjVXbnpjVkRzcjRlR3dlU0xhMkRFM0JXVmlheGhaRkljU1RqZ3hOQ0FmZWxnK2h6blZPWW9lNVZxVFlzMWc3V3RmVG0zZTQvV2R1QzZwK3FxQU04SDRaeXJKQ0dwZXdUaFREUGU2SDdDelgvelE4VG0rcjY1SGVabitNc214VWNpRVdQbEFWYUsvVkJhUUJXZm9HL2FSTC9qU1pJUWZlcC84OUdqYXNXbWJhV3plRVoyUjFGT2p2eUpUMzdPOUI4MDQ2U1JTS1ZFblhXbEJxYmtiNVhDUzNxRmV1RTl4YjkrZnJFa254V0I1aDFEL2hydXoyaVZERUFTNytxa0V6NU90NWFnSEpjN1dDZFk5NFdzNjFzVVJjWDVuRzhVRUxHQkFIWjNpKzNWdWxBeVQwbktOTno0SzJMQkhCV0pjVEJYMXd6ZisvL3Uvai85Ky8vdjg3KzkvbDlMYmgvTC91eU5ZaVRzV1YyTHdzamFBNk14VHV6Rk1xbXhXOEp3LytJcHBkWDh0L0NsZ2kxckkxU04wVUMvcjZ0WC80bFVjMlZWMU9RUmVTZUNzalVwS1pjaHc0WFVjakhmdzZyeUNWM1I4czZWWG02N3ZwNG4rbGNQVjlnSndtYktRRXNtckppOWMydmt3cm04SEZiVllOVGFSR3E4RDkxdDluNStVK2FEL2hOdE4zSGpDL25DL3ZVb0dGU0NrWFArTmxSY21MVXFMYmlVQmw0TFlmMVUvQ0N2d3RkM3J5Q0g4Z1VtR0lUQXhpSDFPNXJuR1R6N3kxTHVGam1uRkdRMVVXdU03SHdmWHRXbDJmUEZLa2xZd05VcEYySUwvVG1hUkVUalFpTTVTSmFjSSszR3Y1TUJVOGxQNUlvNmdXa2F3cHl6TkVWR3FPZHg0WWxPMWRDdmpiV0ZaV2JDbWVpRktQU2xNS3RLY01GTHMvS1F4dGdBSGk3TlpOQ1EzMmJCQVcybWJIZmxWWjh3WEtpMUpLVkhrVzIwYm5ZbmwzZEtXSmVXSk9pWDNvS1BCRDZaYmkwWnZTSXVXa3RVSEI4cURSOERNTWgxWmZrQkw5RlM5eDVyMGhCR0xKOHBVQ0p2M05ZSCtBZThwNDBtWldkNW01ZmhvYkZqUWVRdnFUVDRWS1dJWWZSTDB0ZmFYS2lWbDc1aEhSZXVUSkVjcVZsdWcrZU9JSWM0YmRJeWR0bjJLMGlOWlBzWVdRdlFpbzJxYk8zT3FBbFBIRERPQjdEZmpHRWZWRjUxRnFxTmFjZDZRbWdGS0pwTWZMcDVESFR2NHdYbE9OS1ZYRjl6VEpwRFY0bTFzWVpxSlBob3Rjc2xpWk04eWtzS2tDa3pwaVh0K0VjUlF2U1FxbUJTOVdkV2t4TVRKWFBTdzk0anFJM3ZhckNqUXhUYXpqbE1IOGpUUzhpbGFXODAxNC92d0EvTE5hK1lpRm95eXgzcy9Lc3dQM084UVcxanRxNDV5VE0vRFg5YThNNHZvVFZhTzJlYnZ3MUVvb0R3L3lnNlkxZmFZK1d3cmRWczVZdDBoUTVFd1JmWVhTRnhyYXkxWXZTTStrWW1scExHMi85bW0xTWZtYktIWHI0NEloOG5WS2IxTTUzN1pBTlVrQ3Rkc1BaODBKVktWS2FiVkhDYWRhTFhnK0lWOGk1R1N3cFp0aTBoNmRpVGFLczlzZHBVS0VwZDdqRFVwWW1IdGlYMzNTS2lPM3R1eWRrYXhBN3BFYzlYSVFFT2ZXSmxzemo1WXBMNWJLZVF5VDdhWlNCT2FtdlNIbDh4c1d2Z28yNklQL2JxayswRUpVeitna2tjdmxVbHlQcDJrZEtGdHQ3eTVhQ2RrczlaSkpjRnA1WldlYVdLZ3RuWE1OM09Sd0dMQkUwUHRrRUllazVGWTJhVnNzVVpIdHNXSXZubGpNVkp0dVZJanBadXAvNVZMMXlQT0hXV0hrT01jNll5U1dNY2tjekQ1alVqMm1sTFZxdUZhTVU4bGVHVmFxZVhpcythUlJMOHptNFd1Qms2Y3lXZkdNeGd0cjh1c2VRRXg3ay9QdlJvWnlkOW5kZTFHVUNWODRnTVg4T2d1L0JXZXpZUFNSMjdsbHpRbkE5N29vMHBZeXhvYllVSmZzait5c1RtOXpKK1M0cGswVEdvOVZURzBLanFZaFRtQUxmb0RaVktsYTJiNXlodjI0MVB4RmFMSnMzaTA1SzBBQUlkY0d4Q0pabVQzWmRUN0NsaVI3cStrdXI3V2RRanlnWXRPV1JMOUI4RTRzNExJOEtwQWo3YkUwZGc3RExPYVgrTUdlQWkwaE1NU1NXWkV6K1J1ZFhiWkNzR1lTMFFxaVhqSDlYUWJkOHNDQituSVZUcTcvVC9GRFMreldZOXE3WjJmZHExdGRMYjZ2M2hLS1ZEQXc1Z2pqNm85cjF3SEZST2RIYzE4TUpwNFNKMlVjdnUraVE5RWdrZWtXOFZDTStwc002eSsvMlNCeTh0Tk40YTNMMU16UCtPTHN5dkVTbzVnUzdJUU9uSXFNbXZpSkJWYzZ6YlZHMW44ZVhpQTNqNDZrbXZ2dEpsZXd3TkRyeGs0U2JKT3RQL1RWL2xJVks5dWVTaE5iYk1IZnduTFRMTGhiWnVPNzllYzVYdmZnUndMRksrdzFyNVpXVzE1clZGWnJFK3dLcU5SdjVLcXNMTmZwR2dub1VVNlk3MU54RW1ON015cXdxQVFxb0lVTE93L0xidVVCMit1RTc1Z0p0K2txMXFZNExveFYrcVIvemFsdXBlYTNENStXTWVhUkluMHNBSTZERFdEaDE1OGZxVWI0WWhBeGhSRWJVTjBxeXlKWWtCVTRWMktBUlhEVDY1Z1czZ1JzaXY3eFNQWUVLTHd6Z3JpV2NXZ1ByMHNiWm52N20xWEhORlc2eFBkR05aVWR4RmlVWWxtWE5qRFZXdXU3TENrWC9uVmtyWGFKaGlZa3RCSVNDMnhnQlhRbk5FUCtjcHRXbDFlRzYyYTdDUFhybnJrVFE1QlFBU2JFcVVaV01EaVpVaXNLeUhEZUxGT2FKSUxVbzVmNmlEdDRaTzhNbHFhS0x0bzBBbVRIVlZia0d1eVBhMVIveXdac1dSb1JEb1JkTk1NSHdZVHNrbE1WbmxBZDJTMDI4MmJnTUk4ZmlKcERoNjlPU0w2SzNxYm8yMEtmcE5NdXJuWUdRU3Ivc3RGcVo3aFlzeEtsTG5LQUtoc21COEFJcEVRNGJkL05yVExUWGVmc0U2Q2hSbUtXalhLVmdwR29QczhHQWljZ0tWdzRLMHFnRGd5MUE2aEZxMVdSYXQzZkhGK0ZrVStiNkg0TldwT1UzS1hUeHJJYjJxU0hBYitxaG04aGlTUk9pLzlvZmFwanhoeUt4eG50UHBnZTZLTDVaNCtXQk1Za0FjRTYrMEhkM1loMnpCc0syTVYzaVcwWTZjdk9Dcm9YbFJiMk1NSnRkV3grM2RrRnpHaDJQZTNEWjlRcFNxcGFSL3JFMUltT3JIcVlZeWNjcGlMQzIyYW1KSWpSV1ZBaGVyVGZwUUxtbzYvSzJwbmE4NUdyRHVRUGxIMVRzYXI4aXNBSmJYTGFmU3dPb2Y0Z2c5UmtBR20vb1lwQlFRaVBVb3lEazJCQ1ExaytLSUxxNDhFckZvNFdTUmhITHEveTdtZ3czK0w4NVBwUDZ4V3I2Y2dwOXNPallqS2FnT3J4RjE0OHVodWFXdGpldDk1M2ZoMUlRaUV6Z0MrZDJJZ0JDY1VacWdUQUlDbTJiUjhvQ2pETEJzbWcrVGh5aGZEK3pCYWxzS0JZMUNlNTRZL3Q5Y3dmYkx1OVNGd0VncGhmb3BOQTN5TnhneURhZlVNM21ZVG92Wk5nUEdkZDRaRkZPajF2dGZGVzN1N04raUhFTjFIa2Vlc0RNWEtQeW9DRENHVk1vNEdDQ0Q2UEJoUTNkUlpJSHkwWS8zTWFFNXpVOW1UQ3J3d25ab2p0RStxTnBNU2tKU3BtR2UwRXpMeUZlbE1KcWhmRlE3YTUwdVh4WjhwQ2Myd3h0QUtXZ0hvZWFtUjJPN1IrYnE3SWJQWUl0TzBlc2RSZ29UYVkzOGhaTEo1eTAyb0lWd29Qb2tHSXp4QU1EdWFuUTF2bjJXRFEwMFJoNm81UU9hQ1J1OTlmd0RiUWNOMFhBdXFrRnB4VC9jZnozc2xHUlZva3JOVTBpcWlNQUpGRWJLU2NaZG1Ta1RVem5DMFUrTWZ3Rk9HZExnc2V3UnlQS3dCWllTbXk2VTMyNWlVaEJRTnhiQUMzRkxLRFY5VlNPdVFwT091a0ovR0FtdS90eUViWDlEZ0VwNmR2MXpvVTBJcXpwRzZnc3NTaklZUlZQR2dVMVFBUVlSZ0lUOGdFVjBFWHIxc3FlaDJJNnJYanRtb0NZeUVEQ2UvUGtGRWkvUTQ4RnVUMjlwNTU3aU4rTEN3azVDSy9DWjJXZEFkZlFaaDJaOVFHcnpQTFNOUmo1aWdVV3psOVZpMHJDcUg4RzFLcDRRTUxrdXdNQ0F5cGR2aURYeU9JazBBSFRNOEhCWUtoM2IwL0YrRHhvTmo0WmRvWmZDcFFWZG5aYXJxb01hSFduTUxOVmN5ZXZ5dEdzclhRRW9JYnVicVdZTm83TlJIemRjMHp2VDIxZldWaXJqN2czNml5NnB4b2dmdmdIcDF4SDFUdXJiejhReXlIblhlQkppY3BZVWN0YnpBcHd6WjFIVCtGUEVYTUFnVVpldGdlR013dDRHK0RIaURUMkx1K1BUMjFmakpDQWZWMTZhL1d1MVBxT2tVSFNUS1loV1c2UGhoSFVsTnRXekZuQTdNYlkrcjY0dmt3ZHBmTkIySmZXZ1dYQXZremQ0Mks0bE45eDdXcmc0a0lLZ1hDYjRtY1c1OTVNQ1BKL2NUZlBBTVFNRld3bnF3ZGU0dzhIWllKRnBRd2NTTWhqVno0QjhwNm5jU0NOMVg0a2x4b0lINEJOMko2dGFCTWo2bEhrQU9zOEpKQW1YcTV4c1F0clBJUElJcC9IRzZpMjF4TUdjRmdxRFhTUkYweFFnMTRkMnV5NkhnS0UxM0xTdlFlNTJvU2hGNUp4MVI2YXZ5TDR0aGhYUVpIZkM5NG9aenVQVUJLRllmMVZ2RGF4SXJ0VjZkTkdTeDdETzBpMXA2Q3pCa3VBbUVxeVdjZVFZN0Y5K1UwT2JZRHpvYTFpS2FvL2NPRC92NlE5Z0hycnIxdUNlT2s4ZlNUOU1HMjNVbDBLbU0zcitXbjZIaTZXQWNMN2dFZWF5a2ljdmdqemtqU3dGc0FYSVI4MVp4NFFKNm9vc1Z5SmtDY1QrNHhBbGRDY2locXZUZjk0SEhVUFhZcDNSRUlhUjRkaHBRRjYrRksxSDBpOWk3UHZoOG93dTNsTzRQVDFpdXF1K0RrTDJCajkra2RmR0FnMlRYdzAzaU5IeW9ieG9mTEUyaWJqc1lEUGdlRVFsUk1SN2FmWGJTR1FjblBqSTJEK3NkdG11UTc3MWRiQVNVc0RuZFU3dDU4anJyTkdSeklTdndpb0FsSHM1RkErY0JFNUNjem5rZDhOTVY2QlI2a3NuS0xQWm5NVWF3UkRVMU1aL2liM3hDZGtUYmxIS3U0YmxOaXlsSDVuMjEzeU0wenViRWllMG80Smh6Y2ZBeTNINXFoMmwxN3VMb29CTkxhTytnem9uVEgydUY4UFF1OUV5SCtwakdzQUNUTXk0Y0h6c1BkeW1VU1hZSk9NUDN5VGtYcXZPL2xwdnQwY1g1ZWtERXU5UFVmQmVaT0RrRnVBalhDYUdkaTZldzRxeEo4UG1GZndtUHBrZ1FqUWxXcW9tRlk2VWtqbWNuQXRKRzc1RVZSK05wekdwUDFFZjVxVVViZm93ckMzemNTTFgzQnhnV0VnRXgvdjljUDhIOHUxTXZ0OS9yTURZZjZzandVMXhTT1BCZ3pGRWVKTE1SVkZ0S281UUhzVVlUOFpSTENhaDI3NTk5RXVxb0M5UFlqWU82YW9BTUhCOFgxT0h3RUFZb3VIZkhCM255YjJCK1NuWnhNL3Z3L2JDdE9SakxNU3k1YVpvRXB2Z2RHdmxKZk5QRlV1L3A3WjRWVksxaGlJMC9VVHVCM1pQcTRvaEVibTdNbnRnYzFldkV0a25hb3NnWlN3bkRDMkJkTW1pYnBlZzQ4WDhJeGwrLzgreFhkYnNoUVhVUFB2eDhqVDNma0VMaXZIU21xYmhibGZORlNoV0F5UW5KM1dCVTZTTVlTSXBURG1IamRMVkFkbEFEZHo5Z0NwbFp3Nm1UaUhxRHdJc3hibTlFckd1c2lWcGcydzhRM2toS1YvUjlPajhQRmVGNDNobVcvblNkOTluWnpoeWpDWDNRT1pra0I2QnNINEg4NjZXR3l2OUUwaFZBelBZYWgydGtSZlFaTW1QMnJpbmZPZVFhbGdlMG92aGR1QmpKczlhMUdCd1JlZXJjZWlmeTQ5Y3RPaDUvNjVBVFl1TXNBa1ZsdG12VExCazRvSHBkbDZpK3A4RG9OajRGYjJ2aGRGWWVyMkpTRWlsRXdQZDVuNXpOb0dCWEVqcmVnL3doMk5Gbk5SYUlVSFNPWGE0ZUpSd3lnWm9YNnZuV25xVmRDUlQxQVJ4ZUZyTkJKK3RzZG9vTXdxblloRTd6SXhuRDhwWkgrUDBOdTF3V3hDUFRBRGZOV21xeDYyNklCSkpxNk5lYXBjR2VPbWJ0WHZsMFRlV0cwWTdPR0dWNCtFSFR0TkJJVDVXZDBCdWpsN2luWGdaZ2ZYVE01ZWZEM3FEVEo1NE85djNCa3YrdGRJUmxxMWtYY1ZEMEJFTWlybUZ4Z2xOUHQ1cGVkYjFBbnh1Q1lNQ2hVeWt3c1RJV3FUMjNYRHB2VGlLRXJ1MWNUY0VNZW5pQitIUURlaHhQWE5ta290RmR3VVBuaWxCL3U0Tng1WGM2bDhKOWpIMUVnS1pVVXQ4dDhjeW9abGVEQkV0OG9pYkRtSlJBb01LSjVPZTlDU1dTNVpNRUp2YWNzR1ZkWERXanAvWXBlNXgwcDlQWEIyUEF3dDJMUkQzZCtmdE5ncHV5dnhsUDhwQjg0b0IxaTczdkFWcHd5cm1YVzcyaGZXNkR6bjlKa2o0KyswVlE0ZDBLU3gxQXNEQTRPdFhYRG82My93K0dEK3pDN3c1U0pheHNtbmxZUlE0ZGdkakE3dFRsMktOTG5wSittdmtvRHh0dDFhNG9QYVgzRVZxajk2bzlzUktCUXFVN1pPaXVwZUFJeUxNRCtZM1l3SHgzMFhXSEI1Q1FpdzdxM21qMUVEbFAyZUJzWmJ6NzlheVVNYnlIUTdzOGd1NExnaXAxTGlHSmo3TlFqOTA1LytyZ1VZS0FBNXFkcmxIS0lrbldtcWZ1UitQQjhSZEJrRGcvTmdubFQ4OUc3MmgyTnZ5U25qN1V5QndEK21pL0lXczF4V2J4dVZ3VUlWWHVuNWNNcUJ0RmJyY2NJK0RJTGpzVlFnNmVlcTBpdGlSZmVkbjg5Q3Z5RnRwa3hhYXVFdlNBTnVabUIxcDhGR1BiVTk0SjltZWR3c1o5SGtVWWptSTdPSDVIdXhlbmRMYnhUYVlyUHVJZkUyZmZYRktob05CVXAzM0hzRkFYbUNWL1Z4cHE1QVlnRm9ScjVBeTkzWkxSbGdhSVBqaFpqWFpaQ2hUK2FFNWlXQVhNWDBvU0ZRRXR3aml1aFFRSXRUUVg1SVlyS2ZLQitxdWVUTnBsUjFIb2ZsbzUvSTZhUFBtQUN3UUNFMmpUT1lvNUR6MWNzN1NvZDBLVEcvM2tFREdrM2tVYVVDT04xOXhTSkNhYjNrTnBXWmhTV2tPOGwrU3BXNzBXbjNnMGNpT0lKTzVKWG1hNmRib3M2anlpc3V4WHdVVWhqMisxdUdoY3Z1bGlLdFd3c1VUdzRnaTFjL2RpRUVwWkhvS294VEJlTURtaFBoS1R4N1RYV1Jha1Y4aW1KUjM1NURjSUhrUjlJUkVIeG9oUDRUYnlSNUx0RlUyNHVtUlBSbUVZSGJwZTFMZ2h5eFB4N1lnVUhqTmJiUUZSUWhoNEtlVTFFYWJYeDhGUzNKQXhwMnJ3UkRvZVdrSmdXUlVTS3c2Z0dQNVUyUHVPOVY0WnVpS1hHR3pGUXVSdWYrdGtTU3NiQnRSSktoQ2kzRU51TGxYaFBialRLRDRkalhWbmZYRmRzNlpiKzFYaVVyUmZ5YXlHeEpxMStTWUJFZmJLbGdqaVNtazBvcmdUcXpTUytEWjVyVHFzSmJ0dGlOdHArS01xR0UyQUhHRnc2alFxTTV2RDZ2TXB0bVhWOU9BanE0OVVmL0x4OU9wYW0rSG41TzlwOHFvQkJBUWl4elFaNGVOVmtPOXNQekpBTXlSMXk0L1JDUVExczBwVjVLQVU1c0tMdzN0a2NGYkkvSnFyakNzSzRNdytXOGFvZDRsaW9ZdWF3VWlDeVZXQkUvcVBhRmk1Ym5rZ3BmdS9hZTQ3MTc0ckkxZnFRb1RiVzBIclU2RkFlanE3QnlNMFY0emtaVGcwMi9ZSksyTjdoVVFSQ2VaNEJJZ1NFcWdEOFhzanpHNkxJc1NidUhvSWR6L0xoRnpiTm4xY2xjaTFOSFdKMC82L084SEpNZElwRVpicWkxUnJyRmZvby9ySS83dWZtMk1QRzVsVUkwSVlKNE1BaUhSVFNPRkoyb1R2ZXJGSFlYVGhrWUZJb3lGeDZyTVlGZ2FPS000eE5XZGxPbkljS2Ivc3VwdHB0Z1RPVGRWSWY0WWdkYUFqSm5JQW00cU5OSE5RcXFBenZpNTNHa3lSQ0Vvc2VVQnJIb2hac2pVYmtSOGdmS3RjLytPYTcybHd4SjhNcTZIRGZEQVRiZmJKaHplSXVGUUpTaXcxdVpwckhselVmOTBXZ3FHNzZ6TzBlQ0IxV2RQdjFJVDZzTnh4aDkxR0VMMllwZ0M5N2lrRkh5b2FIOTJuZHdkdXFaNklZamtnMjBEWDMzTVdkb1prN1FrY0tVQ2dpc0lZc2xPYWFMeXZJSXFSS1dRajE2akUxRGxRV0pKYVBvcFdUSmpYZml4RWpSSkpvOGc0Kyt3dVFqYnErV1ZZanNxQ3VOSVFXM1lqbnhLZTJNNVpLRXFxK2NYN1pWZ25rYnNVM1JXSXlYQTFyeHY0a0dlcnNZSmpELy9hdWxkWEdtY0ViY2ZUZUYxNlkxNzA4RkIxSElmbVd2NmRTRmk2b0Q0RStSSWpDc0VaK2tZN2RLbndSZUpKdzN4Q2pLdmkza0dONDJydnloVWxJejBCcCtmTlNWNXh3Rml1QnpHMjk2ZTVzL29Ib0Z0VXlVcGxtUHVsSVBsK2UxQ1FJUVZ0amx6THp6emJWK0QvT1ZRdFl6bzVpeHRNaTVCbUh1RzROL3VLZkprNVVJUkVwNysxMm9abEt0UEJvbVhTekFZMEtndGJQenpab0hReHVqblJFVWdCVStPL2pLS2hneFZoUlB0YnF5SGlVYVJ3UnBIdjdwZ1JQeVVybkU3ZllrVmJsR21mVFkyOHRGQ3ZsSUxDMDRUejNpdmtOV1ZhekErT3NZcnh2Uk0vaGlObjhGYzRiUUJlVVpBQkd4NVMveEZmOUxiYm1rMjk4WDdpRmcyeWVpbXZzUXFxSitoWWJ0NnVxK1pmOWpDK0pjd2ljY2Q2MU5LUXRGdkdXcmdKaUhCNWx3aTZmUjhLellTN0VhRUhmL2thOUVDN0g4RCtXRWEzVEVBQ0hCa05Tai9jWHhGZXE0UmxsQytmVUZtMnh0c3RZTEwybm9zMURmenNDOXZxRERkUlZjUEEzSG85NWFFUUh2RXhWVGhYUHF5bTY1bGxrS2xmUlhiUFRSaURlcGR5bEhqbVY5WVRXQUVqbEQ5RGRRbkNlbTdBai9tbDU4T24zNjYzOTIyMTRCNXpybVF6Lzl5U0cybUZxRXdqcTVzRmw1dFlKUHc1aE56OGx5WlBVVHNyNUUwRjJDOVZNUG5aY2tXUDcrbWJ3cC9CaU43ZjRrZjd2dEduWkYySkd2aksvc0RYMVJ0Y0ZZNW9QUW5FNGxJQVlWNDlVM0M5U1AwTENZLzlpL1dJRks5T1Jqek05a0cvS0dyQXV3Rm1nZEVwZExhaXFRTnBDVEdaVnVBTzY1YWZrWTFoMzNocnF5TGpaeTkySkszL3R3ZGo5cGFmRmN3ZlhPTm1QUVdsZFBsTWU3amxQMjRKczB2OW04YklKOVRnUzJJdVJ2RTlaVlJhQ3dTSllPdEFmTDVIL1lTNEZmektXS2JlaytHRnVsaGV5S3RETmxCdHJkbXIrS1UraWJIVGRhbHpGVW1NZnh3M2YzNngrM2NRYkpMSXRTaWxXOWN1dlpFTWpLdzk4N2p5a1pSbHNIL1VJK0hsS2ZvMnRMd2VtQkVlQkZ0bXhGMnhtSXRBL2RBSWZRK3JYbm04OGRxdlhhK0dhcE9ZVnQvMndhRmltWEZ4M1RDMk1VaU9pNS9NbCszcmovWVU2SWh4MmhYZ2lEWEZzVWVRa1JBRDZ3RjNTQ1BpMmZsazdYd0tBQTR6Ym9xeW51RUxEMzEyRUo4OGxtREVWT01hMVcvSy9hOHRHeWxaUk1yTW9JTHlvTVF6emJESkhOWnJoSDc3TDlxU0M0MkhWbUtpWjVTMDAxNlVUcDgzZ09oQ3d6OVhJdEs5ZmdYZkszRjVkN25aQ0JVZWtvTHhydXRRYVBIYTE2UmpzYTBnVHJ6eWpxVG5tY0ljcnhnNlg2ZGtLaXVjdWRjMERENVc0cEpQZjB2dURXOHI1L3V3MjRZZk11eEZScEQyb3ZUMm1GWDc5eEg2SmYrTVZkdjJUWXFSNi85NTVRZ1ZQZTNKQ0QvV2pBWWNMQTl0cFhnRmlFamdlMko1bGplSS9pVXpnOTFLUXVIa0lJNG1tSFp4QzNYUU9STEFDNkc3dUZuNUxPbWxuWGtqRmRvTzk3Nm1vTlR4RWxTOEhkeFdvUEFrampvY0RSMTM2bTJsK2Y1dDZ4YWFOZ2RvZE92VHUwcmlldm5oTkFCNzlXTnJWczZFc1Bna2dmYWhGOWdTRnp6QWQrckpTcmF3NU1sbGl0N3ZVUDVZeEE4NDNsVXB1Ni81akFSMFJ2SDRyUlhrU2czbkUrTzVHRnlmZStMMHM1cjNrMDVGeWdoU0ZuS280VFRnczA3cWo0blRMcU9ZajZxYVc5a25KVERrRjVPRk1ZYm1DUCs4SDE2VHk0ODJPanZFUlY2T0Z5dzA0M0w5dzNob0ppNDA4c1IrU0dvMVd2aVhVdThkN3FTK2VoS2pwS3d4ZUN0aHNtMkxCRlNGZWV0eDB4NEFhS1B4dHAzQ3hkV3FDc0xyQjFzL2o1VEFoYzFqTlpzWFdsNnRqby9XRG9ld3h6ZzhUOE5uaFoxbmlVd0wvbmhmeWdMYW5DblJ3YUZHRHlMdytzZlpoeVoxVXRZVHA4VFlCNmRFN1IzVnNLS0g5NUNVeEo4dThOKzl1Mi85SFVOS0hXM3gzdzVHUXJmT1BhZmsydzVxWnE4TWFIVDBlYmVZM3dJc3Azck45bHJwSXNXOWMxd3MzVk5WK0p3TnowTG85K1Y3elpyNkdENTZXZTZnV1ZJdnRtYW01R1BQa1ZBYnI3NHI2U3dodUwrVFJYdFcvMHBneVgxNlZObDQvRUFENTBUblVQdXdyVzZPY1VPMlZsV1hTMGlucTg3MmtrN0dVbFc2by9vekZLcStTaXA2TGNUdFNEZkRyUFRjQ0hoeDc1SDhCZVJvbitLRzJ3Und6ZkRnV2hBTG1pV09NTzZoM3BtMVVDWkVQRWpTY3lrN3RkTHg2V3JkQTJOMVFUUEVOdk5uaENRalc2a2wwNTcvcXY3SXdScnlIclpCQ3dWU2JMTG5GUmlIZFR3azhtbFlpeEZ0MXNsRWNQRDdGVmh0MTNIeXFWZXlENTVIT1hyaDJFbEF4Snlpbkdlb0Z6d0tBOTF6ZnJkTHZEeEpTanptSW1mdlRpc3JlSTI1RURjVmZHc214TFZiZlU4UEdlLzdObVdXS2pYY2RUSjExakFsVklZL0J2L21jeGcvUTEwdkNId0tHMUdXL1hiSnE1bnhEaHlMcWlvcm43V2Q3VkVWTDhVZ1Z6cEhNalErWjhEVWdTdWtpVndXQUtrZVRsVlZlWjd0MURHbkNnSlZJZEJQWkFFSzVmOENEeURObzd0SzQvNURCamRENU1QVjg2VGFFaEdzTFZGUFFTSTY4S2xCWXk4NEZpZXZkVTlnV2g2WFpydWd2dENabWk5dmZkNmRiNlY3Rm1vRWNSSG5HMzZWWkg4TjRhWmFsZHE5elphd3QxdUJGZ3hZWXgrR3MvcVcxandBTmVGeStMQ295bXlNNnpnRzdqOGJHelV5TGh2cmJKa1RZQUVkSUNFYjRrTUt1c0tUOVYzZUl3TUxzamRVZGdpak1jKzdpS3JyK1R4clZXRzBVK1c5NVNHcnhueEdyRTRlYUpGZmd2QWpVTTRTQXk4VWFSd0U5ajZaUUg1cVlBV0d0WEJ5dkRpTFNEZk9EMHlGQTNVQ01LU3lRMzBmeXkxbUlSZzRaY2daSExOSFdsK2M5U2Vpak92Yk9KeG9ReTdsVE4ycjNZOHA2b3Z4dlVZNzRhT1lidVZlenJ5cVhBNlUrZmNwNndTVjlYNS9PWktQMTh0QjU2VWEwZ015eEpJN1h5TlQ3SXJxTjhHc0I5ckwva1A1S01yalh4Z3FLTERhK1Y1T0NINmE1aG1PV2VtTVVzZWE5dlFsOXQ1T2NlNzZQclR5VHY1MEV4T3FuZ0UzUEhQZlNMLy9BSXRQZEI3a0dueVRSaFZVVUZOZEpKMno3UnRrdFp3Z21RemhCRy9HN1FzalptSmZDRTdrNzVFbWRJS0g3eGxubURyTk0vWGJUVDZGemxkY0gvcmNSR3hsUHJ2NHFEU2NxRTdKU21RQUJKV3FSVC9UVWNKU3dvUU0rMWp2RGlndnJqakg4b2VLMmluMVMrL3lPMWo4eEF3cy9UNXUwVm5JdkFQcWFFMWF0TnVOMGN1UmxpTGNIMmowblRMNEpwY1I3dzlReWEwSm9hSGdzT2lBTExDQ3pSa2wxVVVFU3oremUvZ0lYSEd0RHdnWXJLNnBDRktKMXdlYlNEb2c0elRsUGtnWFpxeGxRRGlZTWpoRHB3VHRCVzJXeHRoV2JvdjlkdDJYOVhGTEZtY0YrZUVjMVVhUTc0Z3FaaVpzZGo2M3BIMXFjdjNWeThKWWNpb2dJVktzSjhZeTNKOXcvR2hqV1ZTUUFtclMwQlBPV0srUktWKzBsV3FYZ1lNbklGd3BjWlZEN3pQU3A1NDdpOUhsZmxCOGdWblNUR21tcTFDbE8wODFPVy9VSDExcEVRTWZrRWRERnpqTEMxQ2RvL0JkTDNzN2NYYjhKKytIenoxcmhPVVZaRklQZWhSaVo4Vll1Nis3RXI3ajVQU1p1OWcvR0JkbU56Sm15Q0Q5d2lzd2o5Qlp3K1QzaUJyZzgxcmUzNmloTUxqb1ZMb1djKzYyYTFVLzdxVlg1Q3B2VFZGN3JvY1NBS3d2NGNCVnFabTdsTERTL3FvWHM0Zk1zL1ZRaTZCdFZiTkEzdVN6S3BRZmpIMW8zeDRMcnZrT240MHpobTZoamR1RGdsekpVd0EwUE9hYmdkWEluZHA5ZnpoT28yM1BlK1JrOUdTTFgwZDcxUG9xcnk4TlFEVHpObHNhK0pUTkc5K1VyRWYrbmd4Q2pHRXNEQ2MwYnordWRWUnlIUUkxam1FTzNTK0lPUXljRXE3WHdCNnozd2ZNZmE3M204UFZScCtpT2d0WmZlU0JsMDF4bjAzdk1hUUpreWo3dm5oR0NrbHNDV1ZSVWw0eSs1b05VelE2M0IyZGJqREYzdmlrZC8zUlVNaWZQWW5YNUdsZnVrMkZzVi83UnFqSTl5S1RiRTh3SlkrNzRwN3FYTzgrZElZZ2p0TEQvTjhUSnRSaDA0Tjl0WEpBNEg1OUlrTW1MRWxndnIwUTVPQ2VWZmRBdCs1aGtoNHBRZ2ZSTUhwTDc0WGF0TFFwUGlPeUhScy9PZG1IdEJmOG5PWmN4Vkt6ZEdjbElOMTZsRTdrSitwVk1qc3BPSSs1K1RxTFJPNm0wWnBOWEpvWlJ2OU1QRFJjQWZKVXROWkh5aWcvczJ3d1JlYWtGZ1BQSndDUW11MUkzMC90Y0JiamkrTmE1M2kxVzFOK0Jxb1k3WnhvK1UvTTlYeUo0T2syU1NrQnRvT3J3dWhBWTNhMDNFdTZsOHdGZElHMWNOK2U4aG9wVGtpS0YwOTNLdUgvQmNCMzlyTWlHRExuNlhWaEdLRWFhVC92cWIvbHVmdUFkcEdFeGV2RjErSjlpdGtGaENmeW1Xcjl2R2IzQlRLNGo1OTh6Ukg3K2UrTVU5bWFydVpxYjBwa0d4UkRSRTFDRDRaOExWNHZoZ1BpZGs1dzJCcTgxNmczbkh3MS8vajNKU3R6N05SOUhJV0VMTzhUTW4zUXJQL3pacC8vK0R2OXA0Mjkvb2d2K0dBVFIrbi9VZEYrbnM5eE5rWFpRSlhZNHQ5ak1rSk5VRnlnQXR6bmRYd2pzcyt5V0g5SEFuTFFRZmhBc2tkWlMybDAxSExXdjdMN3VzNXVUSDQwOXBxaXR2ZlNPUWcvYytadDdrODc5UDNLOStXVjY4bjcrM2NaZnVSZC9kRFBQLzAzcm4rZCsvbkJ2V2ZnRGx0OCtMempxSi92eDNDbk5Pd2lYaGhvNzc4Qzk2aUQrMVRCdlJaWWVQK0VIODFMRTB2VndPT3JtQ0xCM2lLekkxeCt2SkVzclBINHVGMFVCNFRKNFgzdURmT0NvM1BZcFllME1GNGJvdWgwRFEvbDQzZnhVRjdZK2RwV3V2VFNmZkIweU8yVVFVRVRJL0x3Q1pFM0J2bmV2SjdjOXpVbFkzSDU4eHprZTZETkZEUUc4bjBXdERONExBWU40bm9nS2F2MWV6T2ZLL3ordDZ0c0NUcCtkaHg0eW1qV3VDSmsxZEVVaWZEUCtIeVM0aVAvVmc5QjJqVG85TDROYmlCdURTNG51dUhXNkgrSkRRbjJKdHFSS0drRVFQRVlFN3V6YXpYSWtjeElBcVVxMWVzYXNaQkVUbEVaWTd5N0pvK1JvVi9Jc2pZOWVJTWtVdnI0MkhjMHhxdHNhdlp2aHoxT0x3U3hNT1R1cXpsaGIwV2JkT3dCSDlFWWl5QmphdHo0MGJVeFRIYmlXeHFKMHVtYTE5cWhQcnV2Y1dKbGJpU1NINDhPTEREcGFIUHN6dnljdDQxWmZUdTEwK3Zqb3g2a09xSzZ2MEsvZ0VQcGhFdk1sL3Z3U3YrQTRIaG0zNkpTUDlJWFR5Q1pEbTRrS3NxRDVheThiMVNhZC92YWl5TzVOL3NEZkVWNlo0cTk1RSt5Zmp4cHFCb0JFVFcyQzd4bDRwSU8yYkRPRERGdXJVUHdFN0VXQzJVcGxxK0FIbUJIdmlyMlBTZ2tSMTIvUnk2NU8wYVp0UVBlWGk5bVRsRi9XajVHUSt2RmtZeWhYc0xUanJCU1A5aHdrNEdQcURQNXJCbjUvbDhiMG1MUkF2UlN6WEhjMjkzYnMzczhFc2RFM20yZXh4aWRXVkI0am9IUitTK2R6NS9XK3YwMEszVHFOMTRDREJ0aDhlV2NzVGJpd1hQc3lnSGRHaWQwUEVkeTZISG0ydi9JVXVWNVJWYXBZbXpHc1g5MG1wbklkTkdjT09xNjREYmM1R1ViWXBEOU03Uys2Y0xZLy9RbWp4RkxQNWN1VEZSbTN2QTVya0Zacm9Gbk8zYmpIRjM1dVUzczhtdkw3VHA5bnlUYzRteW1USjVzTElwN3VtU25Ha08yM2ZhZWh0ejNtbVRTN2ZiVng1clA3eDNIWElqUk5lcS9BM3hDczlKTkIwOGM5UzlCRjJPM2JPdXIwSXRzbEZ4WGdSUGRhYXBCSWk0ZFJwS0d4Vno3aXI2OXQvYmM5cVR4anZ0T3lHT2ZpTEdEaFI0Zll5d0h2MVdkT3BseElWODdUcExCeTNXYzBRUDBQOXM0RzdGQk5PZElUUy90ZXAzbzNoMVRFYTVYRERpaTdmV3RxUnpVRVJlUDJmYnh6N2JIV1dKZGJJT3hPVUpadEl0TlpwVEZSZmo2dm05c1lqUnhRVk8rV1RkaU9oZFBlVEorOFlpclB2b2VMODhsNWlMWU9IZDNiL0lta3ErMVpOMUVsM1Vpa2hmdHV0ZUVZeGYxV3Vqb2Y4UHI0SUNUdTVlelp5WjR0SFFNeGx6VUhMWU8yVk1Pb05NR0wvMjBTNWkybzJvYmZrKzhxcWRSN3h6YlJEYmdVMGxudUlnejRMZWxRNVhTN3hiTHVTUXROUzk1djNaVU9kYVV4L1FkOHF4Q3Q2eGYyRTYyeWIvSHVrTE82UnlvclY4S2dZbDVZTmM3NXkrS3ZlZnJ4WStsYy82NHk5a3ZXUDBhMGJEei9yb2pxK1JXak8wNldlcnVXcU5GVTdyM0hQSWNMV1JxbDhJQ1pzejJMcy9xT20vQ0xuNisrWCtRZjdtR3NwWUNyWm9kL2xwbDZSdzR4Ti95dXE4Z3FWNEI2YUhrMWhWRTFTZklMeFd1NWd2WHFiZkFSWVFwc3BjeEtwMUYvYzhYT1B6a1p2bW9Tdyt2RXFCTGRycTFmcjN3QVB2NU5uTTlpOEYramRBdXhrUDVaNzFjNnVoSzNlbmxuR3ltcjdVc1daS0MxMnFnVWlHOFhYR1E5bXhucXo0R1NJbHliRjllWG1icWoyc0hYK2ExamYwZ1JvT05IUmRSU3JJcTAzVHk4OWVRMUdiVi9CaytkdTQrVjE1emxzK3Z2RVJ2WjRFN1pibnhXVFZqRGpiNG8vazhqbHc0NHBUSXJVR3h4dUp2QmVPK2hldWhPanBGc082bFZKL2FYbkpEYS9iTTBRbDFjTGJYRS9QYnYzRVozdmozaVZyQjVpcmp1cFpUemxudjY3N05ySTlVTllOcWJQZ3AvSFpYUytsSm1rODd3ZWMrN1lPeFREbzJhdzJsM05mRHIzNFZObHZxV0pCa251SzdvU2xaNi9UMTB6dU9vUFpPZW9JazgxTitzTDg0M1dKMlE0WjBmWjNzY3NxQy9KVjJmdWhXaTFqR1VSU0taVjYzN2xmNTNYbm54MTYvdktFWFk4OWFWSjBmdjkxakdkZkcrRzQrc25pd0hlczRoUyt1ZE9yNFJmaEZoRy9GNWdVRzM1UWFVK01jdUxtY2xiNVpXbVIrc0c1VjZuZitQeFl6bHJuRkd4cFphSzhlcXFWbzBOZm1BV29HZlhEaVQvRm5VYld2ekdET1RyOGFrdE9aV2c0Qll2ejVZSDEyWmJmQ2NHdE5rK2REQVpOR1d2SG92K1BJT25ZOVByamc4aC93TFJyVDY5c3VhTVZaNWJOdUswMGxTVnBucVNYMU5PTi84MUZvUDkyclluZGlvbndnT2lBOFdNZjR2YzhsMTVLcUVFRzR5QW0yK1dBTjVCcmZ1MXNxOXN1V1lxZ29hamdPWXQvSkNrMWdDOHdQa0srWEtDdFJYNlRBdGd2cm51QmdOUm1uNkk4bFZEaXBPVkI5a1g2T3hrcDRaS3lkMU02R2o4L3YyVTdrK1lRQkw5NUtiOVBRRU51Y0piMEpsVzNiNXRPYk43bS9aMWoxZXYzODhkN28xNXpnWHNJOUNpa0FHQVZpUjZsa0p2N25iNEFrNDBNMkc4VEo0NDdrTitwdmZIaU9GalNVU1A2UE0rUWZiQXl3S0pDQmF4U1Z4cGl6SHNlWlV5VUJocTU5dkZ3cmt5R29SaUhibzBhcHdlRVplU0x1TmlRK0hBZWtPbmFyRmcwMGRaTlhhUGVvSFBUUlIwRm1FeXFZRXhPVmFhYU84YzB1RlVoN1U0ZS9VeGRCbXRobEJEZ2cyNTdRMzNqMWhBN0hUeFNlVFRTdVZuUFpiZ1cxbm9kd21HMTZhS0JES3hFZXR2N0Q5T2pPMEpocmJKVG5vZStrY0dvREphekZTTzgvZlVOOUp5L2c0WEs1UFVrdzJkZ1BER3BKcUJmaGU3R0ErY2p6ZkUvRUdzTU0rRlY5bmo5SUFoclNmVC9KM1FFNVRFSVl5azVVanNJNlpaY0NQcjZBOEZaVUY0ZzlubnBWbWpYOTBNTFNReXNJUEQwbkZ6cXdDY1NKbUliNW1ZdjJDbWsrQzFNREZrWlF5Q0JxNGMvWWFpOUxKNnhZa0dTL3gyczUvZnJJVzJ2bUcyV3J2MEFQcENkZ0NBOXNuRnZmcGU4dWMwT3dkUnM0Rzk5NzNQR0VCblFCNXFLckNRNm02WC9IN05Jblo3eS8xNjc0L1pYT1ZwN09ldUNSazhKRlM1MTZWSHJuSDFIa0lVSWxUSWxqakhhUXRFdGtKdG9zWXVsNzdjVndqazNnVzFBamFhNnpXZXlIR0xscGszVkhFMlZGelQyeUkvRXZsR1VTejJIOXpZRTFzNG5zS010TXFOeUtOdEwvNTlDcEZKa2k1Rm91NlZYR204dldBVEVQd3JVVk9Mdm9BOGpMdXdPelZCQ2dIQjJDcjVWNk93RVd0SkVLb2tKa2ZjODdoK3NOSFR2TWIwS1ZUcDUyODRRVFB1cG9XdlFWVXdVZW9nWlIza0JNRVNZbzBtZnVrZXdSVlBLaDUrcnpMUWI3SEtqRkZJZ1doajF3M3lOL3FDTm9QSThYRmlVZ0JOVDFoQ0hCc0F6OEw3T3l0OHdRV1VGajkyT05uL0FQeUpGZzhoenVlcW9KZE5qNTdST3JGYmZmdVMvWHhyU1hMVFJnajV1eFpqcGdRWWNlZU1jMndKcmFoUmVTS3BtM1FqSGZxRXhUTEFCMmlwVnVtRThwcWNadjhMWVhRaVBISHNnYjVCTVc4ek01cHZRaXQrbVF4OFhHYVZEY2ZWYkx5TVRsWTh4Y2ZtbS9SU0FUL0gwOVVRb2w1Z0l6N3JFU0RtbnJRNGJVUklCNGlSWE1EUXd4Z2V4MUdndER4S3AySGF5SWtSK0UvYURtQ3R0Tm0yQzZseXRXZGZPVnpENlgyU3BEV2pRRGxNUnZBcDFzeW1XdjRteTFiUENEK0UxRW1Hbk1HV2hOd215Y0puRFYyV3JRTnhPNDV1a0ViMDhBQWZmaXpZS1ZVTHAxNUk0dmJOSzVEeld3Q1NVQURmbUtoZkdTVXFpaTFMMlVzRThyQjdtTHVIdVVKWk94NCtXaWl6SEJKL2h3Ym9hQnpocE5PVnZnRlRmNWNKc0hlZjdMMUhDSTlkT1VVYmIrWXhVSlduNmRZT0x6K1RIaTkxa3pZNWR0TzVjK2dyWDd2MGpFYnN1b09Hbm9JcmVESWcvc0ZNeUcrVHlDTEljQVdkMUlaMVVORnhFOFVpZTEzdWNtNDBVMmZjeEMwdTNXTHZMT3h3dStGN01XVXNIc2R0RlFaN1crbmxmQ0FTaUFLeWg4cm5QM0V5REJ5dnRKYjZLYXg2L0hrTHpUOVN5RXlUTVZNMXpQdE0wTUpZMTREbXNXaDRNZ0QxNUVhOUhkMDBBZGtUWjBFaUc1TkFHdUlCelFKSjBKUjBuYStPQjdsUUE2VUt4TWZpaElRN0dDQ25WejY5NFF2eWtXWFR4cFMyc29EdStzbXJ1MVVkSXhTdkFzekJGRDFjOGM2Wk9vYkE4YkppSkl2dXljZ0lYQlFJWFd3aHlUZ1pEUXhKVFJYZ0V3Uk5BYXdHU1hPMGExREtqZGloTFZOcC90YUUveFloc2d3ZStWcEtFRUI0TGxyYVF5RTg0Z0VpaHhDbmJmb3lPdUpJRVh5MkZJWXcrSmpSdXN5YktsVTJnL3ZoVFNHVHlkdkN2WGhZQmR0QVh0UzJ2N0xrSHRtWGgvOGZseTFkbzhGSS9EMGY4VWJ6VmI1aCtLUmhNR1NBbVIybWhpMFlHL3VqN3dneGNmekNyTXZkaml0VUlwWERYOGFlMkpjRi8zNnFVV0lNd042SnNqYVJHTmorakV0ZUdEY0Z5VFViOFgvTkhTdWNLTUpwN3BkdXh0RDZLdXhWbHl4eHdhZWlDMUZiR0JFU084NGxieXJBdWdZeGRsKzJOOC82QWdXcG8vSWVvQU9jc0czNUlBL2IzQXVTeW9hNTVMN2xsQkxsYVdsRVd2dUNGZDhmOE5mY1RVZ3pKdjZDYkIrNm9oV3dvZGxrOW5HV0ZwQkFPYXo1dUVXNXhCdm1qbkhGZURzYjBtWHdheWozbWRZcTVneHhOZjNIMy90bkNnSHdqU3JwU2dWeExtaVR0dXN6ZFJVRklzbjZMaU1Qakw4MDh2TDF1UWhEYk03YUE0M21JU1hSZXFqU3NreW5JUmNIQ0o5cWVGb3BKZng5dHF5VW9HYlN3SmV4LzBhREUzcGxCUEd0TkJZZ1diZExvbTMrUS9iamRpelIyL0FTL2MvZEgvZDNHN3B5bDFxRFhndE9GdEVxaWR3THF4UFl0ck5FdmVhc1dxM3ZQVVV0cVRldThncG92NGJkT1FSSTJrbmVGdlJOTXJTaHlWZUV1cEsxUG9MRFBNU2ZXTUlKY3MyNjdtR0I4WDlDZWhRQ0YwZ0l5aHBQMTBtYnlNN2x3VzFlNlRHdkhCVjFzZy9VeVRnaEhQR1JxTXlhZWJDNnBiQjFXS05DUXRsYWkxR0d2bXE5elVLYVV6TGFYc1hFQll0SHhtRmJFWjJrSmhSMTY0TGhXVzJUbHAxZGhzR0U3WmdJV1JCT3gzWmN1MkR4Z0grRzgzV1RQY2VLRzBUZ1FLS2lpTk5PbFdndnFORWJucms2ZlZEK0FxUmFtMk9ndVpiMFlXU1RYODhOK2kvRUxTeGJhVVVwUHg0dkpVellnL1dvblNlQTh4VUs2dTdEUEhncHFXcEVlNkQ0Y1hnNXVLOUZJWVZiYTQ3Vi9uYit3eU90ayt6RzhSclM0RUEwb3V3YTA0aUJ5UkxTdm9KQTJGemFvYmJadFhucThHZGJmcUVwNUkyZHBmcGo1OVRDVmlmNitFNzVwNjY1ZmFpWDhnUzIxM1JxQnhUWnFmSFA0Nm5GNk5TZW5PbmV1VCt2Z2JMVWJkVEgyL3QwUkVGWFpKT0VCNkRIdng2TjZnOTk1NkNZclkvQVljbTlnRUxKWFlrclNpKzBGMGdlS0RaZ09DSVlrTFUvK0dPVzVhR2o4bXZMRmd0Rkg1K1hDOGh2QUUzQ3ZIUmZsNG9mTS9Rd2s0eDJBK1IrbnljOWdOdS85VGVtN1hXNFhSbnlSeW1mNTJ6MDljVE9kcitQRzYrUC9WYjRRaVhsd2F1YzVXQjF6M28rSUpqbGJ4SThNeVd0U3pUK2s0c0tWYmhGM3hhK3ZEdHMzTnhYYTg3aWl1K3hSSDljQXBybk9MMmg2dlY1NGlRUlh1T0FqMXM4bkxGSzhnWjcwVGhJUWNXZEYxOS8yeGFKbVQwZWZya05Ea1dicEFRUGRvOTJaOCtIbi9hTGpiT3pCOUFJL2sxMmZQczlIaFVOREoxdTZheDJWeEQzUjZQeXdON0JyTEoyNno2czNRb01wNzZxenp3ZXRyREFCS1NHa2ZXNVB3UzFHdllOVWJLNnVScXhmeVZHTnlGQjBFK091Z01NOGtLd21KbXVwdVJXTzhYa1hYWFFFQ3lSVnc5VXlJcnRDdGNjNG9OcVhxcjdBVVJCbUtuNktoejNlQk45Nkx3SUpyQUdQOW1yLzU5dVRPU3g2MzFzdXlUK1F1akRkNGJlVUZwWjBrSkVFbmpsUCtYL0tyMmtDS2huRU5UZzRCc01UT21NcWxqMldNRkxSVWxWRzBmemRDQmdVdGE5b2RySmZwVmRGb21UaTZhazB0RmpYVGNkcXF2V0JBempZNmhWckg5c2J0M1o5Z24rQVZEcFRjUUltZWZiQjRlZGlyanpyc05pZXZ2ZTRaVDRFVVpXVjNUeEVzSVcrOU1UL1JKb0tmWlpZU1JHZkMxQ3dQRy85cmRNT004cVIvTFVZdnc1Zi9lbVVTb0Q3WVNGdU9vcWNoZFVnMlVlUGQxZUN0RlNLZ3hMU1o3NjRveTRsdlJDSUg2Ym93UHhaV3d4TkZjdGtzTGVpbDQ3cGZldmNCaXBra0JJYzRuZ1pHK2t4R1o3MWE3MktRN1ZhWjZNWk9aa1FKWlhNNmtiL0FjMC9Ya0p4OGR2eWZKY1diSTN6T05FYUVQSVc4R2JrWWpzWmN3eStlTW9LcllqRG12RUVpeEh6a0NTQ1JQUnpoT2ZKWnVMZGNieDE5RUwyM01BOHJualRaWjc4N0ZHTW5rcW5wdXpCNS85MHcxZ3RVU1JhV2NiMGV0YTgxOThWRWVaTVVTZkloeXVjNC9ueXdGUTl1cW43amRxWGgrNXd3ditSSzlYb3VOUGJZZG9FZWxOR28zNEt5eVN3aWdzcmZDZTB2L1BsV1B2UXZRZzhSMEtnSE8xOG1UVlRoaFFybGJFUTBLcC9KeFBkakh5UjdFMVFQdy91dDByK0hEREc3QndaRm05SXFFVVpScHYyV3B6bE1rT2VtZUxjQXQ1Q3NyenNrTEdhVk9BeHl5U3paVi9EMkVZN3lkTlpNZjhlOFZoSGNLR0hBV05zemYxRU9xOGZOc3Rpak1ZNEpYeUFUd1RkbmNGRnFjTkRmRG8rbVdGdnhKSnBjNHNFWnRqWHlCZG9GY3hiVW1uaUNvS3E1anlkVUhOallKeE1xTjFLellWNjJNdWdjRUxWaFMzQm5kK1RMTE9oN2R3cy96U1hXenhFYjROajRhRnVuNXg0a0RXTEs1VFVGL3lDWEIvY1pZdkk5a1BnVnNHMmpTaHRYa3hmZ1QreHpqSm9mWHFQRW5JWElRMWxuSWRtVnpCT005MEVYdkpVVzZhMG5aLzdYakpHbDhUb08zSC9mZHhueG1UTktCWnhua3BYTFZnTFhDWnl3R1QzWXlTNzV3L1BBSDVJL2pNdVJzcGVqOHhaT2JVOWtSRWJSQStrcWptS1JGYUtHV0FtRlFzcEMrUUxiS1BmMFJhSzNPWHZCU1dxbzQ2cDcwd3MvZVpwdTZqQ3RaVWdReTZyNHRITVBVZEFnV0dHVVlOYnV2LzFhNksrTVZGc2QzVDE4MytUOGNhcFNvNm0wK1NoNTdmRWVHLzk1ZHlrR0pCUU1qMDlEU1cyYlkwbVVvbkR5OWE4dHJMbm5MNUI1TFczTmw4ckpaTnlzTzhaYis4MHpYeHFVR0ZwdWQzUXp3YjdiZis4bXE2eDBUQW5KVTlwRFFSOVlRbVpobG5hMnh1eEp0MGFDTy9mMVNVOGdibE9yYkl5TXN4VGxWVVc2OVZKUHpZVTJIbFJYY3FFMmxMTHhuT2JadXoydFQ5Q2l2ZlRBVVlmbXpKbHQvbE9QZ3NSNlZONjQveFFkNEpsay9SVjdVS1Z2Mkd4L0FXc21UQXVDV0toZHdDKzRIbUtFS1laaDJYaXM0S3NVUjFCZU9iczFjMTN3cUZSbm9jZG11aGVhVFYzMGd2VlhaY291ekhLSzV6d3JONTJqWEpFdVg2ZEd4M0JDcFYvKys0ZjNoeWFXL2NRSkxGS3Fhc2pzTXVPM0IzV2xNcTJneVlmZEsxZTdMMnBPL3RSeWUybXd6d1pQZmRVTXJsNXdkTHFkZDJLdi93VnRucHlXWWhkNDlMNnJzT1YrOEhYUHJXSDJLdXA4OWwydHo2YmY4MGlZU2QrVjRMUk9TT0hlYW12ZXhSNTI0cTRyNDNyVG10RnpRdkFycHZXZkxZRlpyYkZzcEJzWE5VcXFlbmp4Tk5zRlhhdFp2bEloazd0ZVVQZksrWUwzMkY4TWNUbmp2MEJaTnBwYit2c2hvQ3J0TFhqSVdxM0VKWHBWWElsRzZaTkwwZGg2cUVtMldNd0RqRDNMZk9ma0doMS9jelljLzBxaGlEMm96Tm5INDg4Mk1WVnQzSmJWRmtid293TkNPM0tMNUlvWVc1d2xWZUdDVmlPdXYxc3ZaeDdGYnp4S3pBNHpHcUJsUlJhUldDb2JYYVZxNHlZQ1diWmY4ZWlKd3QzT1krTUZpU0plbmdjRlAydDBKTWZ6T2lKN2NFQ3ZweDduZWcxUmM1eCs3bXlQSk9YdDJGb2hWUnlYdEQrL3JEb1RPeUdZSW5KZWxaTWpvbGVjVkhVaFVOcXZkWldnMkoydDBqUG1pTEZlUkQvOGZPVDRvK05HSUxiK1R1ZkNvOWNlQkJtM0pMVm4rTU8yNjc1bjdxaUVYLzZXKzE4OGNZZzNabjVOU1RqZ09LZldGU0FBTmE2cmFDeFNvVlU4NTFvSkxZMTFXSW9ZSzBkdTBlYzVFNHRDbkFQb0toNzFyaVRzalZJcDNnS3ZCYkVZUWlOWXJtSDIyb0xRV0EyQWR3TW5JRDZQWDliNThkUjJRS280cWFnMUQxWitML0Z3RUtUUjdvc09aUFdFQ1BKSUhRcVBVc001aS9DSDVZdXBWUGZGQTVwSFVCY3Nlc2g4ZU81WWh5V25hVlJQWm4vQm1kWFZ1bVpXUHhNUDVlMjh6bTJ1cUhnRm9UOUN5bUhZTk5yenJyamxYWk0wNkhuekR4WU5sSTViL1Fvc3hMbW1ycURGcW1vZ1FkcWswV0xrVWNlb0F2UXhIZ2tJeXZXVTY5QlBGcjI0VkI2K2x4NzVSbmE2ZEd0cm1PeERudkJvanZpMS80ZEhqVmVnOG93b2ZQZTFjT254VTFpb2gwMTZzL1Z1ZHY5bWhWOWYzNUF0K1NoMjhoMWJwcDh4aHIwOSt2ZjQ3RWx4M01zNmh5cDZRdkIzdDB2bkxiT2h3bzY2MGNwN0swdnZlcGFiSzdZSmZ4RVdXZnJDMll6SmZZT2p5Z1B3ZndkLzFhbVRxYTBoWjV1ZWViaFdZVk11YlJUd0lqaiswT3Ewb2hVM3pmUmZ1TDhndDU5WHNIZHdLdHhUUVE0WTJxejZnaXN4bm0yVWRsbXBFa2dPc1p6N2lFazZRT3Q4QnVQd3IrTlIwMUxUcVhtSm8xQzc2bzFOMjc0dHdKdmwrSTA2OVRpTHBlbksvbWlSeGh5WThqdllWNlcxV3VTd2hIOXE3a3V3bkpNdG03SVdjcXM3SHNueUhTcVdYTFNwWXRaR2FSMVYzdDBnYXVuaW5GUFpHdFdza0Y2NXJ0dGk0OFVWOXVWOUtNOGtmRFlzMHBnQjAwUytUbHpUWFY2UDhteHExNWI5RW44c3ozaldTc3pjaWZaYS9OdXVmUE5uTlRiMDMxcHB0dDArc1JTSC83VUc4cHpic2d0dDNPRzN1dDdCOUp6RE10Mm1UWnV5Uk5JVjhENTRUdVRycE5jSHRnbU1sWUplaVk5WFM4M05ZSmljalJqdEpTZjlCWkxzUXY2MjlRZERzS1FoVEs1Q25YaHBrN3ZNTmtIelBobTBFeFcvVkNHQXBIZlB5QmFndFpRVFFtUEh4N2c1SVhYc3JRRFB6SVZodjJMQjZJaDEzOGlTRHd3MUpOSHJEdnpVeHZwNzNNc1FCVmhXOEViclJlYVZVY0xCMVIzUFVYeWFZRzRIcEpVY0xWeE1nRHhjUGtWUlFwTDdWVEFHYWJEemJLY3ZnMTJ0NVA4VFNHUWtyai9nT3JwbmJpREh3bHVBNzN4Ylh0cy9MN3U0NjhjUldTV1J0Z1R3bFFuQTQ3RUtnME9pWkRnRnhBS1FRVWNzYkdvbUlUZ2VYVUFBeUtlMDNlQTdNcDRnbnlLUW1tMExYSnRFazZkZGtzTUpDdXhEbW1Iem1WaE8rWGFOMkE1NE1JaDNuaXc1Q0Y3UHdpWEZacm5BOHdPZGVITHZ2aGRvcUlERzlQREk3VW5XV0hxNTI2VDh5Nml4SlBoa3VWS1pub1VydU9wVWdPT3AzaUlLQmprK3lpMXZIbzVjSXRIWGIxUElLekdhWmxSUzBnNWQzTVYycEQ4RlFkR1lMWjczYWFlL2VFSVVlUE1jNE5GejhwSVVmTENyckY0alZXSDVnUW5lTjNTOHZBTkJtVVhyRWNLR242aElVTjk1eTF2cHN2THdiR3B6VjlMMFpLVGFuNlREWE0wNTIzNnVMSmNJRU1LVkF4S05UMEs4V2xqdXdObnkzQk5RUmZ6b3ZBODViZUk5enIxQUdOWW5ZQ1ZrUjFhR25nV1VSVXJncVIrZ1JyUWh4VzgxbDNDSGV2anZHRVB6UE1UeGRzSWZCOWRmR1JiWlUwY2cvMW1jdWJ0RUNYNHR2YWVkbU5BdlR4Q0p0YzJRYW9VYWxHZkVOQ0dLN0lTL084Q1JwZE9WY2E4RVdDUnd2MnNTV0U4Q0pQVzVQQ3VnakNYUGQzaDZVNjBjUEQrYmRodFhadVlCNnN0Y292ZUU3U201TU0yeXZmVUhYRlNXN0t6TG1pNy9FZUVXTDB3cWNPSDlNT1NLamhDSEhtdytKR0xjWUUvN1NCWlFDUmdnb3gwWlpUQXhybHpOTlhZWEw1Zk5JamtkVDRZTXFWVXo2cDhZRHQwNDl2NE9YR2RnM3FUcnRMQlVYT1pmN2FoUGxaQVkvTys3U3AwYnZHU0hkeVE4QjFMT3NwbHFNYjlTZThWQUU3Z0lkU1p2eGJSU3JmbCtMazVRYXFpNVFKY2Vxaml0ZEVyY0hYZy8zTXJ5bGpQU0lBTWFhbG9GbTFjVndCSjhETm1rRHFvR1JPU0hGZXRyZ2pRNUNhaHVLa2RINXBSUGlnTXJnVHRsRkk4dWZKUEpTVWxHZ1RqYkJTdnBSYzB6eXBpVW42VTVLWnFjUm95cnR6aG1KNy9jYWVaa21WUndKUWVMT0c4TFk2dlA1Q2hwS2hjOEpzMEVsK242RlhxYng5SXRkdEx0WVA5MmtLZmFUTHRDaThTdExaZEVOSmE5RXgxbk9vejFrUTdxeG9pWkZLUnlMZjRPNENIUlQwVC8wVzlGOGVwTktWb2V5eFVYaHkzc1FNTXNKalFKRXlNT2ptT2hNRmdPbW1sc2NWNGVGaTFDbGRVOTJ5andsZWlyRUtQVzNiUEF1RWhSWlY3SnNLVjNMcjVjRVRBaUZ1WDVOdzVVbEY3ZDJIWjk2Qmgwc2dGSUw1S0dhS1NvVllWbHZkS3BaSlZQNStOWjd4REVrUWhtRGdzREtjaWF6SkNYSjZaTjJCM0ZZMmY2Vlp5R2wvdDRhdW5HSUFrL0JIYVMraStTcGRSZm5CL09rdE92eWppbldOZk05S3NyNld3dENhMWhDbWVSSTZpY3BGTTRvOHF1Q0xzaWtVMHRNb1pJLzlFcVhSTXBLR2FXem9mbDRuUXVWUW0xN2Q1ZlU1cVhDUWVDRHFWYUw5WEo5cUowOG4zRzNFRlpTMjhTSEViM2NkUkJkdE8wWWNUemlsM1Frbk5LRWUvc21RMWZUYjBYYnB5TkI1eEFldUlsZis1S1dsRVkwRHFKYnNuekpsUXhKUE9WeUhpS014NVh1OUZjRXYxRmJnNkZobTR0K0p5eTVKQzFXM1lPOGRZTHNPMFBYUGJ4b2RCZ3R0VGJIM3J0OUNwMWxKSWsycjNPMVpxdTk0ZVJibkl6MmY1MGxXb2xZenVLc2o0UE1vazRhYkhMTzhOQUM4ODRoaVh4NUZ5NXBXS08wYldMN3VFR1hhSkN0em5oUDY3U2xRNHhqV0lmZ3E2RXBaMjhRTXR1Wks3SkMwUkdibDluQTRYdEZMdWcvTkxNb0gxcEd0OUlvbkFKcWNFREx5SDZURFJPY2JzbUdQYUdJeE1vNDFJVUFuUVZQTVBHQnlwNG1PbWg5WlFNa0JBY2tzVUs1NUxzWmo3RTV6NVh1Wm95V0NLdTZuSG1EcTIyeEkvOVo4WWR4Snk0a1dwRDE2akxWcnB3R0xXZnlPRDBXZCtjQnpGQnhWYUd2N1M1azlxd2gvNXQvTFFFWHNScUkzUTlSbTNRSW9hWlc5R2xzRGFLT1V5eWt5V3VoTk9wclNFaTBzMUc0cmdvaVgxVjc0M0VFTHRpK3BKdTVvZzZYMGc2b1R5blVxbGhIOWs2ZXp5UmkwNU5HWkh6MG52cDNIT0pyN2VickFVRnJEamJrRkJPYkV2ZFFXa2tVYkwwcEV2TVU0Nlg1OHZGOWo5RjNqNmtweWV0TlVCSXRyRXViVzladk1QTTRxTnFMbHNTQkpxT0gzWGJOd3YvY1hEWE54TjhpRkx6VWh0ZWlzWVkrUmxIWU91UDI5L0NiK0wreHYrMzVSdjd4dWRuWjZvaEs0Y01QZkNHOEtJN2RObWpOay9INGU4NHBPeG4vc1pISzlwc2Z2ajhuY0E4cUp6N084eHFieEVTRGl2R0pPWnpGN281UEpMUTdnMzRxQVdveXVBK3gzYnRVOThMVDZaeUd5Y2VJWGpycW9iMkNBVnFsNFZPVFFQVVFZdkhWL2c0ekF1Q1pHdllRQnRmMHdtZDVsaWxydnVFbjFCWExueTAxQjRoNFNNRGxZc25OcG05ZDdtOWg1Nzh1ZnBlZjlaNFdwbHFXUXZxbzUyZnlVQTdKMjRlWkQ1YXY2U3lHSVY5a3BtSE5xeXZkZnpjcEVNdzk3QnZrblYyZnErTUZIdW45QlQzTHNmOHBienZpc1dpSVF2WWtuZys4VnhrMVYrZGxpMXU1NmtZNTBMUmphUGRvdHZUNUJ3cXR3eUYrZW1vL3o5SjN5VlVWR2ZLcnhRdEpNT0FRV29RaWkvNGRwOXdneWJTYTVta3VjbVJMdEVRWi9wejB0TC9OVmNnV0FkOTVuRVEzVGc2dE5idXluM0llcHo2NUwzaHVNVVVCbnRsbFd1dTREYnRPRlNNU2JwSUxWNGZ5NndsTTBTT3ZpNkNwTGg4MWMxTHJlSXZLZDYxdUVXQmNEdzFsVUJVVzFJMForbS9QYVJsWCtQUS9veGcwWWU2S1VpSWlURjRBRE5rNTlZZHB0NS9ya3htcTl0VjVLY3AvZVFMVVZWbUJ6UU5WdXl0UUNQNkV6ZDBHOGVMeFd5SHBtWldKM2JBemtXVHRnNGxabHc0MlNRZXpFbWlVUGFKVXVSL3FrbFZBLzg3UzRBckZDcEFMZFkzUVJkVXczRzNYYldVcDZhcTl6MHpVaXpjUGE3MzUxcDlKWE9aeWZkWkJGbnF0OTBWelFuZFhCL213ZjhMQzlTVGo1a2VuVnBOdXFPUVFQM21JUkpqN2VWMjFGeEc4VkF4S3JFbjNjK1hmbVo4MDBFUGI5LzVsSWxpanNjVWJCNmRhMFJRYU1vb2swenVnMUcwdEtpL0pCQzRydzcvRDNtNEFSekFrek1jVnJEY1QyU3lGdFVkV0FzRmxzUERGcVYzTitFanlYYW9FZVB3cm9hWkNpTHFFemI4TVcrUE5FOVRtVEMwMUV6V2xpNTFQelp2VXFrbXl1Uk9VK1Y2aWsrTGUvOXFUNm53elV6Zjl0UDY4dFllaTBZYURHeDZrQWQ3am4xY0txT0N1WWJpRUxIOXpZcWNjNE1uUkpqa2VHaXFhR3dMSW1oeWVLcyt4S0pNQmxPSjA1b3c5Z0dDS1oxVnBuTUtvU0NUYk1TK1grMjN5MDQyek9iNU10Y1kvNm9CZUFvMVZ5ODlPVHlocGF2RlA3OGpYQ2NGSDB0N0d4MjRoTUVPbTJnc0VmR2FiVnBRZ3ZGcWJRS01za25GUlJtdVBIY1p1MFN1L1dNRnBoWnZCMnIvRUdiRzcycnBHR2hvM2grTXN6MHVHeko3aE5LMnVxUWlFMXFtbjB6Z2FjS1lZWkJDcXN4VitzamJwb1ZkU2lsVy9iOTRuMnhOYjY0OFZtTklvaXpxRVdoQm5zZW4rZDBrYkNQbVJJdGZXcVNCZU9kOVduZTNjNmJjZDZ1dlhPSjZXZGlTc3VYcTBuZGhxclE0UW9XVWpDall0WjBFQWhuU09QMW00NHhrZjBPN2pYZ2hyelNKV3hQNGEvdDcyalUyOVZ1MnJ2dTRuN0hmSGtrbVFPTUdTUytOUGVMR081STczbUMyQjcrbE1pQlFRWlJNOS85bGlMSWZvd3VwVUZBYlBCYlIrbHhETTZNOFB0Z2gxcGFKcTVSdnM3eUV1TFF2LzdkMW9VMndvRlNiM0ZNUFdRT0tNdUN1SjdwRERqcEljbHVzNVRlRW9NQnkyWWRWQjRmeG1lc2FDZU1Oc0VnVEhLUzVXRFNHeU5VT29FcGNDMk9GV3RJUmYwdzI3Y2szNC9EanhSVFZJY2M5K2txWkU2aU1TaVZEc2lLZFAvWHo1WGZFaG0vc0JoTzUwcDFydkpEbGt5eXh1SjlTUGdzN1llVUpCalhkZUFrRStQOU9RSm02U1pubjFzdmNkdUk3OGRZbWJrRTJtdHppUHJjalZpc1hHNzhzcEx2YlphU0Z4L1Jrczl6UDRMS24wQ2R6LzNKc2V0a1QwNkE4Zi95Q2dNTzZNYjFIbWUwSko3YjJ3WnoxcWxlcVR1S0JHb2toUFZVWjBkVnUrdG5RWU5FWTFmbWtaU3o2K0VHWjVFekw3NjU3bXJlWkdSM2pVZmFFazQ1OFBEbmlCenNTbUJLaERSemZYYW1lcnlKdjkvRDVtNkhJcVowUitvdUNFNTREenA0SUp1dUQxZTREYzVpK1BwU09SSmZHMjN1VmdxaXhBTUR2Y2hNUjBuWmRINWJyY2xZd1JvSlJXdi9ybHhHUkk1ZmZENU5QR21JRHQ3dkRFMTQzNHBZZFZaSUZoODlCczk0SEdHSmJUd3JOOFQ2bGgxSFpGVE9CNGxXeldqNkVWcXhTTXZDMC9saldCUTNGMmtjL21PMmI2dFdvblQySkVxRXdGdHM4cnoyaCtvV05kczljZVIyY2I3elp2SlREcHBIYUVoSzVhdldxc3NlV2EyRHQ1QkJoYWJkV1NrdFM4MG9NUXJMNFR2QU05YjVITW15RG5PK09ra2JNWGZVSkc3ZVhxVElHNmxxU09FYnFWUitxWWRQN3VXYjU3V0VKcXp5aDQxMUdBVnNEaW5QczdLdlVlWEl0bGNNZE9VV3pYQkg2enNjeW1WMUxMVkN0YzhJZVBvanpYSEY5bTViNXpHd0JSZHpjeVVKa2l1OTM4QXBtQWF5UmRKclgxUG1WZ3VXVXZ0MlRoUTYyY3pJdFR5V0pNVzJBbi9oZERmTUs3U2lGUWxHSWRBYmx0SHozeWNvaDdqOVY3R3hOV0JwYnRjU2RxbTRYeFJ3VGF3YzNjYloreGZTdjlxUWZFa0RLZlpUd0NrcVdHSS91cjI1MEl0WGxNbGg2dlVOV0VZSWc5QTNHemJnbWJxdlROOGpzMllNbzg3Q1U1eTZuWjRkYkpMRFFKajlmYzd5TTd0WnpKRFpGdHFPY1U4K21aallscTRWbWlmSTIzaUhiMVpvVDlFK2tUMmRvbG5QMUFmaU9rdDdQUUNTeWtCaVh5NW12NjM3SWVnV1NLajlJS3JZWmY0THU5K0k3dWIrbWtSZGx2WXplaGgvamFKOW43SFVINWIySWJnZU5ka1k3d3gxeVZ6eFM3cGJ2a3k2K25tVlV0UmxsRUZmd2VVUTAvbkcwMTdXb1VZU3hzK2oyQjRGVi9GNjJFdEhsTVdaWFlyakdIcHRobk5iMXg2NkxLWjBRZTkySU5XSGRmUi92cXAwMndNUzhyMUc0ZEpxSG9rOEttUTc5NDdHMTNhNFlYYnNHZ0hjQnZSdVZ1MWVBaTQvQTUrWml4bWRTWE03M0x1cEIvTEg3Tzl5eExUVlhKVHlCYkkxUzQ5VElST3JmVkNPYi9jelo5cE00SnNaeDhrVXo4ZFFHdjdnVVdLeFh2VEg3UU0vM0oyT3VYWGdjaVVocVkrY2d0YU9saVFRVk9ZdGhCTFYzeHBFU1pUM3JtZkVZTlp4bXBCYmIyNENSYW84NnBybitpOVROT2g4VnhSSkdYSmZYSEFUSkhzMVQ1dHhnYy9vcFlyWThYamxHUVFiUmNveElCY25Wc01qbVUxeW1tSVVMNGR2aUpYbmRNQUowWWV0K2M3TzUyL3A5OHl0bG1Bc0dCYVRBbU1oaW1BbnZwMVRXTkdNOUJwdWl0R2ordDgxMENVMlVob3JyalBLR3RUaFZDOFdhWHcwNFdGblQ1ZlRqcW1QeXJRMHROM0NrTHNjdFZ5MnhyMFpXZ2lXVloxT3JsRmpqeEpZc09pWnYyY0FvT3ZFKzdzWTBJL1R3V2NacU1veUlLTk9mdHdQN3crK1JmZzY3bGpmb3ZLWWE1MGlmM2Z6RS84YVBZVmV5L05xMzUrbkgyc0xQaC9mUDVUc3lsU0tHT1o0azY5ZDJQbkg0MytrcSsrc1JYSFFxR0FyV2R3aHgraHB3UUM2SmdUMnV4ZWhZVTRaYnc3b05iNi9ITGlrUHlKUk9HSzJvdXlyK3Z6c2VFU3A5RzUwVDRBeUZyU3FPUTBycm9DWVA0c01ERkJySG4zNDJFeVpUTWxTeWs0N3JIU3E4OVk5L25JM3pHNWxYMTZaNWx4cGhndUxPY1pVbmRMOHdOY3JreWpIODJqcWc4Qm84T1lreW5yeFp2YkZubzVsVVMzT1ByOEtvM21YOU5vUlBkWU9LS2pEMDdidmdGZ3BaL1JGK1l6a1d2Si9Icy90VWJmZUd6R1dMeE5BamZEekhITVZTRHdCNVNhYlFMc0laSGlCcDQzRmpHa2FpZW5Zb0RkMThodTJCR3dPSzdVM283MEsvV1kva3V1S2RtZHJ5a0lCVWRHMm12RTkxTDFKdFRiaDIwbU9MYmsxdkNBYW11N3V0bFhlR1Uyb29WaWtiVS9hY3RjZ21zQzFGS2sycW1qM0dXZUlXYmo0dEdJeEU3QkxjQldVdnZjbmQvbFl4c01WNEY5MTdmV2VGQi9YYklOTjNxR3ZJeVRwQ2FsejFsVmV3ZElHcWVBUy9nQjhNaStzQStCcURpWDNWR0QyZVV1blRSYlNZK0F1RHk0RTNReDNoQWh3blNYWCtCMHp1ajNlUTFtaVM4VnV4MnovbDYvQmtXdGpLR1U3MmFKa09DV2hHY1NmMytrRmtrQjE1dkdPc1FyU2RGcjZxVGowZ0JZaU9sbkJPNDExNzBnT1dIU1VvQlZSVTJKandwcFlkaElGRGZ1N3RJUkhjY1NOTTVLWk9GRFB6MFRHTUFqenpFcGVMd1RXcCtrbjIwMWtVNk5qYmlNUUp4ODMrTFgxZTF0WjEwa3VDaEpaL1hCVVExZHdhQkhqVERKRHFPeW1wRWs4WDJNM1Z0VncyMUprc0NoQTh3MXRUZWZPM1JKMUZNYnFaMDFiSEhrdWREQi9PaExmZTdQNUdPSGFJMjhaWEtUTXVxbzBoTFdRNEhhYkJzR0c3TmJQMVJpWHRFVHowNzRlcjZ3L09lckpXRXFqbWtxMnk1MXExQlZJK0pVdWRuVmEzb2dCcHpkaEZFN2ZDN2t5YnJBdDJaNlJxRGpBVEFVRVllWUs0NVdNdXBCS1FSdFFsVSt1TnNqbnpqNlptR3JlekErQVNyV3hRNkxNa0hSWHFYd05xN2Z0djI4ZFV4L1pTSmNpRFhQMlNXSnNXYU4wRmpQWDlZa282TG9iWjdhWVcvSWRVa3RJOWFwVEx5SFM4RHlXUHl1b1p5eE4xVEsvdnRmeGszSHdXaDZKY3paQzhGdG4wYklKYXkyZytuNXdkN2xtOXJFc0tPK3N2cVZtaStjMWo4OGhTQ3hienJnNCtIRVAwTnQxL0I2WVcxWFZtMDlUMUNwQUtqYzluMThoanFzYUZHZGZ5dmExWkcwWHUzaXA2TjZKR3B5VFNxWTVoNEJPbHBMUGFPbnl3NDVQZFhUTitEdEFLZzdETHJMRlRuV3Vzb1NCSGszczBkN1lvdUpIcTg1L1IwOVRmYzM3RU5YWkY0OGVBWUxucTlHTGlvTmN3RFpyQzZGVzZnb2RCOEpucVlVUHZuMHBXTGZRejBsTTBZeThNeWJnbjg0RHMzUTliRFAxMGJMeU9WK3F6eGE0UmQ5RGh1N2NqdThtTWFPTlhLM1VxbUJROXFJZzdldEl3RXFNL2tFQ2svRHpqYTRCczF4UitRL3RDYmM4SUtyU0dzVGRKSjB2Z2U3SUcyMFc2ODd1Vm1LNmljV1E2Y0QzbHdGemdOTUd0RnZPNXF5SmVLZmxHTEFBY1FaT3JreFZ3eTNjV3ZxbEdwdmptZjlRZTZBcDIwTVBiVjkyRFBWME9oRk00a3o4WXIwZmZDMnpMV1NRMWtxWTZRZFFydHRSM2toMVlMdFFkMWtDRXY1aFZvUElSV2w1RVJjVVR0dEJJcldwNlhzNUVoaDVPVVV3STVhRUJ2dWlEbVVvRU5tblZ3MUZvaENyYlJwMUExRStYU2xXVk9UaTdBRFcrNU9oYjl6MXZLNHF4NVI1bFBkR0NQQkpaMDBtQytTc3A4VlViZ3BHQXZYV011V1FRUmJDcUk2UnIyanR4Wnh0ZlA3Vy84b256K3l6MEdzNzZMYVQ1SFg5ZWN5aVpDQi9aUi9nRnRNeFBzRHdvaG9lQ1J0aXVMeEUxR00xdlVFVWdCdjg2K2VlaEw1OC9QNTZRRkdRL01xT2UvdkM3Nkw2M2p6bWVheDRleGQvT0tUVXZrWGcrZk9KVUh5Y2g5eHQvOWdvSk1yYXBTZ3ZYcmo4Kzh2ay9OODBmMjJTZXdqNmN5R3F0MUI2bXp0b2VrbFZISHJhb3VodkhKYUcvT3VCejZESEtNcEZtUVVMVTFiUldseVlFMFJQWFlZa1V5Y0llbU43VEx0Z05DSlg2QnFkeXhES2tlZ083bkpLNXhRN09WWURaVE1mOWJWSGlkdGs2RFFYOUV0K1Y5TTdlc2dic1lCZEVlVXBzQjBYdncya2Q5K3JJN1YrbTQ3dStPL3RxN213NzI2MkhVMVdsUzl1RnpzVjZKeElITm1VQ3kwUVM5ZTA3N0pHUkZiRzY1ejMvZE9LQi9aayt5RGRLcFVtZFhqbi9hUzNONW52NGZLN2JNSEhtUGxIZDRFMitpVGJWNXJwelNjUm54azZLQVJ1RFRKOFExTHBLMm1QOGdqMUVidUo5Ukl5WStFV0s0aENpSURCQVMxVG0ySUVYQUZmZ0tQZ2RMOU82bUFhMDZ3akNjVUFMNkVzeFBRV085Vk5lZ0JQbS8wR2drWmJEeEN5bnh1algvOTJ2bUdjalpSTUFZNDVwdWFrMnNGTENMU3dYcEVzeXk1Zm5GMGpHSkJobStmTlNIS0tVVWZ5KzI3NkE3L2ZlTE9GeHhVdUhSTkpJMk9zZW54eXZmOERBR09iVDYwcGZUVGxoRWc5dS9LS2toSnFtNVUxLytCRWNTa3BGREE1WGVDcXh3WG1QYWMxamN1WjNKV1ErcDBOZFd6Yi81djFadkY4R3RNVEZGRWRRanBMTzBid1BiMEJITlduaXAzbGlEWEkyZlhmMDVqanZmSjBOcGpMQ1VnZlRoOUNNRllWRktFZDRaL09HLzJDK040MzVtbksrOXQxZ3ZDaVZjYWFIN3JLNCtQakN2cFZOaXordDJReXFIMU84eDNKS1pWbDZRK0xwL1hLOHdNalZNc2xPcTlGZFN3NUZ0VXMvQ3B0WEg5UFcrd2JXSGdyVjE3UjVqVFZPdEd0S0Z1M25iODBUK0UwdHY5UWt6VzNKMmRiYXcvOGRkQUtaMHB4SWFFcUxqbFByamkzVmdKM0d2ZEZ2bHFEODA3NXdveGg0ZlZ0MEpaRTBLVkZzQXZxaGUwZHFOOWIzNWp0U3BuWU1Ya1UrdlpxK0lBSGFkM0lIYzJzL0xZcm5EMWFuZkc0NklGaU1JcjlvTmJaRFd2d3RocVlOcU9pZ2FLZC9YbExVNFhIZmsvUFhJalBzTHkvOS9rQXRRKy93S0graEkvSVJPV2o1RlB2VFpBVDlmN2o0WlhReUc0TTBUdWpNQUZYWWtLdkVIdjF4aHlTZWtnWEdHcU54V2VXS2xmOGREQWxMdUIxY2IvcU9EK3JrN2Ntd3QrMXlLcGs5Y3VkcUJhblRpNnpUYlhSdFY4cXlsTnRqeU9WS3kxSFR6MEdXOXJqdDZzU2pBWmNUNVIrS2R0eVliMHp5cUc5cFNMdUN3NVdCd0FuN2ZqQmpLTExveExYTUkrNTJMOWNMd0lSMkI2T2xsSlpMSEo4dkR4bVdkdEYrUUpubXQxcnNIUElXWTIwbGZ0azhmWWVQa0FJZzZIZ241MzJRb0lwZWdNeGlXZ0FPZmU1L1U0NEFQUjhBYzBOZVpyVmgzZ0VoczEyVyt0VlNpV2lVUWVrZi9ZQkVDVXk1ZmRZYkEwOGRkN1Z6UEFQOWFpVmNJQjlrNnRZN1dkSjF3TlYrYkhleWROdG1DNkc1SUN0RkMxWndtSlUvajhoZjBJOFRSVktTaXo1b1lJYTkzRXBVSTc4WDhHWUlBWmFieDQ3L244TERBQUowbk50UDFycFJPcHJxS01CUmVjU2hjYTZxWHVUU0kzalpCTE9CM1ZwMzgxQjVyQ0doalN2aC9OU1ZrWXAycUlkUC9CZz1cIjtcbiIsICJ2YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJyk7XG5cbi8qKlxuICogVGhlIG5vcm1hbCBkaWN0aW9uYXJ5LWRhdGEuanMgaXMgcXVpdGUgbGFyZ2UsIHdoaWNoIG1ha2VzIGl0IFxuICogdW5zdWl0YWJsZSBmb3IgYnJvd3NlciB1c2FnZS4gSW4gb3JkZXIgdG8gbWFrZSBpdCBzbWFsbGVyLCBcbiAqIHdlIHJlYWQgZGljdGlvbmFyeS5iaW4sIHdoaWNoIGlzIGEgY29tcHJlc3NlZCB2ZXJzaW9uIG9mXG4gKiB0aGUgZGljdGlvbmFyeSwgYW5kIG9uIGluaXRpYWwgbG9hZCwgQnJvdGxpIGRlY29tcHJlc3NlcyBcbiAqIGl0J3Mgb3duIGRpY3Rpb25hcnkuIFx1RDgzRFx1REUxQ1xuICovXG5leHBvcnRzLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIEJyb3RsaURlY29tcHJlc3NCdWZmZXIgPSByZXF1aXJlKCcuL2RlY29kZScpLkJyb3RsaURlY29tcHJlc3NCdWZmZXI7XG4gIHZhciBjb21wcmVzc2VkID0gYmFzZTY0LnRvQnl0ZUFycmF5KHJlcXVpcmUoJy4vZGljdGlvbmFyeS5iaW4uanMnKSk7XG4gIHJldHVybiBCcm90bGlEZWNvbXByZXNzQnVmZmVyKGNvbXByZXNzZWQpO1xufTtcbiIsICIvKiBDb3B5cmlnaHQgMjAxMyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4gICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4gICBDb2xsZWN0aW9uIG9mIHN0YXRpYyBkaWN0aW9uYXJ5IHdvcmRzLlxuKi9cblxudmFyIGRhdGEgPSByZXF1aXJlKCcuL2RpY3Rpb25hcnktZGF0YScpO1xuZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24oKSB7XG4gIGV4cG9ydHMuZGljdGlvbmFyeSA9IGRhdGEuaW5pdCgpO1xufTtcblxuZXhwb3J0cy5vZmZzZXRzQnlMZW5ndGggPSBuZXcgVWludDMyQXJyYXkoW1xuICAgICAwLCAgICAgMCwgICAgIDAsICAgICAwLCAgICAgMCwgIDQwOTYsICA5MjE2LCAyMTUwNCwgMzU4NDAsIDQ0MDMyLFxuIDUzMjQ4LCA2MzQ4OCwgNzQ3NTIsIDg3MDQwLCA5MzY5NiwgMTAwODY0LCAxMDQ3MDQsIDEwNjc1MiwgMTA4OTI4LCAxMTM1MzYsXG4gMTE1OTY4LCAxMTg1MjgsIDExOTg3MiwgMTIxMjgwLCAxMjIwMTYsXG5dKTtcblxuZXhwb3J0cy5zaXplQml0c0J5TGVuZ3RoID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAwLCAgMCwgIDAsICAwLCAxMCwgMTAsIDExLCAxMSwgMTAsIDEwLFxuIDEwLCAxMCwgMTAsICA5LCAgOSwgIDgsICA3LCAgNywgIDgsICA3LFxuICA3LCAgNiwgIDYsICA1LCAgNSxcbl0pO1xuXG5leHBvcnRzLm1pbkRpY3Rpb25hcnlXb3JkTGVuZ3RoID0gNDtcbmV4cG9ydHMubWF4RGljdGlvbmFyeVdvcmRMZW5ndGggPSAyNDtcbiIsICJmdW5jdGlvbiBIdWZmbWFuQ29kZShiaXRzLCB2YWx1ZSkge1xuICB0aGlzLmJpdHMgPSBiaXRzOyAgIC8qIG51bWJlciBvZiBiaXRzIHVzZWQgZm9yIHRoaXMgc3ltYm9sICovXG4gIHRoaXMudmFsdWUgPSB2YWx1ZTsgLyogc3ltYm9sIHZhbHVlIG9yIHRhYmxlIG9mZnNldCAqL1xufVxuXG5leHBvcnRzLkh1ZmZtYW5Db2RlID0gSHVmZm1hbkNvZGU7XG5cbnZhciBNQVhfTEVOR1RIID0gMTU7XG5cbi8qIFJldHVybnMgcmV2ZXJzZShyZXZlcnNlKGtleSwgbGVuKSArIDEsIGxlbiksIHdoZXJlIHJldmVyc2Uoa2V5LCBsZW4pIGlzIHRoZVxuICAgYml0LXdpc2UgcmV2ZXJzYWwgb2YgdGhlIGxlbiBsZWFzdCBzaWduaWZpY2FudCBiaXRzIG9mIGtleS4gKi9cbmZ1bmN0aW9uIEdldE5leHRLZXkoa2V5LCBsZW4pIHtcbiAgdmFyIHN0ZXAgPSAxIDw8IChsZW4gLSAxKTtcbiAgd2hpbGUgKGtleSAmIHN0ZXApIHtcbiAgICBzdGVwID4+PSAxO1xuICB9XG4gIHJldHVybiAoa2V5ICYgKHN0ZXAgLSAxKSkgKyBzdGVwO1xufVxuXG4vKiBTdG9yZXMgY29kZSBpbiB0YWJsZVswXSwgdGFibGVbc3RlcF0sIHRhYmxlWzIqc3RlcF0sIC4uLiwgdGFibGVbZW5kXSAqL1xuLyogQXNzdW1lcyB0aGF0IGVuZCBpcyBhbiBpbnRlZ2VyIG11bHRpcGxlIG9mIHN0ZXAgKi9cbmZ1bmN0aW9uIFJlcGxpY2F0ZVZhbHVlKHRhYmxlLCBpLCBzdGVwLCBlbmQsIGNvZGUpIHtcbiAgZG8ge1xuICAgIGVuZCAtPSBzdGVwO1xuICAgIHRhYmxlW2kgKyBlbmRdID0gbmV3IEh1ZmZtYW5Db2RlKGNvZGUuYml0cywgY29kZS52YWx1ZSk7XG4gIH0gd2hpbGUgKGVuZCA+IDApO1xufVxuXG4vKiBSZXR1cm5zIHRoZSB0YWJsZSB3aWR0aCBvZiB0aGUgbmV4dCAybmQgbGV2ZWwgdGFibGUuIGNvdW50IGlzIHRoZSBoaXN0b2dyYW1cbiAgIG9mIGJpdCBsZW5ndGhzIGZvciB0aGUgcmVtYWluaW5nIHN5bWJvbHMsIGxlbiBpcyB0aGUgY29kZSBsZW5ndGggb2YgdGhlIG5leHRcbiAgIHByb2Nlc3NlZCBzeW1ib2wgKi9cbmZ1bmN0aW9uIE5leHRUYWJsZUJpdFNpemUoY291bnQsIGxlbiwgcm9vdF9iaXRzKSB7XG4gIHZhciBsZWZ0ID0gMSA8PCAobGVuIC0gcm9vdF9iaXRzKTtcbiAgd2hpbGUgKGxlbiA8IE1BWF9MRU5HVEgpIHtcbiAgICBsZWZ0IC09IGNvdW50W2xlbl07XG4gICAgaWYgKGxlZnQgPD0gMCkgYnJlYWs7XG4gICAgKytsZW47XG4gICAgbGVmdCA8PD0gMTtcbiAgfVxuICByZXR1cm4gbGVuIC0gcm9vdF9iaXRzO1xufVxuXG5leHBvcnRzLkJyb3RsaUJ1aWxkSHVmZm1hblRhYmxlID0gZnVuY3Rpb24ocm9vdF90YWJsZSwgdGFibGUsIHJvb3RfYml0cywgY29kZV9sZW5ndGhzLCBjb2RlX2xlbmd0aHNfc2l6ZSkge1xuICB2YXIgc3RhcnRfdGFibGUgPSB0YWJsZTtcbiAgdmFyIGNvZGU7ICAgICAgICAgICAgLyogY3VycmVudCB0YWJsZSBlbnRyeSAqL1xuICB2YXIgbGVuOyAgICAgICAgICAgICAvKiBjdXJyZW50IGNvZGUgbGVuZ3RoICovXG4gIHZhciBzeW1ib2w7ICAgICAgICAgIC8qIHN5bWJvbCBpbmRleCBpbiBvcmlnaW5hbCBvciBzb3J0ZWQgdGFibGUgKi9cbiAgdmFyIGtleTsgICAgICAgICAgICAgLyogcmV2ZXJzZWQgcHJlZml4IGNvZGUgKi9cbiAgdmFyIHN0ZXA7ICAgICAgICAgICAgLyogc3RlcCBzaXplIHRvIHJlcGxpY2F0ZSB2YWx1ZXMgaW4gY3VycmVudCB0YWJsZSAqL1xuICB2YXIgbG93OyAgICAgICAgICAgICAvKiBsb3cgYml0cyBmb3IgY3VycmVudCByb290IGVudHJ5ICovXG4gIHZhciBtYXNrOyAgICAgICAgICAgIC8qIG1hc2sgZm9yIGxvdyBiaXRzICovXG4gIHZhciB0YWJsZV9iaXRzOyAgICAgIC8qIGtleSBsZW5ndGggb2YgY3VycmVudCB0YWJsZSAqL1xuICB2YXIgdGFibGVfc2l6ZTsgICAgICAvKiBzaXplIG9mIGN1cnJlbnQgdGFibGUgKi9cbiAgdmFyIHRvdGFsX3NpemU7ICAgICAgLyogc3VtIG9mIHJvb3QgdGFibGUgc2l6ZSBhbmQgMm5kIGxldmVsIHRhYmxlIHNpemVzICovXG4gIHZhciBzb3J0ZWQ7ICAgICAgICAgIC8qIHN5bWJvbHMgc29ydGVkIGJ5IGNvZGUgbGVuZ3RoICovXG4gIHZhciBjb3VudCA9IG5ldyBJbnQzMkFycmF5KE1BWF9MRU5HVEggKyAxKTsgIC8qIG51bWJlciBvZiBjb2RlcyBvZiBlYWNoIGxlbmd0aCAqL1xuICB2YXIgb2Zmc2V0ID0gbmV3IEludDMyQXJyYXkoTUFYX0xFTkdUSCArIDEpOyAgLyogb2Zmc2V0cyBpbiBzb3J0ZWQgdGFibGUgZm9yIGVhY2ggbGVuZ3RoICovXG5cbiAgc29ydGVkID0gbmV3IEludDMyQXJyYXkoY29kZV9sZW5ndGhzX3NpemUpO1xuXG4gIC8qIGJ1aWxkIGhpc3RvZ3JhbSBvZiBjb2RlIGxlbmd0aHMgKi9cbiAgZm9yIChzeW1ib2wgPSAwOyBzeW1ib2wgPCBjb2RlX2xlbmd0aHNfc2l6ZTsgc3ltYm9sKyspIHtcbiAgICBjb3VudFtjb2RlX2xlbmd0aHNbc3ltYm9sXV0rKztcbiAgfVxuXG4gIC8qIGdlbmVyYXRlIG9mZnNldHMgaW50byBzb3J0ZWQgc3ltYm9sIHRhYmxlIGJ5IGNvZGUgbGVuZ3RoICovXG4gIG9mZnNldFsxXSA9IDA7XG4gIGZvciAobGVuID0gMTsgbGVuIDwgTUFYX0xFTkdUSDsgbGVuKyspIHtcbiAgICBvZmZzZXRbbGVuICsgMV0gPSBvZmZzZXRbbGVuXSArIGNvdW50W2xlbl07XG4gIH1cblxuICAvKiBzb3J0IHN5bWJvbHMgYnkgbGVuZ3RoLCBieSBzeW1ib2wgb3JkZXIgd2l0aGluIGVhY2ggbGVuZ3RoICovXG4gIGZvciAoc3ltYm9sID0gMDsgc3ltYm9sIDwgY29kZV9sZW5ndGhzX3NpemU7IHN5bWJvbCsrKSB7XG4gICAgaWYgKGNvZGVfbGVuZ3Roc1tzeW1ib2xdICE9PSAwKSB7XG4gICAgICBzb3J0ZWRbb2Zmc2V0W2NvZGVfbGVuZ3Roc1tzeW1ib2xdXSsrXSA9IHN5bWJvbDtcbiAgICB9XG4gIH1cbiAgXG4gIHRhYmxlX2JpdHMgPSByb290X2JpdHM7XG4gIHRhYmxlX3NpemUgPSAxIDw8IHRhYmxlX2JpdHM7XG4gIHRvdGFsX3NpemUgPSB0YWJsZV9zaXplO1xuXG4gIC8qIHNwZWNpYWwgY2FzZSBjb2RlIHdpdGggb25seSBvbmUgdmFsdWUgKi9cbiAgaWYgKG9mZnNldFtNQVhfTEVOR1RIXSA9PT0gMSkge1xuICAgIGZvciAoa2V5ID0gMDsga2V5IDwgdG90YWxfc2l6ZTsgKytrZXkpIHtcbiAgICAgIHJvb3RfdGFibGVbdGFibGUgKyBrZXldID0gbmV3IEh1ZmZtYW5Db2RlKDAsIHNvcnRlZFswXSAmIDB4ZmZmZik7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB0b3RhbF9zaXplO1xuICB9XG5cbiAgLyogZmlsbCBpbiByb290IHRhYmxlICovXG4gIGtleSA9IDA7XG4gIHN5bWJvbCA9IDA7XG4gIGZvciAobGVuID0gMSwgc3RlcCA9IDI7IGxlbiA8PSByb290X2JpdHM7ICsrbGVuLCBzdGVwIDw8PSAxKSB7XG4gICAgZm9yICg7IGNvdW50W2xlbl0gPiAwOyAtLWNvdW50W2xlbl0pIHtcbiAgICAgIGNvZGUgPSBuZXcgSHVmZm1hbkNvZGUobGVuICYgMHhmZiwgc29ydGVkW3N5bWJvbCsrXSAmIDB4ZmZmZik7XG4gICAgICBSZXBsaWNhdGVWYWx1ZShyb290X3RhYmxlLCB0YWJsZSArIGtleSwgc3RlcCwgdGFibGVfc2l6ZSwgY29kZSk7XG4gICAgICBrZXkgPSBHZXROZXh0S2V5KGtleSwgbGVuKTtcbiAgICB9XG4gIH1cblxuICAvKiBmaWxsIGluIDJuZCBsZXZlbCB0YWJsZXMgYW5kIGFkZCBwb2ludGVycyB0byByb290IHRhYmxlICovXG4gIG1hc2sgPSB0b3RhbF9zaXplIC0gMTtcbiAgbG93ID0gLTE7XG4gIGZvciAobGVuID0gcm9vdF9iaXRzICsgMSwgc3RlcCA9IDI7IGxlbiA8PSBNQVhfTEVOR1RIOyArK2xlbiwgc3RlcCA8PD0gMSkge1xuICAgIGZvciAoOyBjb3VudFtsZW5dID4gMDsgLS1jb3VudFtsZW5dKSB7XG4gICAgICBpZiAoKGtleSAmIG1hc2spICE9PSBsb3cpIHtcbiAgICAgICAgdGFibGUgKz0gdGFibGVfc2l6ZTtcbiAgICAgICAgdGFibGVfYml0cyA9IE5leHRUYWJsZUJpdFNpemUoY291bnQsIGxlbiwgcm9vdF9iaXRzKTtcbiAgICAgICAgdGFibGVfc2l6ZSA9IDEgPDwgdGFibGVfYml0cztcbiAgICAgICAgdG90YWxfc2l6ZSArPSB0YWJsZV9zaXplO1xuICAgICAgICBsb3cgPSBrZXkgJiBtYXNrO1xuICAgICAgICByb290X3RhYmxlW3N0YXJ0X3RhYmxlICsgbG93XSA9IG5ldyBIdWZmbWFuQ29kZSgodGFibGVfYml0cyArIHJvb3RfYml0cykgJiAweGZmLCAoKHRhYmxlIC0gc3RhcnRfdGFibGUpIC0gbG93KSAmIDB4ZmZmZik7XG4gICAgICB9XG4gICAgICBjb2RlID0gbmV3IEh1ZmZtYW5Db2RlKChsZW4gLSByb290X2JpdHMpICYgMHhmZiwgc29ydGVkW3N5bWJvbCsrXSAmIDB4ZmZmZik7XG4gICAgICBSZXBsaWNhdGVWYWx1ZShyb290X3RhYmxlLCB0YWJsZSArIChrZXkgPj4gcm9vdF9iaXRzKSwgc3RlcCwgdGFibGVfc2l6ZSwgY29kZSk7XG4gICAgICBrZXkgPSBHZXROZXh0S2V5KGtleSwgbGVuKTtcbiAgICB9XG4gIH1cbiAgXG4gIHJldHVybiB0b3RhbF9zaXplO1xufVxuIiwgIi8qIENvcHlyaWdodCAyMDEzIEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiAgIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAgIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbiAgIExvb2t1cCB0YWJsZSB0byBtYXAgdGhlIHByZXZpb3VzIHR3byBieXRlcyB0byBhIGNvbnRleHQgaWQuXG5cbiAgIFRoZXJlIGFyZSBmb3VyIGRpZmZlcmVudCBjb250ZXh0IG1vZGVsaW5nIG1vZGVzIGRlZmluZWQgaGVyZTpcbiAgICAgQ09OVEVYVF9MU0I2OiBjb250ZXh0IGlkIGlzIHRoZSBsZWFzdCBzaWduaWZpY2FudCA2IGJpdHMgb2YgdGhlIGxhc3QgYnl0ZSxcbiAgICAgQ09OVEVYVF9NU0I2OiBjb250ZXh0IGlkIGlzIHRoZSBtb3N0IHNpZ25pZmljYW50IDYgYml0cyBvZiB0aGUgbGFzdCBieXRlLFxuICAgICBDT05URVhUX1VURjg6IHNlY29uZC1vcmRlciBjb250ZXh0IG1vZGVsIHR1bmVkIGZvciBVVEY4LWVuY29kZWQgdGV4dCxcbiAgICAgQ09OVEVYVF9TSUdORUQ6IHNlY29uZC1vcmRlciBjb250ZXh0IG1vZGVsIHR1bmVkIGZvciBzaWduZWQgaW50ZWdlcnMuXG5cbiAgIFRoZSBjb250ZXh0IGlkIGZvciB0aGUgVVRGOCBjb250ZXh0IG1vZGVsIGlzIGNhbGN1bGF0ZWQgYXMgZm9sbG93cy4gSWYgcDFcbiAgIGFuZCBwMiBhcmUgdGhlIHByZXZpb3VzIHR3byBieXRlcywgd2UgY2FsY3VhbHRlIHRoZSBjb250ZXh0IGFzXG5cbiAgICAgY29udGV4dCA9IGtDb250ZXh0TG9va3VwW3AxXSB8IGtDb250ZXh0TG9va3VwW3AyICsgMjU2XS5cblxuICAgSWYgdGhlIHByZXZpb3VzIHR3byBieXRlcyBhcmUgQVNDSUkgY2hhcmFjdGVycyAoaS5lLiA8IDEyOCksIHRoaXMgd2lsbCBiZVxuICAgZXF1aXZhbGVudCB0b1xuXG4gICAgIGNvbnRleHQgPSA0ICogY29udGV4dDEocDEpICsgY29udGV4dDIocDIpLFxuXG4gICB3aGVyZSBjb250ZXh0MSBpcyBiYXNlZCBvbiB0aGUgcHJldmlvdXMgYnl0ZSBpbiB0aGUgZm9sbG93aW5nIHdheTpcblxuICAgICAwICA6IG5vbi1BU0NJSSBjb250cm9sXG4gICAgIDEgIDogXFx0LCBcXG4sIFxcclxuICAgICAyICA6IHNwYWNlXG4gICAgIDMgIDogb3RoZXIgcHVuY3R1YXRpb25cbiAgICAgNCAgOiBcIiAnXG4gICAgIDUgIDogJVxuICAgICA2ICA6ICggPCBbIHtcbiAgICAgNyAgOiApID4gXSB9XG4gICAgIDggIDogLCA7IDpcbiAgICAgOSAgOiAuXG4gICAgIDEwIDogPVxuICAgICAxMSA6IG51bWJlclxuICAgICAxMiA6IHVwcGVyLWNhc2Ugdm93ZWxcbiAgICAgMTMgOiB1cHBlci1jYXNlIGNvbnNvbmFudFxuICAgICAxNCA6IGxvd2VyLWNhc2Ugdm93ZWxcbiAgICAgMTUgOiBsb3dlci1jYXNlIGNvbnNvbmFudFxuXG4gICBhbmQgY29udGV4dDIgaXMgYmFzZWQgb24gdGhlIHNlY29uZCBsYXN0IGJ5dGU6XG5cbiAgICAgMCA6IGNvbnRyb2wsIHNwYWNlXG4gICAgIDEgOiBwdW5jdHVhdGlvblxuICAgICAyIDogdXBwZXItY2FzZSBsZXR0ZXIsIG51bWJlclxuICAgICAzIDogbG93ZXItY2FzZSBsZXR0ZXJcblxuICAgSWYgdGhlIGxhc3QgYnl0ZSBpcyBBU0NJSSwgYW5kIHRoZSBzZWNvbmQgbGFzdCBieXRlIGlzIG5vdCAoaW4gYSB2YWxpZCBVVEY4XG4gICBzdHJlYW0gaXQgd2lsbCBiZSBhIGNvbnRpbnVhdGlvbiBieXRlLCB2YWx1ZSBiZXR3ZWVuIDEyOCBhbmQgMTkxKSwgdGhlXG4gICBjb250ZXh0IGlzIHRoZSBzYW1lIGFzIGlmIHRoZSBzZWNvbmQgbGFzdCBieXRlIHdhcyBhbiBBU0NJSSBjb250cm9sIG9yIHNwYWNlLlxuXG4gICBJZiB0aGUgbGFzdCBieXRlIGlzIGEgVVRGOCBsZWFkIGJ5dGUgKHZhbHVlID49IDE5MiksIHRoZW4gdGhlIG5leHQgYnl0ZSB3aWxsXG4gICBiZSBhIGNvbnRpbnVhdGlvbiBieXRlIGFuZCB0aGUgY29udGV4dCBpZCBpcyAyIG9yIDMgZGVwZW5kaW5nIG9uIHRoZSBMU0Igb2ZcbiAgIHRoZSBsYXN0IGJ5dGUgYW5kIHRvIGEgbGVzc2VyIGV4dGVudCBvbiB0aGUgc2Vjb25kIGxhc3QgYnl0ZSBpZiBpdCBpcyBBU0NJSS5cblxuICAgSWYgdGhlIGxhc3QgYnl0ZSBpcyBhIFVURjggY29udGludWF0aW9uIGJ5dGUsIHRoZSBzZWNvbmQgbGFzdCBieXRlIGNhbiBiZTpcbiAgICAgLSBjb250aW51YXRpb24gYnl0ZTogdGhlIG5leHQgYnl0ZSBpcyBwcm9iYWJseSBBU0NJSSBvciBsZWFkIGJ5dGUgKGFzc3VtaW5nXG4gICAgICAgNC1ieXRlIFVURjggY2hhcmFjdGVycyBhcmUgcmFyZSkgYW5kIHRoZSBjb250ZXh0IGlkIGlzIDAgb3IgMS5cbiAgICAgLSBsZWFkIGJ5dGUgKDE5MiAtIDIwNyk6IG5leHQgYnl0ZSBpcyBBU0NJSSBvciBsZWFkIGJ5dGUsIGNvbnRleHQgaXMgMCBvciAxXG4gICAgIC0gbGVhZCBieXRlICgyMDggLSAyNTUpOiBuZXh0IGJ5dGUgaXMgY29udGludWF0aW9uIGJ5dGUsIGNvbnRleHQgaXMgMiBvciAzXG5cbiAgIFRoZSBwb3NzaWJsZSB2YWx1ZSBjb21iaW5hdGlvbnMgb2YgdGhlIHByZXZpb3VzIHR3byBieXRlcywgdGhlIHJhbmdlIG9mXG4gICBjb250ZXh0IGlkcyBhbmQgdGhlIHR5cGUgb2YgdGhlIG5leHQgYnl0ZSBpcyBzdW1tYXJpemVkIGluIHRoZSB0YWJsZSBiZWxvdzpcblxuICAgfC0tLS0tLS0tXFwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAgIHwgICAgICAgICBcXCAgICAgICAgICAgICAgICAgICAgICAgICBMYXN0IGJ5dGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICB8IFNlY29uZCAgIFxcLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICAgfCBsYXN0IGJ5dGUgXFwgICAgQVNDSUkgICAgICAgICAgICB8ICAgY29udC4gYnl0ZSAgICAgICAgfCAgIGxlYWQgYnl0ZSAgICAgIHxcbiAgIHwgICAgICAgICAgICBcXCAgICgwLTEyNykgICAgICAgICAgfCAgICgxMjgtMTkxKSAgICAgICAgIHwgICAoMTkyLSkgICAgICAgICB8XG4gICB8PT09PT09PT09PT09PXw9PT09PT09PT09PT09PT09PT09fD09PT09PT09PT09PT09PT09PT09PXw9PT09PT09PT09PT09PT09PT18XG4gICB8ICBBU0NJSSAgICAgIHwgbmV4dDogQVNDSUkvbGVhZCAgfCAgbm90IHZhbGlkICAgICAgICAgIHwgIG5leHQ6IGNvbnQuICAgICB8XG4gICB8ICAoMC0xMjcpICAgIHwgY29udGV4dDogNCAtIDYzICAgfCAgICAgICAgICAgICAgICAgICAgIHwgIGNvbnRleHQ6IDIgLSAzICB8XG4gICB8LS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS18XG4gICB8ICBjb250LiBieXRlIHwgbmV4dDogQVNDSUkvbGVhZCAgfCAgbmV4dDogQVNDSUkvbGVhZCAgIHwgIG5leHQ6IGNvbnQuICAgICB8XG4gICB8ICAoMTI4LTE5MSkgIHwgY29udGV4dDogNCAtIDYzICAgfCAgY29udGV4dDogMCAtIDEgICAgIHwgIGNvbnRleHQ6IDIgLSAzICB8XG4gICB8LS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS18XG4gICB8ICBsZWFkIGJ5dGUgIHwgbm90IHZhbGlkICAgICAgICAgfCAgbmV4dDogQVNDSUkvbGVhZCAgIHwgIG5vdCB2YWxpZCAgICAgICB8XG4gICB8ICAoMTkyLTIwNykgIHwgICAgICAgICAgICAgICAgICAgfCAgY29udGV4dDogMCAtIDEgICAgIHwgICAgICAgICAgICAgICAgICB8XG4gICB8LS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS18XG4gICB8ICBsZWFkIGJ5dGUgIHwgbm90IHZhbGlkICAgICAgICAgfCAgbmV4dDogY29udC4gICAgICAgIHwgIG5vdCB2YWxpZCAgICAgICB8XG4gICB8ICAoMjA4LSkgICAgIHwgICAgICAgICAgICAgICAgICAgfCAgY29udGV4dDogMiAtIDMgICAgIHwgICAgICAgICAgICAgICAgICB8XG4gICB8LS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS18XG5cbiAgIFRoZSBjb250ZXh0IGlkIGZvciB0aGUgc2lnbmVkIGNvbnRleHQgbW9kZSBpcyBjYWxjdWxhdGVkIGFzOlxuXG4gICAgIGNvbnRleHQgPSAoa0NvbnRleHRMb29rdXBbNTEyICsgcDFdIDw8IDMpIHwga0NvbnRleHRMb29rdXBbNTEyICsgcDJdLlxuXG4gICBGb3IgYW55IGNvbnRleHQgbW9kZWxpbmcgbW9kZXMsIHRoZSBjb250ZXh0IGlkcyBjYW4gYmUgY2FsY3VsYXRlZCBieSB8LWluZ1xuICAgdG9nZXRoZXIgdHdvIGxvb2t1cHMgZnJvbSBvbmUgdGFibGUgdXNpbmcgY29udGV4dCBtb2RlbCBkZXBlbmRlbnQgb2Zmc2V0czpcblxuICAgICBjb250ZXh0ID0ga0NvbnRleHRMb29rdXBbb2Zmc2V0MSArIHAxXSB8IGtDb250ZXh0TG9va3VwW29mZnNldDIgKyBwMl0uXG5cbiAgIHdoZXJlIG9mZnNldDEgYW5kIG9mZnNldDIgYXJlIGRlcGVuZGVudCBvbiB0aGUgY29udGV4dCBtb2RlLlxuKi9cblxudmFyIENPTlRFWFRfTFNCNiAgICAgICAgID0gMDtcbnZhciBDT05URVhUX01TQjYgICAgICAgICA9IDE7XG52YXIgQ09OVEVYVF9VVEY4ICAgICAgICAgPSAyO1xudmFyIENPTlRFWFRfU0lHTkVEICAgICAgID0gMztcblxuLyogQ29tbW9uIGNvbnRleHQgbG9va3VwIHRhYmxlIGZvciBhbGwgY29udGV4dCBtb2Rlcy4gKi9cbmV4cG9ydHMubG9va3VwID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAvKiBDT05URVhUX1VURjgsIGxhc3QgYnl0ZS4gKi9cbiAgLyogQVNDSUkgcmFuZ2UuICovXG4gICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICA0LCAgNCwgIDAsICAwLCAgNCwgIDAsICAwLFxuICAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCxcbiAgIDgsIDEyLCAxNiwgMTIsIDEyLCAyMCwgMTIsIDE2LCAyNCwgMjgsIDEyLCAxMiwgMzIsIDEyLCAzNiwgMTIsXG4gIDQ0LCA0NCwgNDQsIDQ0LCA0NCwgNDQsIDQ0LCA0NCwgNDQsIDQ0LCAzMiwgMzIsIDI0LCA0MCwgMjgsIDEyLFxuICAxMiwgNDgsIDUyLCA1MiwgNTIsIDQ4LCA1MiwgNTIsIDUyLCA0OCwgNTIsIDUyLCA1MiwgNTIsIDUyLCA0OCxcbiAgNTIsIDUyLCA1MiwgNTIsIDUyLCA0OCwgNTIsIDUyLCA1MiwgNTIsIDUyLCAyNCwgMTIsIDI4LCAxMiwgMTIsXG4gIDEyLCA1NiwgNjAsIDYwLCA2MCwgNTYsIDYwLCA2MCwgNjAsIDU2LCA2MCwgNjAsIDYwLCA2MCwgNjAsIDU2LFxuICA2MCwgNjAsIDYwLCA2MCwgNjAsIDU2LCA2MCwgNjAsIDYwLCA2MCwgNjAsIDI0LCAxMiwgMjgsIDEyLCAgMCxcbiAgLyogVVRGOCBjb250aW51YXRpb24gYnl0ZSByYW5nZS4gKi9cbiAgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSxcbiAgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSxcbiAgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSxcbiAgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSxcbiAgLyogVVRGOCBsZWFkIGJ5dGUgcmFuZ2UuICovXG4gIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsXG4gIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsXG4gIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsXG4gIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsIDIsIDMsXG4gIC8qIENPTlRFWFRfVVRGOCBzZWNvbmQgbGFzdCBieXRlLiAqL1xuICAvKiBBU0NJSSByYW5nZS4gKi9cbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSxcbiAgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMSwgMSwgMSwgMSwgMSwgMSxcbiAgMSwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMixcbiAgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMSwgMSwgMSwgMSwgMSxcbiAgMSwgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMyxcbiAgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMSwgMSwgMSwgMSwgMCxcbiAgLyogVVRGOCBjb250aW51YXRpb24gYnl0ZSByYW5nZS4gKi9cbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgLyogVVRGOCBsZWFkIGJ5dGUgcmFuZ2UuICovXG4gIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsXG4gIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsXG4gIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsXG4gIC8qIENPTlRFWFRfU0lHTkVELCBzZWNvbmQgbGFzdCBieXRlLiAqL1xuICAwLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLFxuICAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLFxuICAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLFxuICAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLFxuICAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLFxuICAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLFxuICAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLFxuICAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLFxuICA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LFxuICA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LFxuICA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LFxuICA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LCA0LFxuICA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LFxuICA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LFxuICA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LFxuICA2LCA2LCA2LCA2LCA2LCA2LCA2LCA2LCA2LCA2LCA2LCA2LCA2LCA2LCA2LCA3LFxuICAvKiBDT05URVhUX1NJR05FRCwgbGFzdCBieXRlLCBzYW1lIGFzIHRoZSBhYm92ZSB2YWx1ZXMgc2hpZnRlZCBieSAzIGJpdHMuICovXG4gICAwLCA4LCA4LCA4LCA4LCA4LCA4LCA4LCA4LCA4LCA4LCA4LCA4LCA4LCA4LCA4LFxuICAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNixcbiAgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsXG4gIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LFxuICAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCxcbiAgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsXG4gIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LFxuICAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCxcbiAgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsXG4gIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLFxuICAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMixcbiAgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsXG4gIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLFxuICA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCxcbiAgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsXG4gIDQ4LCA0OCwgNDgsIDQ4LCA0OCwgNDgsIDQ4LCA0OCwgNDgsIDQ4LCA0OCwgNDgsIDQ4LCA0OCwgNDgsIDU2LFxuICAvKiBDT05URVhUX0xTQjYsIGxhc3QgYnl0ZS4gKi9cbiAgIDAsICAxLCAgMiwgIDMsICA0LCAgNSwgIDYsICA3LCAgOCwgIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsXG4gIDE2LCAxNywgMTgsIDE5LCAyMCwgMjEsIDIyLCAyMywgMjQsIDI1LCAyNiwgMjcsIDI4LCAyOSwgMzAsIDMxLFxuICAzMiwgMzMsIDM0LCAzNSwgMzYsIDM3LCAzOCwgMzksIDQwLCA0MSwgNDIsIDQzLCA0NCwgNDUsIDQ2LCA0NyxcbiAgNDgsIDQ5LCA1MCwgNTEsIDUyLCA1MywgNTQsIDU1LCA1NiwgNTcsIDU4LCA1OSwgNjAsIDYxLCA2MiwgNjMsXG4gICAwLCAgMSwgIDIsICAzLCAgNCwgIDUsICA2LCAgNywgIDgsICA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LFxuICAxNiwgMTcsIDE4LCAxOSwgMjAsIDIxLCAyMiwgMjMsIDI0LCAyNSwgMjYsIDI3LCAyOCwgMjksIDMwLCAzMSxcbiAgMzIsIDMzLCAzNCwgMzUsIDM2LCAzNywgMzgsIDM5LCA0MCwgNDEsIDQyLCA0MywgNDQsIDQ1LCA0NiwgNDcsXG4gIDQ4LCA0OSwgNTAsIDUxLCA1MiwgNTMsIDU0LCA1NSwgNTYsIDU3LCA1OCwgNTksIDYwLCA2MSwgNjIsIDYzLFxuICAgMCwgIDEsICAyLCAgMywgIDQsICA1LCAgNiwgIDcsICA4LCAgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcbiAgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyNywgMjgsIDI5LCAzMCwgMzEsXG4gIDMyLCAzMywgMzQsIDM1LCAzNiwgMzcsIDM4LCAzOSwgNDAsIDQxLCA0MiwgNDMsIDQ0LCA0NSwgNDYsIDQ3LFxuICA0OCwgNDksIDUwLCA1MSwgNTIsIDUzLCA1NCwgNTUsIDU2LCA1NywgNTgsIDU5LCA2MCwgNjEsIDYyLCA2MyxcbiAgIDAsICAxLCAgMiwgIDMsICA0LCAgNSwgIDYsICA3LCAgOCwgIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsXG4gIDE2LCAxNywgMTgsIDE5LCAyMCwgMjEsIDIyLCAyMywgMjQsIDI1LCAyNiwgMjcsIDI4LCAyOSwgMzAsIDMxLFxuICAzMiwgMzMsIDM0LCAzNSwgMzYsIDM3LCAzOCwgMzksIDQwLCA0MSwgNDIsIDQzLCA0NCwgNDUsIDQ2LCA0NyxcbiAgNDgsIDQ5LCA1MCwgNTEsIDUyLCA1MywgNTQsIDU1LCA1NiwgNTcsIDU4LCA1OSwgNjAsIDYxLCA2MiwgNjMsXG4gIC8qIENPTlRFWFRfTVNCNiwgbGFzdCBieXRlLiAqL1xuICAgMCwgIDAsICAwLCAgMCwgIDEsICAxLCAgMSwgIDEsICAyLCAgMiwgIDIsICAyLCAgMywgIDMsICAzLCAgMyxcbiAgIDQsICA0LCAgNCwgIDQsICA1LCAgNSwgIDUsICA1LCAgNiwgIDYsICA2LCAgNiwgIDcsICA3LCAgNywgIDcsXG4gICA4LCAgOCwgIDgsICA4LCAgOSwgIDksICA5LCAgOSwgMTAsIDEwLCAxMCwgMTAsIDExLCAxMSwgMTEsIDExLFxuICAxMiwgMTIsIDEyLCAxMiwgMTMsIDEzLCAxMywgMTMsIDE0LCAxNCwgMTQsIDE0LCAxNSwgMTUsIDE1LCAxNSxcbiAgMTYsIDE2LCAxNiwgMTYsIDE3LCAxNywgMTcsIDE3LCAxOCwgMTgsIDE4LCAxOCwgMTksIDE5LCAxOSwgMTksXG4gIDIwLCAyMCwgMjAsIDIwLCAyMSwgMjEsIDIxLCAyMSwgMjIsIDIyLCAyMiwgMjIsIDIzLCAyMywgMjMsIDIzLFxuICAyNCwgMjQsIDI0LCAyNCwgMjUsIDI1LCAyNSwgMjUsIDI2LCAyNiwgMjYsIDI2LCAyNywgMjcsIDI3LCAyNyxcbiAgMjgsIDI4LCAyOCwgMjgsIDI5LCAyOSwgMjksIDI5LCAzMCwgMzAsIDMwLCAzMCwgMzEsIDMxLCAzMSwgMzEsXG4gIDMyLCAzMiwgMzIsIDMyLCAzMywgMzMsIDMzLCAzMywgMzQsIDM0LCAzNCwgMzQsIDM1LCAzNSwgMzUsIDM1LFxuICAzNiwgMzYsIDM2LCAzNiwgMzcsIDM3LCAzNywgMzcsIDM4LCAzOCwgMzgsIDM4LCAzOSwgMzksIDM5LCAzOSxcbiAgNDAsIDQwLCA0MCwgNDAsIDQxLCA0MSwgNDEsIDQxLCA0MiwgNDIsIDQyLCA0MiwgNDMsIDQzLCA0MywgNDMsXG4gIDQ0LCA0NCwgNDQsIDQ0LCA0NSwgNDUsIDQ1LCA0NSwgNDYsIDQ2LCA0NiwgNDYsIDQ3LCA0NywgNDcsIDQ3LFxuICA0OCwgNDgsIDQ4LCA0OCwgNDksIDQ5LCA0OSwgNDksIDUwLCA1MCwgNTAsIDUwLCA1MSwgNTEsIDUxLCA1MSxcbiAgNTIsIDUyLCA1MiwgNTIsIDUzLCA1MywgNTMsIDUzLCA1NCwgNTQsIDU0LCA1NCwgNTUsIDU1LCA1NSwgNTUsXG4gIDU2LCA1NiwgNTYsIDU2LCA1NywgNTcsIDU3LCA1NywgNTgsIDU4LCA1OCwgNTgsIDU5LCA1OSwgNTksIDU5LFxuICA2MCwgNjAsIDYwLCA2MCwgNjEsIDYxLCA2MSwgNjEsIDYyLCA2MiwgNjIsIDYyLCA2MywgNjMsIDYzLCA2MyxcbiAgLyogQ09OVEVYVF97TSxMfVNCNiwgc2Vjb25kIGxhc3QgYnl0ZSwgKi9cbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbl0pO1xuXG5leHBvcnRzLmxvb2t1cE9mZnNldHMgPSBuZXcgVWludDE2QXJyYXkoW1xuICAvKiBDT05URVhUX0xTQjYgKi9cbiAgMTAyNCwgMTUzNixcbiAgLyogQ09OVEVYVF9NU0I2ICovXG4gIDEyODAsIDE1MzYsXG4gIC8qIENPTlRFWFRfVVRGOCAqL1xuICAwLCAyNTYsXG4gIC8qIENPTlRFWFRfU0lHTkVEICovXG4gIDc2OCwgNTEyLFxuXSk7XG4iLCAiLyogQ29weXJpZ2h0IDIwMTMgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuICAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuICAgTG9va3VwIHRhYmxlcyB0byBtYXAgcHJlZml4IGNvZGVzIHRvIHZhbHVlIHJhbmdlcy4gVGhpcyBpcyB1c2VkIGR1cmluZ1xuICAgZGVjb2Rpbmcgb2YgdGhlIGJsb2NrIGxlbmd0aHMsIGxpdGVyYWwgaW5zZXJ0aW9uIGxlbmd0aHMgYW5kIGNvcHkgbGVuZ3Rocy5cbiovXG5cbi8qIFJlcHJlc2VudHMgdGhlIHJhbmdlIG9mIHZhbHVlcyBiZWxvbmdpbmcgdG8gYSBwcmVmaXggY29kZTogKi9cbi8qIFtvZmZzZXQsIG9mZnNldCArIDJebmJpdHMpICovXG5mdW5jdGlvbiBQcmVmaXhDb2RlUmFuZ2Uob2Zmc2V0LCBuYml0cykge1xuICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgdGhpcy5uYml0cyA9IG5iaXRzO1xufVxuXG5leHBvcnRzLmtCbG9ja0xlbmd0aFByZWZpeENvZGUgPSBbXG4gIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMSwgMiksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoNSwgMiksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoOSwgMiksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMTMsIDIpLFxuICBuZXcgUHJlZml4Q29kZVJhbmdlKDE3LCAzKSwgbmV3IFByZWZpeENvZGVSYW5nZSgyNSwgMyksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMzMsIDMpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDQxLCAzKSxcbiAgbmV3IFByZWZpeENvZGVSYW5nZSg0OSwgNCksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoNjUsIDQpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDgxLCA0KSwgbmV3IFByZWZpeENvZGVSYW5nZSg5NywgNCksXG4gIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMTEzLCA1KSwgbmV3IFByZWZpeENvZGVSYW5nZSgxNDUsIDUpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDE3NywgNSksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMjA5LCA1KSxcbiAgbmV3IFByZWZpeENvZGVSYW5nZSgyNDEsIDYpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDMwNSwgNiksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMzY5LCA3KSwgbmV3IFByZWZpeENvZGVSYW5nZSg0OTcsIDgpLFxuICBuZXcgUHJlZml4Q29kZVJhbmdlKDc1MywgOSksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMTI2NSwgMTApLCBuZXcgUHJlZml4Q29kZVJhbmdlKDIyODksIDExKSwgbmV3IFByZWZpeENvZGVSYW5nZSg0MzM3LCAxMiksXG4gIG5ldyBQcmVmaXhDb2RlUmFuZ2UoODQzMywgMTMpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDE2NjI1LCAyNClcbl07XG5cbmV4cG9ydHMua0luc2VydExlbmd0aFByZWZpeENvZGUgPSBbXG4gIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMCwgMCksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMSwgMCksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMiwgMCksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMywgMCksXG4gIG5ldyBQcmVmaXhDb2RlUmFuZ2UoNCwgMCksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoNSwgMCksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoNiwgMSksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoOCwgMSksXG4gIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMTAsIDIpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDE0LCAyKSwgbmV3IFByZWZpeENvZGVSYW5nZSgxOCwgMyksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMjYsIDMpLFxuICBuZXcgUHJlZml4Q29kZVJhbmdlKDM0LCA0KSwgbmV3IFByZWZpeENvZGVSYW5nZSg1MCwgNCksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoNjYsIDUpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDk4LCA1KSxcbiAgbmV3IFByZWZpeENvZGVSYW5nZSgxMzAsIDYpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDE5NCwgNyksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMzIyLCA4KSwgbmV3IFByZWZpeENvZGVSYW5nZSg1NzgsIDkpLFxuICBuZXcgUHJlZml4Q29kZVJhbmdlKDEwOTAsIDEwKSwgbmV3IFByZWZpeENvZGVSYW5nZSgyMTE0LCAxMiksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoNjIxMCwgMTQpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDIyNTk0LCAyNCksXG5dO1xuXG5leHBvcnRzLmtDb3B5TGVuZ3RoUHJlZml4Q29kZSA9IFtcbiAgbmV3IFByZWZpeENvZGVSYW5nZSgyLCAwKSwgbmV3IFByZWZpeENvZGVSYW5nZSgzLCAwKSwgbmV3IFByZWZpeENvZGVSYW5nZSg0LCAwKSwgbmV3IFByZWZpeENvZGVSYW5nZSg1LCAwKSxcbiAgbmV3IFByZWZpeENvZGVSYW5nZSg2LCAwKSwgbmV3IFByZWZpeENvZGVSYW5nZSg3LCAwKSwgbmV3IFByZWZpeENvZGVSYW5nZSg4LCAwKSwgbmV3IFByZWZpeENvZGVSYW5nZSg5LCAwKSxcbiAgbmV3IFByZWZpeENvZGVSYW5nZSgxMCwgMSksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMTIsIDEpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDE0LCAyKSwgbmV3IFByZWZpeENvZGVSYW5nZSgxOCwgMiksXG4gIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMjIsIDMpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDMwLCAzKSwgbmV3IFByZWZpeENvZGVSYW5nZSgzOCwgNCksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoNTQsIDQpLFxuICBuZXcgUHJlZml4Q29kZVJhbmdlKDcwLCA1KSwgbmV3IFByZWZpeENvZGVSYW5nZSgxMDIsIDUpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDEzNCwgNiksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMTk4LCA3KSxcbiAgbmV3IFByZWZpeENvZGVSYW5nZSgzMjYsIDgpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDU4MiwgOSksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMTA5NCwgMTApLCBuZXcgUHJlZml4Q29kZVJhbmdlKDIxMTgsIDI0KSxcbl07XG5cbmV4cG9ydHMua0luc2VydFJhbmdlTHV0ID0gW1xuICAwLCAwLCA4LCA4LCAwLCAxNiwgOCwgMTYsIDE2LFxuXTtcblxuZXhwb3J0cy5rQ29weVJhbmdlTHV0ID0gW1xuICAwLCA4LCAwLCA4LCAxNiwgMCwgMTYsIDgsIDE2LFxuXTtcbiIsICIvKiBDb3B5cmlnaHQgMjAxMyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4gICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4gICBUcmFuc2Zvcm1hdGlvbnMgb24gZGljdGlvbmFyeSB3b3Jkcy5cbiovXG5cbnZhciBCcm90bGlEaWN0aW9uYXJ5ID0gcmVxdWlyZSgnLi9kaWN0aW9uYXJ5Jyk7XG5cbnZhciBrSWRlbnRpdHkgICAgICAgPSAwO1xudmFyIGtPbWl0TGFzdDEgICAgICA9IDE7XG52YXIga09taXRMYXN0MiAgICAgID0gMjtcbnZhciBrT21pdExhc3QzICAgICAgPSAzO1xudmFyIGtPbWl0TGFzdDQgICAgICA9IDQ7XG52YXIga09taXRMYXN0NSAgICAgID0gNTtcbnZhciBrT21pdExhc3Q2ICAgICAgPSA2O1xudmFyIGtPbWl0TGFzdDcgICAgICA9IDc7XG52YXIga09taXRMYXN0OCAgICAgID0gODtcbnZhciBrT21pdExhc3Q5ICAgICAgPSA5O1xudmFyIGtVcHBlcmNhc2VGaXJzdCA9IDEwO1xudmFyIGtVcHBlcmNhc2VBbGwgICA9IDExO1xudmFyIGtPbWl0Rmlyc3QxICAgICA9IDEyO1xudmFyIGtPbWl0Rmlyc3QyICAgICA9IDEzO1xudmFyIGtPbWl0Rmlyc3QzICAgICA9IDE0O1xudmFyIGtPbWl0Rmlyc3Q0ICAgICA9IDE1O1xudmFyIGtPbWl0Rmlyc3Q1ICAgICA9IDE2O1xudmFyIGtPbWl0Rmlyc3Q2ICAgICA9IDE3O1xudmFyIGtPbWl0Rmlyc3Q3ICAgICA9IDE4O1xudmFyIGtPbWl0Rmlyc3Q4ICAgICA9IDE5O1xudmFyIGtPbWl0Rmlyc3Q5ICAgICA9IDIwO1xuXG5mdW5jdGlvbiBUcmFuc2Zvcm0ocHJlZml4LCB0cmFuc2Zvcm0sIHN1ZmZpeCkge1xuICB0aGlzLnByZWZpeCA9IG5ldyBVaW50OEFycmF5KHByZWZpeC5sZW5ndGgpO1xuICB0aGlzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgdGhpcy5zdWZmaXggPSBuZXcgVWludDhBcnJheShzdWZmaXgubGVuZ3RoKTtcbiAgXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4Lmxlbmd0aDsgaSsrKVxuICAgIHRoaXMucHJlZml4W2ldID0gcHJlZml4LmNoYXJDb2RlQXQoaSk7XG4gIFxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN1ZmZpeC5sZW5ndGg7IGkrKylcbiAgICB0aGlzLnN1ZmZpeFtpXSA9IHN1ZmZpeC5jaGFyQ29kZUF0KGkpO1xufVxuXG52YXIga1RyYW5zZm9ybXMgPSBbXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIlwiICAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCIgXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgIFwiIFwiLCBrSWRlbnRpdHksICAgICAgIFwiIFwiICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga09taXRGaXJzdDEsICAgICBcIlwiICAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtVcHBlcmNhc2VGaXJzdCwgXCIgXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiIHRoZSBcIiAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICBcIiBcIiwga0lkZW50aXR5LCAgICAgICBcIlwiICAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICBcInMgXCIsIGtJZGVudGl0eSwgICAgICAgXCIgXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiIG9mIFwiICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga1VwcGVyY2FzZUZpcnN0LCBcIlwiICAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCIgYW5kIFwiICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrT21pdEZpcnN0MiwgICAgIFwiXCIgICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga09taXRMYXN0MSwgICAgICBcIlwiICAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICBcIiwgXCIsIGtJZGVudGl0eSwgICAgICAgXCIgXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiLCBcIiAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICBcIiBcIiwga1VwcGVyY2FzZUZpcnN0LCBcIiBcIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCIgaW4gXCIgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiIHRvIFwiICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgIFwiZSBcIiwga0lkZW50aXR5LCAgICAgICBcIiBcIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCJcXFwiXCIgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCIuXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiXFxcIj5cIiAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiXFxuXCIgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtPbWl0TGFzdDMsICAgICAgXCJcIiAgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiXVwiICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIiBmb3IgXCIgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtPbWl0Rmlyc3QzLCAgICAgXCJcIiAgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrT21pdExhc3QyLCAgICAgIFwiXCIgICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIiBhIFwiICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCIgdGhhdCBcIiAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgIFwiIFwiLCBrVXBwZXJjYXNlRmlyc3QsIFwiXCIgICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIi4gXCIgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgXCIuXCIsIGtJZGVudGl0eSwgICAgICAgXCJcIiAgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgIFwiIFwiLCBrSWRlbnRpdHksICAgICAgIFwiLCBcIiAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga09taXRGaXJzdDQsICAgICBcIlwiICAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCIgd2l0aCBcIiAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiJ1wiICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIiBmcm9tIFwiICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCIgYnkgXCIgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrT21pdEZpcnN0NSwgICAgIFwiXCIgICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga09taXRGaXJzdDYsICAgICBcIlwiICAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICBcIiB0aGUgXCIsIGtJZGVudGl0eSwgICAgICAgXCJcIiAgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrT21pdExhc3Q0LCAgICAgIFwiXCIgICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIi4gVGhlIFwiICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtVcHBlcmNhc2VBbGwsICAgXCJcIiAgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiIG9uIFwiICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIiBhcyBcIiAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCIgaXMgXCIgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrT21pdExhc3Q3LCAgICAgIFwiXCIgICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga09taXRMYXN0MSwgICAgICBcImluZyBcIiAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCJcXG5cXHRcIiAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCI6XCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgIFwiIFwiLCBrSWRlbnRpdHksICAgICAgIFwiLiBcIiAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcImVkIFwiICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtPbWl0Rmlyc3Q5LCAgICAgXCJcIiAgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrT21pdEZpcnN0NywgICAgIFwiXCIgICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga09taXRMYXN0NiwgICAgICBcIlwiICAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCIoXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrVXBwZXJjYXNlRmlyc3QsIFwiLCBcIiAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga09taXRMYXN0OCwgICAgICBcIlwiICAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCIgYXQgXCIgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwibHkgXCIgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgIFwiIHRoZSBcIiwga0lkZW50aXR5LCAgICAgICBcIiBvZiBcIiAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtPbWl0TGFzdDUsICAgICAgXCJcIiAgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrT21pdExhc3Q5LCAgICAgIFwiXCIgICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICBcIiBcIiwga1VwcGVyY2FzZUZpcnN0LCBcIiwgXCIgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtVcHBlcmNhc2VGaXJzdCwgXCJcXFwiXCIgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgXCIuXCIsIGtJZGVudGl0eSwgICAgICAgXCIoXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrVXBwZXJjYXNlQWxsLCAgIFwiIFwiICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga1VwcGVyY2FzZUZpcnN0LCBcIlxcXCI+XCIgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIj1cXFwiXCIgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICBcIiBcIiwga0lkZW50aXR5LCAgICAgICBcIi5cIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICBcIi5jb20vXCIsIGtJZGVudGl0eSwgICAgICAgXCJcIiAgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgXCIgdGhlIFwiLCBrSWRlbnRpdHksICAgICAgIFwiIG9mIHRoZSBcIiAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga1VwcGVyY2FzZUZpcnN0LCBcIidcIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCIuIFRoaXMgXCIgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiLFwiICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICBcIi5cIiwga0lkZW50aXR5LCAgICAgICBcIiBcIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtVcHBlcmNhc2VGaXJzdCwgXCIoXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrVXBwZXJjYXNlRmlyc3QsIFwiLlwiICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIiBub3QgXCIgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgXCIgXCIsIGtJZGVudGl0eSwgICAgICAgXCI9XFxcIlwiICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCJlciBcIiAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgIFwiIFwiLCBrVXBwZXJjYXNlQWxsLCAgIFwiIFwiICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcImFsIFwiICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgXCIgXCIsIGtVcHBlcmNhc2VBbGwsICAgXCJcIiAgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiPSdcIiAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga1VwcGVyY2FzZUFsbCwgICBcIlxcXCJcIiAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga1VwcGVyY2FzZUZpcnN0LCBcIi4gXCIgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgXCIgXCIsIGtJZGVudGl0eSwgICAgICAgXCIoXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiZnVsIFwiICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICBcIiBcIiwga1VwcGVyY2FzZUZpcnN0LCBcIi4gXCIgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCJpdmUgXCIgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwibGVzcyBcIiAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga1VwcGVyY2FzZUFsbCwgICBcIidcIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCJlc3QgXCIgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgIFwiIFwiLCBrVXBwZXJjYXNlRmlyc3QsIFwiLlwiICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga1VwcGVyY2FzZUFsbCwgICBcIlxcXCI+XCIgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICBcIiBcIiwga0lkZW50aXR5LCAgICAgICBcIj0nXCIgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtVcHBlcmNhc2VGaXJzdCwgXCIsXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiaXplIFwiICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga1VwcGVyY2FzZUFsbCwgICBcIi5cIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCBcIlxceGMyXFx4YTBcIiwga0lkZW50aXR5LCAgICAgICBcIlwiICAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgXCIgXCIsIGtJZGVudGl0eSwgICAgICAgXCIsXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrVXBwZXJjYXNlRmlyc3QsIFwiPVxcXCJcIiAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrVXBwZXJjYXNlQWxsLCAgIFwiPVxcXCJcIiAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwib3VzIFwiICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga1VwcGVyY2FzZUFsbCwgICBcIiwgXCIgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtVcHBlcmNhc2VGaXJzdCwgXCI9J1wiICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgIFwiIFwiLCBrVXBwZXJjYXNlRmlyc3QsIFwiLFwiICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICBcIiBcIiwga1VwcGVyY2FzZUFsbCwgICBcIj1cXFwiXCIgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICBcIiBcIiwga1VwcGVyY2FzZUFsbCwgICBcIiwgXCIgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtVcHBlcmNhc2VBbGwsICAgXCIsXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrVXBwZXJjYXNlQWxsLCAgIFwiKFwiICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga1VwcGVyY2FzZUFsbCwgICBcIi4gXCIgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgXCIgXCIsIGtVcHBlcmNhc2VBbGwsICAgXCIuXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrVXBwZXJjYXNlQWxsLCAgIFwiPSdcIiAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICBcIiBcIiwga1VwcGVyY2FzZUFsbCwgICBcIi4gXCIgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgXCIgXCIsIGtVcHBlcmNhc2VGaXJzdCwgXCI9XFxcIlwiICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgXCIgXCIsIGtVcHBlcmNhc2VBbGwsICAgXCI9J1wiICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgIFwiIFwiLCBrVXBwZXJjYXNlRmlyc3QsIFwiPSdcIiAgICAgICAgIClcbl07XG5cbmV4cG9ydHMua1RyYW5zZm9ybXMgPSBrVHJhbnNmb3JtcztcbmV4cG9ydHMua051bVRyYW5zZm9ybXMgPSBrVHJhbnNmb3Jtcy5sZW5ndGg7XG5cbmZ1bmN0aW9uIFRvVXBwZXJDYXNlKHAsIGkpIHtcbiAgaWYgKHBbaV0gPCAweGMwKSB7XG4gICAgaWYgKHBbaV0gPj0gOTcgJiYgcFtpXSA8PSAxMjIpIHtcbiAgICAgIHBbaV0gXj0gMzI7XG4gICAgfVxuICAgIHJldHVybiAxO1xuICB9XG4gIFxuICAvKiBBbiBvdmVybHkgc2ltcGxpZmllZCB1cHBlcmNhc2luZyBtb2RlbCBmb3IgdXRmLTguICovXG4gIGlmIChwW2ldIDwgMHhlMCkge1xuICAgIHBbaSArIDFdIF49IDMyO1xuICAgIHJldHVybiAyO1xuICB9XG4gIFxuICAvKiBBbiBhcmJpdHJhcnkgdHJhbnNmb3JtIGZvciB0aHJlZSBieXRlIGNoYXJhY3RlcnMuICovXG4gIHBbaSArIDJdIF49IDU7XG4gIHJldHVybiAzO1xufVxuXG5leHBvcnRzLnRyYW5zZm9ybURpY3Rpb25hcnlXb3JkID0gZnVuY3Rpb24oZHN0LCBpZHgsIHdvcmQsIGxlbiwgdHJhbnNmb3JtKSB7XG4gIHZhciBwcmVmaXggPSBrVHJhbnNmb3Jtc1t0cmFuc2Zvcm1dLnByZWZpeDtcbiAgdmFyIHN1ZmZpeCA9IGtUcmFuc2Zvcm1zW3RyYW5zZm9ybV0uc3VmZml4O1xuICB2YXIgdCA9IGtUcmFuc2Zvcm1zW3RyYW5zZm9ybV0udHJhbnNmb3JtO1xuICB2YXIgc2tpcCA9IHQgPCBrT21pdEZpcnN0MSA/IDAgOiB0IC0gKGtPbWl0Rmlyc3QxIC0gMSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHN0YXJ0X2lkeCA9IGlkeDtcbiAgdmFyIHVwcGVyY2FzZTtcbiAgXG4gIGlmIChza2lwID4gbGVuKSB7XG4gICAgc2tpcCA9IGxlbjtcbiAgfVxuICBcbiAgdmFyIHByZWZpeF9wb3MgPSAwO1xuICB3aGlsZSAocHJlZml4X3BvcyA8IHByZWZpeC5sZW5ndGgpIHtcbiAgICBkc3RbaWR4KytdID0gcHJlZml4W3ByZWZpeF9wb3MrK107XG4gIH1cbiAgXG4gIHdvcmQgKz0gc2tpcDtcbiAgbGVuIC09IHNraXA7XG4gIFxuICBpZiAodCA8PSBrT21pdExhc3Q5KSB7XG4gICAgbGVuIC09IHQ7XG4gIH1cbiAgXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGRzdFtpZHgrK10gPSBCcm90bGlEaWN0aW9uYXJ5LmRpY3Rpb25hcnlbd29yZCArIGldO1xuICB9XG4gIFxuICB1cHBlcmNhc2UgPSBpZHggLSBsZW47XG4gIFxuICBpZiAodCA9PT0ga1VwcGVyY2FzZUZpcnN0KSB7XG4gICAgVG9VcHBlckNhc2UoZHN0LCB1cHBlcmNhc2UpO1xuICB9IGVsc2UgaWYgKHQgPT09IGtVcHBlcmNhc2VBbGwpIHtcbiAgICB3aGlsZSAobGVuID4gMCkge1xuICAgICAgdmFyIHN0ZXAgPSBUb1VwcGVyQ2FzZShkc3QsIHVwcGVyY2FzZSk7XG4gICAgICB1cHBlcmNhc2UgKz0gc3RlcDtcbiAgICAgIGxlbiAtPSBzdGVwO1xuICAgIH1cbiAgfVxuICBcbiAgdmFyIHN1ZmZpeF9wb3MgPSAwO1xuICB3aGlsZSAoc3VmZml4X3BvcyA8IHN1ZmZpeC5sZW5ndGgpIHtcbiAgICBkc3RbaWR4KytdID0gc3VmZml4W3N1ZmZpeF9wb3MrK107XG4gIH1cbiAgXG4gIHJldHVybiBpZHggLSBzdGFydF9pZHg7XG59XG4iLCAiLyogQ29weXJpZ2h0IDIwMTMgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuICAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbnZhciBCcm90bGlJbnB1dCA9IHJlcXVpcmUoJy4vc3RyZWFtcycpLkJyb3RsaUlucHV0O1xudmFyIEJyb3RsaU91dHB1dCA9IHJlcXVpcmUoJy4vc3RyZWFtcycpLkJyb3RsaU91dHB1dDtcbnZhciBCcm90bGlCaXRSZWFkZXIgPSByZXF1aXJlKCcuL2JpdF9yZWFkZXInKTtcbnZhciBCcm90bGlEaWN0aW9uYXJ5ID0gcmVxdWlyZSgnLi9kaWN0aW9uYXJ5Jyk7XG52YXIgSHVmZm1hbkNvZGUgPSByZXF1aXJlKCcuL2h1ZmZtYW4nKS5IdWZmbWFuQ29kZTtcbnZhciBCcm90bGlCdWlsZEh1ZmZtYW5UYWJsZSA9IHJlcXVpcmUoJy4vaHVmZm1hbicpLkJyb3RsaUJ1aWxkSHVmZm1hblRhYmxlO1xudmFyIENvbnRleHQgPSByZXF1aXJlKCcuL2NvbnRleHQnKTtcbnZhciBQcmVmaXggPSByZXF1aXJlKCcuL3ByZWZpeCcpO1xudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtJyk7XG5cbnZhciBrRGVmYXVsdENvZGVMZW5ndGggPSA4O1xudmFyIGtDb2RlTGVuZ3RoUmVwZWF0Q29kZSA9IDE2O1xudmFyIGtOdW1MaXRlcmFsQ29kZXMgPSAyNTY7XG52YXIga051bUluc2VydEFuZENvcHlDb2RlcyA9IDcwNDtcbnZhciBrTnVtQmxvY2tMZW5ndGhDb2RlcyA9IDI2O1xudmFyIGtMaXRlcmFsQ29udGV4dEJpdHMgPSA2O1xudmFyIGtEaXN0YW5jZUNvbnRleHRCaXRzID0gMjtcblxudmFyIEhVRkZNQU5fVEFCTEVfQklUUyA9IDg7XG52YXIgSFVGRk1BTl9UQUJMRV9NQVNLID0gMHhmZjtcbi8qIE1heGltdW0gcG9zc2libGUgSHVmZm1hbiB0YWJsZSBzaXplIGZvciBhbiBhbHBoYWJldCBzaXplIG9mIDcwNCwgbWF4IGNvZGVcbiAqIGxlbmd0aCAxNSBhbmQgcm9vdCB0YWJsZSBiaXRzIDguICovXG52YXIgSFVGRk1BTl9NQVhfVEFCTEVfU0laRSA9IDEwODA7XG5cbnZhciBDT0RFX0xFTkdUSF9DT0RFUyA9IDE4O1xudmFyIGtDb2RlTGVuZ3RoQ29kZU9yZGVyID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAxLCAyLCAzLCA0LCAwLCA1LCAxNywgNiwgMTYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsXG5dKTtcblxudmFyIE5VTV9ESVNUQU5DRV9TSE9SVF9DT0RFUyA9IDE2O1xudmFyIGtEaXN0YW5jZVNob3J0Q29kZUluZGV4T2Zmc2V0ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAzLCAyLCAxLCAwLCAzLCAzLCAzLCAzLCAzLCAzLCAyLCAyLCAyLCAyLCAyLCAyXG5dKTtcblxudmFyIGtEaXN0YW5jZVNob3J0Q29kZVZhbHVlT2Zmc2V0ID0gbmV3IEludDhBcnJheShbXG4gIDAsIDAsIDAsIDAsIC0xLCAxLCAtMiwgMiwgLTMsIDMsIC0xLCAxLCAtMiwgMiwgLTMsIDNcbl0pO1xuXG52YXIga01heEh1ZmZtYW5UYWJsZVNpemUgPSBuZXcgVWludDE2QXJyYXkoW1xuICAyNTYsIDQwMiwgNDM2LCA0NjgsIDUwMCwgNTM0LCA1NjYsIDU5OCwgNjMwLCA2NjIsIDY5NCwgNzI2LCA3NTgsIDc5MCwgODIyLFxuICA4NTQsIDg4NiwgOTIwLCA5NTIsIDk4NCwgMTAxNiwgMTA0OCwgMTA4MFxuXSk7XG5cbmZ1bmN0aW9uIERlY29kZVdpbmRvd0JpdHMoYnIpIHtcbiAgdmFyIG47XG4gIGlmIChici5yZWFkQml0cygxKSA9PT0gMCkge1xuICAgIHJldHVybiAxNjtcbiAgfVxuICBcbiAgbiA9IGJyLnJlYWRCaXRzKDMpO1xuICBpZiAobiA+IDApIHtcbiAgICByZXR1cm4gMTcgKyBuO1xuICB9XG4gIFxuICBuID0gYnIucmVhZEJpdHMoMyk7XG4gIGlmIChuID4gMCkge1xuICAgIHJldHVybiA4ICsgbjtcbiAgfVxuICBcbiAgcmV0dXJuIDE3O1xufVxuXG4vKiBEZWNvZGVzIGEgbnVtYmVyIGluIHRoZSByYW5nZSBbMC4uMjU1XSwgYnkgcmVhZGluZyAxIC0gMTEgYml0cy4gKi9cbmZ1bmN0aW9uIERlY29kZVZhckxlblVpbnQ4KGJyKSB7XG4gIGlmIChici5yZWFkQml0cygxKSkge1xuICAgIHZhciBuYml0cyA9IGJyLnJlYWRCaXRzKDMpO1xuICAgIGlmIChuYml0cyA9PT0gMCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBici5yZWFkQml0cyhuYml0cykgKyAoMSA8PCBuYml0cyk7XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBNZXRhQmxvY2tMZW5ndGgoKSB7XG4gIHRoaXMubWV0YV9ibG9ja19sZW5ndGggPSAwO1xuICB0aGlzLmlucHV0X2VuZCA9IDA7XG4gIHRoaXMuaXNfdW5jb21wcmVzc2VkID0gMDtcbiAgdGhpcy5pc19tZXRhZGF0YSA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBEZWNvZGVNZXRhQmxvY2tMZW5ndGgoYnIpIHtcbiAgdmFyIG91dCA9IG5ldyBNZXRhQmxvY2tMZW5ndGg7ICBcbiAgdmFyIHNpemVfbmliYmxlcztcbiAgdmFyIHNpemVfYnl0ZXM7XG4gIHZhciBpO1xuICBcbiAgb3V0LmlucHV0X2VuZCA9IGJyLnJlYWRCaXRzKDEpO1xuICBpZiAob3V0LmlucHV0X2VuZCAmJiBici5yZWFkQml0cygxKSkge1xuICAgIHJldHVybiBvdXQ7XG4gIH1cbiAgXG4gIHNpemVfbmliYmxlcyA9IGJyLnJlYWRCaXRzKDIpICsgNDtcbiAgaWYgKHNpemVfbmliYmxlcyA9PT0gNykge1xuICAgIG91dC5pc19tZXRhZGF0YSA9IHRydWU7XG4gICAgXG4gICAgaWYgKGJyLnJlYWRCaXRzKDEpICE9PSAwKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlc2VydmVkIGJpdCcpO1xuICAgIFxuICAgIHNpemVfYnl0ZXMgPSBici5yZWFkQml0cygyKTtcbiAgICBpZiAoc2l6ZV9ieXRlcyA9PT0gMClcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgXG4gICAgZm9yIChpID0gMDsgaSA8IHNpemVfYnl0ZXM7IGkrKykge1xuICAgICAgdmFyIG5leHRfYnl0ZSA9IGJyLnJlYWRCaXRzKDgpO1xuICAgICAgaWYgKGkgKyAxID09PSBzaXplX2J5dGVzICYmIHNpemVfYnl0ZXMgPiAxICYmIG5leHRfYnl0ZSA9PT0gMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNpemUgYnl0ZScpO1xuICAgICAgXG4gICAgICBvdXQubWV0YV9ibG9ja19sZW5ndGggfD0gbmV4dF9ieXRlIDw8IChpICogOCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAoaSA9IDA7IGkgPCBzaXplX25pYmJsZXM7ICsraSkge1xuICAgICAgdmFyIG5leHRfbmliYmxlID0gYnIucmVhZEJpdHMoNCk7XG4gICAgICBpZiAoaSArIDEgPT09IHNpemVfbmliYmxlcyAmJiBzaXplX25pYmJsZXMgPiA0ICYmIG5leHRfbmliYmxlID09PSAwKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2l6ZSBuaWJibGUnKTtcbiAgICAgIFxuICAgICAgb3V0Lm1ldGFfYmxvY2tfbGVuZ3RoIHw9IG5leHRfbmliYmxlIDw8IChpICogNCk7XG4gICAgfVxuICB9XG4gIFxuICArK291dC5tZXRhX2Jsb2NrX2xlbmd0aDtcbiAgXG4gIGlmICghb3V0LmlucHV0X2VuZCAmJiAhb3V0LmlzX21ldGFkYXRhKSB7XG4gICAgb3V0LmlzX3VuY29tcHJlc3NlZCA9IGJyLnJlYWRCaXRzKDEpO1xuICB9XG4gIFxuICByZXR1cm4gb3V0O1xufVxuXG4vKiBEZWNvZGVzIHRoZSBuZXh0IEh1ZmZtYW4gY29kZSBmcm9tIGJpdC1zdHJlYW0uICovXG5mdW5jdGlvbiBSZWFkU3ltYm9sKHRhYmxlLCBpbmRleCwgYnIpIHtcbiAgdmFyIHN0YXJ0X2luZGV4ID0gaW5kZXg7XG4gIFxuICB2YXIgbmJpdHM7XG4gIGJyLmZpbGxCaXRXaW5kb3coKTtcbiAgaW5kZXggKz0gKGJyLnZhbF8gPj4+IGJyLmJpdF9wb3NfKSAmIEhVRkZNQU5fVEFCTEVfTUFTSztcbiAgbmJpdHMgPSB0YWJsZVtpbmRleF0uYml0cyAtIEhVRkZNQU5fVEFCTEVfQklUUztcbiAgaWYgKG5iaXRzID4gMCkge1xuICAgIGJyLmJpdF9wb3NfICs9IEhVRkZNQU5fVEFCTEVfQklUUztcbiAgICBpbmRleCArPSB0YWJsZVtpbmRleF0udmFsdWU7XG4gICAgaW5kZXggKz0gKGJyLnZhbF8gPj4+IGJyLmJpdF9wb3NfKSAmICgoMSA8PCBuYml0cykgLSAxKTtcbiAgfVxuICBici5iaXRfcG9zXyArPSB0YWJsZVtpbmRleF0uYml0cztcbiAgcmV0dXJuIHRhYmxlW2luZGV4XS52YWx1ZTtcbn1cblxuZnVuY3Rpb24gUmVhZEh1ZmZtYW5Db2RlTGVuZ3Rocyhjb2RlX2xlbmd0aF9jb2RlX2xlbmd0aHMsIG51bV9zeW1ib2xzLCBjb2RlX2xlbmd0aHMsIGJyKSB7XG4gIHZhciBzeW1ib2wgPSAwO1xuICB2YXIgcHJldl9jb2RlX2xlbiA9IGtEZWZhdWx0Q29kZUxlbmd0aDtcbiAgdmFyIHJlcGVhdCA9IDA7XG4gIHZhciByZXBlYXRfY29kZV9sZW4gPSAwO1xuICB2YXIgc3BhY2UgPSAzMjc2ODtcbiAgXG4gIHZhciB0YWJsZSA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpKyspXG4gICAgdGFibGUucHVzaChuZXcgSHVmZm1hbkNvZGUoMCwgMCkpO1xuICBcbiAgQnJvdGxpQnVpbGRIdWZmbWFuVGFibGUodGFibGUsIDAsIDUsIGNvZGVfbGVuZ3RoX2NvZGVfbGVuZ3RocywgQ09ERV9MRU5HVEhfQ09ERVMpO1xuXG4gIHdoaWxlIChzeW1ib2wgPCBudW1fc3ltYm9scyAmJiBzcGFjZSA+IDApIHtcbiAgICB2YXIgcCA9IDA7XG4gICAgdmFyIGNvZGVfbGVuO1xuICAgIFxuICAgIGJyLnJlYWRNb3JlSW5wdXQoKTtcbiAgICBici5maWxsQml0V2luZG93KCk7XG4gICAgcCArPSAoYnIudmFsXyA+Pj4gYnIuYml0X3Bvc18pICYgMzE7XG4gICAgYnIuYml0X3Bvc18gKz0gdGFibGVbcF0uYml0cztcbiAgICBjb2RlX2xlbiA9IHRhYmxlW3BdLnZhbHVlICYgMHhmZjtcbiAgICBpZiAoY29kZV9sZW4gPCBrQ29kZUxlbmd0aFJlcGVhdENvZGUpIHtcbiAgICAgIHJlcGVhdCA9IDA7XG4gICAgICBjb2RlX2xlbmd0aHNbc3ltYm9sKytdID0gY29kZV9sZW47XG4gICAgICBpZiAoY29kZV9sZW4gIT09IDApIHtcbiAgICAgICAgcHJldl9jb2RlX2xlbiA9IGNvZGVfbGVuO1xuICAgICAgICBzcGFjZSAtPSAzMjc2OCA+PiBjb2RlX2xlbjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGV4dHJhX2JpdHMgPSBjb2RlX2xlbiAtIDE0O1xuICAgICAgdmFyIG9sZF9yZXBlYXQ7XG4gICAgICB2YXIgcmVwZWF0X2RlbHRhO1xuICAgICAgdmFyIG5ld19sZW4gPSAwO1xuICAgICAgaWYgKGNvZGVfbGVuID09PSBrQ29kZUxlbmd0aFJlcGVhdENvZGUpIHtcbiAgICAgICAgbmV3X2xlbiA9IHByZXZfY29kZV9sZW47XG4gICAgICB9XG4gICAgICBpZiAocmVwZWF0X2NvZGVfbGVuICE9PSBuZXdfbGVuKSB7XG4gICAgICAgIHJlcGVhdCA9IDA7XG4gICAgICAgIHJlcGVhdF9jb2RlX2xlbiA9IG5ld19sZW47XG4gICAgICB9XG4gICAgICBvbGRfcmVwZWF0ID0gcmVwZWF0O1xuICAgICAgaWYgKHJlcGVhdCA+IDApIHtcbiAgICAgICAgcmVwZWF0IC09IDI7XG4gICAgICAgIHJlcGVhdCA8PD0gZXh0cmFfYml0cztcbiAgICAgIH1cbiAgICAgIHJlcGVhdCArPSBici5yZWFkQml0cyhleHRyYV9iaXRzKSArIDM7XG4gICAgICByZXBlYXRfZGVsdGEgPSByZXBlYXQgLSBvbGRfcmVwZWF0O1xuICAgICAgaWYgKHN5bWJvbCArIHJlcGVhdF9kZWx0YSA+IG51bV9zeW1ib2xzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignW1JlYWRIdWZmbWFuQ29kZUxlbmd0aHNdIHN5bWJvbCArIHJlcGVhdF9kZWx0YSA+IG51bV9zeW1ib2xzJyk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgcmVwZWF0X2RlbHRhOyB4KyspXG4gICAgICAgIGNvZGVfbGVuZ3Roc1tzeW1ib2wgKyB4XSA9IHJlcGVhdF9jb2RlX2xlbjtcbiAgICAgIFxuICAgICAgc3ltYm9sICs9IHJlcGVhdF9kZWx0YTtcbiAgICAgIFxuICAgICAgaWYgKHJlcGVhdF9jb2RlX2xlbiAhPT0gMCkge1xuICAgICAgICBzcGFjZSAtPSByZXBlYXRfZGVsdGEgPDwgKDE1IC0gcmVwZWF0X2NvZGVfbGVuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHNwYWNlICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiW1JlYWRIdWZmbWFuQ29kZUxlbmd0aHNdIHNwYWNlID0gXCIgKyBzcGFjZSk7XG4gIH1cbiAgXG4gIGZvciAoOyBzeW1ib2wgPCBudW1fc3ltYm9sczsgc3ltYm9sKyspXG4gICAgY29kZV9sZW5ndGhzW3N5bWJvbF0gPSAwO1xufVxuXG5mdW5jdGlvbiBSZWFkSHVmZm1hbkNvZGUoYWxwaGFiZXRfc2l6ZSwgdGFibGVzLCB0YWJsZSwgYnIpIHtcbiAgdmFyIHRhYmxlX3NpemUgPSAwO1xuICB2YXIgc2ltcGxlX2NvZGVfb3Jfc2tpcDtcbiAgdmFyIGNvZGVfbGVuZ3RocyA9IG5ldyBVaW50OEFycmF5KGFscGhhYmV0X3NpemUpO1xuICBcbiAgYnIucmVhZE1vcmVJbnB1dCgpO1xuICBcbiAgLyogc2ltcGxlX2NvZGVfb3Jfc2tpcCBpcyB1c2VkIGFzIGZvbGxvd3M6XG4gICAgIDEgZm9yIHNpbXBsZSBjb2RlO1xuICAgICAwIGZvciBubyBza2lwcGluZywgMiBza2lwcyAyIGNvZGUgbGVuZ3RocywgMyBza2lwcyAzIGNvZGUgbGVuZ3RocyAqL1xuICBzaW1wbGVfY29kZV9vcl9za2lwID0gYnIucmVhZEJpdHMoMik7XG4gIGlmIChzaW1wbGVfY29kZV9vcl9za2lwID09PSAxKSB7XG4gICAgLyogUmVhZCBzeW1ib2xzLCBjb2RlcyAmIGNvZGUgbGVuZ3RocyBkaXJlY3RseS4gKi9cbiAgICB2YXIgaTtcbiAgICB2YXIgbWF4X2JpdHNfY291bnRlciA9IGFscGhhYmV0X3NpemUgLSAxO1xuICAgIHZhciBtYXhfYml0cyA9IDA7XG4gICAgdmFyIHN5bWJvbHMgPSBuZXcgSW50MzJBcnJheSg0KTtcbiAgICB2YXIgbnVtX3N5bWJvbHMgPSBici5yZWFkQml0cygyKSArIDE7XG4gICAgd2hpbGUgKG1heF9iaXRzX2NvdW50ZXIpIHtcbiAgICAgIG1heF9iaXRzX2NvdW50ZXIgPj49IDE7XG4gICAgICArK21heF9iaXRzO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBudW1fc3ltYm9sczsgKytpKSB7XG4gICAgICBzeW1ib2xzW2ldID0gYnIucmVhZEJpdHMobWF4X2JpdHMpICUgYWxwaGFiZXRfc2l6ZTtcbiAgICAgIGNvZGVfbGVuZ3Roc1tzeW1ib2xzW2ldXSA9IDI7XG4gICAgfVxuICAgIGNvZGVfbGVuZ3Roc1tzeW1ib2xzWzBdXSA9IDE7XG4gICAgc3dpdGNoIChudW1fc3ltYm9scykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaWYgKChzeW1ib2xzWzBdID09PSBzeW1ib2xzWzFdKSB8fFxuICAgICAgICAgICAgKHN5bWJvbHNbMF0gPT09IHN5bWJvbHNbMl0pIHx8XG4gICAgICAgICAgICAoc3ltYm9sc1sxXSA9PT0gc3ltYm9sc1syXSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tSZWFkSHVmZm1hbkNvZGVdIGludmFsaWQgc3ltYm9scycpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBpZiAoc3ltYm9sc1swXSA9PT0gc3ltYm9sc1sxXSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1JlYWRIdWZmbWFuQ29kZV0gaW52YWxpZCBzeW1ib2xzJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvZGVfbGVuZ3Roc1tzeW1ib2xzWzFdXSA9IDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICBpZiAoKHN5bWJvbHNbMF0gPT09IHN5bWJvbHNbMV0pIHx8XG4gICAgICAgICAgICAoc3ltYm9sc1swXSA9PT0gc3ltYm9sc1syXSkgfHxcbiAgICAgICAgICAgIChzeW1ib2xzWzBdID09PSBzeW1ib2xzWzNdKSB8fFxuICAgICAgICAgICAgKHN5bWJvbHNbMV0gPT09IHN5bWJvbHNbMl0pIHx8XG4gICAgICAgICAgICAoc3ltYm9sc1sxXSA9PT0gc3ltYm9sc1szXSkgfHxcbiAgICAgICAgICAgIChzeW1ib2xzWzJdID09PSBzeW1ib2xzWzNdKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1JlYWRIdWZmbWFuQ29kZV0gaW52YWxpZCBzeW1ib2xzJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChici5yZWFkQml0cygxKSkge1xuICAgICAgICAgIGNvZGVfbGVuZ3Roc1tzeW1ib2xzWzJdXSA9IDM7XG4gICAgICAgICAgY29kZV9sZW5ndGhzW3N5bWJvbHNbM11dID0gMztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb2RlX2xlbmd0aHNbc3ltYm9sc1swXV0gPSAyO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSBlbHNlIHsgIC8qIERlY29kZSBIdWZmbWFuLWNvZGVkIGNvZGUgbGVuZ3Rocy4gKi9cbiAgICB2YXIgaTtcbiAgICB2YXIgY29kZV9sZW5ndGhfY29kZV9sZW5ndGhzID0gbmV3IFVpbnQ4QXJyYXkoQ09ERV9MRU5HVEhfQ09ERVMpO1xuICAgIHZhciBzcGFjZSA9IDMyO1xuICAgIHZhciBudW1fY29kZXMgPSAwO1xuICAgIC8qIFN0YXRpYyBIdWZmbWFuIGNvZGUgZm9yIHRoZSBjb2RlIGxlbmd0aCBjb2RlIGxlbmd0aHMgKi9cbiAgICB2YXIgaHVmZiA9IFtcbiAgICAgIG5ldyBIdWZmbWFuQ29kZSgyLCAwKSwgbmV3IEh1ZmZtYW5Db2RlKDIsIDQpLCBuZXcgSHVmZm1hbkNvZGUoMiwgMyksIG5ldyBIdWZmbWFuQ29kZSgzLCAyKSwgXG4gICAgICBuZXcgSHVmZm1hbkNvZGUoMiwgMCksIG5ldyBIdWZmbWFuQ29kZSgyLCA0KSwgbmV3IEh1ZmZtYW5Db2RlKDIsIDMpLCBuZXcgSHVmZm1hbkNvZGUoNCwgMSksXG4gICAgICBuZXcgSHVmZm1hbkNvZGUoMiwgMCksIG5ldyBIdWZmbWFuQ29kZSgyLCA0KSwgbmV3IEh1ZmZtYW5Db2RlKDIsIDMpLCBuZXcgSHVmZm1hbkNvZGUoMywgMiksIFxuICAgICAgbmV3IEh1ZmZtYW5Db2RlKDIsIDApLCBuZXcgSHVmZm1hbkNvZGUoMiwgNCksIG5ldyBIdWZmbWFuQ29kZSgyLCAzKSwgbmV3IEh1ZmZtYW5Db2RlKDQsIDUpXG4gICAgXTtcbiAgICBmb3IgKGkgPSBzaW1wbGVfY29kZV9vcl9za2lwOyBpIDwgQ09ERV9MRU5HVEhfQ09ERVMgJiYgc3BhY2UgPiAwOyArK2kpIHtcbiAgICAgIHZhciBjb2RlX2xlbl9pZHggPSBrQ29kZUxlbmd0aENvZGVPcmRlcltpXTtcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIHZhciB2O1xuICAgICAgYnIuZmlsbEJpdFdpbmRvdygpO1xuICAgICAgcCArPSAoYnIudmFsXyA+Pj4gYnIuYml0X3Bvc18pICYgMTU7XG4gICAgICBici5iaXRfcG9zXyArPSBodWZmW3BdLmJpdHM7XG4gICAgICB2ID0gaHVmZltwXS52YWx1ZTtcbiAgICAgIGNvZGVfbGVuZ3RoX2NvZGVfbGVuZ3Roc1tjb2RlX2xlbl9pZHhdID0gdjtcbiAgICAgIGlmICh2ICE9PSAwKSB7XG4gICAgICAgIHNwYWNlIC09ICgzMiA+PiB2KTtcbiAgICAgICAgKytudW1fY29kZXM7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIGlmICghKG51bV9jb2RlcyA9PT0gMSB8fCBzcGFjZSA9PT0gMCkpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tSZWFkSHVmZm1hbkNvZGVdIGludmFsaWQgbnVtX2NvZGVzIG9yIHNwYWNlJyk7XG4gICAgXG4gICAgUmVhZEh1ZmZtYW5Db2RlTGVuZ3Rocyhjb2RlX2xlbmd0aF9jb2RlX2xlbmd0aHMsIGFscGhhYmV0X3NpemUsIGNvZGVfbGVuZ3RocywgYnIpO1xuICB9XG4gIFxuICB0YWJsZV9zaXplID0gQnJvdGxpQnVpbGRIdWZmbWFuVGFibGUodGFibGVzLCB0YWJsZSwgSFVGRk1BTl9UQUJMRV9CSVRTLCBjb2RlX2xlbmd0aHMsIGFscGhhYmV0X3NpemUpO1xuICBcbiAgaWYgKHRhYmxlX3NpemUgPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJbUmVhZEh1ZmZtYW5Db2RlXSBCdWlsZEh1ZmZtYW5UYWJsZSBmYWlsZWQ6IFwiKTtcbiAgfVxuICBcbiAgcmV0dXJuIHRhYmxlX3NpemU7XG59XG5cbmZ1bmN0aW9uIFJlYWRCbG9ja0xlbmd0aCh0YWJsZSwgaW5kZXgsIGJyKSB7XG4gIHZhciBjb2RlO1xuICB2YXIgbmJpdHM7XG4gIGNvZGUgPSBSZWFkU3ltYm9sKHRhYmxlLCBpbmRleCwgYnIpO1xuICBuYml0cyA9IFByZWZpeC5rQmxvY2tMZW5ndGhQcmVmaXhDb2RlW2NvZGVdLm5iaXRzO1xuICByZXR1cm4gUHJlZml4LmtCbG9ja0xlbmd0aFByZWZpeENvZGVbY29kZV0ub2Zmc2V0ICsgYnIucmVhZEJpdHMobmJpdHMpO1xufVxuXG5mdW5jdGlvbiBUcmFuc2xhdGVTaG9ydENvZGVzKGNvZGUsIHJpbmdidWZmZXIsIGluZGV4KSB7XG4gIHZhciB2YWw7XG4gIGlmIChjb2RlIDwgTlVNX0RJU1RBTkNFX1NIT1JUX0NPREVTKSB7XG4gICAgaW5kZXggKz0ga0Rpc3RhbmNlU2hvcnRDb2RlSW5kZXhPZmZzZXRbY29kZV07XG4gICAgaW5kZXggJj0gMztcbiAgICB2YWwgPSByaW5nYnVmZmVyW2luZGV4XSArIGtEaXN0YW5jZVNob3J0Q29kZVZhbHVlT2Zmc2V0W2NvZGVdO1xuICB9IGVsc2Uge1xuICAgIHZhbCA9IGNvZGUgLSBOVU1fRElTVEFOQ0VfU0hPUlRfQ09ERVMgKyAxO1xuICB9XG4gIHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIE1vdmVUb0Zyb250KHYsIGluZGV4KSB7XG4gIHZhciB2YWx1ZSA9IHZbaW5kZXhdO1xuICB2YXIgaSA9IGluZGV4O1xuICBmb3IgKDsgaTsgLS1pKSB2W2ldID0gdltpIC0gMV07XG4gIHZbMF0gPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gSW52ZXJzZU1vdmVUb0Zyb250VHJhbnNmb3JtKHYsIHZfbGVuKSB7XG4gIHZhciBtdGYgPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICB2YXIgaTtcbiAgZm9yIChpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gICAgbXRmW2ldID0gaTtcbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgdl9sZW47ICsraSkge1xuICAgIHZhciBpbmRleCA9IHZbaV07XG4gICAgdltpXSA9IG10ZltpbmRleF07XG4gICAgaWYgKGluZGV4KSBNb3ZlVG9Gcm9udChtdGYsIGluZGV4KTtcbiAgfVxufVxuXG4vKiBDb250YWlucyBhIGNvbGxlY3Rpb24gb2YgaHVmZm1hbiB0cmVlcyB3aXRoIHRoZSBzYW1lIGFscGhhYmV0IHNpemUuICovXG5mdW5jdGlvbiBIdWZmbWFuVHJlZUdyb3VwKGFscGhhYmV0X3NpemUsIG51bV9odHJlZXMpIHtcbiAgdGhpcy5hbHBoYWJldF9zaXplID0gYWxwaGFiZXRfc2l6ZTtcbiAgdGhpcy5udW1faHRyZWVzID0gbnVtX2h0cmVlcztcbiAgdGhpcy5jb2RlcyA9IG5ldyBBcnJheShudW1faHRyZWVzICsgbnVtX2h0cmVlcyAqIGtNYXhIdWZmbWFuVGFibGVTaXplWyhhbHBoYWJldF9zaXplICsgMzEpID4+PiA1XSk7ICBcbiAgdGhpcy5odHJlZXMgPSBuZXcgVWludDMyQXJyYXkobnVtX2h0cmVlcyk7XG59XG5cbkh1ZmZtYW5UcmVlR3JvdXAucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uKGJyKSB7XG4gIHZhciBpO1xuICB2YXIgdGFibGVfc2l6ZTtcbiAgdmFyIG5leHQgPSAwO1xuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5udW1faHRyZWVzOyArK2kpIHtcbiAgICB0aGlzLmh0cmVlc1tpXSA9IG5leHQ7XG4gICAgdGFibGVfc2l6ZSA9IFJlYWRIdWZmbWFuQ29kZSh0aGlzLmFscGhhYmV0X3NpemUsIHRoaXMuY29kZXMsIG5leHQsIGJyKTtcbiAgICBuZXh0ICs9IHRhYmxlX3NpemU7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIERlY29kZUNvbnRleHRNYXAoY29udGV4dF9tYXBfc2l6ZSwgYnIpIHtcbiAgdmFyIG91dCA9IHsgbnVtX2h0cmVlczogbnVsbCwgY29udGV4dF9tYXA6IG51bGwgfTtcbiAgdmFyIHVzZV9ybGVfZm9yX3plcm9zO1xuICB2YXIgbWF4X3J1bl9sZW5ndGhfcHJlZml4ID0gMDtcbiAgdmFyIHRhYmxlO1xuICB2YXIgaTtcbiAgXG4gIGJyLnJlYWRNb3JlSW5wdXQoKTtcbiAgdmFyIG51bV9odHJlZXMgPSBvdXQubnVtX2h0cmVlcyA9IERlY29kZVZhckxlblVpbnQ4KGJyKSArIDE7XG5cbiAgdmFyIGNvbnRleHRfbWFwID0gb3V0LmNvbnRleHRfbWFwID0gbmV3IFVpbnQ4QXJyYXkoY29udGV4dF9tYXBfc2l6ZSk7XG4gIGlmIChudW1faHRyZWVzIDw9IDEpIHtcbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgdXNlX3JsZV9mb3JfemVyb3MgPSBici5yZWFkQml0cygxKTtcbiAgaWYgKHVzZV9ybGVfZm9yX3plcm9zKSB7XG4gICAgbWF4X3J1bl9sZW5ndGhfcHJlZml4ID0gYnIucmVhZEJpdHMoNCkgKyAxO1xuICB9XG4gIFxuICB0YWJsZSA9IFtdO1xuICBmb3IgKGkgPSAwOyBpIDwgSFVGRk1BTl9NQVhfVEFCTEVfU0laRTsgaSsrKSB7XG4gICAgdGFibGVbaV0gPSBuZXcgSHVmZm1hbkNvZGUoMCwgMCk7XG4gIH1cbiAgXG4gIFJlYWRIdWZmbWFuQ29kZShudW1faHRyZWVzICsgbWF4X3J1bl9sZW5ndGhfcHJlZml4LCB0YWJsZSwgMCwgYnIpO1xuICBcbiAgZm9yIChpID0gMDsgaSA8IGNvbnRleHRfbWFwX3NpemU7KSB7XG4gICAgdmFyIGNvZGU7XG5cbiAgICBici5yZWFkTW9yZUlucHV0KCk7XG4gICAgY29kZSA9IFJlYWRTeW1ib2wodGFibGUsIDAsIGJyKTtcbiAgICBpZiAoY29kZSA9PT0gMCkge1xuICAgICAgY29udGV4dF9tYXBbaV0gPSAwO1xuICAgICAgKytpO1xuICAgIH0gZWxzZSBpZiAoY29kZSA8PSBtYXhfcnVuX2xlbmd0aF9wcmVmaXgpIHtcbiAgICAgIHZhciByZXBzID0gMSArICgxIDw8IGNvZGUpICsgYnIucmVhZEJpdHMoY29kZSk7XG4gICAgICB3aGlsZSAoLS1yZXBzKSB7XG4gICAgICAgIGlmIChpID49IGNvbnRleHRfbWFwX3NpemUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbRGVjb2RlQ29udGV4dE1hcF0gaSA+PSBjb250ZXh0X21hcF9zaXplXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHRfbWFwW2ldID0gMDtcbiAgICAgICAgKytpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZXh0X21hcFtpXSA9IGNvZGUgLSBtYXhfcnVuX2xlbmd0aF9wcmVmaXg7XG4gICAgICArK2k7XG4gICAgfVxuICB9XG4gIGlmIChici5yZWFkQml0cygxKSkge1xuICAgIEludmVyc2VNb3ZlVG9Gcm9udFRyYW5zZm9ybShjb250ZXh0X21hcCwgY29udGV4dF9tYXBfc2l6ZSk7XG4gIH1cbiAgXG4gIHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIERlY29kZUJsb2NrVHlwZShtYXhfYmxvY2tfdHlwZSwgdHJlZXMsIHRyZWVfdHlwZSwgYmxvY2tfdHlwZXMsIHJpbmdidWZmZXJzLCBpbmRleGVzLCBicikge1xuICB2YXIgcmluZ2J1ZmZlciA9IHRyZWVfdHlwZSAqIDI7XG4gIHZhciBpbmRleCA9IHRyZWVfdHlwZTtcbiAgdmFyIHR5cGVfY29kZSA9IFJlYWRTeW1ib2wodHJlZXMsIHRyZWVfdHlwZSAqIEhVRkZNQU5fTUFYX1RBQkxFX1NJWkUsIGJyKTtcbiAgdmFyIGJsb2NrX3R5cGU7XG4gIGlmICh0eXBlX2NvZGUgPT09IDApIHtcbiAgICBibG9ja190eXBlID0gcmluZ2J1ZmZlcnNbcmluZ2J1ZmZlciArIChpbmRleGVzW2luZGV4XSAmIDEpXTtcbiAgfSBlbHNlIGlmICh0eXBlX2NvZGUgPT09IDEpIHtcbiAgICBibG9ja190eXBlID0gcmluZ2J1ZmZlcnNbcmluZ2J1ZmZlciArICgoaW5kZXhlc1tpbmRleF0gLSAxKSAmIDEpXSArIDE7XG4gIH0gZWxzZSB7XG4gICAgYmxvY2tfdHlwZSA9IHR5cGVfY29kZSAtIDI7XG4gIH1cbiAgaWYgKGJsb2NrX3R5cGUgPj0gbWF4X2Jsb2NrX3R5cGUpIHtcbiAgICBibG9ja190eXBlIC09IG1heF9ibG9ja190eXBlO1xuICB9XG4gIGJsb2NrX3R5cGVzW3RyZWVfdHlwZV0gPSBibG9ja190eXBlO1xuICByaW5nYnVmZmVyc1tyaW5nYnVmZmVyICsgKGluZGV4ZXNbaW5kZXhdICYgMSldID0gYmxvY2tfdHlwZTtcbiAgKytpbmRleGVzW2luZGV4XTtcbn1cblxuZnVuY3Rpb24gQ29weVVuY29tcHJlc3NlZEJsb2NrVG9PdXRwdXQob3V0cHV0LCBsZW4sIHBvcywgcmluZ2J1ZmZlciwgcmluZ2J1ZmZlcl9tYXNrLCBicikge1xuICB2YXIgcmJfc2l6ZSA9IHJpbmdidWZmZXJfbWFzayArIDE7XG4gIHZhciByYl9wb3MgPSBwb3MgJiByaW5nYnVmZmVyX21hc2s7XG4gIHZhciBicl9wb3MgPSBici5wb3NfICYgQnJvdGxpQml0UmVhZGVyLklCVUZfTUFTSztcbiAgdmFyIG5ieXRlcztcblxuICAvKiBGb3Igc2hvcnQgbGVuZ3RocyBjb3B5IGJ5dGUtYnktYnl0ZSAqL1xuICBpZiAobGVuIDwgOCB8fCBici5iaXRfcG9zXyArIChsZW4gPDwgMykgPCBici5iaXRfZW5kX3Bvc18pIHtcbiAgICB3aGlsZSAobGVuLS0gPiAwKSB7XG4gICAgICBici5yZWFkTW9yZUlucHV0KCk7XG4gICAgICByaW5nYnVmZmVyW3JiX3BvcysrXSA9IGJyLnJlYWRCaXRzKDgpO1xuICAgICAgaWYgKHJiX3BvcyA9PT0gcmJfc2l6ZSkge1xuICAgICAgICBvdXRwdXQud3JpdGUocmluZ2J1ZmZlciwgcmJfc2l6ZSk7XG4gICAgICAgIHJiX3BvcyA9IDA7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChici5iaXRfZW5kX3Bvc18gPCAzMikge1xuICAgIHRocm93IG5ldyBFcnJvcignW0NvcHlVbmNvbXByZXNzZWRCbG9ja1RvT3V0cHV0XSBici5iaXRfZW5kX3Bvc18gPCAzMicpO1xuICB9XG5cbiAgLyogQ29weSByZW1haW5pbmcgMC00IGJ5dGVzIGZyb20gYnIudmFsXyB0byByaW5nYnVmZmVyLiAqL1xuICB3aGlsZSAoYnIuYml0X3Bvc18gPCAzMikge1xuICAgIHJpbmdidWZmZXJbcmJfcG9zXSA9IChici52YWxfID4+PiBici5iaXRfcG9zXyk7XG4gICAgYnIuYml0X3Bvc18gKz0gODtcbiAgICArK3JiX3BvcztcbiAgICAtLWxlbjtcbiAgfVxuXG4gIC8qIENvcHkgcmVtYWluaW5nIGJ5dGVzIGZyb20gYnIuYnVmXyB0byByaW5nYnVmZmVyLiAqL1xuICBuYnl0ZXMgPSAoYnIuYml0X2VuZF9wb3NfIC0gYnIuYml0X3Bvc18pID4+IDM7XG4gIGlmIChicl9wb3MgKyBuYnl0ZXMgPiBCcm90bGlCaXRSZWFkZXIuSUJVRl9NQVNLKSB7XG4gICAgdmFyIHRhaWwgPSBCcm90bGlCaXRSZWFkZXIuSUJVRl9NQVNLICsgMSAtIGJyX3BvcztcbiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHRhaWw7IHgrKylcbiAgICAgIHJpbmdidWZmZXJbcmJfcG9zICsgeF0gPSBici5idWZfW2JyX3BvcyArIHhdO1xuICAgIFxuICAgIG5ieXRlcyAtPSB0YWlsO1xuICAgIHJiX3BvcyArPSB0YWlsO1xuICAgIGxlbiAtPSB0YWlsO1xuICAgIGJyX3BvcyA9IDA7XG4gIH1cblxuICBmb3IgKHZhciB4ID0gMDsgeCA8IG5ieXRlczsgeCsrKVxuICAgIHJpbmdidWZmZXJbcmJfcG9zICsgeF0gPSBici5idWZfW2JyX3BvcyArIHhdO1xuICBcbiAgcmJfcG9zICs9IG5ieXRlcztcbiAgbGVuIC09IG5ieXRlcztcblxuICAvKiBJZiB3ZSB3cm90ZSBwYXN0IHRoZSBsb2dpY2FsIGVuZCBvZiB0aGUgcmluZ2J1ZmZlciwgY29weSB0aGUgdGFpbCBvZiB0aGVcbiAgICAgcmluZ2J1ZmZlciB0byBpdHMgYmVnaW5uaW5nIGFuZCBmbHVzaCB0aGUgcmluZ2J1ZmZlciB0byB0aGUgb3V0cHV0LiAqL1xuICBpZiAocmJfcG9zID49IHJiX3NpemUpIHtcbiAgICBvdXRwdXQud3JpdGUocmluZ2J1ZmZlciwgcmJfc2l6ZSk7XG4gICAgcmJfcG9zIC09IHJiX3NpemU7ICAgIFxuICAgIGZvciAodmFyIHggPSAwOyB4IDwgcmJfcG9zOyB4KyspXG4gICAgICByaW5nYnVmZmVyW3hdID0gcmluZ2J1ZmZlcltyYl9zaXplICsgeF07XG4gIH1cblxuICAvKiBJZiB3ZSBoYXZlIG1vcmUgdG8gY29weSB0aGFuIHRoZSByZW1haW5pbmcgc2l6ZSBvZiB0aGUgcmluZ2J1ZmZlciwgdGhlbiB3ZVxuICAgICBmaXJzdCBmaWxsIHRoZSByaW5nYnVmZmVyIGZyb20gdGhlIGlucHV0IGFuZCB0aGVuIGZsdXNoIHRoZSByaW5nYnVmZmVyIHRvXG4gICAgIHRoZSBvdXRwdXQgKi9cbiAgd2hpbGUgKHJiX3BvcyArIGxlbiA+PSByYl9zaXplKSB7XG4gICAgbmJ5dGVzID0gcmJfc2l6ZSAtIHJiX3BvcztcbiAgICBpZiAoYnIuaW5wdXRfLnJlYWQocmluZ2J1ZmZlciwgcmJfcG9zLCBuYnl0ZXMpIDwgbmJ5dGVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tDb3B5VW5jb21wcmVzc2VkQmxvY2tUb091dHB1dF0gbm90IGVub3VnaCBieXRlcycpO1xuICAgIH1cbiAgICBvdXRwdXQud3JpdGUocmluZ2J1ZmZlciwgcmJfc2l6ZSk7XG4gICAgbGVuIC09IG5ieXRlcztcbiAgICByYl9wb3MgPSAwO1xuICB9XG5cbiAgLyogQ29weSBzdHJhaWdodCBmcm9tIHRoZSBpbnB1dCBvbnRvIHRoZSByaW5nYnVmZmVyLiBUaGUgcmluZ2J1ZmZlciB3aWxsIGJlXG4gICAgIGZsdXNoZWQgdG8gdGhlIG91dHB1dCBhdCBhIGxhdGVyIHRpbWUuICovXG4gIGlmIChici5pbnB1dF8ucmVhZChyaW5nYnVmZmVyLCByYl9wb3MsIGxlbikgPCBsZW4pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tDb3B5VW5jb21wcmVzc2VkQmxvY2tUb091dHB1dF0gbm90IGVub3VnaCBieXRlcycpO1xuICB9XG5cbiAgLyogUmVzdG9yZSB0aGUgc3RhdGUgb2YgdGhlIGJpdCByZWFkZXIuICovXG4gIGJyLnJlc2V0KCk7XG59XG5cbi8qIEFkdmFuY2VzIHRoZSBiaXQgcmVhZGVyIHBvc2l0aW9uIHRvIHRoZSBuZXh0IGJ5dGUgYm91bmRhcnkgYW5kIHZlcmlmaWVzXG4gICB0aGF0IGFueSBza2lwcGVkIGJpdHMgYXJlIHNldCB0byB6ZXJvLiAqL1xuZnVuY3Rpb24gSnVtcFRvQnl0ZUJvdW5kYXJ5KGJyKSB7XG4gIHZhciBuZXdfYml0X3BvcyA9IChici5iaXRfcG9zXyArIDcpICYgfjc7XG4gIHZhciBwYWRfYml0cyA9IGJyLnJlYWRCaXRzKG5ld19iaXRfcG9zIC0gYnIuYml0X3Bvc18pO1xuICByZXR1cm4gcGFkX2JpdHMgPT0gMDtcbn1cblxuZnVuY3Rpb24gQnJvdGxpRGVjb21wcmVzc2VkU2l6ZShidWZmZXIpIHtcbiAgdmFyIGlucHV0ID0gbmV3IEJyb3RsaUlucHV0KGJ1ZmZlcik7XG4gIHZhciBiciA9IG5ldyBCcm90bGlCaXRSZWFkZXIoaW5wdXQpO1xuICBEZWNvZGVXaW5kb3dCaXRzKGJyKTtcbiAgdmFyIG91dCA9IERlY29kZU1ldGFCbG9ja0xlbmd0aChicik7XG4gIHJldHVybiBvdXQubWV0YV9ibG9ja19sZW5ndGg7XG59XG5cbmV4cG9ydHMuQnJvdGxpRGVjb21wcmVzc2VkU2l6ZSA9IEJyb3RsaURlY29tcHJlc3NlZFNpemU7XG5cbmZ1bmN0aW9uIEJyb3RsaURlY29tcHJlc3NCdWZmZXIoYnVmZmVyLCBvdXRwdXRfc2l6ZSkge1xuICB2YXIgaW5wdXQgPSBuZXcgQnJvdGxpSW5wdXQoYnVmZmVyKTtcbiAgXG4gIGlmIChvdXRwdXRfc2l6ZSA9PSBudWxsKSB7XG4gICAgb3V0cHV0X3NpemUgPSBCcm90bGlEZWNvbXByZXNzZWRTaXplKGJ1ZmZlcik7XG4gIH1cbiAgXG4gIHZhciBvdXRwdXRfYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkob3V0cHV0X3NpemUpO1xuICB2YXIgb3V0cHV0ID0gbmV3IEJyb3RsaU91dHB1dChvdXRwdXRfYnVmZmVyKTtcbiAgXG4gIEJyb3RsaURlY29tcHJlc3MoaW5wdXQsIG91dHB1dCk7XG4gIFxuICBpZiAob3V0cHV0LnBvcyA8IG91dHB1dC5idWZmZXIubGVuZ3RoKSB7XG4gICAgb3V0cHV0LmJ1ZmZlciA9IG91dHB1dC5idWZmZXIuc3ViYXJyYXkoMCwgb3V0cHV0LnBvcyk7XG4gIH1cbiAgXG4gIHJldHVybiBvdXRwdXQuYnVmZmVyO1xufVxuXG5leHBvcnRzLkJyb3RsaURlY29tcHJlc3NCdWZmZXIgPSBCcm90bGlEZWNvbXByZXNzQnVmZmVyO1xuXG5mdW5jdGlvbiBCcm90bGlEZWNvbXByZXNzKGlucHV0LCBvdXRwdXQpIHtcbiAgdmFyIGk7XG4gIHZhciBwb3MgPSAwO1xuICB2YXIgaW5wdXRfZW5kID0gMDtcbiAgdmFyIHdpbmRvd19iaXRzID0gMDtcbiAgdmFyIG1heF9iYWNrd2FyZF9kaXN0YW5jZTtcbiAgdmFyIG1heF9kaXN0YW5jZSA9IDA7XG4gIHZhciByaW5nYnVmZmVyX3NpemU7XG4gIHZhciByaW5nYnVmZmVyX21hc2s7XG4gIHZhciByaW5nYnVmZmVyO1xuICB2YXIgcmluZ2J1ZmZlcl9lbmQ7XG4gIC8qIFRoaXMgcmluZyBidWZmZXIgaG9sZHMgYSBmZXcgcGFzdCBjb3B5IGRpc3RhbmNlcyB0aGF0IHdpbGwgYmUgdXNlZCBieSAqL1xuICAvKiBzb21lIHNwZWNpYWwgZGlzdGFuY2UgY29kZXMuICovXG4gIHZhciBkaXN0X3JiID0gWyAxNiwgMTUsIDExLCA0IF07XG4gIHZhciBkaXN0X3JiX2lkeCA9IDA7XG4gIC8qIFRoZSBwcmV2aW91cyAyIGJ5dGVzIHVzZWQgZm9yIGNvbnRleHQuICovXG4gIHZhciBwcmV2X2J5dGUxID0gMDtcbiAgdmFyIHByZXZfYnl0ZTIgPSAwO1xuICB2YXIgaGdyb3VwID0gW25ldyBIdWZmbWFuVHJlZUdyb3VwKDAsIDApLCBuZXcgSHVmZm1hblRyZWVHcm91cCgwLCAwKSwgbmV3IEh1ZmZtYW5UcmVlR3JvdXAoMCwgMCldO1xuICB2YXIgYmxvY2tfdHlwZV90cmVlcztcbiAgdmFyIGJsb2NrX2xlbl90cmVlcztcbiAgdmFyIGJyO1xuXG4gIC8qIFdlIG5lZWQgdGhlIHNsYWNrIHJlZ2lvbiBmb3IgdGhlIGZvbGxvd2luZyByZWFzb25zOlxuICAgICAgIC0gYWx3YXlzIGRvaW5nIHR3byA4LWJ5dGUgY29waWVzIGZvciBmYXN0IGJhY2t3YXJkIGNvcHlpbmdcbiAgICAgICAtIHRyYW5zZm9ybXNcbiAgICAgICAtIGZsdXNoaW5nIHRoZSBpbnB1dCByaW5nYnVmZmVyIHdoZW4gZGVjb2RpbmcgdW5jb21wcmVzc2VkIGJsb2NrcyAqL1xuICB2YXIga1JpbmdCdWZmZXJXcml0ZUFoZWFkU2xhY2sgPSAxMjggKyBCcm90bGlCaXRSZWFkZXIuUkVBRF9TSVpFO1xuXG4gIGJyID0gbmV3IEJyb3RsaUJpdFJlYWRlcihpbnB1dCk7XG5cbiAgLyogRGVjb2RlIHdpbmRvdyBzaXplLiAqL1xuICB3aW5kb3dfYml0cyA9IERlY29kZVdpbmRvd0JpdHMoYnIpO1xuICBtYXhfYmFja3dhcmRfZGlzdGFuY2UgPSAoMSA8PCB3aW5kb3dfYml0cykgLSAxNjtcblxuICByaW5nYnVmZmVyX3NpemUgPSAxIDw8IHdpbmRvd19iaXRzO1xuICByaW5nYnVmZmVyX21hc2sgPSByaW5nYnVmZmVyX3NpemUgLSAxO1xuICByaW5nYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkocmluZ2J1ZmZlcl9zaXplICsga1JpbmdCdWZmZXJXcml0ZUFoZWFkU2xhY2sgKyBCcm90bGlEaWN0aW9uYXJ5Lm1heERpY3Rpb25hcnlXb3JkTGVuZ3RoKTtcbiAgcmluZ2J1ZmZlcl9lbmQgPSByaW5nYnVmZmVyX3NpemU7XG5cbiAgYmxvY2tfdHlwZV90cmVlcyA9IFtdO1xuICBibG9ja19sZW5fdHJlZXMgPSBbXTtcbiAgZm9yICh2YXIgeCA9IDA7IHggPCAzICogSFVGRk1BTl9NQVhfVEFCTEVfU0laRTsgeCsrKSB7XG4gICAgYmxvY2tfdHlwZV90cmVlc1t4XSA9IG5ldyBIdWZmbWFuQ29kZSgwLCAwKTtcbiAgICBibG9ja19sZW5fdHJlZXNbeF0gPSBuZXcgSHVmZm1hbkNvZGUoMCwgMCk7XG4gIH1cblxuICB3aGlsZSAoIWlucHV0X2VuZCkge1xuICAgIHZhciBtZXRhX2Jsb2NrX3JlbWFpbmluZ19sZW4gPSAwO1xuICAgIHZhciBpc191bmNvbXByZXNzZWQ7XG4gICAgdmFyIGJsb2NrX2xlbmd0aCA9IFsgMSA8PCAyOCwgMSA8PCAyOCwgMSA8PCAyOCBdO1xuICAgIHZhciBibG9ja190eXBlID0gWyAwIF07XG4gICAgdmFyIG51bV9ibG9ja190eXBlcyA9IFsgMSwgMSwgMSBdO1xuICAgIHZhciBibG9ja190eXBlX3JiID0gWyAwLCAxLCAwLCAxLCAwLCAxIF07XG4gICAgdmFyIGJsb2NrX3R5cGVfcmJfaW5kZXggPSBbIDAgXTtcbiAgICB2YXIgZGlzdGFuY2VfcG9zdGZpeF9iaXRzO1xuICAgIHZhciBudW1fZGlyZWN0X2Rpc3RhbmNlX2NvZGVzO1xuICAgIHZhciBkaXN0YW5jZV9wb3N0Zml4X21hc2s7XG4gICAgdmFyIG51bV9kaXN0YW5jZV9jb2RlcztcbiAgICB2YXIgY29udGV4dF9tYXAgPSBudWxsO1xuICAgIHZhciBjb250ZXh0X21vZGVzID0gbnVsbDtcbiAgICB2YXIgbnVtX2xpdGVyYWxfaHRyZWVzO1xuICAgIHZhciBkaXN0X2NvbnRleHRfbWFwID0gbnVsbDtcbiAgICB2YXIgbnVtX2Rpc3RfaHRyZWVzO1xuICAgIHZhciBjb250ZXh0X29mZnNldCA9IDA7XG4gICAgdmFyIGNvbnRleHRfbWFwX3NsaWNlID0gbnVsbDtcbiAgICB2YXIgbGl0ZXJhbF9odHJlZV9pbmRleCA9IDA7XG4gICAgdmFyIGRpc3RfY29udGV4dF9vZmZzZXQgPSAwO1xuICAgIHZhciBkaXN0X2NvbnRleHRfbWFwX3NsaWNlID0gbnVsbDtcbiAgICB2YXIgZGlzdF9odHJlZV9pbmRleCA9IDA7XG4gICAgdmFyIGNvbnRleHRfbG9va3VwX29mZnNldDEgPSAwO1xuICAgIHZhciBjb250ZXh0X2xvb2t1cF9vZmZzZXQyID0gMDtcbiAgICB2YXIgY29udGV4dF9tb2RlO1xuICAgIHZhciBodHJlZV9jb21tYW5kO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IDM7ICsraSkge1xuICAgICAgaGdyb3VwW2ldLmNvZGVzID0gbnVsbDtcbiAgICAgIGhncm91cFtpXS5odHJlZXMgPSBudWxsO1xuICAgIH1cblxuICAgIGJyLnJlYWRNb3JlSW5wdXQoKTtcbiAgICBcbiAgICB2YXIgX291dCA9IERlY29kZU1ldGFCbG9ja0xlbmd0aChicik7XG4gICAgbWV0YV9ibG9ja19yZW1haW5pbmdfbGVuID0gX291dC5tZXRhX2Jsb2NrX2xlbmd0aDtcbiAgICBpZiAocG9zICsgbWV0YV9ibG9ja19yZW1haW5pbmdfbGVuID4gb3V0cHV0LmJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgIC8qIFdlIG5lZWQgdG8gZ3JvdyB0aGUgb3V0cHV0IGJ1ZmZlciB0byBmaXQgdGhlIGFkZGl0aW9uYWwgZGF0YS4gKi9cbiAgICAgIHZhciB0bXAgPSBuZXcgVWludDhBcnJheSggcG9zICsgbWV0YV9ibG9ja19yZW1haW5pbmdfbGVuICk7XG4gICAgICB0bXAuc2V0KCBvdXRwdXQuYnVmZmVyICk7XG4gICAgICBvdXRwdXQuYnVmZmVyID0gdG1wO1xuICAgIH0gICAgXG4gICAgaW5wdXRfZW5kID0gX291dC5pbnB1dF9lbmQ7XG4gICAgaXNfdW5jb21wcmVzc2VkID0gX291dC5pc191bmNvbXByZXNzZWQ7XG4gICAgXG4gICAgaWYgKF9vdXQuaXNfbWV0YWRhdGEpIHtcbiAgICAgIEp1bXBUb0J5dGVCb3VuZGFyeShicik7XG4gICAgICBcbiAgICAgIGZvciAoOyBtZXRhX2Jsb2NrX3JlbWFpbmluZ19sZW4gPiAwOyAtLW1ldGFfYmxvY2tfcmVtYWluaW5nX2xlbikge1xuICAgICAgICBici5yZWFkTW9yZUlucHV0KCk7XG4gICAgICAgIC8qIFJlYWQgb25lIGJ5dGUgYW5kIGlnbm9yZSBpdC4gKi9cbiAgICAgICAgYnIucmVhZEJpdHMoOCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBcbiAgICBpZiAobWV0YV9ibG9ja19yZW1haW5pbmdfbGVuID09PSAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgXG4gICAgaWYgKGlzX3VuY29tcHJlc3NlZCkge1xuICAgICAgYnIuYml0X3Bvc18gPSAoYnIuYml0X3Bvc18gKyA3KSAmIH43O1xuICAgICAgQ29weVVuY29tcHJlc3NlZEJsb2NrVG9PdXRwdXQob3V0cHV0LCBtZXRhX2Jsb2NrX3JlbWFpbmluZ19sZW4sIHBvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpbmdidWZmZXIsIHJpbmdidWZmZXJfbWFzaywgYnIpO1xuICAgICAgcG9zICs9IG1ldGFfYmxvY2tfcmVtYWluaW5nX2xlbjtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBcbiAgICBmb3IgKGkgPSAwOyBpIDwgMzsgKytpKSB7XG4gICAgICBudW1fYmxvY2tfdHlwZXNbaV0gPSBEZWNvZGVWYXJMZW5VaW50OChicikgKyAxO1xuICAgICAgaWYgKG51bV9ibG9ja190eXBlc1tpXSA+PSAyKSB7XG4gICAgICAgIFJlYWRIdWZmbWFuQ29kZShudW1fYmxvY2tfdHlwZXNbaV0gKyAyLCBibG9ja190eXBlX3RyZWVzLCBpICogSFVGRk1BTl9NQVhfVEFCTEVfU0laRSwgYnIpO1xuICAgICAgICBSZWFkSHVmZm1hbkNvZGUoa051bUJsb2NrTGVuZ3RoQ29kZXMsIGJsb2NrX2xlbl90cmVlcywgaSAqIEhVRkZNQU5fTUFYX1RBQkxFX1NJWkUsIGJyKTtcbiAgICAgICAgYmxvY2tfbGVuZ3RoW2ldID0gUmVhZEJsb2NrTGVuZ3RoKGJsb2NrX2xlbl90cmVlcywgaSAqIEhVRkZNQU5fTUFYX1RBQkxFX1NJWkUsIGJyKTtcbiAgICAgICAgYmxvY2tfdHlwZV9yYl9pbmRleFtpXSA9IDE7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIGJyLnJlYWRNb3JlSW5wdXQoKTtcbiAgICBcbiAgICBkaXN0YW5jZV9wb3N0Zml4X2JpdHMgPSBici5yZWFkQml0cygyKTtcbiAgICBudW1fZGlyZWN0X2Rpc3RhbmNlX2NvZGVzID0gTlVNX0RJU1RBTkNFX1NIT1JUX0NPREVTICsgKGJyLnJlYWRCaXRzKDQpIDw8IGRpc3RhbmNlX3Bvc3RmaXhfYml0cyk7XG4gICAgZGlzdGFuY2VfcG9zdGZpeF9tYXNrID0gKDEgPDwgZGlzdGFuY2VfcG9zdGZpeF9iaXRzKSAtIDE7XG4gICAgbnVtX2Rpc3RhbmNlX2NvZGVzID0gKG51bV9kaXJlY3RfZGlzdGFuY2VfY29kZXMgKyAoNDggPDwgZGlzdGFuY2VfcG9zdGZpeF9iaXRzKSk7XG4gICAgY29udGV4dF9tb2RlcyA9IG5ldyBVaW50OEFycmF5KG51bV9ibG9ja190eXBlc1swXSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbnVtX2Jsb2NrX3R5cGVzWzBdOyArK2kpIHtcbiAgICAgICBici5yZWFkTW9yZUlucHV0KCk7XG4gICAgICAgY29udGV4dF9tb2Rlc1tpXSA9IChici5yZWFkQml0cygyKSA8PCAxKTtcbiAgICB9XG4gICAgXG4gICAgdmFyIF9vMSA9IERlY29kZUNvbnRleHRNYXAobnVtX2Jsb2NrX3R5cGVzWzBdIDw8IGtMaXRlcmFsQ29udGV4dEJpdHMsIGJyKTtcbiAgICBudW1fbGl0ZXJhbF9odHJlZXMgPSBfbzEubnVtX2h0cmVlcztcbiAgICBjb250ZXh0X21hcCA9IF9vMS5jb250ZXh0X21hcDtcbiAgICBcbiAgICB2YXIgX28yID0gRGVjb2RlQ29udGV4dE1hcChudW1fYmxvY2tfdHlwZXNbMl0gPDwga0Rpc3RhbmNlQ29udGV4dEJpdHMsIGJyKTtcbiAgICBudW1fZGlzdF9odHJlZXMgPSBfbzIubnVtX2h0cmVlcztcbiAgICBkaXN0X2NvbnRleHRfbWFwID0gX28yLmNvbnRleHRfbWFwO1xuICAgIFxuICAgIGhncm91cFswXSA9IG5ldyBIdWZmbWFuVHJlZUdyb3VwKGtOdW1MaXRlcmFsQ29kZXMsIG51bV9saXRlcmFsX2h0cmVlcyk7XG4gICAgaGdyb3VwWzFdID0gbmV3IEh1ZmZtYW5UcmVlR3JvdXAoa051bUluc2VydEFuZENvcHlDb2RlcywgbnVtX2Jsb2NrX3R5cGVzWzFdKTtcbiAgICBoZ3JvdXBbMl0gPSBuZXcgSHVmZm1hblRyZWVHcm91cChudW1fZGlzdGFuY2VfY29kZXMsIG51bV9kaXN0X2h0cmVlcyk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgMzsgKytpKSB7XG4gICAgICBoZ3JvdXBbaV0uZGVjb2RlKGJyKTtcbiAgICB9XG5cbiAgICBjb250ZXh0X21hcF9zbGljZSA9IDA7XG4gICAgZGlzdF9jb250ZXh0X21hcF9zbGljZSA9IDA7XG4gICAgY29udGV4dF9tb2RlID0gY29udGV4dF9tb2Rlc1tibG9ja190eXBlWzBdXTtcbiAgICBjb250ZXh0X2xvb2t1cF9vZmZzZXQxID0gQ29udGV4dC5sb29rdXBPZmZzZXRzW2NvbnRleHRfbW9kZV07XG4gICAgY29udGV4dF9sb29rdXBfb2Zmc2V0MiA9IENvbnRleHQubG9va3VwT2Zmc2V0c1tjb250ZXh0X21vZGUgKyAxXTtcbiAgICBodHJlZV9jb21tYW5kID0gaGdyb3VwWzFdLmh0cmVlc1swXTtcblxuICAgIHdoaWxlIChtZXRhX2Jsb2NrX3JlbWFpbmluZ19sZW4gPiAwKSB7XG4gICAgICB2YXIgY21kX2NvZGU7XG4gICAgICB2YXIgcmFuZ2VfaWR4O1xuICAgICAgdmFyIGluc2VydF9jb2RlO1xuICAgICAgdmFyIGNvcHlfY29kZTtcbiAgICAgIHZhciBpbnNlcnRfbGVuZ3RoO1xuICAgICAgdmFyIGNvcHlfbGVuZ3RoO1xuICAgICAgdmFyIGRpc3RhbmNlX2NvZGU7XG4gICAgICB2YXIgZGlzdGFuY2U7XG4gICAgICB2YXIgY29udGV4dDtcbiAgICAgIHZhciBqO1xuICAgICAgdmFyIGNvcHlfZHN0O1xuXG4gICAgICBici5yZWFkTW9yZUlucHV0KCk7XG4gICAgICBcbiAgICAgIGlmIChibG9ja19sZW5ndGhbMV0gPT09IDApIHtcbiAgICAgICAgRGVjb2RlQmxvY2tUeXBlKG51bV9ibG9ja190eXBlc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrX3R5cGVfdHJlZXMsIDEsIGJsb2NrX3R5cGUsIGJsb2NrX3R5cGVfcmIsXG4gICAgICAgICAgICAgICAgICAgICAgICBibG9ja190eXBlX3JiX2luZGV4LCBicik7XG4gICAgICAgIGJsb2NrX2xlbmd0aFsxXSA9IFJlYWRCbG9ja0xlbmd0aChibG9ja19sZW5fdHJlZXMsIEhVRkZNQU5fTUFYX1RBQkxFX1NJWkUsIGJyKTtcbiAgICAgICAgaHRyZWVfY29tbWFuZCA9IGhncm91cFsxXS5odHJlZXNbYmxvY2tfdHlwZVsxXV07XG4gICAgICB9XG4gICAgICAtLWJsb2NrX2xlbmd0aFsxXTtcbiAgICAgIGNtZF9jb2RlID0gUmVhZFN5bWJvbChoZ3JvdXBbMV0uY29kZXMsIGh0cmVlX2NvbW1hbmQsIGJyKTtcbiAgICAgIHJhbmdlX2lkeCA9IGNtZF9jb2RlID4+IDY7XG4gICAgICBpZiAocmFuZ2VfaWR4ID49IDIpIHtcbiAgICAgICAgcmFuZ2VfaWR4IC09IDI7XG4gICAgICAgIGRpc3RhbmNlX2NvZGUgPSAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpc3RhbmNlX2NvZGUgPSAwO1xuICAgICAgfVxuICAgICAgaW5zZXJ0X2NvZGUgPSBQcmVmaXgua0luc2VydFJhbmdlTHV0W3JhbmdlX2lkeF0gKyAoKGNtZF9jb2RlID4+IDMpICYgNyk7XG4gICAgICBjb3B5X2NvZGUgPSBQcmVmaXgua0NvcHlSYW5nZUx1dFtyYW5nZV9pZHhdICsgKGNtZF9jb2RlICYgNyk7XG4gICAgICBpbnNlcnRfbGVuZ3RoID0gUHJlZml4LmtJbnNlcnRMZW5ndGhQcmVmaXhDb2RlW2luc2VydF9jb2RlXS5vZmZzZXQgK1xuICAgICAgICAgIGJyLnJlYWRCaXRzKFByZWZpeC5rSW5zZXJ0TGVuZ3RoUHJlZml4Q29kZVtpbnNlcnRfY29kZV0ubmJpdHMpO1xuICAgICAgY29weV9sZW5ndGggPSBQcmVmaXgua0NvcHlMZW5ndGhQcmVmaXhDb2RlW2NvcHlfY29kZV0ub2Zmc2V0ICtcbiAgICAgICAgICBici5yZWFkQml0cyhQcmVmaXgua0NvcHlMZW5ndGhQcmVmaXhDb2RlW2NvcHlfY29kZV0ubmJpdHMpO1xuICAgICAgcHJldl9ieXRlMSA9IHJpbmdidWZmZXJbcG9zLTEgJiByaW5nYnVmZmVyX21hc2tdO1xuICAgICAgcHJldl9ieXRlMiA9IHJpbmdidWZmZXJbcG9zLTIgJiByaW5nYnVmZmVyX21hc2tdO1xuICAgICAgZm9yIChqID0gMDsgaiA8IGluc2VydF9sZW5ndGg7ICsraikge1xuICAgICAgICBici5yZWFkTW9yZUlucHV0KCk7XG5cbiAgICAgICAgaWYgKGJsb2NrX2xlbmd0aFswXSA9PT0gMCkge1xuICAgICAgICAgIERlY29kZUJsb2NrVHlwZShudW1fYmxvY2tfdHlwZXNbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrX3R5cGVfdHJlZXMsIDAsIGJsb2NrX3R5cGUsIGJsb2NrX3R5cGVfcmIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrX3R5cGVfcmJfaW5kZXgsIGJyKTtcbiAgICAgICAgICBibG9ja19sZW5ndGhbMF0gPSBSZWFkQmxvY2tMZW5ndGgoYmxvY2tfbGVuX3RyZWVzLCAwLCBicik7XG4gICAgICAgICAgY29udGV4dF9vZmZzZXQgPSBibG9ja190eXBlWzBdIDw8IGtMaXRlcmFsQ29udGV4dEJpdHM7XG4gICAgICAgICAgY29udGV4dF9tYXBfc2xpY2UgPSBjb250ZXh0X29mZnNldDtcbiAgICAgICAgICBjb250ZXh0X21vZGUgPSBjb250ZXh0X21vZGVzW2Jsb2NrX3R5cGVbMF1dO1xuICAgICAgICAgIGNvbnRleHRfbG9va3VwX29mZnNldDEgPSBDb250ZXh0Lmxvb2t1cE9mZnNldHNbY29udGV4dF9tb2RlXTtcbiAgICAgICAgICBjb250ZXh0X2xvb2t1cF9vZmZzZXQyID0gQ29udGV4dC5sb29rdXBPZmZzZXRzW2NvbnRleHRfbW9kZSArIDFdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQgPSAoQ29udGV4dC5sb29rdXBbY29udGV4dF9sb29rdXBfb2Zmc2V0MSArIHByZXZfYnl0ZTFdIHxcbiAgICAgICAgICAgICAgICAgICBDb250ZXh0Lmxvb2t1cFtjb250ZXh0X2xvb2t1cF9vZmZzZXQyICsgcHJldl9ieXRlMl0pO1xuICAgICAgICBsaXRlcmFsX2h0cmVlX2luZGV4ID0gY29udGV4dF9tYXBbY29udGV4dF9tYXBfc2xpY2UgKyBjb250ZXh0XTtcbiAgICAgICAgLS1ibG9ja19sZW5ndGhbMF07XG4gICAgICAgIHByZXZfYnl0ZTIgPSBwcmV2X2J5dGUxO1xuICAgICAgICBwcmV2X2J5dGUxID0gUmVhZFN5bWJvbChoZ3JvdXBbMF0uY29kZXMsIGhncm91cFswXS5odHJlZXNbbGl0ZXJhbF9odHJlZV9pbmRleF0sIGJyKTtcbiAgICAgICAgcmluZ2J1ZmZlcltwb3MgJiByaW5nYnVmZmVyX21hc2tdID0gcHJldl9ieXRlMTtcbiAgICAgICAgaWYgKChwb3MgJiByaW5nYnVmZmVyX21hc2spID09PSByaW5nYnVmZmVyX21hc2spIHtcbiAgICAgICAgICBvdXRwdXQud3JpdGUocmluZ2J1ZmZlciwgcmluZ2J1ZmZlcl9zaXplKTtcbiAgICAgICAgfVxuICAgICAgICArK3BvcztcbiAgICAgIH1cbiAgICAgIG1ldGFfYmxvY2tfcmVtYWluaW5nX2xlbiAtPSBpbnNlcnRfbGVuZ3RoO1xuICAgICAgaWYgKG1ldGFfYmxvY2tfcmVtYWluaW5nX2xlbiA8PSAwKSBicmVhaztcblxuICAgICAgaWYgKGRpc3RhbmNlX2NvZGUgPCAwKSB7XG4gICAgICAgIHZhciBjb250ZXh0O1xuICAgICAgICBcbiAgICAgICAgYnIucmVhZE1vcmVJbnB1dCgpO1xuICAgICAgICBpZiAoYmxvY2tfbGVuZ3RoWzJdID09PSAwKSB7XG4gICAgICAgICAgRGVjb2RlQmxvY2tUeXBlKG51bV9ibG9ja190eXBlc1syXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tfdHlwZV90cmVlcywgMiwgYmxvY2tfdHlwZSwgYmxvY2tfdHlwZV9yYixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tfdHlwZV9yYl9pbmRleCwgYnIpO1xuICAgICAgICAgIGJsb2NrX2xlbmd0aFsyXSA9IFJlYWRCbG9ja0xlbmd0aChibG9ja19sZW5fdHJlZXMsIDIgKiBIVUZGTUFOX01BWF9UQUJMRV9TSVpFLCBicik7XG4gICAgICAgICAgZGlzdF9jb250ZXh0X29mZnNldCA9IGJsb2NrX3R5cGVbMl0gPDwga0Rpc3RhbmNlQ29udGV4dEJpdHM7XG4gICAgICAgICAgZGlzdF9jb250ZXh0X21hcF9zbGljZSA9IGRpc3RfY29udGV4dF9vZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgLS1ibG9ja19sZW5ndGhbMl07XG4gICAgICAgIGNvbnRleHQgPSAoY29weV9sZW5ndGggPiA0ID8gMyA6IGNvcHlfbGVuZ3RoIC0gMikgJiAweGZmO1xuICAgICAgICBkaXN0X2h0cmVlX2luZGV4ID0gZGlzdF9jb250ZXh0X21hcFtkaXN0X2NvbnRleHRfbWFwX3NsaWNlICsgY29udGV4dF07XG4gICAgICAgIGRpc3RhbmNlX2NvZGUgPSBSZWFkU3ltYm9sKGhncm91cFsyXS5jb2RlcywgaGdyb3VwWzJdLmh0cmVlc1tkaXN0X2h0cmVlX2luZGV4XSwgYnIpO1xuICAgICAgICBpZiAoZGlzdGFuY2VfY29kZSA+PSBudW1fZGlyZWN0X2Rpc3RhbmNlX2NvZGVzKSB7XG4gICAgICAgICAgdmFyIG5iaXRzO1xuICAgICAgICAgIHZhciBwb3N0Zml4O1xuICAgICAgICAgIHZhciBvZmZzZXQ7XG4gICAgICAgICAgZGlzdGFuY2VfY29kZSAtPSBudW1fZGlyZWN0X2Rpc3RhbmNlX2NvZGVzO1xuICAgICAgICAgIHBvc3RmaXggPSBkaXN0YW5jZV9jb2RlICYgZGlzdGFuY2VfcG9zdGZpeF9tYXNrO1xuICAgICAgICAgIGRpc3RhbmNlX2NvZGUgPj49IGRpc3RhbmNlX3Bvc3RmaXhfYml0cztcbiAgICAgICAgICBuYml0cyA9IChkaXN0YW5jZV9jb2RlID4+IDEpICsgMTtcbiAgICAgICAgICBvZmZzZXQgPSAoKDIgKyAoZGlzdGFuY2VfY29kZSAmIDEpKSA8PCBuYml0cykgLSA0O1xuICAgICAgICAgIGRpc3RhbmNlX2NvZGUgPSBudW1fZGlyZWN0X2Rpc3RhbmNlX2NvZGVzICtcbiAgICAgICAgICAgICAgKChvZmZzZXQgKyBici5yZWFkQml0cyhuYml0cykpIDw8XG4gICAgICAgICAgICAgICBkaXN0YW5jZV9wb3N0Zml4X2JpdHMpICsgcG9zdGZpeDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKiBDb252ZXJ0IHRoZSBkaXN0YW5jZSBjb2RlIHRvIHRoZSBhY3R1YWwgZGlzdGFuY2UgYnkgcG9zc2libHkgbG9va2luZyAqL1xuICAgICAgLyogdXAgcGFzdCBkaXN0bmFjZXMgZnJvbSB0aGUgcmluZ2J1ZmZlci4gKi9cbiAgICAgIGRpc3RhbmNlID0gVHJhbnNsYXRlU2hvcnRDb2RlcyhkaXN0YW5jZV9jb2RlLCBkaXN0X3JiLCBkaXN0X3JiX2lkeCk7XG4gICAgICBpZiAoZGlzdGFuY2UgPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignW0Jyb3RsaURlY29tcHJlc3NdIGludmFsaWQgZGlzdGFuY2UnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBvcyA8IG1heF9iYWNrd2FyZF9kaXN0YW5jZSAmJlxuICAgICAgICAgIG1heF9kaXN0YW5jZSAhPT0gbWF4X2JhY2t3YXJkX2Rpc3RhbmNlKSB7XG4gICAgICAgIG1heF9kaXN0YW5jZSA9IHBvcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1heF9kaXN0YW5jZSA9IG1heF9iYWNrd2FyZF9kaXN0YW5jZTtcbiAgICAgIH1cblxuICAgICAgY29weV9kc3QgPSBwb3MgJiByaW5nYnVmZmVyX21hc2s7XG5cbiAgICAgIGlmIChkaXN0YW5jZSA+IG1heF9kaXN0YW5jZSkge1xuICAgICAgICBpZiAoY29weV9sZW5ndGggPj0gQnJvdGxpRGljdGlvbmFyeS5taW5EaWN0aW9uYXJ5V29yZExlbmd0aCAmJlxuICAgICAgICAgICAgY29weV9sZW5ndGggPD0gQnJvdGxpRGljdGlvbmFyeS5tYXhEaWN0aW9uYXJ5V29yZExlbmd0aCkge1xuICAgICAgICAgIHZhciBvZmZzZXQgPSBCcm90bGlEaWN0aW9uYXJ5Lm9mZnNldHNCeUxlbmd0aFtjb3B5X2xlbmd0aF07XG4gICAgICAgICAgdmFyIHdvcmRfaWQgPSBkaXN0YW5jZSAtIG1heF9kaXN0YW5jZSAtIDE7XG4gICAgICAgICAgdmFyIHNoaWZ0ID0gQnJvdGxpRGljdGlvbmFyeS5zaXplQml0c0J5TGVuZ3RoW2NvcHlfbGVuZ3RoXTtcbiAgICAgICAgICB2YXIgbWFzayA9ICgxIDw8IHNoaWZ0KSAtIDE7XG4gICAgICAgICAgdmFyIHdvcmRfaWR4ID0gd29yZF9pZCAmIG1hc2s7XG4gICAgICAgICAgdmFyIHRyYW5zZm9ybV9pZHggPSB3b3JkX2lkID4+IHNoaWZ0O1xuICAgICAgICAgIG9mZnNldCArPSB3b3JkX2lkeCAqIGNvcHlfbGVuZ3RoO1xuICAgICAgICAgIGlmICh0cmFuc2Zvcm1faWR4IDwgVHJhbnNmb3JtLmtOdW1UcmFuc2Zvcm1zKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gVHJhbnNmb3JtLnRyYW5zZm9ybURpY3Rpb25hcnlXb3JkKHJpbmdidWZmZXIsIGNvcHlfZHN0LCBvZmZzZXQsIGNvcHlfbGVuZ3RoLCB0cmFuc2Zvcm1faWR4KTtcbiAgICAgICAgICAgIGNvcHlfZHN0ICs9IGxlbjtcbiAgICAgICAgICAgIHBvcyArPSBsZW47XG4gICAgICAgICAgICBtZXRhX2Jsb2NrX3JlbWFpbmluZ19sZW4gLT0gbGVuO1xuICAgICAgICAgICAgaWYgKGNvcHlfZHN0ID49IHJpbmdidWZmZXJfZW5kKSB7XG4gICAgICAgICAgICAgIG91dHB1dC53cml0ZShyaW5nYnVmZmVyLCByaW5nYnVmZmVyX3NpemUpO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgZm9yICh2YXIgX3ggPSAwOyBfeCA8IChjb3B5X2RzdCAtIHJpbmdidWZmZXJfZW5kKTsgX3grKylcbiAgICAgICAgICAgICAgICByaW5nYnVmZmVyW194XSA9IHJpbmdidWZmZXJbcmluZ2J1ZmZlcl9lbmQgKyBfeF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYmFja3dhcmQgcmVmZXJlbmNlLiBwb3M6IFwiICsgcG9zICsgXCIgZGlzdGFuY2U6IFwiICsgZGlzdGFuY2UgK1xuICAgICAgICAgICAgICBcIiBsZW46IFwiICsgY29weV9sZW5ndGggKyBcIiBieXRlcyBsZWZ0OiBcIiArIG1ldGFfYmxvY2tfcmVtYWluaW5nX2xlbik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYmFja3dhcmQgcmVmZXJlbmNlLiBwb3M6IFwiICsgcG9zICsgXCIgZGlzdGFuY2U6IFwiICsgZGlzdGFuY2UgK1xuICAgICAgICAgICAgXCIgbGVuOiBcIiArIGNvcHlfbGVuZ3RoICsgXCIgYnl0ZXMgbGVmdDogXCIgKyBtZXRhX2Jsb2NrX3JlbWFpbmluZ19sZW4pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZGlzdGFuY2VfY29kZSA+IDApIHtcbiAgICAgICAgICBkaXN0X3JiW2Rpc3RfcmJfaWR4ICYgM10gPSBkaXN0YW5jZTtcbiAgICAgICAgICArK2Rpc3RfcmJfaWR4O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvcHlfbGVuZ3RoID4gbWV0YV9ibG9ja19yZW1haW5pbmdfbGVuKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBiYWNrd2FyZCByZWZlcmVuY2UuIHBvczogXCIgKyBwb3MgKyBcIiBkaXN0YW5jZTogXCIgKyBkaXN0YW5jZSArXG4gICAgICAgICAgICBcIiBsZW46IFwiICsgY29weV9sZW5ndGggKyBcIiBieXRlcyBsZWZ0OiBcIiArIG1ldGFfYmxvY2tfcmVtYWluaW5nX2xlbik7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgY29weV9sZW5ndGg7ICsraikge1xuICAgICAgICAgIHJpbmdidWZmZXJbcG9zICYgcmluZ2J1ZmZlcl9tYXNrXSA9IHJpbmdidWZmZXJbKHBvcyAtIGRpc3RhbmNlKSAmIHJpbmdidWZmZXJfbWFza107XG4gICAgICAgICAgaWYgKChwb3MgJiByaW5nYnVmZmVyX21hc2spID09PSByaW5nYnVmZmVyX21hc2spIHtcbiAgICAgICAgICAgIG91dHB1dC53cml0ZShyaW5nYnVmZmVyLCByaW5nYnVmZmVyX3NpemUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICArK3BvcztcbiAgICAgICAgICAtLW1ldGFfYmxvY2tfcmVtYWluaW5nX2xlbjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKiBXaGVuIHdlIGdldCBoZXJlLCB3ZSBtdXN0IGhhdmUgaW5zZXJ0ZWQgYXQgbGVhc3Qgb25lIGxpdGVyYWwgYW5kICovXG4gICAgICAvKiBtYWRlIGEgY29weSBvZiBhdCBsZWFzdCBsZW5ndGggdHdvLCB0aGVyZWZvcmUgYWNjZXNzaW5nIHRoZSBsYXN0IDIgKi9cbiAgICAgIC8qIGJ5dGVzIGlzIHZhbGlkLiAqL1xuICAgICAgcHJldl9ieXRlMSA9IHJpbmdidWZmZXJbKHBvcyAtIDEpICYgcmluZ2J1ZmZlcl9tYXNrXTtcbiAgICAgIHByZXZfYnl0ZTIgPSByaW5nYnVmZmVyWyhwb3MgLSAyKSAmIHJpbmdidWZmZXJfbWFza107XG4gICAgfVxuXG4gICAgLyogUHJvdGVjdCBwb3MgZnJvbSBvdmVyZmxvdywgd3JhcCBpdCBhcm91bmQgYXQgZXZlcnkgR0Igb2YgaW5wdXQgZGF0YSAqL1xuICAgIHBvcyAmPSAweDNmZmZmZmZmO1xuICB9XG5cbiAgb3V0cHV0LndyaXRlKHJpbmdidWZmZXIsIHBvcyAmIHJpbmdidWZmZXJfbWFzayk7XG59XG5cbmV4cG9ydHMuQnJvdGxpRGVjb21wcmVzcyA9IEJyb3RsaURlY29tcHJlc3M7XG5cbkJyb3RsaURpY3Rpb25hcnkuaW5pdCgpO1xuIiwgIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZWMvZGVjb2RlJykuQnJvdGxpRGVjb21wcmVzc0J1ZmZlcjtcbiIsICIvKiFcbiAqIHJlcGVhdC1zdHJpbmcgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L3JlcGVhdC1zdHJpbmc+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTUsIEpvbiBTY2hsaW5rZXJ0LlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBSZXN1bHRzIGNhY2hlXG4gKi9cblxudmFyIHJlcyA9ICcnO1xudmFyIGNhY2hlO1xuXG4vKipcbiAqIEV4cG9zZSBgcmVwZWF0YFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcmVwZWF0O1xuXG4vKipcbiAqIFJlcGVhdCB0aGUgZ2l2ZW4gYHN0cmluZ2AgdGhlIHNwZWNpZmllZCBgbnVtYmVyYFxuICogb2YgdGltZXMuXG4gKlxuICogKipFeGFtcGxlOioqXG4gKlxuICogYGBganNcbiAqIHZhciByZXBlYXQgPSByZXF1aXJlKCdyZXBlYXQtc3RyaW5nJyk7XG4gKiByZXBlYXQoJ0EnLCA1KTtcbiAqIC8vPT4gQUFBQUFcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBgc3RyaW5nYCBUaGUgc3RyaW5nIHRvIHJlcGVhdFxuICogQHBhcmFtIHtOdW1iZXJ9IGBudW1iZXJgIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmdcbiAqIEByZXR1cm4ge1N0cmluZ30gUmVwZWF0ZWQgc3RyaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHJlcGVhdChzdHIsIG51bSkge1xuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleHBlY3RlZCBhIHN0cmluZycpO1xuICB9XG5cbiAgLy8gY292ZXIgY29tbW9uLCBxdWljayB1c2UgY2FzZXNcbiAgaWYgKG51bSA9PT0gMSkgcmV0dXJuIHN0cjtcbiAgaWYgKG51bSA9PT0gMikgcmV0dXJuIHN0ciArIHN0cjtcblxuICB2YXIgbWF4ID0gc3RyLmxlbmd0aCAqIG51bTtcbiAgaWYgKGNhY2hlICE9PSBzdHIgfHwgdHlwZW9mIGNhY2hlID09PSAndW5kZWZpbmVkJykge1xuICAgIGNhY2hlID0gc3RyO1xuICAgIHJlcyA9ICcnO1xuICB9IGVsc2UgaWYgKHJlcy5sZW5ndGggPj0gbWF4KSB7XG4gICAgcmV0dXJuIHJlcy5zdWJzdHIoMCwgbWF4KTtcbiAgfVxuXG4gIHdoaWxlIChtYXggPiByZXMubGVuZ3RoICYmIG51bSA+IDEpIHtcbiAgICBpZiAobnVtICYgMSkge1xuICAgICAgcmVzICs9IHN0cjtcbiAgICB9XG5cbiAgICBudW0gPj49IDE7XG4gICAgc3RyICs9IHN0cjtcbiAgfVxuXG4gIHJlcyArPSBzdHI7XG4gIHJlcyA9IHJlcy5zdWJzdHIoMCwgbWF4KTtcbiAgcmV0dXJuIHJlcztcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciByZXBlYXQgPSByZXF1aXJlKCdyZXBlYXQtc3RyaW5nJyk7XG5cbnZhciBzcGxpdE9uVGFncyA9IGZ1bmN0aW9uIHNwbGl0T25UYWdzKHN0cikge1xuICByZXR1cm4gc3RyLnNwbGl0KC8oPFxcLz9bXj5dKz4pL2cpLmZpbHRlcihmdW5jdGlvbiAobGluZSkge1xuICAgIHJldHVybiBsaW5lLnRyaW0oKSAhPT0gJyc7XG4gIH0pO1xufTtcbnZhciBpc1RhZyA9IGZ1bmN0aW9uIGlzVGFnKHN0cikge1xuICByZXR1cm4gKC88W14+IV0rPi8udGVzdChzdHIpXG4gICk7XG59O1xudmFyIGlzWE1MRGVjbGFyYXRpb24gPSBmdW5jdGlvbiBpc1hNTERlY2xhcmF0aW9uKHN0cikge1xuICByZXR1cm4gKC88XFw/W14/Pl0rXFw/Pi8udGVzdChzdHIpXG4gICk7XG59O1xudmFyIGlzQ2xvc2luZ1RhZyA9IGZ1bmN0aW9uIGlzQ2xvc2luZ1RhZyhzdHIpIHtcbiAgcmV0dXJuICgvPFxcLytbXj5dKz4vLnRlc3Qoc3RyKVxuICApO1xufTtcbnZhciBpc1NlbGZDbG9zaW5nVGFnID0gZnVuY3Rpb24gaXNTZWxmQ2xvc2luZ1RhZyhzdHIpIHtcbiAgcmV0dXJuICgvPFtePl0rXFwvPi8udGVzdChzdHIpXG4gICk7XG59O1xudmFyIGlzT3BlbmluZ1RhZyA9IGZ1bmN0aW9uIGlzT3BlbmluZ1RhZyhzdHIpIHtcbiAgcmV0dXJuIGlzVGFnKHN0cikgJiYgIWlzQ2xvc2luZ1RhZyhzdHIpICYmICFpc1NlbGZDbG9zaW5nVGFnKHN0cikgJiYgIWlzWE1MRGVjbGFyYXRpb24oc3RyKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHhtbCwgaW5kZW50KSB7XG4gIHZhciBkZXB0aCA9IDA7XG4gIGluZGVudCA9IGluZGVudCB8fCAnICAgICc7XG5cbiAgcmV0dXJuIHNwbGl0T25UYWdzKHhtbCkubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgLy8gcmVtb3ZlcyBhbnkgcHJlLWV4aXN0aW5nIHdoaXRlc3BhY2UgY2hhcnMgYXQgdGhlIGVuZCBvciBiZWdpbm5pbmcgb2YgdGhlIGl0ZW1cbiAgICBpdGVtID0gaXRlbS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG4gICAgaWYgKGlzQ2xvc2luZ1RhZyhpdGVtKSkge1xuICAgICAgZGVwdGgtLTtcbiAgICB9XG5cbiAgICB2YXIgbGluZSA9IHJlcGVhdChpbmRlbnQsIGRlcHRoKSArIGl0ZW07XG5cbiAgICBpZiAoaXNPcGVuaW5nVGFnKGl0ZW0pKSB7XG4gICAgICBkZXB0aCsrO1xuICAgIH1cblxuICAgIHJldHVybiBsaW5lO1xuICB9KS5qb2luKCdcXG4nKTtcbn07IiwgIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IFJlYWN0LCB7Y3JlYXRlUmVmfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBCdXR0b24sXG4gIEZvcm0sXG4gIElucHV0LFxuICBNZW51LFxuICBtZXNzYWdlLFxuICBNb2RhbCxcbiAgUmFkaW8sXG4gIFR5cG9ncmFwaHksXG59IGZyb20gJ2FudGQnO1xuXG5pbXBvcnQge1xuICBMYXlvdXQsXG4gIERldGFpbFNpZGViYXIsXG4gIFBsdWdpbkNsaWVudCxcbiAgRGV2aWNlLFxuICBjcmVhdGVTdGF0ZSxcbiAgdXNlUGx1Z2luLFxuICB1c2VWYWx1ZSxcbiAgY3JlYXRlRGF0YVNvdXJjZSxcbiAgRGF0YVRhYmxlLFxuICBEYXRhVGFibGVDb2x1bW4sXG4gIERhdGFUYWJsZU1hbmFnZXIsXG4gIHRoZW1lLFxuICByZW5kZXJSZWFjdFJvb3QsXG4gIGJhdGNoLFxuICBkYXRhVGFibGVQb3dlclNlYXJjaE9wZXJhdG9ycyxcbn0gZnJvbSAnZmxpcHBlci1wbHVnaW4nO1xuaW1wb3J0IHtcbiAgUmVxdWVzdCxcbiAgUmVxdWVzdEluZm8sXG4gIFJlc3BvbnNlSW5mbyxcbiAgUmVzcG9uc2VGb2xsb3d1cENodW5rLFxuICBBZGRQcm90b2J1ZkV2ZW50LFxuICBQYXJ0aWFsUmVzcG9uc2VzLFxuICBTZXJpYWxpemVkUmVxdWVzdCxcbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge1Byb3RvYnVmRGVmaW5pdGlvbnNSZXBvc2l0b3J5fSBmcm9tICcuL1Byb3RvYnVmRGVmaW5pdGlvbnNSZXBvc2l0b3J5JztcbmltcG9ydCB7XG4gIGNvbnZlcnRSZXF1ZXN0VG9DdXJsQ29tbWFuZCxcbiAgZ2V0SGVhZGVyVmFsdWUsXG4gIGdldFJlc3BvbnNlTGVuZ3RoLFxuICBnZXRSZXF1ZXN0TGVuZ3RoLFxuICBmb3JtYXRCeXRlcyxcbiAgZm9ybWF0RHVyYXRpb24sXG4gIHJlcXVlc3RzVG9UZXh0LFxuICBkZWNvZGVCb2R5LFxuICBmb3JtYXRPcGVyYXRpb25OYW1lLFxufSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBSZXF1ZXN0RGV0YWlscyBmcm9tICcuL1JlcXVlc3REZXRhaWxzJztcbmltcG9ydCB7YXNzZW1ibGVDaHVua3NJZlJlc3BvbnNlSXNDb21wbGV0ZX0gZnJvbSAnLi9jaHVua3MnO1xuaW1wb3J0IHtEZWxldGVPdXRsaW5lZH0gZnJvbSAnQGFudC1kZXNpZ24vaWNvbnMnO1xuaW1wb3J0IHtNYW5hZ2VNb2NrUmVzcG9uc2VQYW5lbH0gZnJvbSAnLi9yZXF1ZXN0LW1vY2tpbmcvTWFuYWdlTW9ja1Jlc3BvbnNlUGFuZWwnO1xuaW1wb3J0IHtcbiAgTmV0d29ya1JvdXRlQ29udGV4dCxcbiAgTmV0d29ya1JvdXRlTWFuYWdlcixcbiAgbnVsbE5ldHdvcmtSb3V0ZU1hbmFnZXIsXG4gIFJvdXRlLFxuICBNb2NrUm91dGUsXG4gIGNyZWF0ZU5ldHdvcmtNYW5hZ2VyLFxuICBjb21wdXRlTW9ja1JvdXRlcyxcbn0gZnJvbSAnLi9yZXF1ZXN0LW1vY2tpbmcvTmV0d29ya1JvdXRlTWFuYWdlcic7XG5pbXBvcnQge0Jhc2U2NH0gZnJvbSAnanMtYmFzZTY0JztcblxuY29uc3QgTE9DQUxTVE9SQUdFX01PQ0tfUk9VVEVfTElTVF9LRVkgPSAnX19ORVRXT1JLX0NBQ0hFRF9NT0NLX1JPVVRFX0xJU1QnO1xuY29uc3QgTE9DQUxTVE9SQUdFX1JFU1BPTlNFX0JPRFlfRk9STUFUX0tFWSA9XG4gICdfX05FVFdPUktfQ0FDSEVEX1JFU1BPTlNFX0JPRFlfRk9STUFUJztcblxuZXhwb3J0IGNvbnN0IEJvZHlPcHRpb25zID0gWydmb3JtYXR0ZWQnLCAncGFyc2VkJ10ubWFwKCh2YWx1ZSkgPT4gKHtcbiAgbGFiZWw6IHZhbHVlLFxuICB2YWx1ZSxcbn0pKTtcblxudHlwZSBFdmVudHMgPSB7XG4gIG5ld1JlcXVlc3Q6IFJlcXVlc3RJbmZvO1xuICBuZXdSZXNwb25zZTogUmVzcG9uc2VJbmZvO1xuICBwYXJ0aWFsUmVzcG9uc2U6IFJlc3BvbnNlSW5mbyB8IFJlc3BvbnNlRm9sbG93dXBDaHVuaztcbiAgYWRkUHJvdG9idWZEZWZpbml0aW9uczogQWRkUHJvdG9idWZFdmVudDtcbn07XG5cbnR5cGUgTWV0aG9kcyA9IHtcbiAgbW9ja1Jlc3BvbnNlcyhwYXJhbXM6IHtyb3V0ZXM6IE1vY2tSb3V0ZVtdfSk6IFByb21pc2U8dm9pZD47XG59O1xuXG50eXBlIEN1c3RvbUNvbHVtbkNvbmZpZyA9IHtcbiAgaGVhZGVyOiBzdHJpbmc7XG4gIHR5cGU6ICdyZXNwb25zZScgfCAncmVxdWVzdCc7XG59O1xuXG50eXBlIFN0YXRlRXhwb3J0ID0ge1xuICByZXF1ZXN0czI6IFNlcmlhbGl6ZWRSZXF1ZXN0W107XG4gIGlzTW9ja1Jlc3BvbnNlU3VwcG9ydGVkOiBib29sZWFuO1xuICBzZWxlY3RlZElkOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGN1c3RvbUNvbHVtbnM6IEN1c3RvbUNvbHVtbkNvbmZpZ1tdO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBsdWdpbihjbGllbnQ6IFBsdWdpbkNsaWVudDxFdmVudHMsIE1ldGhvZHM+KSB7XG4gIGNvbnN0IG5ldHdvcmtSb3V0ZU1hbmFnZXIgPSBjcmVhdGVTdGF0ZTxOZXR3b3JrUm91dGVNYW5hZ2VyPihcbiAgICBudWxsTmV0d29ya1JvdXRlTWFuYWdlcixcbiAgKTtcblxuICBjb25zdCByb3V0ZXMgPSBjcmVhdGVTdGF0ZTx7W2lkOiBzdHJpbmddOiBSb3V0ZX0+KHt9KTtcbiAgY29uc3QgbmV4dFJvdXRlSWQgPSBjcmVhdGVTdGF0ZTxudW1iZXI+KDApO1xuICBjb25zdCBpc01vY2tSZXNwb25zZVN1cHBvcnRlZCA9IGNyZWF0ZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcbiAgY29uc3Qgc2hvd01vY2tSZXNwb25zZURpYWxvZyA9IGNyZWF0ZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcbiAgY29uc3QgZGV0YWlsQm9keUZvcm1hdCA9IGNyZWF0ZVN0YXRlPHN0cmluZz4oXG4gICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oTE9DQUxTVE9SQUdFX1JFU1BPTlNFX0JPRFlfRk9STUFUX0tFWSkgfHwgJ3BhcnNlZCcsXG4gICk7XG4gIGNvbnN0IHJlcXVlc3RzID0gY3JlYXRlRGF0YVNvdXJjZTxSZXF1ZXN0LCAnaWQnPihbXSwge1xuICAgIGtleTogJ2lkJyxcbiAgICBpbmRpY2VzOiBbWydtZXRob2QnXSwgWydzdGF0dXMnXV0sXG4gIH0pO1xuICBjb25zdCBzZWxlY3RlZElkID0gY3JlYXRlU3RhdGU8c3RyaW5nIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuICBjb25zdCB0YWJsZU1hbmFnZXJSZWYgPSBjcmVhdGVSZWY8dW5kZWZpbmVkIHwgRGF0YVRhYmxlTWFuYWdlcjxSZXF1ZXN0Pj4oKTtcblxuICBjb25zdCBwYXJ0aWFsUmVzcG9uc2VzID0gY3JlYXRlU3RhdGU8UGFydGlhbFJlc3BvbnNlcz4oe30pO1xuXG4gIGNvbnN0IGN1c3RvbUNvbHVtbnMgPSBjcmVhdGVTdGF0ZTxDdXN0b21Db2x1bW5Db25maWdbXT4oW10sIHtcbiAgICBwZXJzaXN0OiAnY3VzdG9tQ29sdW1ucycsXG4gICAgcGVyc2lzdFRvTG9jYWxTdG9yYWdlOiB0cnVlLFxuICB9KTtcbiAgY29uc3QgY29sdW1ucyA9IGNyZWF0ZVN0YXRlPERhdGFUYWJsZUNvbHVtbjxSZXF1ZXN0PltdPihiYXNlQ29sdW1ucyk7IC8vIG5vdCBwZXJzaXN0YWJsZVxuXG4gIGNsaWVudC5vbkRlZXBMaW5rKChwYXlsb2FkOiB1bmtub3duKSA9PiB7XG4gICAgY29uc3Qgc2VhcmNoVGVybURlbGltID0gJ3NlYXJjaFRlcm09JztcbiAgICBpZiAodHlwZW9mIHBheWxvYWQgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChwYXlsb2FkLnN0YXJ0c1dpdGgoc2VhcmNoVGVybURlbGltKSkge1xuICAgICAgdGFibGVNYW5hZ2VyUmVmLmN1cnJlbnQ/LmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgICB0YWJsZU1hbmFnZXJSZWYuY3VycmVudD8uc2V0U2VhcmNoRXhwcmVzc2lvbihbXG4gICAgICAgIHtcbiAgICAgICAgICBmaWVsZDoge2xhYmVsOiAnUm93Jywga2V5OiAnZW50aXJlUm93JywgdXNlV2hvbGVSb3c6IHRydWV9LFxuICAgICAgICAgIG9wZXJhdG9yOlxuICAgICAgICAgICAgZGF0YVRhYmxlUG93ZXJTZWFyY2hPcGVyYXRvcnMuc2VhcmlhbGl6YWJsZV9vYmplY3RfY29udGFpbnMoKSxcbiAgICAgICAgICBzZWFyY2hWYWx1ZTogcGF5bG9hZC5zbGljZShzZWFyY2hUZXJtRGVsaW0ubGVuZ3RoKSxcbiAgICAgICAgfSxcbiAgICAgIF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YWJsZU1hbmFnZXJSZWYuY3VycmVudD8uc2V0U2VhcmNoRXhwcmVzc2lvbihbXSk7XG4gICAgICB0YWJsZU1hbmFnZXJSZWYuY3VycmVudD8uc2VsZWN0SXRlbUJ5SWQocGF5bG9hZCk7XG4gICAgfVxuICB9KTtcblxuICBjbGllbnQuYWRkTWVudUVudHJ5KHtcbiAgICBhY3Rpb246ICdjbGVhcicsXG4gICAgaGFuZGxlcjogY2xlYXJMb2dzLFxuICAgIGFjY2VsZXJhdG9yOiAnY3RybCtsJyxcbiAgfSk7XG5cbiAgY2xpZW50Lm9uQ29ubmVjdCgoKSA9PiB7XG4gICAgaW5pdCgpO1xuICB9KTtcblxuICBjbGllbnQub25NZXNzYWdlKCduZXdSZXF1ZXN0JywgKGRhdGEpID0+IHtcbiAgICAvLyBTb21lIG5ldHdvcmsgc3RhY2tzIG1heSBzZW5kIGR1cGxpY2F0ZSBkYXRhLCBzbyB3ZSBmaWx0ZXIgdGhlbSBvdXQuXG4gICAgaWYgKHJlcXVlc3RzLmhhcyhkYXRhLmlkKSkge1xuICAgICAgY29uc29sZS53YXJuKGBJZ25vcmluZyBkdXBsaWNhdGUgcmVxdWVzdCB3aXRoIGlkICR7ZGF0YS5pZH06YCwgZGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3RzLmFwcGVuZChjcmVhdGVSZXF1ZXN0RnJvbVJlcXVlc3RJbmZvKGRhdGEsIGN1c3RvbUNvbHVtbnMuZ2V0KCkpKTtcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHN0b3JlUmVzcG9uc2UocmVzcG9uc2U6IFJlc3BvbnNlSW5mbykge1xuICAgIGNvbnN0IHJlcXVlc3QgPSByZXF1ZXN0cy5nZXRCeUlkKHJlc3BvbnNlLmlkKTtcbiAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgIHJldHVybjsgLy8gcmVxdWVzdCB0YWJsZSBtaWdodCBoYXZlIGJlZW4gY2xlYXJlZFxuICAgIH1cblxuICAgIHJlcXVlc3RzLnVwc2VydChcbiAgICAgIHVwZGF0ZVJlcXVlc3RXaXRoUmVzcG9uc2VJbmZvKHJlcXVlc3QsIHJlc3BvbnNlLCBjdXN0b21Db2x1bW5zLmdldCgpKSxcbiAgICApO1xuICB9XG5cbiAgY2xpZW50Lm9uTWVzc2FnZSgnbmV3UmVzcG9uc2UnLCAoZGF0YSkgPT4ge1xuICAgIHN0b3JlUmVzcG9uc2UoZGF0YSk7XG4gIH0pO1xuXG4gIGNsaWVudC5vbk1lc3NhZ2UoJ2FkZFByb3RvYnVmRGVmaW5pdGlvbnMnLCAoZGF0YSkgPT4ge1xuICAgIGNvbnN0IHJlcG9zaXRvcnkgPSBQcm90b2J1ZkRlZmluaXRpb25zUmVwb3NpdG9yeS5nZXRJbnN0YW5jZSgpO1xuICAgIGZvciAoY29uc3QgW2Jhc2VVcmwsIGRlZmluaXRpb25zXSBvZiBPYmplY3QuZW50cmllcyhkYXRhKSkge1xuICAgICAgcmVwb3NpdG9yeS5hZGREZWZpbml0aW9ucyhiYXNlVXJsLCBkZWZpbml0aW9ucyk7XG4gICAgfVxuICB9KTtcblxuICBjbGllbnQub25NZXNzYWdlKCdwYXJ0aWFsUmVzcG9uc2UnLCAoZGF0YSkgPT4ge1xuICAgIC8qIFNvbWUgY2xpZW50cyAoc3VjaCBhcyBsb3cgZW5kIEFuZHJvaWQgZGV2aWNlcykgc3RydWdnbGUgdG8gc2VyaWFsaXNlIGxhcmdlIHBheWxvYWRzIGluIG9uZSBnbywgc28gcGFydGlhbCByZXNwb25zZXMgYWxsb3cgdGhlbVxuICAgICAgICB0byBzcGxpdCBwYXlsb2FkcyBpbnRvIGNodW5rcyBhbmQgc2VyaWFsaXNlIGVhY2ggaW5kaXZpZHVhbGx5LlxuXG4gICAgICAgIFN1Y2ggcmVzcG9uc2VzIHdpbGwgYmUgZGlzdGluZ3Vpc2hlZCBiZXR3ZWVuIG5vcm1hbCByZXNwb25zZXMgYnkgYm90aDpcbiAgICAgICAgICAqIEJlaW5nIHNlbnQgdG8gdGhlIHBhcnRpYWxSZXNwb25zZSBtZXRob2QuXG4gICAgICAgICAgKiBIYXZpbmcgYSB0b3RhbENodW5rcyB2YWx1ZSA+IDEuXG5cbiAgICAgICAgVGhlIGZpcnN0IGNodW5rIHdpbGwgYWx3YXlzIGJlIGluY2x1ZGVkIGluIHRoZSBpbml0aWFsIHJlc3BvbnNlLiBUaGlzIHJlc3BvbnNlIG11c3QgaGF2ZSBpbmRleCAwLlxuICAgICAgICBUaGUgcmVtYWluaW5nIGNodW5rcyB3aWxsIGJlIHNlbnQgaW4gUmVzcG9uc2VGb2xsb3d1cENodW5rcywgd2hpY2ggZWFjaCBjb250YWluIGFub3RoZXIgcGllY2Ugb2YgdGhlIHBheWxvYWQsIGFsb25nIHdpdGggdGhlaXIgaW5kZXggZnJvbSAxIG9ud2FyZHMuXG4gICAgICAgIFRoZSBwYXlsb2FkIG9mIGVhY2ggY2h1bmsgaXMgaW5kaXZpZHVhbGx5IGVuY29kZWQgaW4gdGhlIHNhbWUgd2F5IHRoYXQgZnVsbCByZXNwb25zZXMgYXJlLlxuXG4gICAgICAgIFRoZSBvcmRlciB0aGF0IGluaXRpYWxSZXNwb25zZSwgYW5kIGZvbGxvd3VwIGNodW5rcyBhcmUgcmVjZWl2ZWQgaXMgbm90IGd1YXJhbnRlZWQgdG8gYmUgaW4gaW5kZXggb3JkZXIuXG4gICAgKi9cbiAgICBjb25zdCBtZXNzYWdlID0gZGF0YSBhcyBSZXNwb25zZUluZm8gfCBSZXNwb25zZUZvbGxvd3VwQ2h1bms7XG5cbiAgICBwYXJ0aWFsUmVzcG9uc2VzLnVwZGF0ZSgoZHJhZnQpID0+IHtcbiAgICAgIGlmICghZHJhZnRbbWVzc2FnZS5pZF0pIHtcbiAgICAgICAgZHJhZnRbbWVzc2FnZS5pZF0gPSB7XG4gICAgICAgICAgZm9sbG93dXBDaHVua3M6IHt9LFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgY29uc3QgZW50cnkgPSBkcmFmdFttZXNzYWdlLmlkXTtcbiAgICAgIGlmIChtZXNzYWdlLmluZGV4ICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5pbmRleCA+IDApIHtcbiAgICAgICAgLy8gSXQncyBhIGZvbGxvdyB1cCBjaHVua1xuICAgICAgICBjb25zdCBjaHVuayA9IG1lc3NhZ2UgYXMgUmVzcG9uc2VGb2xsb3d1cENodW5rO1xuICAgICAgICBlbnRyeS5mb2xsb3d1cENodW5rc1tjaHVuay5pbmRleF0gPSBjaHVuay5kYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSXQncyBhbiBpbml0aWFsIGNodW5rXG4gICAgICAgIGVudHJ5LmluaXRpYWxSZXNwb25zZSA9IG1lc3NhZ2UgYXMgUmVzcG9uc2VJbmZvO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXNzZW1ibGVDaHVua3NJZlJlc3BvbnNlSXNDb21wbGV0ZShcbiAgICAgIHBhcnRpYWxSZXNwb25zZXMuZ2V0KClbbWVzc2FnZS5pZF0sXG4gICAgKTtcbiAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgIHN0b3JlUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgcGFydGlhbFJlc3BvbnNlcy51cGRhdGUoKGRyYWZ0KSA9PiB7XG4gICAgICAgIGRlbGV0ZSBkcmFmdFtyZXNwb25zZS5pZF07XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIGFzeW5jIGZ1bmN0aW9uIHN1cHBvcnRzTW9ja3MoZGV2aWNlOiBEZXZpY2UpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBpZiAoZGV2aWNlLmlzQXJjaGl2ZWQpIHtcbiAgICAgIHJldHVybiBpc01vY2tSZXNwb25zZVN1cHBvcnRlZC5nZXQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNsaWVudC5zdXBwb3J0c01ldGhvZCgnbW9ja1Jlc3BvbnNlcycpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgc3VwcG9ydHNNb2NrcyhjbGllbnQuZGV2aWNlKVxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdSb3V0ZUFycmF5OiBbYW55XSA9IEpTT04ucGFyc2UoXG4gICAgICAgICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oXG4gICAgICAgICAgICBMT0NBTFNUT1JBR0VfTU9DS19ST1VURV9MSVNUX0tFWSArIGNsaWVudC5hcHBJZCxcbiAgICAgICAgICApIHx8ICdbXScsXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IG5ld1JvdXRlczoge1tpZDogc3RyaW5nXTogYW55fSA9IHt9O1xuICAgICAgICBuZXdSb3V0ZUFycmF5LmZvckVhY2goKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgIG5ld1JvdXRlc1tpbmRleC50b1N0cmluZygpXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgYmF0Y2goKCkgPT4ge1xuICAgICAgICAgIHJvdXRlcy5zZXQobmV3Um91dGVzKTtcbiAgICAgICAgICBpc01vY2tSZXNwb25zZVN1cHBvcnRlZC5zZXQocmVzdWx0KTtcbiAgICAgICAgICBzaG93TW9ja1Jlc3BvbnNlRGlhbG9nLnNldChmYWxzZSk7XG4gICAgICAgICAgbmV4dFJvdXRlSWQuc2V0KE9iamVjdC5rZXlzKHJvdXRlcy5nZXQoKSkubGVuZ3RoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaW5mb3JtQ2xpZW50TW9ja0NoYW5nZShyb3V0ZXMuZ2V0KCkpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICBpZiAoY2xpZW50LmRldmljZS5jb25uZWN0ZWQuZ2V0KCkpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdbbmV0d29ya10gRmFpbGVkIHRvIGluaXQgbW9ja3M6JywgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgLy8gZGVjbGFyZSBuZXcgdmFyaWFibGUgdG8gYmUgY2FsbGVkIGluc2lkZSB0aGUgaW50ZXJmYWNlXG4gICAgbmV0d29ya1JvdXRlTWFuYWdlci5zZXQoXG4gICAgICBjcmVhdGVOZXR3b3JrTWFuYWdlcihcbiAgICAgICAgbmV4dFJvdXRlSWQsXG4gICAgICAgIHJvdXRlcyxcbiAgICAgICAgaW5mb3JtQ2xpZW50TW9ja0NoYW5nZSxcbiAgICAgICAgdGFibGVNYW5hZ2VyUmVmLFxuICAgICAgKSxcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXJMb2dzKCkge1xuICAgIHJlcXVlc3RzLmNsZWFyKCk7XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBpbmZvcm1DbGllbnRNb2NrQ2hhbmdlKHJvdXRlczoge1tpZDogc3RyaW5nXTogUm91dGV9KSB7XG4gICAgY29uc3QgZmlsdGVyZWRSb3V0ZXM6IHtbaWQ6IHN0cmluZ106IFJvdXRlfSA9IGNvbXB1dGVNb2NrUm91dGVzKHJvdXRlcyk7XG5cbiAgICBpZiAoaXNNb2NrUmVzcG9uc2VTdXBwb3J0ZWQuZ2V0KCkpIHtcbiAgICAgIGNvbnN0IHJvdXRlc1ZhbHVlc0FycmF5ID0gT2JqZWN0LnZhbHVlcyhmaWx0ZXJlZFJvdXRlcyk7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcbiAgICAgICAgTE9DQUxTVE9SQUdFX01PQ0tfUk9VVEVfTElTVF9LRVkgKyBjbGllbnQuYXBwSWQsXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHJvdXRlc1ZhbHVlc0FycmF5KSxcbiAgICAgICk7XG5cbiAgICAgIGlmICghY2xpZW50LmRldmljZS5pc0FyY2hpdmVkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgY2xpZW50LnNlbmQoJ21vY2tSZXNwb25zZXMnLCB7XG4gICAgICAgICAgICByb3V0ZXM6IHJvdXRlc1ZhbHVlc0FycmF5XG4gICAgICAgICAgICAgIC5maWx0ZXIoKGUpID0+IGUuZW5hYmxlZClcbiAgICAgICAgICAgICAgLm1hcCgocm91dGU6IFJvdXRlKSA9PiAoe1xuICAgICAgICAgICAgICAgIHJlcXVlc3RVcmw6IHJvdXRlLnJlcXVlc3RVcmwsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiByb3V0ZS5yZXF1ZXN0TWV0aG9kLFxuICAgICAgICAgICAgICAgIGRhdGE6IHJvdXRlLnJlc3BvbnNlRGF0YSxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBbLi4uT2JqZWN0LnZhbHVlcyhyb3V0ZS5yZXNwb25zZUhlYWRlcnMpXSxcbiAgICAgICAgICAgICAgICBzdGF0dXM6IHJvdXRlLnJlc3BvbnNlU3RhdHVzLFxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHJvdXRlLmVuYWJsZWQsXG4gICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBtb2NrIHJlc3BvbnNlcy4nLCBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEN1c3RvbUNvbHVtbihjb2x1bW46IEN1c3RvbUNvbHVtbkNvbmZpZykge1xuICAgIC8vIHByZXZlbnQgZG91Ymxlc1xuICAgIGlmIChcbiAgICAgIGN1c3RvbUNvbHVtbnNcbiAgICAgICAgLmdldCgpXG4gICAgICAgIC5maW5kKChjKSA9PiBjLmhlYWRlciA9PT0gY29sdW1uLmhlYWRlciAmJiBjLnR5cGUgPT09IGNvbHVtbi50eXBlKVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBhZGQgY3VzdG9tIGNvbHVtbiBjb25maWdcbiAgICBjdXN0b21Db2x1bW5zLnVwZGF0ZSgoZCkgPT4ge1xuICAgICAgZC5wdXNoKGNvbHVtbik7XG4gICAgfSk7XG4gICAgLy8gZ2VuZXJhdGUgRGF0YVRhYmxlIGNvbHVtbiBjb25maWdcbiAgICBhZGREYXRhVGFibGVDb2x1bW5Db25maWcoY29sdW1uKTtcbiAgICAvLyB1cGRhdGUgZXhpc3RpbmcgZW50cmllc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVxdWVzdHMuc2l6ZTsgaSsrKSB7XG4gICAgICBjb25zdCByZXF1ZXN0ID0gcmVxdWVzdHMuZ2V0KGkpO1xuICAgICAgcmVxdWVzdHMudXBkYXRlKGksIHtcbiAgICAgICAgLi4ucmVxdWVzdCxcbiAgICAgICAgW2Ake2NvbHVtbi50eXBlfV9oZWFkZXJfJHtjb2x1bW4uaGVhZGVyfWBdOiBnZXRIZWFkZXJWYWx1ZShcbiAgICAgICAgICBjb2x1bW4udHlwZSA9PT0gJ3JlcXVlc3QnXG4gICAgICAgICAgICA/IHJlcXVlc3QucmVxdWVzdEhlYWRlcnNcbiAgICAgICAgICAgIDogcmVxdWVzdC5yZXNwb25zZUhlYWRlcnMsXG4gICAgICAgICAgY29sdW1uLmhlYWRlcixcbiAgICAgICAgKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZERhdGFUYWJsZUNvbHVtbkNvbmZpZyhjb2x1bW46IEN1c3RvbUNvbHVtbkNvbmZpZykge1xuICAgIGNvbHVtbnMudXBkYXRlKChkKSA9PiB7XG4gICAgICBkLnB1c2goe1xuICAgICAgICBrZXk6IGAke2NvbHVtbi50eXBlfV9oZWFkZXJfJHtjb2x1bW4uaGVhZGVyfWAgYXMgYW55LFxuICAgICAgICB3aWR0aDogMjAwLFxuICAgICAgICB0aXRsZTogYCR7Y29sdW1uLmhlYWRlcn0gKCR7Y29sdW1uLnR5cGV9KWAsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNsaWVudC5vblJlYWR5KCgpID0+IHtcbiAgICAvLyBhZnRlciByZXN0b3JpbmcgYSBzbmFwc2hvdCwgbGV0J3MgbWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgY29sdW1uc1xuICAgIGN1c3RvbUNvbHVtbnMuZ2V0KCkuZm9yRWFjaChhZGREYXRhVGFibGVDb2x1bW5Db25maWcpO1xuICB9KTtcblxuICBjbGllbnQub25FeHBvcnQ8U3RhdGVFeHBvcnQ+KGFzeW5jIChpZGxlciwgb25TdGF0dXNNZXNzYWdlKSA9PiB7XG4gICAgY29uc3Qgc2VyaWFsaXplZFJlcXVlc3RzOiBTZXJpYWxpemVkUmVxdWVzdFtdID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXF1ZXN0cy5zaXplOyBpKyspIHtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSByZXF1ZXN0cy5nZXQoaSk7XG4gICAgICBzZXJpYWxpemVkUmVxdWVzdHMucHVzaCh7XG4gICAgICAgIC4uLnJlcXVlc3QsXG4gICAgICAgIHJlcXVlc3RUaW1lOiByZXF1ZXN0LnJlcXVlc3RUaW1lLmdldFRpbWUoKSxcbiAgICAgICAgcmVzcG9uc2VUaW1lOiByZXF1ZXN0LnJlc3BvbnNlVGltZT8uZ2V0VGltZSgpLFxuICAgICAgICByZXF1ZXN0RGF0YTpcbiAgICAgICAgICByZXF1ZXN0LnJlcXVlc3REYXRhIGluc3RhbmNlb2YgVWludDhBcnJheVxuICAgICAgICAgICAgPyBbQmFzZTY0LmZyb21VaW50OEFycmF5KHJlcXVlc3QucmVxdWVzdERhdGEpXVxuICAgICAgICAgICAgOiByZXF1ZXN0LnJlcXVlc3REYXRhLFxuICAgICAgICByZXNwb25zZURhdGE6XG4gICAgICAgICAgcmVxdWVzdC5yZXNwb25zZURhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5XG4gICAgICAgICAgICA/IFtCYXNlNjQuZnJvbVVpbnQ4QXJyYXkocmVxdWVzdC5yZXNwb25zZURhdGEpXVxuICAgICAgICAgICAgOiByZXF1ZXN0LnJlc3BvbnNlRGF0YSxcbiAgICAgIH0pO1xuICAgICAgaWYgKGlkbGVyLmlzQ2FuY2VsbGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlkbGVyLnNob3VsZElkbGUoKSkge1xuICAgICAgICBvblN0YXR1c01lc3NhZ2UoYFNlcmlhbGl6aW5nIHJlcXVlc3QgJHtpICsgMX0vJHtyZXF1ZXN0cy5zaXplfWApO1xuICAgICAgICBhd2FpdCBpZGxlci5pZGxlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBpc01vY2tSZXNwb25zZVN1cHBvcnRlZDogaXNNb2NrUmVzcG9uc2VTdXBwb3J0ZWQuZ2V0KCksXG4gICAgICBzZWxlY3RlZElkOiBzZWxlY3RlZElkLmdldCgpLFxuICAgICAgcmVxdWVzdHMyOiBzZXJpYWxpemVkUmVxdWVzdHMsXG4gICAgICBjdXN0b21Db2x1bW5zOiBjdXN0b21Db2x1bW5zLmdldCgpLFxuICAgIH07XG4gIH0pO1xuXG4gIGNsaWVudC5vbkltcG9ydDxTdGF0ZUV4cG9ydD4oKGRhdGEpID0+IHtcbiAgICBzZWxlY3RlZElkLnNldChkYXRhLnNlbGVjdGVkSWQpO1xuICAgIGlzTW9ja1Jlc3BvbnNlU3VwcG9ydGVkLnNldChkYXRhLmlzTW9ja1Jlc3BvbnNlU3VwcG9ydGVkKTtcbiAgICBjdXN0b21Db2x1bW5zLnNldChkYXRhLmN1c3RvbUNvbHVtbnMpO1xuICAgIGRhdGEucmVxdWVzdHMyLmZvckVhY2goKHJlcXVlc3QpID0+IHtcbiAgICAgIHJlcXVlc3RzLmFwcGVuZCh7XG4gICAgICAgIC4uLnJlcXVlc3QsXG4gICAgICAgIHJlcXVlc3RUaW1lOiBuZXcgRGF0ZShyZXF1ZXN0LnJlcXVlc3RUaW1lKSxcbiAgICAgICAgcmVzcG9uc2VUaW1lOlxuICAgICAgICAgIHJlcXVlc3QucmVzcG9uc2VUaW1lICE9IG51bGxcbiAgICAgICAgICAgID8gbmV3IERhdGUocmVxdWVzdC5yZXNwb25zZVRpbWUpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgcmVxdWVzdERhdGE6IEFycmF5LmlzQXJyYXkocmVxdWVzdC5yZXF1ZXN0RGF0YSlcbiAgICAgICAgICA/IEJhc2U2NC50b1VpbnQ4QXJyYXkocmVxdWVzdC5yZXF1ZXN0RGF0YVswXSlcbiAgICAgICAgICA6IHJlcXVlc3QucmVxdWVzdERhdGEsXG4gICAgICAgIHJlc3BvbnNlRGF0YTogQXJyYXkuaXNBcnJheShyZXF1ZXN0LnJlc3BvbnNlRGF0YSlcbiAgICAgICAgICA/IEJhc2U2NC50b1VpbnQ4QXJyYXkocmVxdWVzdC5yZXNwb25zZURhdGFbMF0pXG4gICAgICAgICAgOiByZXF1ZXN0LnJlc3BvbnNlRGF0YSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGNvbHVtbnMsXG4gICAgcm91dGVzLFxuICAgIG5leHRSb3V0ZUlkLFxuICAgIGlzTW9ja1Jlc3BvbnNlU3VwcG9ydGVkLFxuICAgIHNob3dNb2NrUmVzcG9uc2VEaWFsb2csXG4gICAgZGV0YWlsQm9keUZvcm1hdCxcbiAgICByZXF1ZXN0cyxcbiAgICBwYXJ0aWFsUmVzcG9uc2VzLFxuICAgIG5ldHdvcmtSb3V0ZU1hbmFnZXIsXG4gICAgY2xlYXJMb2dzLFxuICAgIG9uTW9ja0J1dHRvblByZXNzZWQoKSB7XG4gICAgICBzaG93TW9ja1Jlc3BvbnNlRGlhbG9nLnNldCh0cnVlKTtcbiAgICB9LFxuICAgIG9uQ2xvc2VCdXR0b25QcmVzc2VkKCkge1xuICAgICAgc2hvd01vY2tSZXNwb25zZURpYWxvZy5zZXQoZmFsc2UpO1xuICAgIH0sXG4gICAgb25TZWxlY3RGb3JtYXQoYm9keUZvcm1hdDogc3RyaW5nKSB7XG4gICAgICBkZXRhaWxCb2R5Rm9ybWF0LnNldChib2R5Rm9ybWF0KTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKExPQ0FMU1RPUkFHRV9SRVNQT05TRV9CT0RZX0ZPUk1BVF9LRVksIGJvZHlGb3JtYXQpO1xuICAgIH0sXG4gICAgc2VsZWN0ZWRJZCxcbiAgICBvblNlbGVjdChyZXF1ZXN0OiBSZXF1ZXN0KSB7XG4gICAgICBzZWxlY3RlZElkLnNldChyZXF1ZXN0Py5pZCk7XG4gICAgfSxcbiAgICBpbml0LFxuICAgIHRhYmxlTWFuYWdlclJlZixcbiAgICBvbkNvbnRleHRNZW51KHJlcXVlc3Q6IFJlcXVlc3QgfCB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgPE1lbnUuSXRlbVxuICAgICAgICAgICAga2V5PVwiY3VybFwiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb25zdCBjb21tYW5kID0gY29udmVydFJlcXVlc3RUb0N1cmxDb21tYW5kKHJlcXVlc3QpO1xuICAgICAgICAgICAgICBjbGllbnQud3JpdGVUZXh0VG9DbGlwYm9hcmQoY29tbWFuZCk7XG4gICAgICAgICAgICB9fT5cbiAgICAgICAgICAgIENvcHkgY1VSTCBjb21tYW5kXG4gICAgICAgICAgPC9NZW51Lkl0ZW0+XG4gICAgICAgICAgPE1lbnUuSXRlbVxuICAgICAgICAgICAga2V5PVwiY3VzdG9tIGhlYWRlclwiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHNob3dDdXN0b21Db2x1bW5EaWFsb2coYWRkQ3VzdG9tQ29sdW1uKTtcbiAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgQWRkIGhlYWRlciBjb2x1bW57J1xcdTIwMjYnfVxuICAgICAgICAgIDwvTWVudS5JdGVtPlxuICAgICAgICA8Lz5cbiAgICAgICk7XG4gICAgfSxcbiAgICBvbkNvcHlUZXh0KHRleHQ6IHN0cmluZykge1xuICAgICAgY2xpZW50LndyaXRlVGV4dFRvQ2xpcGJvYXJkKHRleHQpO1xuICAgICAgbWVzc2FnZS5zdWNjZXNzKCdUZXh0IGNvcGllZCB0byBjbGlwYm9hcmQnKTtcbiAgICB9LFxuICAgIGFkZEN1c3RvbUNvbHVtbixcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2hvd0N1c3RvbUNvbHVtbkRpYWxvZyhcbiAgYWRkQ3VzdG9tQ29sdW1uOiAoY29sdW1uOiBDdXN0b21Db2x1bW5Db25maWcpID0+IHZvaWQsXG4pIHtcbiAgZnVuY3Rpb24gQ3VzdG9tQ29sdW1uRGlhbG9nKHt1bm1vdW50fToge3VubW91bnQoKTogdm9pZH0pIHtcbiAgICBjb25zdCBbZm9ybV0gPSBGb3JtLnVzZUZvcm0oKTtcbiAgICByZXR1cm4gKFxuICAgICAgPE1vZGFsXG4gICAgICAgIHRpdGxlPVwiQWRkIGN1c3RvbSBjb2x1bW5cIlxuICAgICAgICBvcGVuXG4gICAgICAgIG9uT2s9eygpID0+IHtcbiAgICAgICAgICBjb25zdCBoZWFkZXIgPSBmb3JtLmdldEZpZWxkVmFsdWUoJ2hlYWRlcicpO1xuICAgICAgICAgIGNvbnN0IHR5cGUgPSBmb3JtLmdldEZpZWxkVmFsdWUoJ3R5cGUnKTtcbiAgICAgICAgICBpZiAoaGVhZGVyICYmIHR5cGUpIHtcbiAgICAgICAgICAgIGFkZEN1c3RvbUNvbHVtbih7XG4gICAgICAgICAgICAgIGhlYWRlcixcbiAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdW5tb3VudCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfX1cbiAgICAgICAgb25DYW5jZWw9e3VubW91bnR9PlxuICAgICAgICA8Rm9ybVxuICAgICAgICAgIGxheW91dD17J3ZlcnRpY2FsJ31cbiAgICAgICAgICBmb3JtPXtmb3JtfVxuICAgICAgICAgIGluaXRpYWxWYWx1ZXM9e3tcbiAgICAgICAgICAgIHR5cGU6ICdyZXNwb25zZScsXG4gICAgICAgICAgICBoZWFkZXI6ICcnLFxuICAgICAgICAgIH19PlxuICAgICAgICAgIDxGb3JtLkl0ZW0gbGFiZWw9XCJIZWFkZXIgbmFtZVwiIG5hbWU9XCJoZWFkZXJcIj5cbiAgICAgICAgICAgIDxJbnB1dCBwbGFjZWhvbGRlcj1cIkhlYWRlciBuYW1lXCIgLz5cbiAgICAgICAgICA8L0Zvcm0uSXRlbT5cbiAgICAgICAgICA8Rm9ybS5JdGVtIGxhYmVsPVwiSGVhZGVyIHR5cGVcIiBuYW1lPVwidHlwZVwiPlxuICAgICAgICAgICAgPFJhZGlvLkdyb3VwPlxuICAgICAgICAgICAgICA8UmFkaW8gdmFsdWU9eydyZXF1ZXN0J30+UmVxdWVzdDwvUmFkaW8+XG4gICAgICAgICAgICAgIDxSYWRpbyB2YWx1ZT17J3Jlc3BvbnNlJ30+UmVzcG9uc2U8L1JhZGlvPlxuICAgICAgICAgICAgPC9SYWRpby5Hcm91cD5cbiAgICAgICAgICA8L0Zvcm0uSXRlbT5cbiAgICAgICAgPC9Gb3JtPlxuICAgICAgPC9Nb2RhbD5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyUmVhY3RSb290KCh1bm1vdW50KSA9PiA8Q3VzdG9tQ29sdW1uRGlhbG9nIHVubW91bnQ9e3VubW91bnR9IC8+KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVxdWVzdEZyb21SZXF1ZXN0SW5mbyhcbiAgZGF0YTogUmVxdWVzdEluZm8sXG4gIGN1c3RvbUNvbHVtbnM6IEN1c3RvbUNvbHVtbkNvbmZpZ1tdLFxuKTogUmVxdWVzdCB7XG4gIGxldCB1cmw6IFVSTCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgdHJ5IHtcbiAgICB1cmwgPSBkYXRhLnVybCA/IG5ldyBVUkwoZGF0YS51cmwpIDogdW5kZWZpbmVkO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS53YXJuKGBGYWlsZWQgdG8gcGFyc2UgdXJsOiAnJHtkYXRhLnVybH0nYCwgZSk7XG4gIH1cbiAgY29uc3QgZG9tYWluID1cbiAgICBnZXRIZWFkZXJWYWx1ZShkYXRhLmhlYWRlcnMsICdYLUZCLUZyaWVuZGx5LU5hbWUnKSB8fFxuICAgICh1cmwgPyAodXJsLnBhdGhuYW1lID8gdXJsLmhvc3QgKyB1cmwucGF0aG5hbWUgOiB1cmwuaG9zdCkgOiAnPHVua25vd24+Jyk7XG5cbiAgY29uc3QgcmVzID0ge1xuICAgIGlkOiBkYXRhLmlkLFxuICAgIC8vIHJlcXVlc3RcbiAgICByZXF1ZXN0VGltZTogbmV3IERhdGUoZGF0YS50aW1lc3RhbXApLFxuICAgIG1ldGhvZDogZGF0YS5tZXRob2QsXG4gICAgdXJsOiBkYXRhLnVybCA/PyAnJyxcbiAgICBkb21haW4sXG4gICAgcmVxdWVzdEhlYWRlcnM6IGRhdGEuaGVhZGVycyxcbiAgICByZXF1ZXN0RGF0YTogZGVjb2RlQm9keShkYXRhLmhlYWRlcnMsIGRhdGEuZGF0YSksXG4gICAgc3RhdHVzOiAnLi4uJyxcbiAgfTtcbiAgY3VzdG9tQ29sdW1uc1xuICAgIC5maWx0ZXIoKGMpID0+IGMudHlwZSA9PT0gJ3JlcXVlc3QnKVxuICAgIC5mb3JFYWNoKCh7aGVhZGVyfSkgPT4ge1xuICAgICAgKHJlcyBhcyBhbnkpW2ByZXF1ZXN0X2hlYWRlcl8ke2hlYWRlcn1gXSA9IGdldEhlYWRlclZhbHVlKFxuICAgICAgICBkYXRhLmhlYWRlcnMsXG4gICAgICAgIGhlYWRlcixcbiAgICAgICk7XG4gICAgfSk7XG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVJlcXVlc3RXaXRoUmVzcG9uc2VJbmZvKFxuICByZXF1ZXN0OiBSZXF1ZXN0LFxuICByZXNwb25zZTogUmVzcG9uc2VJbmZvLFxuICBjdXN0b21Db2x1bW5zOiBDdXN0b21Db2x1bW5Db25maWdbXSxcbik6IFJlcXVlc3Qge1xuICBjb25zdCByZXMgPSB7XG4gICAgLi4ucmVxdWVzdCxcbiAgICByZXNwb25zZVRpbWU6IG5ldyBEYXRlKHJlc3BvbnNlLnRpbWVzdGFtcCksXG4gICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMudG9TdHJpbmcoKSxcbiAgICByZWFzb246IHJlc3BvbnNlLnJlYXNvbixcbiAgICByZXNwb25zZUhlYWRlcnM6IHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgcmVzcG9uc2VEYXRhOiBkZWNvZGVCb2R5KHJlc3BvbnNlLmhlYWRlcnMsIHJlc3BvbnNlLmRhdGEpLFxuICAgIHJlc3BvbnNlSXNNb2NrOiByZXNwb25zZS5pc01vY2ssXG4gICAgcmVzcG9uc2VMZW5ndGg6IGdldFJlc3BvbnNlTGVuZ3RoKHJlc3BvbnNlKSxcbiAgICByZXF1ZXN0TGVuZ3RoOiBnZXRSZXF1ZXN0TGVuZ3RoKHJlcXVlc3QpLFxuICAgIGR1cmF0aW9uOiByZXNwb25zZS50aW1lc3RhbXAgLSByZXF1ZXN0LnJlcXVlc3RUaW1lLmdldFRpbWUoKSxcbiAgICBpbnNpZ2h0czogcmVzcG9uc2UuaW5zaWdodHMgPz8gdW5kZWZpbmVkLFxuICB9O1xuICBjdXN0b21Db2x1bW5zXG4gICAgLmZpbHRlcigoYykgPT4gYy50eXBlID09PSAncmVzcG9uc2UnKVxuICAgIC5mb3JFYWNoKCh7aGVhZGVyfSkgPT4ge1xuICAgICAgKHJlcyBhcyBhbnkpW2ByZXNwb25zZV9oZWFkZXJfJHtoZWFkZXJ9YF0gPSBnZXRIZWFkZXJWYWx1ZShcbiAgICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgaGVhZGVyLFxuICAgICAgKTtcbiAgICB9KTtcbiAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENvbXBvbmVudCgpIHtcbiAgY29uc3QgaW5zdGFuY2UgPSB1c2VQbHVnaW4ocGx1Z2luKTtcbiAgY29uc3Qgcm91dGVzID0gdXNlVmFsdWUoaW5zdGFuY2Uucm91dGVzKTtcbiAgY29uc3QgaXNNb2NrUmVzcG9uc2VTdXBwb3J0ZWQgPSB1c2VWYWx1ZShpbnN0YW5jZS5pc01vY2tSZXNwb25zZVN1cHBvcnRlZCk7XG4gIGNvbnN0IHNob3dNb2NrUmVzcG9uc2VEaWFsb2cgPSB1c2VWYWx1ZShpbnN0YW5jZS5zaG93TW9ja1Jlc3BvbnNlRGlhbG9nKTtcbiAgY29uc3QgbmV0d29ya1JvdXRlTWFuYWdlciA9IHVzZVZhbHVlKGluc3RhbmNlLm5ldHdvcmtSb3V0ZU1hbmFnZXIpO1xuICBjb25zdCBjb2x1bW5zID0gdXNlVmFsdWUoaW5zdGFuY2UuY29sdW1ucyk7XG5cbiAgcmV0dXJuIChcbiAgICA8TmV0d29ya1JvdXRlQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17bmV0d29ya1JvdXRlTWFuYWdlcn0+XG4gICAgICA8TGF5b3V0LkNvbnRhaW5lclxuICAgICAgICBncm93XG4gICAgICAgIGtleT17XG4gICAgICAgICAgY29sdW1ucy5sZW5ndGggLyogbWFrZSBzdXJlIHRvIHJlc2V0IHRoZSB0YWJsZSBpZiBjb2x1bXMgY2hhbmdlICovXG4gICAgICAgIH0+XG4gICAgICAgIDxEYXRhVGFibGVcbiAgICAgICAgICBjb2x1bW5zPXtjb2x1bW5zfVxuICAgICAgICAgIGRhdGFTb3VyY2U9e2luc3RhbmNlLnJlcXVlc3RzfVxuICAgICAgICAgIG9uUm93U3R5bGU9e2dldFJvd1N0eWxlfVxuICAgICAgICAgIHRhYmxlTWFuYWdlclJlZj17aW5zdGFuY2UudGFibGVNYW5hZ2VyUmVmfVxuICAgICAgICAgIG9uU2VsZWN0PXtpbnN0YW5jZS5vblNlbGVjdH1cbiAgICAgICAgICBvbkNvcHlSb3dzPXtyZXF1ZXN0c1RvVGV4dH1cbiAgICAgICAgICBvbkNvbnRleHRNZW51PXtpbnN0YW5jZS5vbkNvbnRleHRNZW51fVxuICAgICAgICAgIGVuYWJsZUF1dG9TY3JvbGxcbiAgICAgICAgICBleHRyYUFjdGlvbnM9e1xuICAgICAgICAgICAgPExheW91dC5Ib3Jpem9udGFsIGdhcD5cbiAgICAgICAgICAgICAgPEJ1dHRvbiB0aXRsZT1cIkNsZWFyIGxvZ3NcIiBvbkNsaWNrPXtpbnN0YW5jZS5jbGVhckxvZ3N9PlxuICAgICAgICAgICAgICAgIDxEZWxldGVPdXRsaW5lZCAvPlxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAge2lzTW9ja1Jlc3BvbnNlU3VwcG9ydGVkICYmIChcbiAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e2luc3RhbmNlLm9uTW9ja0J1dHRvblByZXNzZWR9Pk1vY2s8L0J1dHRvbj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvTGF5b3V0Lkhvcml6b250YWw+XG4gICAgICAgICAgfVxuICAgICAgICAvPlxuICAgICAgICA8TW9kYWxcbiAgICAgICAgICBvcGVuPXtzaG93TW9ja1Jlc3BvbnNlRGlhbG9nfVxuICAgICAgICAgIG9uQ2FuY2VsPXtpbnN0YW5jZS5vbkNsb3NlQnV0dG9uUHJlc3NlZH1cbiAgICAgICAgICBmb290ZXI9e251bGx9XG4gICAgICAgICAgdGl0bGU9XCJNb2NrIE5ldHdvcmsgUmVzcG9uc2VzXCJcbiAgICAgICAgICB3aWR0aD17MTIwMH0+XG4gICAgICAgICAgPE1hbmFnZU1vY2tSZXNwb25zZVBhbmVsIHJvdXRlcz17cm91dGVzfSAvPlxuICAgICAgICA8L01vZGFsPlxuICAgICAgICA8RGV0YWlsU2lkZWJhciB3aWR0aD17NDAwfT5cbiAgICAgICAgICA8U2lkZWJhciAvPlxuICAgICAgICA8L0RldGFpbFNpZGViYXI+XG4gICAgICA8L0xheW91dC5Db250YWluZXI+XG4gICAgPC9OZXR3b3JrUm91dGVDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuXG5mdW5jdGlvbiBTaWRlYmFyKCkge1xuICBjb25zdCBpbnN0YW5jZSA9IHVzZVBsdWdpbihwbHVnaW4pO1xuICBjb25zdCBzZWxlY3RlZElkID0gdXNlVmFsdWUoaW5zdGFuY2Uuc2VsZWN0ZWRJZCk7XG4gIGNvbnN0IGRldGFpbEJvZHlGb3JtYXQgPSB1c2VWYWx1ZShpbnN0YW5jZS5kZXRhaWxCb2R5Rm9ybWF0KTtcblxuICAvLyBUT0RPOiBGaXggdGhpcyB0aGUgbmV4dCB0aW1lIHRoZSBmaWxlIGlzIGVkaXRlZC5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgY29uc3QgcmVxdWVzdCA9IGluc3RhbmNlLnJlcXVlc3RzLmdldEJ5SWQoc2VsZWN0ZWRJZCEpO1xuICBpZiAoIXJlcXVlc3QpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPExheW91dC5Db250YWluZXIgcGFkIGdyb3cgY2VudGVyPlxuICAgICAgICA8VHlwb2dyYXBoeS5UZXh0IHR5cGU9XCJzZWNvbmRhcnlcIj5ObyByZXF1ZXN0IHNlbGVjdGVkPC9UeXBvZ3JhcGh5LlRleHQ+XG4gICAgICA8L0xheW91dC5Db250YWluZXI+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFJlcXVlc3REZXRhaWxzXG4gICAgICBrZXk9e3NlbGVjdGVkSWR9XG4gICAgICByZXF1ZXN0PXtyZXF1ZXN0fVxuICAgICAgYm9keUZvcm1hdD17ZGV0YWlsQm9keUZvcm1hdH1cbiAgICAgIG9uU2VsZWN0Rm9ybWF0PXtpbnN0YW5jZS5vblNlbGVjdEZvcm1hdH1cbiAgICAgIG9uQ29weVRleHQ9e2luc3RhbmNlLm9uQ29weVRleHR9XG4gICAgLz5cbiAgKTtcbn1cblxuY29uc3QgYmFzZUNvbHVtbnM6IERhdGFUYWJsZUNvbHVtbjxSZXF1ZXN0PltdID0gW1xuICB7XG4gICAga2V5OiAncmVxdWVzdFRpbWUnLFxuICAgIHRpdGxlOiAnUmVxdWVzdCBUaW1lJyxcbiAgICB3aWR0aDogMTIwLFxuICAgIHBvd2VyU2VhcmNoQ29uZmlnOiB7dHlwZTogJ2RhdGVUaW1lJ30sXG4gIH0sXG4gIHtcbiAgICBrZXk6ICdyZXNwb25zZVRpbWUnLFxuICAgIHRpdGxlOiAnUmVzcG9uc2UgVGltZScsXG4gICAgd2lkdGg6IDEyMCxcbiAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICBwb3dlclNlYXJjaENvbmZpZzoge3R5cGU6ICdkYXRlVGltZSd9LFxuICB9LFxuICB7XG4gICAga2V5OiAncmVxdWVzdERhdGEnLFxuICAgIHRpdGxlOiAnR3JhcGhRTCBvcGVyYXRpb24gbmFtZScsXG4gICAgd2lkdGg6IDEyMCxcbiAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICBmb3JtYXR0ZXJzOiBmb3JtYXRPcGVyYXRpb25OYW1lLFxuICAgIHBvd2VyU2VhcmNoQ29uZmlnOiB7dHlwZTogJ29iamVjdCd9LFxuICB9LFxuICB7XG4gICAga2V5OiAnZG9tYWluJyxcbiAgICBwb3dlclNlYXJjaENvbmZpZzoge3R5cGU6ICdzdHJpbmcnfSxcbiAgfSxcbiAge1xuICAgIGtleTogJ3VybCcsXG4gICAgdGl0bGU6ICdGdWxsIFVSTCcsXG4gICAgdmlzaWJsZTogZmFsc2UsXG4gICAgcG93ZXJTZWFyY2hDb25maWc6IHt0eXBlOiAnc3RyaW5nJ30sXG4gIH0sXG4gIHtcbiAgICBrZXk6ICdtZXRob2QnLFxuICAgIHRpdGxlOiAnTWV0aG9kJyxcbiAgICB3aWR0aDogNzAsXG4gICAgcG93ZXJTZWFyY2hDb25maWc6IHtcbiAgICAgIHR5cGU6ICdlbnVtJyxcbiAgICAgIGluZmVyRW51bU9wdGlvbnNGcm9tRGF0YTogdHJ1ZSxcbiAgICB9LFxuICB9LFxuICB7XG4gICAga2V5OiAnc3RhdHVzJyxcbiAgICB0aXRsZTogJ1N0YXR1cycsXG4gICAgd2lkdGg6IDcwLFxuICAgIGFsaWduOiAncmlnaHQnLFxuICAgIHBvd2VyU2VhcmNoQ29uZmlnOiB7XG4gICAgICB0eXBlOiAnZW51bScsXG4gICAgICBpbmZlckVudW1PcHRpb25zRnJvbURhdGE6IHRydWUsXG4gICAgfSxcbiAgfSxcbiAge1xuICAgIGtleTogJ3JlcXVlc3RMZW5ndGgnLFxuICAgIHRpdGxlOiAnUmVxdWVzdCBTaXplJyxcbiAgICB3aWR0aDogMTAwLFxuICAgIGZvcm1hdHRlcnM6IGZvcm1hdEJ5dGVzLFxuICAgIGFsaWduOiAncmlnaHQnLFxuICAgIHBvd2VyU2VhcmNoQ29uZmlnOiB7dHlwZTogJ2Zsb2F0J30sXG4gIH0sXG4gIHtcbiAgICBrZXk6ICdyZXNwb25zZUxlbmd0aCcsXG4gICAgdGl0bGU6ICdSZXNwb25zZSBTaXplJyxcbiAgICB3aWR0aDogMTAwLFxuICAgIGZvcm1hdHRlcnM6IGZvcm1hdEJ5dGVzLFxuICAgIGFsaWduOiAncmlnaHQnLFxuICAgIHBvd2VyU2VhcmNoQ29uZmlnOiB7dHlwZTogJ2Zsb2F0J30sXG4gIH0sXG4gIHtcbiAgICBrZXk6ICdkdXJhdGlvbicsXG4gICAgdGl0bGU6ICdUaW1lJyxcbiAgICB3aWR0aDogMTAwLFxuICAgIGZvcm1hdHRlcnM6IGZvcm1hdER1cmF0aW9uLFxuICAgIGFsaWduOiAncmlnaHQnLFxuICAgIHBvd2VyU2VhcmNoQ29uZmlnOiB7dHlwZTogJ2Zsb2F0J30sXG4gIH0sXG5dO1xuXG5jb25zdCBtb2NraW5nU3R5bGUgPSB7XG4gIGNvbG9yOiB0aGVtZS53YXJuaW5nQ29sb3IsXG59O1xuXG5jb25zdCBlcnJvclN0eWxlID0ge1xuICBjb2xvcjogdGhlbWUuZXJyb3JDb2xvcixcbn07XG5cbmZ1bmN0aW9uIGdldFJvd1N0eWxlKHJvdzogUmVxdWVzdCkge1xuICByZXR1cm4gcm93LnJlc3BvbnNlSXNNb2NrXG4gICAgPyBtb2NraW5nU3R5bGVcbiAgICA6IHJvdy5zdGF0dXMgJiZcbiAgICAgICAgcm93LnN0YXR1cyAhPT0gJy4uLicgJiZcbiAgICAgICAgcGFyc2VJbnQocm93LnN0YXR1cywgMTApID49IDQwMCAmJlxuICAgICAgICBwYXJzZUludChyb3cuc3RhdHVzLCAxMCkgPCA2MDBcbiAgICAgID8gZXJyb3JTdHlsZVxuICAgICAgOiB1bmRlZmluZWQ7XG59XG4iLCAiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQge1Byb3RvYnVmRGVmaW5pdGlvbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgcHJvdG9idWYsIHtUeXBlfSBmcm9tICdwcm90b2J1ZmpzJztcblxuZXhwb3J0IGNsYXNzIFByb3RvYnVmRGVmaW5pdGlvbnNSZXBvc2l0b3J5IHtcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IFByb3RvYnVmRGVmaW5pdGlvbnNSZXBvc2l0b3J5O1xuICBwcml2YXRlIHJhd0RlZmluaXRpb25zOiB7W3BhdGg6IHN0cmluZ106IFByb3RvYnVmRGVmaW5pdGlvbn0gPSB7fTtcbiAgcHJpdmF0ZSBjYWNoZWREZWNvZGVkRGVmaW5pdGlvbnM6IHtcbiAgICBbcGF0aDogc3RyaW5nXTogRGVjb2RlZFByb3RvYnVmRGVmaW5pdGlvbjtcbiAgfSA9IHt9O1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogUHJvdG9idWZEZWZpbml0aW9uc1JlcG9zaXRvcnkge1xuICAgIGlmICghUHJvdG9idWZEZWZpbml0aW9uc1JlcG9zaXRvcnkuaW5zdGFuY2UpIHtcbiAgICAgIFByb3RvYnVmRGVmaW5pdGlvbnNSZXBvc2l0b3J5Lmluc3RhbmNlID1cbiAgICAgICAgbmV3IFByb3RvYnVmRGVmaW5pdGlvbnNSZXBvc2l0b3J5KCk7XG4gICAgfVxuICAgIHJldHVybiBQcm90b2J1ZkRlZmluaXRpb25zUmVwb3NpdG9yeS5pbnN0YW5jZTtcbiAgfVxuXG4gIHB1YmxpYyBhZGREZWZpbml0aW9ucyhiYXNlVXJsOiBzdHJpbmcsIGRlZmluaXRpb25zOiBQcm90b2J1ZkRlZmluaXRpb25bXSkge1xuICAgIGZvciAoY29uc3QgZCBvZiBkZWZpbml0aW9ucykge1xuICAgICAgaWYgKCFiYXNlVXJsLmVuZHNXaXRoKCcvJykgJiYgZC5wYXRoLnN1YnN0cigwLCAxKSAhPSAnLycpIHtcbiAgICAgICAgdGhpcy5yYXdEZWZpbml0aW9uc1t0aGlzLmtleShkLm1ldGhvZCwgYCR7YmFzZVVybH0vJHtkLnBhdGh9YCldID0gZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmF3RGVmaW5pdGlvbnNbdGhpcy5rZXkoZC5tZXRob2QsIGJhc2VVcmwgKyBkLnBhdGgpXSA9IGQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldFJlc3BvbnNlVHlwZShtZXRob2Q6IHN0cmluZywgcGF0aDogc3RyaW5nKTogVHlwZSB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3Qga2V5ID0gdGhpcy5rZXkobWV0aG9kLCBwYXRoKTtcbiAgICB0aGlzLmdlbmVyYXRlUm9vdHMoa2V5KTtcbiAgICBjb25zdCBtZXNzYWdlRnVsbE5hbWUgPSB0aGlzLnJhd0RlZmluaXRpb25zW2tleV0/LnJlc3BvbnNlTWVzc2FnZUZ1bGxOYW1lO1xuICAgIGlmIChtZXNzYWdlRnVsbE5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlZERlY29kZWREZWZpbml0aW9uc1trZXldPy5yZXNwb25zZVJvb3Q/Lmxvb2t1cFR5cGUoXG4gICAgICAgIG1lc3NhZ2VGdWxsTmFtZSxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldFJlcXVlc3RUeXBlKG1ldGhvZDogc3RyaW5nLCBwYXRoOiBzdHJpbmcpOiBUeXBlIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBrZXkgPSB0aGlzLmtleShtZXRob2QsIHBhdGgpO1xuICAgIHRoaXMuZ2VuZXJhdGVSb290cyhrZXkpO1xuICAgIGNvbnN0IG1lc3NhZ2VGdWxsTmFtZSA9IHRoaXMucmF3RGVmaW5pdGlvbnNba2V5XT8ucmVxdWVzdE1lc3NhZ2VGdWxsTmFtZTtcbiAgICBpZiAobWVzc2FnZUZ1bGxOYW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZWREZWNvZGVkRGVmaW5pdGlvbnNba2V5XT8ucmVxdWVzdFJvb3Q/Lmxvb2t1cFR5cGUoXG4gICAgICAgIG1lc3NhZ2VGdWxsTmFtZSxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZVJvb3RzKGtleTogc3RyaW5nKSB7XG4gICAgaWYgKGtleSBpbiB0aGlzLmNhY2hlZERlY29kZWREZWZpbml0aW9ucykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByYXdEZWZpbml0aW9uID0gdGhpcy5yYXdEZWZpbml0aW9uc1trZXldO1xuICAgIGlmIChyYXdEZWZpbml0aW9uID09PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAgIGxldCByZXNwb25zZVJvb3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHJhd0RlZmluaXRpb24ucmVzcG9uc2VEZWZpbml0aW9ucykge1xuICAgICAgcmVzcG9uc2VSb290ID0gcHJvdG9idWYuUm9vdC5mcm9tSlNPTihyYXdEZWZpbml0aW9uLnJlc3BvbnNlRGVmaW5pdGlvbnMpO1xuICAgIH1cblxuICAgIGxldCByZXF1ZXN0Um9vdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocmF3RGVmaW5pdGlvbi5yZXF1ZXN0RGVmaW5pdGlvbnMpIHtcbiAgICAgIHJlcXVlc3RSb290ID0gcHJvdG9idWYuUm9vdC5mcm9tSlNPTihyYXdEZWZpbml0aW9uLnJlcXVlc3REZWZpbml0aW9ucyk7XG4gICAgfVxuXG4gICAgdGhpcy5jYWNoZWREZWNvZGVkRGVmaW5pdGlvbnNba2V5XSA9IHtyZXNwb25zZVJvb3QsIHJlcXVlc3RSb290fTtcbiAgfVxuXG4gIHByaXZhdGUga2V5KG1ldGhvZDogc3RyaW5nLCBwYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHttZXRob2R9Ojoke3BhdGguc3BsaXQoJz8nKVswXX1gO1xuICB9XG59XG5cbnR5cGUgRGVjb2RlZFByb3RvYnVmRGVmaW5pdGlvbiA9IHtcbiAgcmVzcG9uc2VSb290OiBwcm90b2J1Zi5Sb290IHwgdW5kZWZpbmVkO1xuICByZXF1ZXN0Um9vdDogcHJvdG9idWYuUm9vdCB8IHVuZGVmaW5lZDtcbn07XG4iLCAiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQge0J1ZmZlcn0gZnJvbSAnYnVmZmVyJztcbmltcG9ydCBkZWNvbXByZXNzIGZyb20gJ2Jyb3RsaS9kZWNvbXByZXNzJztcbmltcG9ydCBwYWtvIGZyb20gJ3Bha28nO1xuaW1wb3J0IHtSZXF1ZXN0LCBIZWFkZXIsIFJlc3BvbnNlSW5mb30gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge0Jhc2U2NH0gZnJvbSAnanMtYmFzZTY0JztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEhlYWRlclZhbHVlKFxuICBoZWFkZXJzOiBBcnJheTxIZWFkZXI+IHwgdW5kZWZpbmVkLFxuICBrZXk6IHN0cmluZyxcbik6IHN0cmluZyB7XG4gIGlmICghaGVhZGVycykge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBmb3IgKGNvbnN0IGhlYWRlciBvZiBoZWFkZXJzKSB7XG4gICAgaWYgKGhlYWRlci5rZXkudG9Mb3dlckNhc2UoKSA9PT0ga2V5LnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIHJldHVybiBoZWFkZXIudmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLy8gTWF0Y2hlcyBgYXBwbGljYXRpb24vanNvbmAgYW5kIGBhcHBsaWNhdGlvbi92bmQuYXBpLnY0Mitqc29uYCAoc2VlIGh0dHBzOi8vanNvbmFwaS5vcmcvI21pbWUtdHlwZXMpXG5jb25zdCBqc29uQ29udGVudFR5cGVSZWdleCA9IG5ldyBSZWdFeHAoJ2FwcGxpY2F0aW9uLyhqc29ufC4rXFxcXCtqc29uKScpO1xuY29uc3QgYmluYXJ5Q29udGVudFR5cGUgPVxuICAvXihhcHBsaWNhdGlvblxcLyh6aXB8b2N0ZXQtc3RyZWFtfHBkZikpfCh2aWRlb3xhdWRpbyl8KGltYWdlXFwvKHBuZ3x3ZWJwfGpwZWd8Z2lmfGF2aWYpKSQvO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNUZXh0dWFsKFxuICBoZWFkZXJzPzogQXJyYXk8SGVhZGVyPixcbiAgYm9keT86IFVpbnQ4QXJyYXkgfCBzdHJpbmcsXG4pOiBib29sZWFuIHtcbiAgY29uc3QgY29udGVudFR5cGUgPSBnZXRIZWFkZXJWYWx1ZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvQmFzaWNzX29mX0hUVFAvTUlNRV90eXBlc1xuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0Jhc2ljc19vZl9IVFRQL01JTUVfdHlwZXMvQ29tbW9uX3R5cGVzXG4gIGlmIChjb250ZW50VHlwZSkge1xuICAgIGlmIChcbiAgICAgIGNvbnRlbnRUeXBlLnN0YXJ0c1dpdGgoJ3RleHQvJykgfHxcbiAgICAgIGNvbnRlbnRUeXBlLnN0YXJ0c1dpdGgoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpIHx8XG4gICAgICBqc29uQ29udGVudFR5cGVSZWdleC50ZXN0KGNvbnRlbnRUeXBlKSB8fFxuICAgICAgY29udGVudFR5cGUuc3RhcnRzV2l0aCgnbXVsdGlwYXJ0LycpIHx8XG4gICAgICBjb250ZW50VHlwZS5zdGFydHNXaXRoKCdtZXNzYWdlLycpIHx8XG4gICAgICBjb250ZW50VHlwZS5zdGFydHNXaXRoKCdpbWFnZS9zdmcnKSB8fFxuICAgICAgY29udGVudFR5cGUuc3RhcnRzV2l0aCgnYXBwbGljYXRpb24veGh0bWwreG1sJykgfHxcbiAgICAgIGNvbnRlbnRUeXBlLnN0YXJ0c1dpdGgoJ2FwcGxpY2F0aW9uL3htbCcpXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGJpbmFyeUNvbnRlbnRUeXBlLnRlc3QoY29udGVudFR5cGUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChcbiAgICAoYm9keSBpbnN0YW5jZW9mIEJ1ZmZlciB8fCBib2R5IGluc3RhbmNlb2YgVWludDhBcnJheSkgJiZcbiAgICBpc1ZhbGlkVXRmOChib2R5KVxuICApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRVdGY4KGRhdGE6IFVpbnQ4QXJyYXkpIHtcbiAgaWYgKGRhdGFbMF0gPT09IDB4ZWYgJiYgZGF0YVsxXSA9PT0gMHhiYiAmJiBkYXRhWzJdID09PSAweGJmKSB7XG4gICAgcmV0dXJuIHRydWU7IC8vIHZhbGlkIHV0ZjggQk9NXG4gIH1cbiAgLy8gRnJvbSBodHRwczovL3dlYmxvZy5yb2d1ZWFtb2ViYS5jb20vMjAxNy8wMi8yNy9qYXZhc2NyaXB0LWNvcnJlY3RseS1jb252ZXJ0aW5nLWEtYnl0ZS1hcnJheS10by1hLXV0Zi04LXN0cmluZy9cbiAgY29uc3QgZXh0cmFCeXRlTWFwID0gWzEsIDEsIDEsIDEsIDIsIDIsIDMsIDBdO1xuICBjb25zdCBjb3VudCA9IGRhdGEubGVuZ3RoO1xuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjb3VudDsgKSB7XG4gICAgbGV0IGNoID0gZGF0YVtpbmRleCsrXTtcbiAgICBpZiAoY2ggJiAweDgwKSB7XG4gICAgICBsZXQgZXh0cmEgPSBleHRyYUJ5dGVNYXBbKGNoID4+IDMpICYgMHgwN107XG4gICAgICBpZiAoIShjaCAmIDB4NDApIHx8ICFleHRyYSB8fCBpbmRleCArIGV4dHJhID4gY291bnQpIHJldHVybiBmYWxzZTtcblxuICAgICAgY2ggJj0gMHgzZiA+PiBleHRyYTtcbiAgICAgIGZvciAoOyBleHRyYSA+IDA7IGV4dHJhIC09IDEpIHtcbiAgICAgICAgY29uc3QgY2h4ID0gZGF0YVtpbmRleCsrXTtcbiAgICAgICAgaWYgKChjaHggJiAweGMwKSAhPSAweDgwKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgY2ggPSAoY2ggPDwgNikgfCAoY2h4ICYgMHgzZik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlQm9keShcbiAgaGVhZGVycz86IEFycmF5PEhlYWRlcj4sXG4gIGRhdGE/OiBzdHJpbmcgfCBudWxsLFxuKTogc3RyaW5nIHwgdW5kZWZpbmVkIHwgVWludDhBcnJheSB7XG4gIGlmICghZGF0YSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGNvbnRlbnRFbmNvZGluZyA9IGdldEhlYWRlclZhbHVlKGhlYWRlcnMsICdDb250ZW50LUVuY29kaW5nJyk7XG4gICAgc3dpdGNoIChjb250ZW50RW5jb2RpbmcpIHtcbiAgICAgIC8vIEd6aXAgZW5jb2RpbmdcbiAgICAgIGNhc2UgJ2d6aXAnOiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhlIHJlcXVlc3QgaXMgZ3ppcHBlZCwgc28gY29udmVydCB0aGUgcmF3IGJ5dGVzIGJhY2sgdG8gYmFzZTY0IGZpcnN0LlxuICAgICAgICAgIGNvbnN0IGRhdGFBcnIgPSBCYXNlNjQudG9VaW50OEFycmF5KGRhdGEpO1xuICAgICAgICAgIC8vIHRoZW4gaW5mbGF0ZS5cbiAgICAgICAgICByZXR1cm4gaXNUZXh0dWFsKGhlYWRlcnMsIGRhdGFBcnIpXG4gICAgICAgICAgICA/IC8vIHBha28gd2lsbCBkZXRlY3QgdGhlIEJPTSBoZWFkZXJzIGFuZCByZXR1cm4gYSBwcm9wZXIgdXRmLTggc3RyaW5nIHJpZ2h0IGF3YXlcbiAgICAgICAgICAgICAgcGFrby5pbmZsYXRlKGRhdGFBcnIsIHt0bzogJ3N0cmluZyd9KVxuICAgICAgICAgICAgOiBwYWtvLmluZmxhdGUoZGF0YUFycik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBvbiBpT1MsIHRoZSBzdHJlYW0gc2VuZCB0byBmbGlwcGVyIGlzIGFscmVhZHkgaW5mbGF0ZWQsIHNvIHRoZSBjb250ZW50LWVuY29kaW5nIHdpbGwgbm90XG4gICAgICAgICAgLy8gbWF0Y2ggdGhlIGFjdHVhbCBkYXRhIGFueW1vcmUsIGFuZCB3ZSBzaG91bGQgc2tpcCBpbmZsYXRpbmcuXG4gICAgICAgICAgLy8gSW4gdGhhdCBjYXNlLCB3ZSBpbnRlbnRpb25hbGx5IGZhbGwtdGhyb3VnaFxuICAgICAgICAgIGlmICghYCR7ZX1gLmluY2x1ZGVzKCdpbmNvcnJlY3QgaGVhZGVyIGNoZWNrJykpIHtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEJyb3RsaSBlbmNvZGluZyAoaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2ZsaXBwZXIvaXNzdWVzLzI1NzgpXG4gICAgICBjYXNlICdicic6IHtcbiAgICAgICAgY29uc3QgaW5mbGF0ZWQgPSBkZWNvbXByZXNzKEJ1ZmZlci5mcm9tKEJhc2U2NC50b1VpbnQ4QXJyYXkoZGF0YSkpKTtcblxuICAgICAgICAvLyBvbiBpT1MsIHRoZSBzdHJlYW0gc2VuZCB0byBmbGlwcGVyIGlzIGFscmVhZHkgaW5mbGF0ZWQsIHNvIHRoZSBjb250ZW50LWVuY29kaW5nIHdpbGwgbm90XG4gICAgICAgIC8vIG1hdGNoIHRoZSBhY3R1YWwgZGF0YSBhbnltb3JlLCBzbyBhIDAtbGVuZ3RoIHJlc3VsdCB3aXRob3V0IGFuIGVycm9yIGlzIGV4cGVjdGVkLlxuICAgICAgICAvLyBJbiB0aGF0IGNhc2UsIHdlIGludGVudGlvbmFsbHkgZmFsbC10aHJvdWdoXG4gICAgICAgIGlmIChpbmZsYXRlZC5sZW5ndGggPT09IDAgJiYgZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGluZmxhdGVkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gSWYgdGhpcyBpcyBub3QgYSBnemlwcGVkIG9yIGJyb3RsaS1lbmNvZGVkIHJlcXVlc3QsIGFzc3VtZSB3ZSBhcmUgaW50ZXJlc3RlZCBpbiBhIHByb3BlciB1dGYtOCBzdHJpbmcuXG4gICAgLy8gIC0gSWYgdGhlIHJhdyBiaW5hcnkgZGF0YSBpbiBpcyBuZWVkZWQsIGluIGJhc2U2NCBmb3JtLCB1c2UgZGF0YSBkaXJlY3RseVxuICAgIC8vICAtIGVpdGhlciBkaXJlY3RseSB1c2UgZGF0YSAoZm9yIGV4YW1wbGUpXG4gICAgY29uc3QgYnl0ZXMgPSBCYXNlNjQudG9VaW50OEFycmF5KGRhdGEpO1xuICAgIGlmIChpc1RleHR1YWwoaGVhZGVycywgYnl0ZXMpKSB7XG4gICAgICByZXR1cm4gQmFzZTY0LmRlY29kZShkYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgIGBGbGlwcGVyIGZhaWxlZCB0byBkZWNvZGUgcmVxdWVzdC9yZXNwb25zZSBib2R5IChzaXplOiAke2RhdGEubGVuZ3RofSk6ICR7ZX1gLFxuICAgICk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFJlcXVlc3RUb0N1cmxDb21tYW5kKFxuICByZXF1ZXN0OiBQaWNrPFJlcXVlc3QsICdtZXRob2QnIHwgJ3VybCcgfCAncmVxdWVzdEhlYWRlcnMnIHwgJ3JlcXVlc3REYXRhJz4sXG4pOiBzdHJpbmcge1xuICBsZXQgY29tbWFuZDogc3RyaW5nID0gYGN1cmwgLXYgLVggJHtyZXF1ZXN0Lm1ldGhvZH1gO1xuICBjb21tYW5kICs9IGAgJHtlc2NhcGVkU3RyaW5nKHJlcXVlc3QudXJsKX1gO1xuICAvLyBBZGQgaGVhZGVyc1xuICByZXF1ZXN0LnJlcXVlc3RIZWFkZXJzLmZvckVhY2goKGhlYWRlcjogSGVhZGVyKSA9PiB7XG4gICAgY29uc3QgaGVhZGVyU3RyID0gYCR7aGVhZGVyLmtleX06ICR7aGVhZGVyLnZhbHVlfWA7XG4gICAgY29tbWFuZCArPSBgIC1IICR7ZXNjYXBlZFN0cmluZyhoZWFkZXJTdHIpfWA7XG4gIH0pO1xuICBpZiAodHlwZW9mIHJlcXVlc3QucmVxdWVzdERhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgY29tbWFuZCArPSBgIC1kICR7ZXNjYXBlZFN0cmluZyhyZXF1ZXN0LnJlcXVlc3REYXRhKX1gO1xuICB9XG4gIHJldHVybiBjb21tYW5kO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYm9keUFzU3RyaW5nKGJvZHk6IHVuZGVmaW5lZCB8IHN0cmluZyB8IFVpbnQ4QXJyYXkpOiBzdHJpbmcge1xuICBpZiAoYm9keSA9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gJyhlbXB0eSknO1xuICB9XG4gIGlmIChib2R5IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgIHJldHVybiAnKGJpbmFyeSBkYXRhKSc7XG4gIH1cbiAgcmV0dXJuIGJvZHk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBib2R5QXNCaW5hcnkoXG4gIGJvZHk6IHVuZGVmaW5lZCB8IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4pOiBVaW50OEFycmF5IHwgdW5kZWZpbmVkIHtcbiAgaWYgKGJvZHkgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgcmV0dXJuIGJvZHk7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGNvbnN0IHF1ZXJ5VG9PYmogPSAocXVlcnk6IHN0cmluZykgPT4ge1xuICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHF1ZXJ5KTtcbiAgY29uc3Qgb2JqOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG4gIHBhcmFtcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiBvYmo7XG59O1xuXG5mdW5jdGlvbiBlc2NhcGVDaGFyYWN0ZXIoeDogc3RyaW5nKSB7XG4gIGNvbnN0IGNvZGUgPSB4LmNoYXJDb2RlQXQoMCk7XG4gIHJldHVybiBjb2RlIDwgMTYgPyBgXFxcXHUwJHtjb2RlLnRvU3RyaW5nKDE2KX1gIDogYFxcXFx1JHtjb2RlLnRvU3RyaW5nKDE2KX1gO1xufVxuXG5jb25zdCBuZWVkc0VzY2FwaW5nUmVnZXggPSAvW1xcdTAwMDAtXFx1MDAxZlxcdTAwN2YtXFx1MDA5ZiFdL2c7XG5cbi8vIEVzY2FwZSB1dGlsIGZ1bmN0aW9uLCBpbnNwaXJlZCBieSBHb29nbGUgRGV2VG9vbHMuIFdvcmtzIG9ubHkgZm9yIFBPU0lYXG4vLyBiYXNlZCBzeXN0ZW1zLlxuZnVuY3Rpb24gZXNjYXBlZFN0cmluZyhzdHI6IHN0cmluZykge1xuICBpZiAobmVlZHNFc2NhcGluZ1JlZ2V4LnRlc3Qoc3RyKSB8fCBzdHIuaW5jbHVkZXMoXCInXCIpKSB7XG4gICAgcmV0dXJuIGAkJyR7c3RyXG4gICAgICAucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKVxuICAgICAgLnJlcGxhY2UoL1xcJy9nLCBcIlxcXFwnXCIpXG4gICAgICAucmVwbGFjZSgvXFxuL2csICdcXFxcbicpXG4gICAgICAucmVwbGFjZSgvXFxyL2csICdcXFxccicpXG4gICAgICAucmVwbGFjZShuZWVkc0VzY2FwaW5nUmVnZXgsIGVzY2FwZUNoYXJhY3Rlcil9J2A7XG4gIH1cblxuICAvLyBTaW1wbHkgdXNlIHNpbmdseSBxdW90ZWQgc3RyaW5nLlxuICByZXR1cm4gYCcke3N0cn0nYDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlc3BvbnNlTGVuZ3RoKHJlc3BvbnNlOiBSZXNwb25zZUluZm8pOiBudW1iZXIge1xuICBjb25zdCBsZW5ndGhTdHJpbmcgPSByZXNwb25zZS5oZWFkZXJzXG4gICAgPyBnZXRIZWFkZXJWYWx1ZShyZXNwb25zZS5oZWFkZXJzLCAnY29udGVudC1sZW5ndGgnKVxuICAgIDogdW5kZWZpbmVkO1xuICBpZiAobGVuZ3RoU3RyaW5nKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KGxlbmd0aFN0cmluZywgMTApO1xuICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEpIHtcbiAgICByZXR1cm4gQnVmZmVyLmJ5dGVMZW5ndGgocmVzcG9uc2UuZGF0YSwgJ2Jhc2U2NCcpO1xuICB9XG4gIHJldHVybiAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVxdWVzdExlbmd0aChyZXF1ZXN0OiBSZXF1ZXN0KTogbnVtYmVyIHtcbiAgY29uc3QgbGVuZ3RoU3RyaW5nID0gcmVxdWVzdC5yZXF1ZXN0SGVhZGVyc1xuICAgID8gZ2V0SGVhZGVyVmFsdWUocmVxdWVzdC5yZXF1ZXN0SGVhZGVycywgJ2NvbnRlbnQtbGVuZ3RoJylcbiAgICA6IHVuZGVmaW5lZDtcbiAgaWYgKGxlbmd0aFN0cmluZykge1xuICAgIHJldHVybiBwYXJzZUludChsZW5ndGhTdHJpbmcsIDEwKTtcbiAgfSBlbHNlIGlmIChyZXF1ZXN0LnJlcXVlc3REYXRhKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5ieXRlTGVuZ3RoKHJlcXVlc3QucmVxdWVzdERhdGEsICdiYXNlNjQnKTtcbiAgfVxuICByZXR1cm4gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdER1cmF0aW9uKGR1cmF0aW9uOiBudW1iZXIgfCB1bmRlZmluZWQpIHtcbiAgaWYgKHR5cGVvZiBkdXJhdGlvbiA9PT0gJ251bWJlcicpIHJldHVybiBgJHtkdXJhdGlvbn1tc2A7XG4gIHJldHVybiAnJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEJ5dGVzKGNvdW50OiBudW1iZXIgfCB1bmRlZmluZWQpOiBzdHJpbmcge1xuICBpZiAodHlwZW9mIGNvdW50ICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBpZiAoY291bnQgPiAxMDI0ICogMTAyNCkge1xuICAgIHJldHVybiBgJHsoY291bnQgLyAoMTAyNC4wICogMTAyNCkpLnRvRml4ZWQoMSl9IE1CYDtcbiAgfVxuICBpZiAoY291bnQgPiAxMDI0KSB7XG4gICAgcmV0dXJuIGAkeyhjb3VudCAvIDEwMjQuMCkudG9GaXhlZCgxKX0ga0JgO1xuICB9XG4gIHJldHVybiBgJHtjb3VudH0gQmA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRPcGVyYXRpb25OYW1lKHJlcXVlc3REYXRhOiBzdHJpbmcpOiBzdHJpbmcge1xuICB0cnkge1xuICAgIGNvbnN0IHBhcnNlZERhdGEgPSBKU09OLnBhcnNlKHJlcXVlc3REYXRhKTtcbiAgICByZXR1cm4gcGFyc2VkRGF0YT8ub3BlcmF0aW9uTmFtZTtcbiAgfSBjYXRjaCAoX2Vycikge1xuICAgIHJldHVybiAnJztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVxdWVzdHNUb1RleHQocmVxdWVzdHM6IFJlcXVlc3RbXSk6IHN0cmluZyB7XG4gIGNvbnN0IHJlcXVlc3QgPSByZXF1ZXN0c1swXTtcbiAgaWYgKCFyZXF1ZXN0IHx8ICFyZXF1ZXN0LnVybCkge1xuICAgIHJldHVybiAnPGVtcHR5IHJlcXVlc3Q+JztcbiAgfVxuXG4gIGxldCBjb3B5VGV4dCA9IGAjIEhUVFAgcmVxdWVzdCBmb3IgJHtyZXF1ZXN0LmRvbWFpbn0gKElEOiAke3JlcXVlc3QuaWR9KVxuICAjIyBSZXF1ZXN0XG4gIEhUVFAgJHtyZXF1ZXN0Lm1ldGhvZH0gJHtyZXF1ZXN0LnVybH1cbiAgJHtyZXF1ZXN0LnJlcXVlc3RIZWFkZXJzXG4gICAgLm1hcChcbiAgICAgICh7a2V5LCB2YWx1ZX06IHtrZXk6IHN0cmluZzsgdmFsdWU6IHN0cmluZ30pOiBzdHJpbmcgPT5cbiAgICAgICAgYCR7a2V5fTogJHtTdHJpbmcodmFsdWUpfWAsXG4gICAgKVxuICAgIC5qb2luKCdcXG4nKX1gO1xuXG4gIC8vIFRPRE86IHdlIHdhbnQgZGVjb2Rpbmcgb25seSBmb3Igbm9uLWJpbmFyeSBkYXRhISBTZWUgRDIzNDAzMDk1XG4gIGlmIChyZXF1ZXN0LnJlcXVlc3REYXRhKSB7XG4gICAgY29weVRleHQgKz0gYFxcblxcbiR7cmVxdWVzdC5yZXF1ZXN0RGF0YX1gO1xuICB9XG4gIGlmIChyZXF1ZXN0LnN0YXR1cykge1xuICAgIGNvcHlUZXh0ICs9IGBcblxuICAjIyBSZXNwb25zZVxuICBIVFRQICR7cmVxdWVzdC5zdGF0dXN9ICR7cmVxdWVzdC5yZWFzb259XG4gICR7XG4gICAgcmVxdWVzdC5yZXNwb25zZUhlYWRlcnNcbiAgICAgID8ubWFwKFxuICAgICAgICAoe2tleSwgdmFsdWV9OiB7a2V5OiBzdHJpbmc7IHZhbHVlOiBzdHJpbmd9KTogc3RyaW5nID0+XG4gICAgICAgICAgYCR7a2V5fTogJHtTdHJpbmcodmFsdWUpfWAsXG4gICAgICApXG4gICAgICAuam9pbignXFxuJykgPz8gJydcbiAgfWA7XG4gIH1cblxuICBpZiAocmVxdWVzdC5yZXNwb25zZURhdGEpIHtcbiAgICBjb3B5VGV4dCArPSBgXFxuXFxuJHtyZXF1ZXN0LnJlc3BvbnNlRGF0YX1gO1xuICB9XG4gIHJldHVybiBjb3B5VGV4dDtcbn1cbiIsICJcbi8qISBwYWtvIDIuMC4zIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlY2EvcGFrbyBAbGljZW5zZSAoTUlUIEFORCBabGliKSAqL1xuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG4vKiBlc2xpbnQtZGlzYWJsZSBzcGFjZS11bmFyeS1vcHMgKi9cblxuLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuLy9jb25zdCBaX0ZJTFRFUkVEICAgICAgICAgID0gMTtcbi8vY29uc3QgWl9IVUZGTUFOX09OTFkgICAgICA9IDI7XG4vL2NvbnN0IFpfUkxFICAgICAgICAgICAgICAgPSAzO1xuY29uc3QgWl9GSVhFRCAgICAgICAgICAgICAgID0gNDtcbi8vY29uc3QgWl9ERUZBVUxUX1NUUkFURUdZICA9IDA7XG5cbi8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi9cbmNvbnN0IFpfQklOQVJZICAgICAgICAgICAgICA9IDA7XG5jb25zdCBaX1RFWFQgICAgICAgICAgICAgICAgPSAxO1xuLy9jb25zdCBaX0FTQ0lJICAgICAgICAgICAgID0gMTsgLy8gPSBaX1RFWFRcbmNvbnN0IFpfVU5LTk9XTiAgICAgICAgICAgICA9IDI7XG5cbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuZnVuY3Rpb24gemVybyhidWYpIHsgbGV0IGxlbiA9IGJ1Zi5sZW5ndGg7IHdoaWxlICgtLWxlbiA+PSAwKSB7IGJ1ZltsZW5dID0gMDsgfSB9XG5cbi8vIEZyb20genV0aWwuaFxuXG5jb25zdCBTVE9SRURfQkxPQ0sgPSAwO1xuY29uc3QgU1RBVElDX1RSRUVTID0gMTtcbmNvbnN0IERZTl9UUkVFUyAgICA9IDI7XG4vKiBUaGUgdGhyZWUga2luZHMgb2YgYmxvY2sgdHlwZSAqL1xuXG5jb25zdCBNSU5fTUFUQ0ggICAgPSAzO1xuY29uc3QgTUFYX01BVENIICAgID0gMjU4O1xuLyogVGhlIG1pbmltdW0gYW5kIG1heGltdW0gbWF0Y2ggbGVuZ3RocyAqL1xuXG4vLyBGcm9tIGRlZmxhdGUuaFxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBJbnRlcm5hbCBjb21wcmVzc2lvbiBzdGF0ZS5cbiAqL1xuXG5jb25zdCBMRU5HVEhfQ09ERVMgID0gMjk7XG4vKiBudW1iZXIgb2YgbGVuZ3RoIGNvZGVzLCBub3QgY291bnRpbmcgdGhlIHNwZWNpYWwgRU5EX0JMT0NLIGNvZGUgKi9cblxuY29uc3QgTElURVJBTFMgICAgICA9IDI1Njtcbi8qIG51bWJlciBvZiBsaXRlcmFsIGJ5dGVzIDAuLjI1NSAqL1xuXG5jb25zdCBMX0NPREVTICAgICAgID0gTElURVJBTFMgKyAxICsgTEVOR1RIX0NPREVTO1xuLyogbnVtYmVyIG9mIExpdGVyYWwgb3IgTGVuZ3RoIGNvZGVzLCBpbmNsdWRpbmcgdGhlIEVORF9CTE9DSyBjb2RlICovXG5cbmNvbnN0IERfQ09ERVMgICAgICAgPSAzMDtcbi8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlcyAqL1xuXG5jb25zdCBCTF9DT0RFUyAgICAgID0gMTk7XG4vKiBudW1iZXIgb2YgY29kZXMgdXNlZCB0byB0cmFuc2ZlciB0aGUgYml0IGxlbmd0aHMgKi9cblxuY29uc3QgSEVBUF9TSVpFICAgICA9IDIgKiBMX0NPREVTICsgMTtcbi8qIG1heGltdW0gaGVhcCBzaXplICovXG5cbmNvbnN0IE1BWF9CSVRTICAgICAgPSAxNTtcbi8qIEFsbCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JJVFMgYml0cyAqL1xuXG5jb25zdCBCdWZfc2l6ZSAgICAgID0gMTY7XG4vKiBzaXplIG9mIGJpdCBidWZmZXIgaW4gYmlfYnVmICovXG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCBNQVhfQkxfQklUUyA9IDc7XG4vKiBCaXQgbGVuZ3RoIGNvZGVzIG11c3Qgbm90IGV4Y2VlZCBNQVhfQkxfQklUUyBiaXRzICovXG5cbmNvbnN0IEVORF9CTE9DSyAgID0gMjU2O1xuLyogZW5kIG9mIGJsb2NrIGxpdGVyYWwgY29kZSAqL1xuXG5jb25zdCBSRVBfM182ICAgICA9IDE2O1xuLyogcmVwZWF0IHByZXZpb3VzIGJpdCBsZW5ndGggMy02IHRpbWVzICgyIGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG5jb25zdCBSRVBaXzNfMTAgICA9IDE3O1xuLyogcmVwZWF0IGEgemVybyBsZW5ndGggMy0xMCB0aW1lcyAgKDMgYml0cyBvZiByZXBlYXQgY291bnQpICovXG5cbmNvbnN0IFJFUFpfMTFfMTM4ID0gMTg7XG4vKiByZXBlYXQgYSB6ZXJvIGxlbmd0aCAxMS0xMzggdGltZXMgICg3IGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjb21tYS1zcGFjaW5nLGFycmF5LWJyYWNrZXQtc3BhY2luZyAqL1xuY29uc3QgZXh0cmFfbGJpdHMgPSAgIC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggbGVuZ3RoIGNvZGUgKi9cbiAgbmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDAsMCwwLDAsMCwxLDEsMSwxLDIsMiwyLDIsMywzLDMsMyw0LDQsNCw0LDUsNSw1LDUsMF0pO1xuXG5jb25zdCBleHRyYV9kYml0cyA9ICAgLyogZXh0cmEgYml0cyBmb3IgZWFjaCBkaXN0YW5jZSBjb2RlICovXG4gIG5ldyBVaW50OEFycmF5KFswLDAsMCwwLDEsMSwyLDIsMywzLDQsNCw1LDUsNiw2LDcsNyw4LDgsOSw5LDEwLDEwLDExLDExLDEyLDEyLDEzLDEzXSk7XG5cbmNvbnN0IGV4dHJhX2JsYml0cyA9ICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGJpdCBsZW5ndGggY29kZSAqL1xuICBuZXcgVWludDhBcnJheShbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyLDMsN10pO1xuXG5jb25zdCBibF9vcmRlciA9XG4gIG5ldyBVaW50OEFycmF5KFsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XSk7XG4vKiBlc2xpbnQtZW5hYmxlIGNvbW1hLXNwYWNpbmcsYXJyYXktYnJhY2tldC1zcGFjaW5nICovXG5cbi8qIFRoZSBsZW5ndGhzIG9mIHRoZSBiaXQgbGVuZ3RoIGNvZGVzIGFyZSBzZW50IGluIG9yZGVyIG9mIGRlY3JlYXNpbmdcbiAqIHByb2JhYmlsaXR5LCB0byBhdm9pZCB0cmFuc21pdHRpbmcgdGhlIGxlbmd0aHMgZm9yIHVudXNlZCBiaXQgbGVuZ3RoIGNvZGVzLlxuICovXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogTG9jYWwgZGF0YS4gVGhlc2UgYXJlIGluaXRpYWxpemVkIG9ubHkgb25jZS5cbiAqL1xuXG4vLyBXZSBwcmUtZmlsbCBhcnJheXMgd2l0aCAwIHRvIGF2b2lkIHVuaW5pdGlhbGl6ZWQgZ2Fwc1xuXG5jb25zdCBESVNUX0NPREVfTEVOID0gNTEyOyAvKiBzZWUgZGVmaW5pdGlvbiBvZiBhcnJheSBkaXN0X2NvZGUgYmVsb3cgKi9cblxuLy8gISEhISBVc2UgZmxhdCBhcnJheSBpbnN0ZWFkIG9mIHN0cnVjdHVyZSwgRnJlcSA9IGkqMiwgTGVuID0gaSoyKzFcbmNvbnN0IHN0YXRpY19sdHJlZSAgPSBuZXcgQXJyYXkoKExfQ09ERVMgKyAyKSAqIDIpO1xuemVybyhzdGF0aWNfbHRyZWUpO1xuLyogVGhlIHN0YXRpYyBsaXRlcmFsIHRyZWUuIFNpbmNlIHRoZSBiaXQgbGVuZ3RocyBhcmUgaW1wb3NlZCwgdGhlcmUgaXMgbm9cbiAqIG5lZWQgZm9yIHRoZSBMX0NPREVTIGV4dHJhIGNvZGVzIHVzZWQgZHVyaW5nIGhlYXAgY29uc3RydWN0aW9uLiBIb3dldmVyXG4gKiBUaGUgY29kZXMgMjg2IGFuZCAyODcgYXJlIG5lZWRlZCB0byBidWlsZCBhIGNhbm9uaWNhbCB0cmVlIChzZWUgX3RyX2luaXRcbiAqIGJlbG93KS5cbiAqL1xuXG5jb25zdCBzdGF0aWNfZHRyZWUgID0gbmV3IEFycmF5KERfQ09ERVMgKiAyKTtcbnplcm8oc3RhdGljX2R0cmVlKTtcbi8qIFRoZSBzdGF0aWMgZGlzdGFuY2UgdHJlZS4gKEFjdHVhbGx5IGEgdHJpdmlhbCB0cmVlIHNpbmNlIGFsbCBjb2RlcyB1c2VcbiAqIDUgYml0cy4pXG4gKi9cblxuY29uc3QgX2Rpc3RfY29kZSAgICA9IG5ldyBBcnJheShESVNUX0NPREVfTEVOKTtcbnplcm8oX2Rpc3RfY29kZSk7XG4vKiBEaXN0YW5jZSBjb2Rlcy4gVGhlIGZpcnN0IDI1NiB2YWx1ZXMgY29ycmVzcG9uZCB0byB0aGUgZGlzdGFuY2VzXG4gKiAzIC4uIDI1OCwgdGhlIGxhc3QgMjU2IHZhbHVlcyBjb3JyZXNwb25kIHRvIHRoZSB0b3AgOCBiaXRzIG9mXG4gKiB0aGUgMTUgYml0IGRpc3RhbmNlcy5cbiAqL1xuXG5jb25zdCBfbGVuZ3RoX2NvZGUgID0gbmV3IEFycmF5KE1BWF9NQVRDSCAtIE1JTl9NQVRDSCArIDEpO1xuemVybyhfbGVuZ3RoX2NvZGUpO1xuLyogbGVuZ3RoIGNvZGUgZm9yIGVhY2ggbm9ybWFsaXplZCBtYXRjaCBsZW5ndGggKDAgPT0gTUlOX01BVENIKSAqL1xuXG5jb25zdCBiYXNlX2xlbmd0aCAgID0gbmV3IEFycmF5KExFTkdUSF9DT0RFUyk7XG56ZXJvKGJhc2VfbGVuZ3RoKTtcbi8qIEZpcnN0IG5vcm1hbGl6ZWQgbGVuZ3RoIGZvciBlYWNoIGNvZGUgKDAgPSBNSU5fTUFUQ0gpICovXG5cbmNvbnN0IGJhc2VfZGlzdCAgICAgPSBuZXcgQXJyYXkoRF9DT0RFUyk7XG56ZXJvKGJhc2VfZGlzdCk7XG4vKiBGaXJzdCBub3JtYWxpemVkIGRpc3RhbmNlIGZvciBlYWNoIGNvZGUgKDAgPSBkaXN0YW5jZSBvZiAxKSAqL1xuXG5cbmZ1bmN0aW9uIFN0YXRpY1RyZWVEZXNjKHN0YXRpY190cmVlLCBleHRyYV9iaXRzLCBleHRyYV9iYXNlLCBlbGVtcywgbWF4X2xlbmd0aCkge1xuXG4gIHRoaXMuc3RhdGljX3RyZWUgID0gc3RhdGljX3RyZWU7ICAvKiBzdGF0aWMgdHJlZSBvciBOVUxMICovXG4gIHRoaXMuZXh0cmFfYml0cyAgID0gZXh0cmFfYml0czsgICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGNvZGUgb3IgTlVMTCAqL1xuICB0aGlzLmV4dHJhX2Jhc2UgICA9IGV4dHJhX2Jhc2U7ICAgLyogYmFzZSBpbmRleCBmb3IgZXh0cmFfYml0cyAqL1xuICB0aGlzLmVsZW1zICAgICAgICA9IGVsZW1zOyAgICAgICAgLyogbWF4IG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgdHJlZSAqL1xuICB0aGlzLm1heF9sZW5ndGggICA9IG1heF9sZW5ndGg7ICAgLyogbWF4IGJpdCBsZW5ndGggZm9yIHRoZSBjb2RlcyAqL1xuXG4gIC8vIHNob3cgaWYgYHN0YXRpY190cmVlYCBoYXMgZGF0YSBvciBkdW1teSAtIG5lZWRlZCBmb3IgbW9ub21vcnBoaWMgb2JqZWN0c1xuICB0aGlzLmhhc19zdHJlZSAgICA9IHN0YXRpY190cmVlICYmIHN0YXRpY190cmVlLmxlbmd0aDtcbn1cblxuXG5sZXQgc3RhdGljX2xfZGVzYztcbmxldCBzdGF0aWNfZF9kZXNjO1xubGV0IHN0YXRpY19ibF9kZXNjO1xuXG5cbmZ1bmN0aW9uIFRyZWVEZXNjKGR5bl90cmVlLCBzdGF0X2Rlc2MpIHtcbiAgdGhpcy5keW5fdHJlZSA9IGR5bl90cmVlOyAgICAgLyogdGhlIGR5bmFtaWMgdHJlZSAqL1xuICB0aGlzLm1heF9jb2RlID0gMDsgICAgICAgICAgICAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cbiAgdGhpcy5zdGF0X2Rlc2MgPSBzdGF0X2Rlc2M7ICAgLyogdGhlIGNvcnJlc3BvbmRpbmcgc3RhdGljIHRyZWUgKi9cbn1cblxuXG5cbmNvbnN0IGRfY29kZSA9IChkaXN0KSA9PiB7XG5cbiAgcmV0dXJuIGRpc3QgPCAyNTYgPyBfZGlzdF9jb2RlW2Rpc3RdIDogX2Rpc3RfY29kZVsyNTYgKyAoZGlzdCA+Pj4gNyldO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIE91dHB1dCBhIHNob3J0IExTQiBmaXJzdCBvbiB0aGUgc3RyZWFtLlxuICogSU4gYXNzZXJ0aW9uOiB0aGVyZSBpcyBlbm91Z2ggcm9vbSBpbiBwZW5kaW5nQnVmLlxuICovXG5jb25zdCBwdXRfc2hvcnQgPSAocywgdykgPT4ge1xuLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHcpICYgMHhmZikpO1xuLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHVzaCkodykgPj4gOCkpO1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9ICh3KSAmIDB4ZmY7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gKHcgPj4+IDgpICYgMHhmZjtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIGEgdmFsdWUgb24gYSBnaXZlbiBudW1iZXIgb2YgYml0cy5cbiAqIElOIGFzc2VydGlvbjogbGVuZ3RoIDw9IDE2IGFuZCB2YWx1ZSBmaXRzIGluIGxlbmd0aCBiaXRzLlxuICovXG5jb25zdCBzZW5kX2JpdHMgPSAocywgdmFsdWUsIGxlbmd0aCkgPT4ge1xuXG4gIGlmIChzLmJpX3ZhbGlkID4gKEJ1Zl9zaXplIC0gbGVuZ3RoKSkge1xuICAgIHMuYmlfYnVmIHw9ICh2YWx1ZSA8PCBzLmJpX3ZhbGlkKSAmIDB4ZmZmZjtcbiAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpO1xuICAgIHMuYmlfYnVmID0gdmFsdWUgPj4gKEJ1Zl9zaXplIC0gcy5iaV92YWxpZCk7XG4gICAgcy5iaV92YWxpZCArPSBsZW5ndGggLSBCdWZfc2l6ZTtcbiAgfSBlbHNlIHtcbiAgICBzLmJpX2J1ZiB8PSAodmFsdWUgPDwgcy5iaV92YWxpZCkgJiAweGZmZmY7XG4gICAgcy5iaV92YWxpZCArPSBsZW5ndGg7XG4gIH1cbn07XG5cblxuY29uc3Qgc2VuZF9jb2RlID0gKHMsIGMsIHRyZWUpID0+IHtcblxuICBzZW5kX2JpdHMocywgdHJlZVtjICogMl0vKi5Db2RlKi8sIHRyZWVbYyAqIDIgKyAxXS8qLkxlbiovKTtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBSZXZlcnNlIHRoZSBmaXJzdCBsZW4gYml0cyBvZiBhIGNvZGUsIHVzaW5nIHN0cmFpZ2h0Zm9yd2FyZCBjb2RlIChhIGZhc3RlclxuICogbWV0aG9kIHdvdWxkIHVzZSBhIHRhYmxlKVxuICogSU4gYXNzZXJ0aW9uOiAxIDw9IGxlbiA8PSAxNVxuICovXG5jb25zdCBiaV9yZXZlcnNlID0gKGNvZGUsIGxlbikgPT4ge1xuXG4gIGxldCByZXMgPSAwO1xuICBkbyB7XG4gICAgcmVzIHw9IGNvZGUgJiAxO1xuICAgIGNvZGUgPj4+PSAxO1xuICAgIHJlcyA8PD0gMTtcbiAgfSB3aGlsZSAoLS1sZW4gPiAwKTtcbiAgcmV0dXJuIHJlcyA+Pj4gMTtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGbHVzaCB0aGUgYml0IGJ1ZmZlciwga2VlcGluZyBhdCBtb3N0IDcgYml0cyBpbiBpdC5cbiAqL1xuY29uc3QgYmlfZmx1c2ggPSAocykgPT4ge1xuXG4gIGlmIChzLmJpX3ZhbGlkID09PSAxNikge1xuICAgIHB1dF9zaG9ydChzLCBzLmJpX2J1Zik7XG4gICAgcy5iaV9idWYgPSAwO1xuICAgIHMuYmlfdmFsaWQgPSAwO1xuXG4gIH0gZWxzZSBpZiAocy5iaV92YWxpZCA+PSA4KSB7XG4gICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBzLmJpX2J1ZiAmIDB4ZmY7XG4gICAgcy5iaV9idWYgPj49IDg7XG4gICAgcy5iaV92YWxpZCAtPSA4O1xuICB9XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29tcHV0ZSB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RocyBmb3IgYSB0cmVlIGFuZCB1cGRhdGUgdGhlIHRvdGFsIGJpdCBsZW5ndGhcbiAqIGZvciB0aGUgY3VycmVudCBibG9jay5cbiAqIElOIGFzc2VydGlvbjogdGhlIGZpZWxkcyBmcmVxIGFuZCBkYWQgYXJlIHNldCwgaGVhcFtoZWFwX21heF0gYW5kXG4gKiAgICBhYm92ZSBhcmUgdGhlIHRyZWUgbm9kZXMgc29ydGVkIGJ5IGluY3JlYXNpbmcgZnJlcXVlbmN5LlxuICogT1VUIGFzc2VydGlvbnM6IHRoZSBmaWVsZCBsZW4gaXMgc2V0IHRvIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGgsIHRoZVxuICogICAgIGFycmF5IGJsX2NvdW50IGNvbnRhaW5zIHRoZSBmcmVxdWVuY2llcyBmb3IgZWFjaCBiaXQgbGVuZ3RoLlxuICogICAgIFRoZSBsZW5ndGggb3B0X2xlbiBpcyB1cGRhdGVkOyBzdGF0aWNfbGVuIGlzIGFsc28gdXBkYXRlZCBpZiBzdHJlZSBpc1xuICogICAgIG5vdCBudWxsLlxuICovXG5jb25zdCBnZW5fYml0bGVuID0gKHMsIGRlc2MpID0+XG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgdHJlZV9kZXNjICpkZXNjOyAgICAvKiB0aGUgdHJlZSBkZXNjcmlwdG9yICovXG57XG4gIGNvbnN0IHRyZWUgICAgICAgICAgICA9IGRlc2MuZHluX3RyZWU7XG4gIGNvbnN0IG1heF9jb2RlICAgICAgICA9IGRlc2MubWF4X2NvZGU7XG4gIGNvbnN0IHN0cmVlICAgICAgICAgICA9IGRlc2Muc3RhdF9kZXNjLnN0YXRpY190cmVlO1xuICBjb25zdCBoYXNfc3RyZWUgICAgICAgPSBkZXNjLnN0YXRfZGVzYy5oYXNfc3RyZWU7XG4gIGNvbnN0IGV4dHJhICAgICAgICAgICA9IGRlc2Muc3RhdF9kZXNjLmV4dHJhX2JpdHM7XG4gIGNvbnN0IGJhc2UgICAgICAgICAgICA9IGRlc2Muc3RhdF9kZXNjLmV4dHJhX2Jhc2U7XG4gIGNvbnN0IG1heF9sZW5ndGggICAgICA9IGRlc2Muc3RhdF9kZXNjLm1heF9sZW5ndGg7XG4gIGxldCBoOyAgICAgICAgICAgICAgLyogaGVhcCBpbmRleCAqL1xuICBsZXQgbiwgbTsgICAgICAgICAgIC8qIGl0ZXJhdGUgb3ZlciB0aGUgdHJlZSBlbGVtZW50cyAqL1xuICBsZXQgYml0czsgICAgICAgICAgIC8qIGJpdCBsZW5ndGggKi9cbiAgbGV0IHhiaXRzOyAgICAgICAgICAvKiBleHRyYSBiaXRzICovXG4gIGxldCBmOyAgICAgICAgICAgICAgLyogZnJlcXVlbmN5ICovXG4gIGxldCBvdmVyZmxvdyA9IDA7ICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIHdpdGggYml0IGxlbmd0aCB0b28gbGFyZ2UgKi9cblxuICBmb3IgKGJpdHMgPSAwOyBiaXRzIDw9IE1BWF9CSVRTOyBiaXRzKyspIHtcbiAgICBzLmJsX2NvdW50W2JpdHNdID0gMDtcbiAgfVxuXG4gIC8qIEluIGEgZmlyc3QgcGFzcywgY29tcHV0ZSB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RocyAod2hpY2ggbWF5XG4gICAqIG92ZXJmbG93IGluIHRoZSBjYXNlIG9mIHRoZSBiaXQgbGVuZ3RoIHRyZWUpLlxuICAgKi9cbiAgdHJlZVtzLmhlYXBbcy5oZWFwX21heF0gKiAyICsgMV0vKi5MZW4qLyA9IDA7IC8qIHJvb3Qgb2YgdGhlIGhlYXAgKi9cblxuICBmb3IgKGggPSBzLmhlYXBfbWF4ICsgMTsgaCA8IEhFQVBfU0laRTsgaCsrKSB7XG4gICAgbiA9IHMuaGVhcFtoXTtcbiAgICBiaXRzID0gdHJlZVt0cmVlW24gKiAyICsgMV0vKi5EYWQqLyAqIDIgKyAxXS8qLkxlbiovICsgMTtcbiAgICBpZiAoYml0cyA+IG1heF9sZW5ndGgpIHtcbiAgICAgIGJpdHMgPSBtYXhfbGVuZ3RoO1xuICAgICAgb3ZlcmZsb3crKztcbiAgICB9XG4gICAgdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSBiaXRzO1xuICAgIC8qIFdlIG92ZXJ3cml0ZSB0cmVlW25dLkRhZCB3aGljaCBpcyBubyBsb25nZXIgbmVlZGVkICovXG5cbiAgICBpZiAobiA+IG1heF9jb2RlKSB7IGNvbnRpbnVlOyB9IC8qIG5vdCBhIGxlYWYgbm9kZSAqL1xuXG4gICAgcy5ibF9jb3VudFtiaXRzXSsrO1xuICAgIHhiaXRzID0gMDtcbiAgICBpZiAobiA+PSBiYXNlKSB7XG4gICAgICB4Yml0cyA9IGV4dHJhW24gLSBiYXNlXTtcbiAgICB9XG4gICAgZiA9IHRyZWVbbiAqIDJdLyouRnJlcSovO1xuICAgIHMub3B0X2xlbiArPSBmICogKGJpdHMgKyB4Yml0cyk7XG4gICAgaWYgKGhhc19zdHJlZSkge1xuICAgICAgcy5zdGF0aWNfbGVuICs9IGYgKiAoc3RyZWVbbiAqIDIgKyAxXS8qLkxlbiovICsgeGJpdHMpO1xuICAgIH1cbiAgfVxuICBpZiAob3ZlcmZsb3cgPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgLy8gVHJhY2UoKHN0ZGVycixcIlxcbmJpdCBsZW5ndGggb3ZlcmZsb3dcXG5cIikpO1xuICAvKiBUaGlzIGhhcHBlbnMgZm9yIGV4YW1wbGUgb24gb2JqMiBhbmQgcGljIG9mIHRoZSBDYWxnYXJ5IGNvcnB1cyAqL1xuXG4gIC8qIEZpbmQgdGhlIGZpcnN0IGJpdCBsZW5ndGggd2hpY2ggY291bGQgaW5jcmVhc2U6ICovXG4gIGRvIHtcbiAgICBiaXRzID0gbWF4X2xlbmd0aCAtIDE7XG4gICAgd2hpbGUgKHMuYmxfY291bnRbYml0c10gPT09IDApIHsgYml0cy0tOyB9XG4gICAgcy5ibF9jb3VudFtiaXRzXS0tOyAgICAgIC8qIG1vdmUgb25lIGxlYWYgZG93biB0aGUgdHJlZSAqL1xuICAgIHMuYmxfY291bnRbYml0cyArIDFdICs9IDI7IC8qIG1vdmUgb25lIG92ZXJmbG93IGl0ZW0gYXMgaXRzIGJyb3RoZXIgKi9cbiAgICBzLmJsX2NvdW50W21heF9sZW5ndGhdLS07XG4gICAgLyogVGhlIGJyb3RoZXIgb2YgdGhlIG92ZXJmbG93IGl0ZW0gYWxzbyBtb3ZlcyBvbmUgc3RlcCB1cCxcbiAgICAgKiBidXQgdGhpcyBkb2VzIG5vdCBhZmZlY3QgYmxfY291bnRbbWF4X2xlbmd0aF1cbiAgICAgKi9cbiAgICBvdmVyZmxvdyAtPSAyO1xuICB9IHdoaWxlIChvdmVyZmxvdyA+IDApO1xuXG4gIC8qIE5vdyByZWNvbXB1dGUgYWxsIGJpdCBsZW5ndGhzLCBzY2FubmluZyBpbiBpbmNyZWFzaW5nIGZyZXF1ZW5jeS5cbiAgICogaCBpcyBzdGlsbCBlcXVhbCB0byBIRUFQX1NJWkUuIChJdCBpcyBzaW1wbGVyIHRvIHJlY29uc3RydWN0IGFsbFxuICAgKiBsZW5ndGhzIGluc3RlYWQgb2YgZml4aW5nIG9ubHkgdGhlIHdyb25nIG9uZXMuIFRoaXMgaWRlYSBpcyB0YWtlblxuICAgKiBmcm9tICdhcicgd3JpdHRlbiBieSBIYXJ1aGlrbyBPa3VtdXJhLilcbiAgICovXG4gIGZvciAoYml0cyA9IG1heF9sZW5ndGg7IGJpdHMgIT09IDA7IGJpdHMtLSkge1xuICAgIG4gPSBzLmJsX2NvdW50W2JpdHNdO1xuICAgIHdoaWxlIChuICE9PSAwKSB7XG4gICAgICBtID0gcy5oZWFwWy0taF07XG4gICAgICBpZiAobSA+IG1heF9jb2RlKSB7IGNvbnRpbnVlOyB9XG4gICAgICBpZiAodHJlZVttICogMiArIDFdLyouTGVuKi8gIT09IGJpdHMpIHtcbiAgICAgICAgLy8gVHJhY2UoKHN0ZGVycixcImNvZGUgJWQgYml0cyAlZC0+JWRcXG5cIiwgbSwgdHJlZVttXS5MZW4sIGJpdHMpKTtcbiAgICAgICAgcy5vcHRfbGVuICs9IChiaXRzIC0gdHJlZVttICogMiArIDFdLyouTGVuKi8pICogdHJlZVttICogMl0vKi5GcmVxKi87XG4gICAgICAgIHRyZWVbbSAqIDIgKyAxXS8qLkxlbiovID0gYml0cztcbiAgICAgIH1cbiAgICAgIG4tLTtcbiAgICB9XG4gIH1cbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBHZW5lcmF0ZSB0aGUgY29kZXMgZm9yIGEgZ2l2ZW4gdHJlZSBhbmQgYml0IGNvdW50cyAod2hpY2ggbmVlZCBub3QgYmVcbiAqIG9wdGltYWwpLlxuICogSU4gYXNzZXJ0aW9uOiB0aGUgYXJyYXkgYmxfY291bnQgY29udGFpbnMgdGhlIGJpdCBsZW5ndGggc3RhdGlzdGljcyBmb3JcbiAqIHRoZSBnaXZlbiB0cmVlIGFuZCB0aGUgZmllbGQgbGVuIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMuXG4gKiBPVVQgYXNzZXJ0aW9uOiB0aGUgZmllbGQgY29kZSBpcyBzZXQgZm9yIGFsbCB0cmVlIGVsZW1lbnRzIG9mIG5vblxuICogICAgIHplcm8gY29kZSBsZW5ndGguXG4gKi9cbmNvbnN0IGdlbl9jb2RlcyA9ICh0cmVlLCBtYXhfY29kZSwgYmxfY291bnQpID0+XG4vLyAgICBjdF9kYXRhICp0cmVlOyAgICAgICAgICAgICAvKiB0aGUgdHJlZSB0byBkZWNvcmF0ZSAqL1xuLy8gICAgaW50IG1heF9jb2RlOyAgICAgICAgICAgICAgLyogbGFyZ2VzdCBjb2RlIHdpdGggbm9uIHplcm8gZnJlcXVlbmN5ICovXG4vLyAgICB1c2hmICpibF9jb3VudDsgICAgICAgICAgICAvKiBudW1iZXIgb2YgY29kZXMgYXQgZWFjaCBiaXQgbGVuZ3RoICovXG57XG4gIGNvbnN0IG5leHRfY29kZSA9IG5ldyBBcnJheShNQVhfQklUUyArIDEpOyAvKiBuZXh0IGNvZGUgdmFsdWUgZm9yIGVhY2ggYml0IGxlbmd0aCAqL1xuICBsZXQgY29kZSA9IDA7ICAgICAgICAgICAgICAvKiBydW5uaW5nIGNvZGUgdmFsdWUgKi9cbiAgbGV0IGJpdHM7ICAgICAgICAgICAgICAgICAgLyogYml0IGluZGV4ICovXG4gIGxldCBuOyAgICAgICAgICAgICAgICAgICAgIC8qIGNvZGUgaW5kZXggKi9cblxuICAvKiBUaGUgZGlzdHJpYnV0aW9uIGNvdW50cyBhcmUgZmlyc3QgdXNlZCB0byBnZW5lcmF0ZSB0aGUgY29kZSB2YWx1ZXNcbiAgICogd2l0aG91dCBiaXQgcmV2ZXJzYWwuXG4gICAqL1xuICBmb3IgKGJpdHMgPSAxOyBiaXRzIDw9IE1BWF9CSVRTOyBiaXRzKyspIHtcbiAgICBuZXh0X2NvZGVbYml0c10gPSBjb2RlID0gKGNvZGUgKyBibF9jb3VudFtiaXRzIC0gMV0pIDw8IDE7XG4gIH1cbiAgLyogQ2hlY2sgdGhhdCB0aGUgYml0IGNvdW50cyBpbiBibF9jb3VudCBhcmUgY29uc2lzdGVudC4gVGhlIGxhc3QgY29kZVxuICAgKiBtdXN0IGJlIGFsbCBvbmVzLlxuICAgKi9cbiAgLy9Bc3NlcnQgKGNvZGUgKyBibF9jb3VudFtNQVhfQklUU10tMSA9PSAoMTw8TUFYX0JJVFMpLTEsXG4gIC8vICAgICAgICBcImluY29uc2lzdGVudCBiaXQgY291bnRzXCIpO1xuICAvL1RyYWNldigoc3RkZXJyLFwiXFxuZ2VuX2NvZGVzOiBtYXhfY29kZSAlZCBcIiwgbWF4X2NvZGUpKTtcblxuICBmb3IgKG4gPSAwOyAgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgbGV0IGxlbiA9IHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovO1xuICAgIGlmIChsZW4gPT09IDApIHsgY29udGludWU7IH1cbiAgICAvKiBOb3cgcmV2ZXJzZSB0aGUgYml0cyAqL1xuICAgIHRyZWVbbiAqIDJdLyouQ29kZSovID0gYmlfcmV2ZXJzZShuZXh0X2NvZGVbbGVuXSsrLCBsZW4pO1xuXG4gICAgLy9UcmFjZWN2KHRyZWUgIT0gc3RhdGljX2x0cmVlLCAoc3RkZXJyLFwiXFxubiAlM2QgJWMgbCAlMmQgYyAlNHggKCV4KSBcIixcbiAgICAvLyAgICAgbiwgKGlzZ3JhcGgobikgPyBuIDogJyAnKSwgbGVuLCB0cmVlW25dLkNvZGUsIG5leHRfY29kZVtsZW5dLTEpKTtcbiAgfVxufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEluaXRpYWxpemUgdGhlIHZhcmlvdXMgJ2NvbnN0YW50JyB0YWJsZXMuXG4gKi9cbmNvbnN0IHRyX3N0YXRpY19pbml0ID0gKCkgPT4ge1xuXG4gIGxldCBuOyAgICAgICAgLyogaXRlcmF0ZXMgb3ZlciB0cmVlIGVsZW1lbnRzICovXG4gIGxldCBiaXRzOyAgICAgLyogYml0IGNvdW50ZXIgKi9cbiAgbGV0IGxlbmd0aDsgICAvKiBsZW5ndGggdmFsdWUgKi9cbiAgbGV0IGNvZGU7ICAgICAvKiBjb2RlIHZhbHVlICovXG4gIGxldCBkaXN0OyAgICAgLyogZGlzdGFuY2UgaW5kZXggKi9cbiAgY29uc3QgYmxfY291bnQgPSBuZXcgQXJyYXkoTUFYX0JJVFMgKyAxKTtcbiAgLyogbnVtYmVyIG9mIGNvZGVzIGF0IGVhY2ggYml0IGxlbmd0aCBmb3IgYW4gb3B0aW1hbCB0cmVlICovXG5cbiAgLy8gZG8gY2hlY2sgaW4gX3RyX2luaXQoKVxuICAvL2lmIChzdGF0aWNfaW5pdF9kb25lKSByZXR1cm47XG5cbiAgLyogRm9yIHNvbWUgZW1iZWRkZWQgdGFyZ2V0cywgZ2xvYmFsIHZhcmlhYmxlcyBhcmUgbm90IGluaXRpYWxpemVkOiAqL1xuLyojaWZkZWYgTk9fSU5JVF9HTE9CQUxfUE9JTlRFUlNcbiAgc3RhdGljX2xfZGVzYy5zdGF0aWNfdHJlZSA9IHN0YXRpY19sdHJlZTtcbiAgc3RhdGljX2xfZGVzYy5leHRyYV9iaXRzID0gZXh0cmFfbGJpdHM7XG4gIHN0YXRpY19kX2Rlc2Muc3RhdGljX3RyZWUgPSBzdGF0aWNfZHRyZWU7XG4gIHN0YXRpY19kX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2RiaXRzO1xuICBzdGF0aWNfYmxfZGVzYy5leHRyYV9iaXRzID0gZXh0cmFfYmxiaXRzO1xuI2VuZGlmKi9cblxuICAvKiBJbml0aWFsaXplIHRoZSBtYXBwaW5nIGxlbmd0aCAoMC4uMjU1KSAtPiBsZW5ndGggY29kZSAoMC4uMjgpICovXG4gIGxlbmd0aCA9IDA7XG4gIGZvciAoY29kZSA9IDA7IGNvZGUgPCBMRU5HVEhfQ09ERVMgLSAxOyBjb2RlKyspIHtcbiAgICBiYXNlX2xlbmd0aFtjb2RlXSA9IGxlbmd0aDtcbiAgICBmb3IgKG4gPSAwOyBuIDwgKDEgPDwgZXh0cmFfbGJpdHNbY29kZV0pOyBuKyspIHtcbiAgICAgIF9sZW5ndGhfY29kZVtsZW5ndGgrK10gPSBjb2RlO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAobGVuZ3RoID09IDI1NiwgXCJ0cl9zdGF0aWNfaW5pdDogbGVuZ3RoICE9IDI1NlwiKTtcbiAgLyogTm90ZSB0aGF0IHRoZSBsZW5ndGggMjU1IChtYXRjaCBsZW5ndGggMjU4KSBjYW4gYmUgcmVwcmVzZW50ZWRcbiAgICogaW4gdHdvIGRpZmZlcmVudCB3YXlzOiBjb2RlIDI4NCArIDUgYml0cyBvciBjb2RlIDI4NSwgc28gd2VcbiAgICogb3ZlcndyaXRlIGxlbmd0aF9jb2RlWzI1NV0gdG8gdXNlIHRoZSBiZXN0IGVuY29kaW5nOlxuICAgKi9cbiAgX2xlbmd0aF9jb2RlW2xlbmd0aCAtIDFdID0gY29kZTtcblxuICAvKiBJbml0aWFsaXplIHRoZSBtYXBwaW5nIGRpc3QgKDAuLjMySykgLT4gZGlzdCBjb2RlICgwLi4yOSkgKi9cbiAgZGlzdCA9IDA7XG4gIGZvciAoY29kZSA9IDA7IGNvZGUgPCAxNjsgY29kZSsrKSB7XG4gICAgYmFzZV9kaXN0W2NvZGVdID0gZGlzdDtcbiAgICBmb3IgKG4gPSAwOyBuIDwgKDEgPDwgZXh0cmFfZGJpdHNbY29kZV0pOyBuKyspIHtcbiAgICAgIF9kaXN0X2NvZGVbZGlzdCsrXSA9IGNvZGU7XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0IChkaXN0ID09IDI1NiwgXCJ0cl9zdGF0aWNfaW5pdDogZGlzdCAhPSAyNTZcIik7XG4gIGRpc3QgPj49IDc7IC8qIGZyb20gbm93IG9uLCBhbGwgZGlzdGFuY2VzIGFyZSBkaXZpZGVkIGJ5IDEyOCAqL1xuICBmb3IgKDsgY29kZSA8IERfQ09ERVM7IGNvZGUrKykge1xuICAgIGJhc2VfZGlzdFtjb2RlXSA9IGRpc3QgPDwgNztcbiAgICBmb3IgKG4gPSAwOyBuIDwgKDEgPDwgKGV4dHJhX2RiaXRzW2NvZGVdIC0gNykpOyBuKyspIHtcbiAgICAgIF9kaXN0X2NvZGVbMjU2ICsgZGlzdCsrXSA9IGNvZGU7XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0IChkaXN0ID09IDI1NiwgXCJ0cl9zdGF0aWNfaW5pdDogMjU2K2Rpc3QgIT0gNTEyXCIpO1xuXG4gIC8qIENvbnN0cnVjdCB0aGUgY29kZXMgb2YgdGhlIHN0YXRpYyBsaXRlcmFsIHRyZWUgKi9cbiAgZm9yIChiaXRzID0gMDsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7XG4gICAgYmxfY291bnRbYml0c10gPSAwO1xuICB9XG5cbiAgbiA9IDA7XG4gIHdoaWxlIChuIDw9IDE0Mykge1xuICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSA4O1xuICAgIG4rKztcbiAgICBibF9jb3VudFs4XSsrO1xuICB9XG4gIHdoaWxlIChuIDw9IDI1NSkge1xuICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSA5O1xuICAgIG4rKztcbiAgICBibF9jb3VudFs5XSsrO1xuICB9XG4gIHdoaWxlIChuIDw9IDI3OSkge1xuICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSA3O1xuICAgIG4rKztcbiAgICBibF9jb3VudFs3XSsrO1xuICB9XG4gIHdoaWxlIChuIDw9IDI4Nykge1xuICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSA4O1xuICAgIG4rKztcbiAgICBibF9jb3VudFs4XSsrO1xuICB9XG4gIC8qIENvZGVzIDI4NiBhbmQgMjg3IGRvIG5vdCBleGlzdCwgYnV0IHdlIG11c3QgaW5jbHVkZSB0aGVtIGluIHRoZVxuICAgKiB0cmVlIGNvbnN0cnVjdGlvbiB0byBnZXQgYSBjYW5vbmljYWwgSHVmZm1hbiB0cmVlIChsb25nZXN0IGNvZGVcbiAgICogYWxsIG9uZXMpXG4gICAqL1xuICBnZW5fY29kZXMoc3RhdGljX2x0cmVlLCBMX0NPREVTICsgMSwgYmxfY291bnQpO1xuXG4gIC8qIFRoZSBzdGF0aWMgZGlzdGFuY2UgdHJlZSBpcyB0cml2aWFsOiAqL1xuICBmb3IgKG4gPSAwOyBuIDwgRF9DT0RFUzsgbisrKSB7XG4gICAgc3RhdGljX2R0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDU7XG4gICAgc3RhdGljX2R0cmVlW24gKiAyXS8qLkNvZGUqLyA9IGJpX3JldmVyc2UobiwgNSk7XG4gIH1cblxuICAvLyBOb3cgZGF0YSByZWFkeSBhbmQgd2UgY2FuIGluaXQgc3RhdGljIHRyZWVzXG4gIHN0YXRpY19sX2Rlc2MgPSBuZXcgU3RhdGljVHJlZURlc2Moc3RhdGljX2x0cmVlLCBleHRyYV9sYml0cywgTElURVJBTFMgKyAxLCBMX0NPREVTLCBNQVhfQklUUyk7XG4gIHN0YXRpY19kX2Rlc2MgPSBuZXcgU3RhdGljVHJlZURlc2Moc3RhdGljX2R0cmVlLCBleHRyYV9kYml0cywgMCwgICAgICAgICAgRF9DT0RFUywgTUFYX0JJVFMpO1xuICBzdGF0aWNfYmxfZGVzYyA9IG5ldyBTdGF0aWNUcmVlRGVzYyhuZXcgQXJyYXkoMCksIGV4dHJhX2JsYml0cywgMCwgICAgICAgICBCTF9DT0RFUywgTUFYX0JMX0JJVFMpO1xuXG4gIC8vc3RhdGljX2luaXRfZG9uZSA9IHRydWU7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSBhIG5ldyBibG9jay5cbiAqL1xuY29uc3QgaW5pdF9ibG9jayA9IChzKSA9PiB7XG5cbiAgbGV0IG47IC8qIGl0ZXJhdGVzIG92ZXIgdHJlZSBlbGVtZW50cyAqL1xuXG4gIC8qIEluaXRpYWxpemUgdGhlIHRyZWVzLiAqL1xuICBmb3IgKG4gPSAwOyBuIDwgTF9DT0RFUzsgIG4rKykgeyBzLmR5bl9sdHJlZVtuICogMl0vKi5GcmVxKi8gPSAwOyB9XG4gIGZvciAobiA9IDA7IG4gPCBEX0NPREVTOyAgbisrKSB7IHMuZHluX2R0cmVlW24gKiAyXS8qLkZyZXEqLyA9IDA7IH1cbiAgZm9yIChuID0gMDsgbiA8IEJMX0NPREVTOyBuKyspIHsgcy5ibF90cmVlW24gKiAyXS8qLkZyZXEqLyA9IDA7IH1cblxuICBzLmR5bl9sdHJlZVtFTkRfQkxPQ0sgKiAyXS8qLkZyZXEqLyA9IDE7XG4gIHMub3B0X2xlbiA9IHMuc3RhdGljX2xlbiA9IDA7XG4gIHMubGFzdF9saXQgPSBzLm1hdGNoZXMgPSAwO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZsdXNoIHRoZSBiaXQgYnVmZmVyIGFuZCBhbGlnbiB0aGUgb3V0cHV0IG9uIGEgYnl0ZSBib3VuZGFyeVxuICovXG5jb25zdCBiaV93aW5kdXAgPSAocykgPT5cbntcbiAgaWYgKHMuYmlfdmFsaWQgPiA4KSB7XG4gICAgcHV0X3Nob3J0KHMsIHMuYmlfYnVmKTtcbiAgfSBlbHNlIGlmIChzLmJpX3ZhbGlkID4gMCkge1xuICAgIC8vcHV0X2J5dGUocywgKEJ5dGUpcy0+YmlfYnVmKTtcbiAgICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IHMuYmlfYnVmO1xuICB9XG4gIHMuYmlfYnVmID0gMDtcbiAgcy5iaV92YWxpZCA9IDA7XG59O1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHkgYSBzdG9yZWQgYmxvY2ssIHN0b3JpbmcgZmlyc3QgdGhlIGxlbmd0aCBhbmQgaXRzXG4gKiBvbmUncyBjb21wbGVtZW50IGlmIHJlcXVlc3RlZC5cbiAqL1xuY29uc3QgY29weV9ibG9jayA9IChzLCBidWYsIGxlbiwgaGVhZGVyKSA9PlxuLy9EZWZsYXRlU3RhdGUgKnM7XG4vL2NoYXJmICAgICpidWY7ICAgIC8qIHRoZSBpbnB1dCBkYXRhICovXG4vL3Vuc2lnbmVkIGxlbjsgICAgIC8qIGl0cyBsZW5ndGggKi9cbi8vaW50ICAgICAgaGVhZGVyOyAgLyogdHJ1ZSBpZiBibG9jayBoZWFkZXIgbXVzdCBiZSB3cml0dGVuICovXG57XG4gIGJpX3dpbmR1cChzKTsgICAgICAgIC8qIGFsaWduIG9uIGJ5dGUgYm91bmRhcnkgKi9cblxuICBpZiAoaGVhZGVyKSB7XG4gICAgcHV0X3Nob3J0KHMsIGxlbik7XG4gICAgcHV0X3Nob3J0KHMsIH5sZW4pO1xuICB9XG4vLyAgd2hpbGUgKGxlbi0tKSB7XG4vLyAgICBwdXRfYnl0ZShzLCAqYnVmKyspO1xuLy8gIH1cbiAgcy5wZW5kaW5nX2J1Zi5zZXQocy53aW5kb3cuc3ViYXJyYXkoYnVmLCBidWYgKyBsZW4pLCBzLnBlbmRpbmcpO1xuICBzLnBlbmRpbmcgKz0gbGVuO1xufTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb21wYXJlcyB0byBzdWJ0cmVlcywgdXNpbmcgdGhlIHRyZWUgZGVwdGggYXMgdGllIGJyZWFrZXIgd2hlblxuICogdGhlIHN1YnRyZWVzIGhhdmUgZXF1YWwgZnJlcXVlbmN5LiBUaGlzIG1pbmltaXplcyB0aGUgd29yc3QgY2FzZSBsZW5ndGguXG4gKi9cbmNvbnN0IHNtYWxsZXIgPSAodHJlZSwgbiwgbSwgZGVwdGgpID0+IHtcblxuICBjb25zdCBfbjIgPSBuICogMjtcbiAgY29uc3QgX20yID0gbSAqIDI7XG4gIHJldHVybiAodHJlZVtfbjJdLyouRnJlcSovIDwgdHJlZVtfbTJdLyouRnJlcSovIHx8XG4gICAgICAgICAodHJlZVtfbjJdLyouRnJlcSovID09PSB0cmVlW19tMl0vKi5GcmVxKi8gJiYgZGVwdGhbbl0gPD0gZGVwdGhbbV0pKTtcbn07XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogUmVzdG9yZSB0aGUgaGVhcCBwcm9wZXJ0eSBieSBtb3ZpbmcgZG93biB0aGUgdHJlZSBzdGFydGluZyBhdCBub2RlIGssXG4gKiBleGNoYW5naW5nIGEgbm9kZSB3aXRoIHRoZSBzbWFsbGVzdCBvZiBpdHMgdHdvIHNvbnMgaWYgbmVjZXNzYXJ5LCBzdG9wcGluZ1xuICogd2hlbiB0aGUgaGVhcCBwcm9wZXJ0eSBpcyByZS1lc3RhYmxpc2hlZCAoZWFjaCBmYXRoZXIgc21hbGxlciB0aGFuIGl0c1xuICogdHdvIHNvbnMpLlxuICovXG5jb25zdCBwcWRvd25oZWFwID0gKHMsIHRyZWUsIGspID0+XG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgY3RfZGF0YSAqdHJlZTsgIC8qIHRoZSB0cmVlIHRvIHJlc3RvcmUgKi9cbi8vICAgIGludCBrOyAgICAgICAgICAgICAgIC8qIG5vZGUgdG8gbW92ZSBkb3duICovXG57XG4gIGNvbnN0IHYgPSBzLmhlYXBba107XG4gIGxldCBqID0gayA8PCAxOyAgLyogbGVmdCBzb24gb2YgayAqL1xuICB3aGlsZSAoaiA8PSBzLmhlYXBfbGVuKSB7XG4gICAgLyogU2V0IGogdG8gdGhlIHNtYWxsZXN0IG9mIHRoZSB0d28gc29uczogKi9cbiAgICBpZiAoaiA8IHMuaGVhcF9sZW4gJiZcbiAgICAgIHNtYWxsZXIodHJlZSwgcy5oZWFwW2ogKyAxXSwgcy5oZWFwW2pdLCBzLmRlcHRoKSkge1xuICAgICAgaisrO1xuICAgIH1cbiAgICAvKiBFeGl0IGlmIHYgaXMgc21hbGxlciB0aGFuIGJvdGggc29ucyAqL1xuICAgIGlmIChzbWFsbGVyKHRyZWUsIHYsIHMuaGVhcFtqXSwgcy5kZXB0aCkpIHsgYnJlYWs7IH1cblxuICAgIC8qIEV4Y2hhbmdlIHYgd2l0aCB0aGUgc21hbGxlc3Qgc29uICovXG4gICAgcy5oZWFwW2tdID0gcy5oZWFwW2pdO1xuICAgIGsgPSBqO1xuXG4gICAgLyogQW5kIGNvbnRpbnVlIGRvd24gdGhlIHRyZWUsIHNldHRpbmcgaiB0byB0aGUgbGVmdCBzb24gb2YgayAqL1xuICAgIGogPDw9IDE7XG4gIH1cbiAgcy5oZWFwW2tdID0gdjtcbn07XG5cblxuLy8gaW5saW5lZCBtYW51YWxseVxuLy8gY29uc3QgU01BTExFU1QgPSAxO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgdGhlIGJsb2NrIGRhdGEgY29tcHJlc3NlZCB1c2luZyB0aGUgZ2l2ZW4gSHVmZm1hbiB0cmVlc1xuICovXG5jb25zdCBjb21wcmVzc19ibG9jayA9IChzLCBsdHJlZSwgZHRyZWUpID0+XG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgY29uc3QgY3RfZGF0YSAqbHRyZWU7IC8qIGxpdGVyYWwgdHJlZSAqL1xuLy8gICAgY29uc3QgY3RfZGF0YSAqZHRyZWU7IC8qIGRpc3RhbmNlIHRyZWUgKi9cbntcbiAgbGV0IGRpc3Q7ICAgICAgICAgICAvKiBkaXN0YW5jZSBvZiBtYXRjaGVkIHN0cmluZyAqL1xuICBsZXQgbGM7ICAgICAgICAgICAgIC8qIG1hdGNoIGxlbmd0aCBvciB1bm1hdGNoZWQgY2hhciAoaWYgZGlzdCA9PSAwKSAqL1xuICBsZXQgbHggPSAwOyAgICAgICAgIC8qIHJ1bm5pbmcgaW5kZXggaW4gbF9idWYgKi9cbiAgbGV0IGNvZGU7ICAgICAgICAgICAvKiB0aGUgY29kZSB0byBzZW5kICovXG4gIGxldCBleHRyYTsgICAgICAgICAgLyogbnVtYmVyIG9mIGV4dHJhIGJpdHMgdG8gc2VuZCAqL1xuXG4gIGlmIChzLmxhc3RfbGl0ICE9PSAwKSB7XG4gICAgZG8ge1xuICAgICAgZGlzdCA9IChzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBseCAqIDJdIDw8IDgpIHwgKHMucGVuZGluZ19idWZbcy5kX2J1ZiArIGx4ICogMiArIDFdKTtcbiAgICAgIGxjID0gcy5wZW5kaW5nX2J1ZltzLmxfYnVmICsgbHhdO1xuICAgICAgbHgrKztcblxuICAgICAgaWYgKGRpc3QgPT09IDApIHtcbiAgICAgICAgc2VuZF9jb2RlKHMsIGxjLCBsdHJlZSk7IC8qIHNlbmQgYSBsaXRlcmFsIGJ5dGUgKi9cbiAgICAgICAgLy9UcmFjZWN2KGlzZ3JhcGgobGMpLCAoc3RkZXJyLFwiICclYycgXCIsIGxjKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBIZXJlLCBsYyBpcyB0aGUgbWF0Y2ggbGVuZ3RoIC0gTUlOX01BVENIICovXG4gICAgICAgIGNvZGUgPSBfbGVuZ3RoX2NvZGVbbGNdO1xuICAgICAgICBzZW5kX2NvZGUocywgY29kZSArIExJVEVSQUxTICsgMSwgbHRyZWUpOyAvKiBzZW5kIHRoZSBsZW5ndGggY29kZSAqL1xuICAgICAgICBleHRyYSA9IGV4dHJhX2xiaXRzW2NvZGVdO1xuICAgICAgICBpZiAoZXh0cmEgIT09IDApIHtcbiAgICAgICAgICBsYyAtPSBiYXNlX2xlbmd0aFtjb2RlXTtcbiAgICAgICAgICBzZW5kX2JpdHMocywgbGMsIGV4dHJhKTsgICAgICAgLyogc2VuZCB0aGUgZXh0cmEgbGVuZ3RoIGJpdHMgKi9cbiAgICAgICAgfVxuICAgICAgICBkaXN0LS07IC8qIGRpc3QgaXMgbm93IHRoZSBtYXRjaCBkaXN0YW5jZSAtIDEgKi9cbiAgICAgICAgY29kZSA9IGRfY29kZShkaXN0KTtcbiAgICAgICAgLy9Bc3NlcnQgKGNvZGUgPCBEX0NPREVTLCBcImJhZCBkX2NvZGVcIik7XG5cbiAgICAgICAgc2VuZF9jb2RlKHMsIGNvZGUsIGR0cmVlKTsgICAgICAgLyogc2VuZCB0aGUgZGlzdGFuY2UgY29kZSAqL1xuICAgICAgICBleHRyYSA9IGV4dHJhX2RiaXRzW2NvZGVdO1xuICAgICAgICBpZiAoZXh0cmEgIT09IDApIHtcbiAgICAgICAgICBkaXN0IC09IGJhc2VfZGlzdFtjb2RlXTtcbiAgICAgICAgICBzZW5kX2JpdHMocywgZGlzdCwgZXh0cmEpOyAgIC8qIHNlbmQgdGhlIGV4dHJhIGRpc3RhbmNlIGJpdHMgKi9cbiAgICAgICAgfVxuICAgICAgfSAvKiBsaXRlcmFsIG9yIG1hdGNoIHBhaXIgPyAqL1xuXG4gICAgICAvKiBDaGVjayB0aGF0IHRoZSBvdmVybGF5IGJldHdlZW4gcGVuZGluZ19idWYgYW5kIGRfYnVmK2xfYnVmIGlzIG9rOiAqL1xuICAgICAgLy9Bc3NlcnQoKHVJbnQpKHMtPnBlbmRpbmcpIDwgcy0+bGl0X2J1ZnNpemUgKyAyKmx4LFxuICAgICAgLy8gICAgICAgXCJwZW5kaW5nQnVmIG92ZXJmbG93XCIpO1xuXG4gICAgfSB3aGlsZSAobHggPCBzLmxhc3RfbGl0KTtcbiAgfVxuXG4gIHNlbmRfY29kZShzLCBFTkRfQkxPQ0ssIGx0cmVlKTtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb25zdHJ1Y3Qgb25lIEh1ZmZtYW4gdHJlZSBhbmQgYXNzaWducyB0aGUgY29kZSBiaXQgc3RyaW5ncyBhbmQgbGVuZ3Rocy5cbiAqIFVwZGF0ZSB0aGUgdG90YWwgYml0IGxlbmd0aCBmb3IgdGhlIGN1cnJlbnQgYmxvY2suXG4gKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZCBmcmVxIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMuXG4gKiBPVVQgYXNzZXJ0aW9uczogdGhlIGZpZWxkcyBsZW4gYW5kIGNvZGUgYXJlIHNldCB0byB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RoXG4gKiAgICAgYW5kIGNvcnJlc3BvbmRpbmcgY29kZS4gVGhlIGxlbmd0aCBvcHRfbGVuIGlzIHVwZGF0ZWQ7IHN0YXRpY19sZW4gaXNcbiAqICAgICBhbHNvIHVwZGF0ZWQgaWYgc3RyZWUgaXMgbm90IG51bGwuIFRoZSBmaWVsZCBtYXhfY29kZSBpcyBzZXQuXG4gKi9cbmNvbnN0IGJ1aWxkX3RyZWUgPSAocywgZGVzYykgPT5cbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICB0cmVlX2Rlc2MgKmRlc2M7IC8qIHRoZSB0cmVlIGRlc2NyaXB0b3IgKi9cbntcbiAgY29uc3QgdHJlZSAgICAgPSBkZXNjLmR5bl90cmVlO1xuICBjb25zdCBzdHJlZSAgICA9IGRlc2Muc3RhdF9kZXNjLnN0YXRpY190cmVlO1xuICBjb25zdCBoYXNfc3RyZWUgPSBkZXNjLnN0YXRfZGVzYy5oYXNfc3RyZWU7XG4gIGNvbnN0IGVsZW1zICAgID0gZGVzYy5zdGF0X2Rlc2MuZWxlbXM7XG4gIGxldCBuLCBtOyAgICAgICAgICAvKiBpdGVyYXRlIG92ZXIgaGVhcCBlbGVtZW50cyAqL1xuICBsZXQgbWF4X2NvZGUgPSAtMTsgLyogbGFyZ2VzdCBjb2RlIHdpdGggbm9uIHplcm8gZnJlcXVlbmN5ICovXG4gIGxldCBub2RlOyAgICAgICAgICAvKiBuZXcgbm9kZSBiZWluZyBjcmVhdGVkICovXG5cbiAgLyogQ29uc3RydWN0IHRoZSBpbml0aWFsIGhlYXAsIHdpdGggbGVhc3QgZnJlcXVlbnQgZWxlbWVudCBpblxuICAgKiBoZWFwW1NNQUxMRVNUXS4gVGhlIHNvbnMgb2YgaGVhcFtuXSBhcmUgaGVhcFsyKm5dIGFuZCBoZWFwWzIqbisxXS5cbiAgICogaGVhcFswXSBpcyBub3QgdXNlZC5cbiAgICovXG4gIHMuaGVhcF9sZW4gPSAwO1xuICBzLmhlYXBfbWF4ID0gSEVBUF9TSVpFO1xuXG4gIGZvciAobiA9IDA7IG4gPCBlbGVtczsgbisrKSB7XG4gICAgaWYgKHRyZWVbbiAqIDJdLyouRnJlcSovICE9PSAwKSB7XG4gICAgICBzLmhlYXBbKytzLmhlYXBfbGVuXSA9IG1heF9jb2RlID0gbjtcbiAgICAgIHMuZGVwdGhbbl0gPSAwO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gMDtcbiAgICB9XG4gIH1cblxuICAvKiBUaGUgcGt6aXAgZm9ybWF0IHJlcXVpcmVzIHRoYXQgYXQgbGVhc3Qgb25lIGRpc3RhbmNlIGNvZGUgZXhpc3RzLFxuICAgKiBhbmQgdGhhdCBhdCBsZWFzdCBvbmUgYml0IHNob3VsZCBiZSBzZW50IGV2ZW4gaWYgdGhlcmUgaXMgb25seSBvbmVcbiAgICogcG9zc2libGUgY29kZS4gU28gdG8gYXZvaWQgc3BlY2lhbCBjaGVja3MgbGF0ZXIgb24gd2UgZm9yY2UgYXQgbGVhc3RcbiAgICogdHdvIGNvZGVzIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeS5cbiAgICovXG4gIHdoaWxlIChzLmhlYXBfbGVuIDwgMikge1xuICAgIG5vZGUgPSBzLmhlYXBbKytzLmhlYXBfbGVuXSA9IChtYXhfY29kZSA8IDIgPyArK21heF9jb2RlIDogMCk7XG4gICAgdHJlZVtub2RlICogMl0vKi5GcmVxKi8gPSAxO1xuICAgIHMuZGVwdGhbbm9kZV0gPSAwO1xuICAgIHMub3B0X2xlbi0tO1xuXG4gICAgaWYgKGhhc19zdHJlZSkge1xuICAgICAgcy5zdGF0aWNfbGVuIC09IHN0cmVlW25vZGUgKiAyICsgMV0vKi5MZW4qLztcbiAgICB9XG4gICAgLyogbm9kZSBpcyAwIG9yIDEgc28gaXQgZG9lcyBub3QgaGF2ZSBleHRyYSBiaXRzICovXG4gIH1cbiAgZGVzYy5tYXhfY29kZSA9IG1heF9jb2RlO1xuXG4gIC8qIFRoZSBlbGVtZW50cyBoZWFwW2hlYXBfbGVuLzIrMSAuLiBoZWFwX2xlbl0gYXJlIGxlYXZlcyBvZiB0aGUgdHJlZSxcbiAgICogZXN0YWJsaXNoIHN1Yi1oZWFwcyBvZiBpbmNyZWFzaW5nIGxlbmd0aHM6XG4gICAqL1xuICBmb3IgKG4gPSAocy5oZWFwX2xlbiA+PiAxLyppbnQgLzIqLyk7IG4gPj0gMTsgbi0tKSB7IHBxZG93bmhlYXAocywgdHJlZSwgbik7IH1cblxuICAvKiBDb25zdHJ1Y3QgdGhlIEh1ZmZtYW4gdHJlZSBieSByZXBlYXRlZGx5IGNvbWJpbmluZyB0aGUgbGVhc3QgdHdvXG4gICAqIGZyZXF1ZW50IG5vZGVzLlxuICAgKi9cbiAgbm9kZSA9IGVsZW1zOyAgICAgICAgICAgICAgLyogbmV4dCBpbnRlcm5hbCBub2RlIG9mIHRoZSB0cmVlICovXG4gIGRvIHtcbiAgICAvL3BxcmVtb3ZlKHMsIHRyZWUsIG4pOyAgLyogbiA9IG5vZGUgb2YgbGVhc3QgZnJlcXVlbmN5ICovXG4gICAgLyoqKiBwcXJlbW92ZSAqKiovXG4gICAgbiA9IHMuaGVhcFsxLypTTUFMTEVTVCovXTtcbiAgICBzLmhlYXBbMS8qU01BTExFU1QqL10gPSBzLmhlYXBbcy5oZWFwX2xlbi0tXTtcbiAgICBwcWRvd25oZWFwKHMsIHRyZWUsIDEvKlNNQUxMRVNUKi8pO1xuICAgIC8qKiovXG5cbiAgICBtID0gcy5oZWFwWzEvKlNNQUxMRVNUKi9dOyAvKiBtID0gbm9kZSBvZiBuZXh0IGxlYXN0IGZyZXF1ZW5jeSAqL1xuXG4gICAgcy5oZWFwWy0tcy5oZWFwX21heF0gPSBuOyAvKiBrZWVwIHRoZSBub2RlcyBzb3J0ZWQgYnkgZnJlcXVlbmN5ICovXG4gICAgcy5oZWFwWy0tcy5oZWFwX21heF0gPSBtO1xuXG4gICAgLyogQ3JlYXRlIGEgbmV3IG5vZGUgZmF0aGVyIG9mIG4gYW5kIG0gKi9cbiAgICB0cmVlW25vZGUgKiAyXS8qLkZyZXEqLyA9IHRyZWVbbiAqIDJdLyouRnJlcSovICsgdHJlZVttICogMl0vKi5GcmVxKi87XG4gICAgcy5kZXB0aFtub2RlXSA9IChzLmRlcHRoW25dID49IHMuZGVwdGhbbV0gPyBzLmRlcHRoW25dIDogcy5kZXB0aFttXSkgKyAxO1xuICAgIHRyZWVbbiAqIDIgKyAxXS8qLkRhZCovID0gdHJlZVttICogMiArIDFdLyouRGFkKi8gPSBub2RlO1xuXG4gICAgLyogYW5kIGluc2VydCB0aGUgbmV3IG5vZGUgaW4gdGhlIGhlYXAgKi9cbiAgICBzLmhlYXBbMS8qU01BTExFU1QqL10gPSBub2RlKys7XG4gICAgcHFkb3duaGVhcChzLCB0cmVlLCAxLypTTUFMTEVTVCovKTtcblxuICB9IHdoaWxlIChzLmhlYXBfbGVuID49IDIpO1xuXG4gIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gcy5oZWFwWzEvKlNNQUxMRVNUKi9dO1xuXG4gIC8qIEF0IHRoaXMgcG9pbnQsIHRoZSBmaWVsZHMgZnJlcSBhbmQgZGFkIGFyZSBzZXQuIFdlIGNhbiBub3dcbiAgICogZ2VuZXJhdGUgdGhlIGJpdCBsZW5ndGhzLlxuICAgKi9cbiAgZ2VuX2JpdGxlbihzLCBkZXNjKTtcblxuICAvKiBUaGUgZmllbGQgbGVuIGlzIG5vdyBzZXQsIHdlIGNhbiBnZW5lcmF0ZSB0aGUgYml0IGNvZGVzICovXG4gIGdlbl9jb2Rlcyh0cmVlLCBtYXhfY29kZSwgcy5ibF9jb3VudCk7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2NhbiBhIGxpdGVyYWwgb3IgZGlzdGFuY2UgdHJlZSB0byBkZXRlcm1pbmUgdGhlIGZyZXF1ZW5jaWVzIG9mIHRoZSBjb2Rlc1xuICogaW4gdGhlIGJpdCBsZW5ndGggdHJlZS5cbiAqL1xuY29uc3Qgc2Nhbl90cmVlID0gKHMsIHRyZWUsIG1heF9jb2RlKSA9PlxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGN0X2RhdGEgKnRyZWU7ICAgLyogdGhlIHRyZWUgdG8gYmUgc2Nhbm5lZCAqL1xuLy8gICAgaW50IG1heF9jb2RlOyAgICAvKiBhbmQgaXRzIGxhcmdlc3QgY29kZSBvZiBub24gemVybyBmcmVxdWVuY3kgKi9cbntcbiAgbGV0IG47ICAgICAgICAgICAgICAgICAgICAgLyogaXRlcmF0ZXMgb3ZlciBhbGwgdHJlZSBlbGVtZW50cyAqL1xuICBsZXQgcHJldmxlbiA9IC0xOyAgICAgICAgICAvKiBsYXN0IGVtaXR0ZWQgbGVuZ3RoICovXG4gIGxldCBjdXJsZW47ICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBvZiBjdXJyZW50IGNvZGUgKi9cblxuICBsZXQgbmV4dGxlbiA9IHRyZWVbMCAqIDIgKyAxXS8qLkxlbiovOyAvKiBsZW5ndGggb2YgbmV4dCBjb2RlICovXG5cbiAgbGV0IGNvdW50ID0gMDsgICAgICAgICAgICAgLyogcmVwZWF0IGNvdW50IG9mIHRoZSBjdXJyZW50IGNvZGUgKi9cbiAgbGV0IG1heF9jb3VudCA9IDc7ICAgICAgICAgLyogbWF4IHJlcGVhdCBjb3VudCAqL1xuICBsZXQgbWluX2NvdW50ID0gNDsgICAgICAgICAvKiBtaW4gcmVwZWF0IGNvdW50ICovXG5cbiAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgbWluX2NvdW50ID0gMztcbiAgfVxuICB0cmVlWyhtYXhfY29kZSArIDEpICogMiArIDFdLyouTGVuKi8gPSAweGZmZmY7IC8qIGd1YXJkICovXG5cbiAgZm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgY3VybGVuID0gbmV4dGxlbjtcbiAgICBuZXh0bGVuID0gdHJlZVsobiArIDEpICogMiArIDFdLyouTGVuKi87XG5cbiAgICBpZiAoKytjb3VudCA8IG1heF9jb3VudCAmJiBjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8IG1pbl9jb3VudCkge1xuICAgICAgcy5ibF90cmVlW2N1cmxlbiAqIDJdLyouRnJlcSovICs9IGNvdW50O1xuXG4gICAgfSBlbHNlIGlmIChjdXJsZW4gIT09IDApIHtcblxuICAgICAgaWYgKGN1cmxlbiAhPT0gcHJldmxlbikgeyBzLmJsX3RyZWVbY3VybGVuICogMl0vKi5GcmVxKi8rKzsgfVxuICAgICAgcy5ibF90cmVlW1JFUF8zXzYgKiAyXS8qLkZyZXEqLysrO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8PSAxMCkge1xuICAgICAgcy5ibF90cmVlW1JFUFpfM18xMCAqIDJdLyouRnJlcSovKys7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgcy5ibF90cmVlW1JFUFpfMTFfMTM4ICogMl0vKi5GcmVxKi8rKztcbiAgICB9XG5cbiAgICBjb3VudCA9IDA7XG4gICAgcHJldmxlbiA9IGN1cmxlbjtcblxuICAgIGlmIChuZXh0bGVuID09PSAwKSB7XG4gICAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgICBtaW5fY291bnQgPSAzO1xuXG4gICAgfSBlbHNlIGlmIChjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIG1heF9jb3VudCA9IDY7XG4gICAgICBtaW5fY291bnQgPSAzO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIG1heF9jb3VudCA9IDc7XG4gICAgICBtaW5fY291bnQgPSA0O1xuICAgIH1cbiAgfVxufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgYSBsaXRlcmFsIG9yIGRpc3RhbmNlIHRyZWUgaW4gY29tcHJlc3NlZCBmb3JtLCB1c2luZyB0aGUgY29kZXMgaW5cbiAqIGJsX3RyZWUuXG4gKi9cbmNvbnN0IHNlbmRfdHJlZSA9IChzLCB0cmVlLCBtYXhfY29kZSkgPT5cbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBjdF9kYXRhICp0cmVlOyAvKiB0aGUgdHJlZSB0byBiZSBzY2FubmVkICovXG4vLyAgICBpbnQgbWF4X2NvZGU7ICAgICAgIC8qIGFuZCBpdHMgbGFyZ2VzdCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xue1xuICBsZXQgbjsgICAgICAgICAgICAgICAgICAgICAvKiBpdGVyYXRlcyBvdmVyIGFsbCB0cmVlIGVsZW1lbnRzICovXG4gIGxldCBwcmV2bGVuID0gLTE7ICAgICAgICAgIC8qIGxhc3QgZW1pdHRlZCBsZW5ndGggKi9cbiAgbGV0IGN1cmxlbjsgICAgICAgICAgICAgICAgLyogbGVuZ3RoIG9mIGN1cnJlbnQgY29kZSAqL1xuXG4gIGxldCBuZXh0bGVuID0gdHJlZVswICogMiArIDFdLyouTGVuKi87IC8qIGxlbmd0aCBvZiBuZXh0IGNvZGUgKi9cblxuICBsZXQgY291bnQgPSAwOyAgICAgICAgICAgICAvKiByZXBlYXQgY291bnQgb2YgdGhlIGN1cnJlbnQgY29kZSAqL1xuICBsZXQgbWF4X2NvdW50ID0gNzsgICAgICAgICAvKiBtYXggcmVwZWF0IGNvdW50ICovXG4gIGxldCBtaW5fY291bnQgPSA0OyAgICAgICAgIC8qIG1pbiByZXBlYXQgY291bnQgKi9cblxuICAvKiB0cmVlW21heF9jb2RlKzFdLkxlbiA9IC0xOyAqLyAgLyogZ3VhcmQgYWxyZWFkeSBzZXQgKi9cbiAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgbWluX2NvdW50ID0gMztcbiAgfVxuXG4gIGZvciAobiA9IDA7IG4gPD0gbWF4X2NvZGU7IG4rKykge1xuICAgIGN1cmxlbiA9IG5leHRsZW47XG4gICAgbmV4dGxlbiA9IHRyZWVbKG4gKyAxKSAqIDIgKyAxXS8qLkxlbiovO1xuXG4gICAgaWYgKCsrY291bnQgPCBtYXhfY291bnQgJiYgY3VybGVuID09PSBuZXh0bGVuKSB7XG4gICAgICBjb250aW51ZTtcblxuICAgIH0gZWxzZSBpZiAoY291bnQgPCBtaW5fY291bnQpIHtcbiAgICAgIGRvIHsgc2VuZF9jb2RlKHMsIGN1cmxlbiwgcy5ibF90cmVlKTsgfSB3aGlsZSAoLS1jb3VudCAhPT0gMCk7XG5cbiAgICB9IGVsc2UgaWYgKGN1cmxlbiAhPT0gMCkge1xuICAgICAgaWYgKGN1cmxlbiAhPT0gcHJldmxlbikge1xuICAgICAgICBzZW5kX2NvZGUocywgY3VybGVuLCBzLmJsX3RyZWUpO1xuICAgICAgICBjb3VudC0tO1xuICAgICAgfVxuICAgICAgLy9Bc3NlcnQoY291bnQgPj0gMyAmJiBjb3VudCA8PSA2LCBcIiAzXzY/XCIpO1xuICAgICAgc2VuZF9jb2RlKHMsIFJFUF8zXzYsIHMuYmxfdHJlZSk7XG4gICAgICBzZW5kX2JpdHMocywgY291bnQgLSAzLCAyKTtcblxuICAgIH0gZWxzZSBpZiAoY291bnQgPD0gMTApIHtcbiAgICAgIHNlbmRfY29kZShzLCBSRVBaXzNfMTAsIHMuYmxfdHJlZSk7XG4gICAgICBzZW5kX2JpdHMocywgY291bnQgLSAzLCAzKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICBzZW5kX2NvZGUocywgUkVQWl8xMV8xMzgsIHMuYmxfdHJlZSk7XG4gICAgICBzZW5kX2JpdHMocywgY291bnQgLSAxMSwgNyk7XG4gICAgfVxuXG4gICAgY291bnQgPSAwO1xuICAgIHByZXZsZW4gPSBjdXJsZW47XG4gICAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICAgIG1heF9jb3VudCA9IDEzODtcbiAgICAgIG1pbl9jb3VudCA9IDM7XG5cbiAgICB9IGVsc2UgaWYgKGN1cmxlbiA9PT0gbmV4dGxlbikge1xuICAgICAgbWF4X2NvdW50ID0gNjtcbiAgICAgIG1pbl9jb3VudCA9IDM7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgbWF4X2NvdW50ID0gNztcbiAgICAgIG1pbl9jb3VudCA9IDQ7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29uc3RydWN0IHRoZSBIdWZmbWFuIHRyZWUgZm9yIHRoZSBiaXQgbGVuZ3RocyBhbmQgcmV0dXJuIHRoZSBpbmRleCBpblxuICogYmxfb3JkZXIgb2YgdGhlIGxhc3QgYml0IGxlbmd0aCBjb2RlIHRvIHNlbmQuXG4gKi9cbmNvbnN0IGJ1aWxkX2JsX3RyZWUgPSAocykgPT4ge1xuXG4gIGxldCBtYXhfYmxpbmRleDsgIC8qIGluZGV4IG9mIGxhc3QgYml0IGxlbmd0aCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXEgKi9cblxuICAvKiBEZXRlcm1pbmUgdGhlIGJpdCBsZW5ndGggZnJlcXVlbmNpZXMgZm9yIGxpdGVyYWwgYW5kIGRpc3RhbmNlIHRyZWVzICovXG4gIHNjYW5fdHJlZShzLCBzLmR5bl9sdHJlZSwgcy5sX2Rlc2MubWF4X2NvZGUpO1xuICBzY2FuX3RyZWUocywgcy5keW5fZHRyZWUsIHMuZF9kZXNjLm1heF9jb2RlKTtcblxuICAvKiBCdWlsZCB0aGUgYml0IGxlbmd0aCB0cmVlOiAqL1xuICBidWlsZF90cmVlKHMsIHMuYmxfZGVzYyk7XG4gIC8qIG9wdF9sZW4gbm93IGluY2x1ZGVzIHRoZSBsZW5ndGggb2YgdGhlIHRyZWUgcmVwcmVzZW50YXRpb25zLCBleGNlcHRcbiAgICogdGhlIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGhzIGNvZGVzIGFuZCB0aGUgNSs1KzQgYml0cyBmb3IgdGhlIGNvdW50cy5cbiAgICovXG5cbiAgLyogRGV0ZXJtaW5lIHRoZSBudW1iZXIgb2YgYml0IGxlbmd0aCBjb2RlcyB0byBzZW5kLiBUaGUgcGt6aXAgZm9ybWF0XG4gICAqIHJlcXVpcmVzIHRoYXQgYXQgbGVhc3QgNCBiaXQgbGVuZ3RoIGNvZGVzIGJlIHNlbnQuIChhcHBub3RlLnR4dCBzYXlzXG4gICAqIDMgYnV0IHRoZSBhY3R1YWwgdmFsdWUgdXNlZCBpcyA0LilcbiAgICovXG4gIGZvciAobWF4X2JsaW5kZXggPSBCTF9DT0RFUyAtIDE7IG1heF9ibGluZGV4ID49IDM7IG1heF9ibGluZGV4LS0pIHtcbiAgICBpZiAocy5ibF90cmVlW2JsX29yZGVyW21heF9ibGluZGV4XSAqIDIgKyAxXS8qLkxlbiovICE9PSAwKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgLyogVXBkYXRlIG9wdF9sZW4gdG8gaW5jbHVkZSB0aGUgYml0IGxlbmd0aCB0cmVlIGFuZCBjb3VudHMgKi9cbiAgcy5vcHRfbGVuICs9IDMgKiAobWF4X2JsaW5kZXggKyAxKSArIDUgKyA1ICsgNDtcbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5keW4gdHJlZXM6IGR5biAlbGQsIHN0YXQgJWxkXCIsXG4gIC8vICAgICAgICBzLT5vcHRfbGVuLCBzLT5zdGF0aWNfbGVuKSk7XG5cbiAgcmV0dXJuIG1heF9ibGluZGV4O1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgdGhlIGhlYWRlciBmb3IgYSBibG9jayB1c2luZyBkeW5hbWljIEh1ZmZtYW4gdHJlZXM6IHRoZSBjb3VudHMsIHRoZVxuICogbGVuZ3RocyBvZiB0aGUgYml0IGxlbmd0aCBjb2RlcywgdGhlIGxpdGVyYWwgdHJlZSBhbmQgdGhlIGRpc3RhbmNlIHRyZWUuXG4gKiBJTiBhc3NlcnRpb246IGxjb2RlcyA+PSAyNTcsIGRjb2RlcyA+PSAxLCBibGNvZGVzID49IDQuXG4gKi9cbmNvbnN0IHNlbmRfYWxsX3RyZWVzID0gKHMsIGxjb2RlcywgZGNvZGVzLCBibGNvZGVzKSA9PlxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGludCBsY29kZXMsIGRjb2RlcywgYmxjb2RlczsgLyogbnVtYmVyIG9mIGNvZGVzIGZvciBlYWNoIHRyZWUgKi9cbntcbiAgbGV0IHJhbms7ICAgICAgICAgICAgICAgICAgICAvKiBpbmRleCBpbiBibF9vcmRlciAqL1xuXG4gIC8vQXNzZXJ0IChsY29kZXMgPj0gMjU3ICYmIGRjb2RlcyA+PSAxICYmIGJsY29kZXMgPj0gNCwgXCJub3QgZW5vdWdoIGNvZGVzXCIpO1xuICAvL0Fzc2VydCAobGNvZGVzIDw9IExfQ09ERVMgJiYgZGNvZGVzIDw9IERfQ09ERVMgJiYgYmxjb2RlcyA8PSBCTF9DT0RFUyxcbiAgLy8gICAgICAgIFwidG9vIG1hbnkgY29kZXNcIik7XG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuYmwgY291bnRzOiBcIikpO1xuICBzZW5kX2JpdHMocywgbGNvZGVzIC0gMjU3LCA1KTsgLyogbm90ICsyNTUgYXMgc3RhdGVkIGluIGFwcG5vdGUudHh0ICovXG4gIHNlbmRfYml0cyhzLCBkY29kZXMgLSAxLCAgIDUpO1xuICBzZW5kX2JpdHMocywgYmxjb2RlcyAtIDQsICA0KTsgLyogbm90IC0zIGFzIHN0YXRlZCBpbiBhcHBub3RlLnR4dCAqL1xuICBmb3IgKHJhbmsgPSAwOyByYW5rIDwgYmxjb2RlczsgcmFuaysrKSB7XG4gICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5ibCBjb2RlICUyZCBcIiwgYmxfb3JkZXJbcmFua10pKTtcbiAgICBzZW5kX2JpdHMocywgcy5ibF90cmVlW2JsX29yZGVyW3JhbmtdICogMiArIDFdLyouTGVuKi8sIDMpO1xuICB9XG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuYmwgdHJlZTogc2VudCAlbGRcIiwgcy0+Yml0c19zZW50KSk7XG5cbiAgc2VuZF90cmVlKHMsIHMuZHluX2x0cmVlLCBsY29kZXMgLSAxKTsgLyogbGl0ZXJhbCB0cmVlICovXG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxubGl0IHRyZWU6IHNlbnQgJWxkXCIsIHMtPmJpdHNfc2VudCkpO1xuXG4gIHNlbmRfdHJlZShzLCBzLmR5bl9kdHJlZSwgZGNvZGVzIC0gMSk7IC8qIGRpc3RhbmNlIHRyZWUgKi9cbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5kaXN0IHRyZWU6IHNlbnQgJWxkXCIsIHMtPmJpdHNfc2VudCkpO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENoZWNrIGlmIHRoZSBkYXRhIHR5cGUgaXMgVEVYVCBvciBCSU5BUlksIHVzaW5nIHRoZSBmb2xsb3dpbmcgYWxnb3JpdGhtOlxuICogLSBURVhUIGlmIHRoZSB0d28gY29uZGl0aW9ucyBiZWxvdyBhcmUgc2F0aXNmaWVkOlxuICogICAgYSkgVGhlcmUgYXJlIG5vIG5vbi1wb3J0YWJsZSBjb250cm9sIGNoYXJhY3RlcnMgYmVsb25naW5nIHRvIHRoZVxuICogICAgICAgXCJibGFjayBsaXN0XCIgKDAuLjYsIDE0Li4yNSwgMjguLjMxKS5cbiAqICAgIGIpIFRoZXJlIGlzIGF0IGxlYXN0IG9uZSBwcmludGFibGUgY2hhcmFjdGVyIGJlbG9uZ2luZyB0byB0aGVcbiAqICAgICAgIFwid2hpdGUgbGlzdFwiICg5IHtUQUJ9LCAxMCB7TEZ9LCAxMyB7Q1J9LCAzMi4uMjU1KS5cbiAqIC0gQklOQVJZIG90aGVyd2lzZS5cbiAqIC0gVGhlIGZvbGxvd2luZyBwYXJ0aWFsbHktcG9ydGFibGUgY29udHJvbCBjaGFyYWN0ZXJzIGZvcm0gYVxuICogICBcImdyYXkgbGlzdFwiIHRoYXQgaXMgaWdub3JlZCBpbiB0aGlzIGRldGVjdGlvbiBhbGdvcml0aG06XG4gKiAgICg3IHtCRUx9LCA4IHtCU30sIDExIHtWVH0sIDEyIHtGRn0sIDI2IHtTVUJ9LCAyNyB7RVNDfSkuXG4gKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZHMgRnJlcSBvZiBkeW5fbHRyZWUgYXJlIHNldC5cbiAqL1xuY29uc3QgZGV0ZWN0X2RhdGFfdHlwZSA9IChzKSA9PiB7XG4gIC8qIGJsYWNrX21hc2sgaXMgdGhlIGJpdCBtYXNrIG9mIGJsYWNrLWxpc3RlZCBieXRlc1xuICAgKiBzZXQgYml0cyAwLi42LCAxNC4uMjUsIGFuZCAyOC4uMzFcbiAgICogMHhmM2ZmYzA3ZiA9IGJpbmFyeSAxMTExMDAxMTExMTExMTExMTEwMDAwMDAwMTExMTExMVxuICAgKi9cbiAgbGV0IGJsYWNrX21hc2sgPSAweGYzZmZjMDdmO1xuICBsZXQgbjtcblxuICAvKiBDaGVjayBmb3Igbm9uLXRleHR1YWwgKFwiYmxhY2stbGlzdGVkXCIpIGJ5dGVzLiAqL1xuICBmb3IgKG4gPSAwOyBuIDw9IDMxOyBuKyssIGJsYWNrX21hc2sgPj4+PSAxKSB7XG4gICAgaWYgKChibGFja19tYXNrICYgMSkgJiYgKHMuZHluX2x0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkpIHtcbiAgICAgIHJldHVybiBaX0JJTkFSWTtcbiAgICB9XG4gIH1cblxuICAvKiBDaGVjayBmb3IgdGV4dHVhbCAoXCJ3aGl0ZS1saXN0ZWRcIikgYnl0ZXMuICovXG4gIGlmIChzLmR5bl9sdHJlZVs5ICogMl0vKi5GcmVxKi8gIT09IDAgfHwgcy5keW5fbHRyZWVbMTAgKiAyXS8qLkZyZXEqLyAhPT0gMCB8fFxuICAgICAgcy5keW5fbHRyZWVbMTMgKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgIHJldHVybiBaX1RFWFQ7XG4gIH1cbiAgZm9yIChuID0gMzI7IG4gPCBMSVRFUkFMUzsgbisrKSB7XG4gICAgaWYgKHMuZHluX2x0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgICAgcmV0dXJuIFpfVEVYVDtcbiAgICB9XG4gIH1cblxuICAvKiBUaGVyZSBhcmUgbm8gXCJibGFjay1saXN0ZWRcIiBvciBcIndoaXRlLWxpc3RlZFwiIGJ5dGVzOlxuICAgKiB0aGlzIHN0cmVhbSBlaXRoZXIgaXMgZW1wdHkgb3IgaGFzIHRvbGVyYXRlZCAoXCJncmF5LWxpc3RlZFwiKSBieXRlcyBvbmx5LlxuICAgKi9cbiAgcmV0dXJuIFpfQklOQVJZO1xufTtcblxuXG5sZXQgc3RhdGljX2luaXRfZG9uZSA9IGZhbHNlO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEluaXRpYWxpemUgdGhlIHRyZWUgZGF0YSBzdHJ1Y3R1cmVzIGZvciBhIG5ldyB6bGliIHN0cmVhbS5cbiAqL1xuY29uc3QgX3RyX2luaXQgPSAocykgPT5cbntcblxuICBpZiAoIXN0YXRpY19pbml0X2RvbmUpIHtcbiAgICB0cl9zdGF0aWNfaW5pdCgpO1xuICAgIHN0YXRpY19pbml0X2RvbmUgPSB0cnVlO1xuICB9XG5cbiAgcy5sX2Rlc2MgID0gbmV3IFRyZWVEZXNjKHMuZHluX2x0cmVlLCBzdGF0aWNfbF9kZXNjKTtcbiAgcy5kX2Rlc2MgID0gbmV3IFRyZWVEZXNjKHMuZHluX2R0cmVlLCBzdGF0aWNfZF9kZXNjKTtcbiAgcy5ibF9kZXNjID0gbmV3IFRyZWVEZXNjKHMuYmxfdHJlZSwgc3RhdGljX2JsX2Rlc2MpO1xuXG4gIHMuYmlfYnVmID0gMDtcbiAgcy5iaV92YWxpZCA9IDA7XG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgZmlyc3QgYmxvY2sgb2YgdGhlIGZpcnN0IGZpbGU6ICovXG4gIGluaXRfYmxvY2socyk7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCBhIHN0b3JlZCBibG9ja1xuICovXG5jb25zdCBfdHJfc3RvcmVkX2Jsb2NrID0gKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgbGFzdCkgPT5cbi8vRGVmbGF0ZVN0YXRlICpzO1xuLy9jaGFyZiAqYnVmOyAgICAgICAvKiBpbnB1dCBibG9jayAqL1xuLy91bGcgc3RvcmVkX2xlbjsgICAvKiBsZW5ndGggb2YgaW5wdXQgYmxvY2sgKi9cbi8vaW50IGxhc3Q7ICAgICAgICAgLyogb25lIGlmIHRoaXMgaXMgdGhlIGxhc3QgYmxvY2sgZm9yIGEgZmlsZSAqL1xue1xuICBzZW5kX2JpdHMocywgKFNUT1JFRF9CTE9DSyA8PCAxKSArIChsYXN0ID8gMSA6IDApLCAzKTsgICAgLyogc2VuZCBibG9jayB0eXBlICovXG4gIGNvcHlfYmxvY2socywgYnVmLCBzdG9yZWRfbGVuLCB0cnVlKTsgLyogd2l0aCBoZWFkZXIgKi9cbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIG9uZSBlbXB0eSBzdGF0aWMgYmxvY2sgdG8gZ2l2ZSBlbm91Z2ggbG9va2FoZWFkIGZvciBpbmZsYXRlLlxuICogVGhpcyB0YWtlcyAxMCBiaXRzLCBvZiB3aGljaCA3IG1heSByZW1haW4gaW4gdGhlIGJpdCBidWZmZXIuXG4gKi9cbmNvbnN0IF90cl9hbGlnbiA9IChzKSA9PiB7XG4gIHNlbmRfYml0cyhzLCBTVEFUSUNfVFJFRVMgPDwgMSwgMyk7XG4gIHNlbmRfY29kZShzLCBFTkRfQkxPQ0ssIHN0YXRpY19sdHJlZSk7XG4gIGJpX2ZsdXNoKHMpO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIERldGVybWluZSB0aGUgYmVzdCBlbmNvZGluZyBmb3IgdGhlIGN1cnJlbnQgYmxvY2s6IGR5bmFtaWMgdHJlZXMsIHN0YXRpY1xuICogdHJlZXMgb3Igc3RvcmUsIGFuZCBvdXRwdXQgdGhlIGVuY29kZWQgYmxvY2sgdG8gdGhlIHppcCBmaWxlLlxuICovXG5jb25zdCBfdHJfZmx1c2hfYmxvY2sgPSAocywgYnVmLCBzdG9yZWRfbGVuLCBsYXN0KSA9PlxuLy9EZWZsYXRlU3RhdGUgKnM7XG4vL2NoYXJmICpidWY7ICAgICAgIC8qIGlucHV0IGJsb2NrLCBvciBOVUxMIGlmIHRvbyBvbGQgKi9cbi8vdWxnIHN0b3JlZF9sZW47ICAgLyogbGVuZ3RoIG9mIGlucHV0IGJsb2NrICovXG4vL2ludCBsYXN0OyAgICAgICAgIC8qIG9uZSBpZiB0aGlzIGlzIHRoZSBsYXN0IGJsb2NrIGZvciBhIGZpbGUgKi9cbntcbiAgbGV0IG9wdF9sZW5iLCBzdGF0aWNfbGVuYjsgIC8qIG9wdF9sZW4gYW5kIHN0YXRpY19sZW4gaW4gYnl0ZXMgKi9cbiAgbGV0IG1heF9ibGluZGV4ID0gMDsgICAgICAgIC8qIGluZGV4IG9mIGxhc3QgYml0IGxlbmd0aCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXEgKi9cblxuICAvKiBCdWlsZCB0aGUgSHVmZm1hbiB0cmVlcyB1bmxlc3MgYSBzdG9yZWQgYmxvY2sgaXMgZm9yY2VkICovXG4gIGlmIChzLmxldmVsID4gMCkge1xuXG4gICAgLyogQ2hlY2sgaWYgdGhlIGZpbGUgaXMgYmluYXJ5IG9yIHRleHQgKi9cbiAgICBpZiAocy5zdHJtLmRhdGFfdHlwZSA9PT0gWl9VTktOT1dOKSB7XG4gICAgICBzLnN0cm0uZGF0YV90eXBlID0gZGV0ZWN0X2RhdGFfdHlwZShzKTtcbiAgICB9XG5cbiAgICAvKiBDb25zdHJ1Y3QgdGhlIGxpdGVyYWwgYW5kIGRpc3RhbmNlIHRyZWVzICovXG4gICAgYnVpbGRfdHJlZShzLCBzLmxfZGVzYyk7XG4gICAgLy8gVHJhY2V2KChzdGRlcnIsIFwiXFxubGl0IGRhdGE6IGR5biAlbGQsIHN0YXQgJWxkXCIsIHMtPm9wdF9sZW4sXG4gICAgLy8gICAgICAgIHMtPnN0YXRpY19sZW4pKTtcblxuICAgIGJ1aWxkX3RyZWUocywgcy5kX2Rlc2MpO1xuICAgIC8vIFRyYWNldigoc3RkZXJyLCBcIlxcbmRpc3QgZGF0YTogZHluICVsZCwgc3RhdCAlbGRcIiwgcy0+b3B0X2xlbixcbiAgICAvLyAgICAgICAgcy0+c3RhdGljX2xlbikpO1xuICAgIC8qIEF0IHRoaXMgcG9pbnQsIG9wdF9sZW4gYW5kIHN0YXRpY19sZW4gYXJlIHRoZSB0b3RhbCBiaXQgbGVuZ3RocyBvZlxuICAgICAqIHRoZSBjb21wcmVzc2VkIGJsb2NrIGRhdGEsIGV4Y2x1ZGluZyB0aGUgdHJlZSByZXByZXNlbnRhdGlvbnMuXG4gICAgICovXG5cbiAgICAvKiBCdWlsZCB0aGUgYml0IGxlbmd0aCB0cmVlIGZvciB0aGUgYWJvdmUgdHdvIHRyZWVzLCBhbmQgZ2V0IHRoZSBpbmRleFxuICAgICAqIGluIGJsX29yZGVyIG9mIHRoZSBsYXN0IGJpdCBsZW5ndGggY29kZSB0byBzZW5kLlxuICAgICAqL1xuICAgIG1heF9ibGluZGV4ID0gYnVpbGRfYmxfdHJlZShzKTtcblxuICAgIC8qIERldGVybWluZSB0aGUgYmVzdCBlbmNvZGluZy4gQ29tcHV0ZSB0aGUgYmxvY2sgbGVuZ3RocyBpbiBieXRlcy4gKi9cbiAgICBvcHRfbGVuYiA9IChzLm9wdF9sZW4gKyAzICsgNykgPj4+IDM7XG4gICAgc3RhdGljX2xlbmIgPSAocy5zdGF0aWNfbGVuICsgMyArIDcpID4+PiAzO1xuXG4gICAgLy8gVHJhY2V2KChzdGRlcnIsIFwiXFxub3B0ICVsdSglbHUpIHN0YXQgJWx1KCVsdSkgc3RvcmVkICVsdSBsaXQgJXUgXCIsXG4gICAgLy8gICAgICAgIG9wdF9sZW5iLCBzLT5vcHRfbGVuLCBzdGF0aWNfbGVuYiwgcy0+c3RhdGljX2xlbiwgc3RvcmVkX2xlbixcbiAgICAvLyAgICAgICAgcy0+bGFzdF9saXQpKTtcblxuICAgIGlmIChzdGF0aWNfbGVuYiA8PSBvcHRfbGVuYikgeyBvcHRfbGVuYiA9IHN0YXRpY19sZW5iOyB9XG5cbiAgfSBlbHNlIHtcbiAgICAvLyBBc3NlcnQoYnVmICE9IChjaGFyKikwLCBcImxvc3QgYnVmXCIpO1xuICAgIG9wdF9sZW5iID0gc3RhdGljX2xlbmIgPSBzdG9yZWRfbGVuICsgNTsgLyogZm9yY2UgYSBzdG9yZWQgYmxvY2sgKi9cbiAgfVxuXG4gIGlmICgoc3RvcmVkX2xlbiArIDQgPD0gb3B0X2xlbmIpICYmIChidWYgIT09IC0xKSkge1xuICAgIC8qIDQ6IHR3byB3b3JkcyBmb3IgdGhlIGxlbmd0aHMgKi9cblxuICAgIC8qIFRoZSB0ZXN0IGJ1ZiAhPSBOVUxMIGlzIG9ubHkgbmVjZXNzYXJ5IGlmIExJVF9CVUZTSVpFID4gV1NJWkUuXG4gICAgICogT3RoZXJ3aXNlIHdlIGNhbid0IGhhdmUgcHJvY2Vzc2VkIG1vcmUgdGhhbiBXU0laRSBpbnB1dCBieXRlcyBzaW5jZVxuICAgICAqIHRoZSBsYXN0IGJsb2NrIGZsdXNoLCBiZWNhdXNlIGNvbXByZXNzaW9uIHdvdWxkIGhhdmUgYmVlblxuICAgICAqIHN1Y2Nlc3NmdWwuIElmIExJVF9CVUZTSVpFIDw9IFdTSVpFLCBpdCBpcyBuZXZlciB0b28gbGF0ZSB0b1xuICAgICAqIHRyYW5zZm9ybSBhIGJsb2NrIGludG8gYSBzdG9yZWQgYmxvY2suXG4gICAgICovXG4gICAgX3RyX3N0b3JlZF9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIGxhc3QpO1xuXG4gIH0gZWxzZSBpZiAocy5zdHJhdGVneSA9PT0gWl9GSVhFRCB8fCBzdGF0aWNfbGVuYiA9PT0gb3B0X2xlbmIpIHtcblxuICAgIHNlbmRfYml0cyhzLCAoU1RBVElDX1RSRUVTIDw8IDEpICsgKGxhc3QgPyAxIDogMCksIDMpO1xuICAgIGNvbXByZXNzX2Jsb2NrKHMsIHN0YXRpY19sdHJlZSwgc3RhdGljX2R0cmVlKTtcblxuICB9IGVsc2Uge1xuICAgIHNlbmRfYml0cyhzLCAoRFlOX1RSRUVTIDw8IDEpICsgKGxhc3QgPyAxIDogMCksIDMpO1xuICAgIHNlbmRfYWxsX3RyZWVzKHMsIHMubF9kZXNjLm1heF9jb2RlICsgMSwgcy5kX2Rlc2MubWF4X2NvZGUgKyAxLCBtYXhfYmxpbmRleCArIDEpO1xuICAgIGNvbXByZXNzX2Jsb2NrKHMsIHMuZHluX2x0cmVlLCBzLmR5bl9kdHJlZSk7XG4gIH1cbiAgLy8gQXNzZXJ0IChzLT5jb21wcmVzc2VkX2xlbiA9PSBzLT5iaXRzX3NlbnQsIFwiYmFkIGNvbXByZXNzZWQgc2l6ZVwiKTtcbiAgLyogVGhlIGFib3ZlIGNoZWNrIGlzIG1hZGUgbW9kIDJeMzIsIGZvciBmaWxlcyBsYXJnZXIgdGhhbiA1MTIgTUJcbiAgICogYW5kIHVMb25nIGltcGxlbWVudGVkIG9uIDMyIGJpdHMuXG4gICAqL1xuICBpbml0X2Jsb2NrKHMpO1xuXG4gIGlmIChsYXN0KSB7XG4gICAgYmlfd2luZHVwKHMpO1xuICB9XG4gIC8vIFRyYWNldigoc3RkZXJyLFwiXFxuY29tcHJsZW4gJWx1KCVsdSkgXCIsIHMtPmNvbXByZXNzZWRfbGVuPj4zLFxuICAvLyAgICAgICBzLT5jb21wcmVzc2VkX2xlbi03Kmxhc3QpKTtcbn07XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2F2ZSB0aGUgbWF0Y2ggaW5mbyBhbmQgdGFsbHkgdGhlIGZyZXF1ZW5jeSBjb3VudHMuIFJldHVybiB0cnVlIGlmXG4gKiB0aGUgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQuXG4gKi9cbmNvbnN0IF90cl90YWxseSA9IChzLCBkaXN0LCBsYykgPT5cbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICB1bnNpZ25lZCBkaXN0OyAgLyogZGlzdGFuY2Ugb2YgbWF0Y2hlZCBzdHJpbmcgKi9cbi8vICAgIHVuc2lnbmVkIGxjOyAgICAvKiBtYXRjaCBsZW5ndGgtTUlOX01BVENIIG9yIHVubWF0Y2hlZCBjaGFyIChpZiBkaXN0PT0wKSAqL1xue1xuICAvL2xldCBvdXRfbGVuZ3RoLCBpbl9sZW5ndGgsIGRjb2RlO1xuXG4gIHMucGVuZGluZ19idWZbcy5kX2J1ZiArIHMubGFzdF9saXQgKiAyXSAgICAgPSAoZGlzdCA+Pj4gOCkgJiAweGZmO1xuICBzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBzLmxhc3RfbGl0ICogMiArIDFdID0gZGlzdCAmIDB4ZmY7XG5cbiAgcy5wZW5kaW5nX2J1ZltzLmxfYnVmICsgcy5sYXN0X2xpdF0gPSBsYyAmIDB4ZmY7XG4gIHMubGFzdF9saXQrKztcblxuICBpZiAoZGlzdCA9PT0gMCkge1xuICAgIC8qIGxjIGlzIHRoZSB1bm1hdGNoZWQgY2hhciAqL1xuICAgIHMuZHluX2x0cmVlW2xjICogMl0vKi5GcmVxKi8rKztcbiAgfSBlbHNlIHtcbiAgICBzLm1hdGNoZXMrKztcbiAgICAvKiBIZXJlLCBsYyBpcyB0aGUgbWF0Y2ggbGVuZ3RoIC0gTUlOX01BVENIICovXG4gICAgZGlzdC0tOyAgICAgICAgICAgICAvKiBkaXN0ID0gbWF0Y2ggZGlzdGFuY2UgLSAxICovXG4gICAgLy9Bc3NlcnQoKHVzaClkaXN0IDwgKHVzaClNQVhfRElTVChzKSAmJlxuICAgIC8vICAgICAgICh1c2gpbGMgPD0gKHVzaCkoTUFYX01BVENILU1JTl9NQVRDSCkgJiZcbiAgICAvLyAgICAgICAodXNoKWRfY29kZShkaXN0KSA8ICh1c2gpRF9DT0RFUywgIFwiX3RyX3RhbGx5OiBiYWQgbWF0Y2hcIik7XG5cbiAgICBzLmR5bl9sdHJlZVsoX2xlbmd0aF9jb2RlW2xjXSArIExJVEVSQUxTICsgMSkgKiAyXS8qLkZyZXEqLysrO1xuICAgIHMuZHluX2R0cmVlW2RfY29kZShkaXN0KSAqIDJdLyouRnJlcSovKys7XG4gIH1cblxuLy8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhdWx0cyxcbi8vIGRvbid0IGVuYWJsZSBpdCBmb3IgYmluYXJ5IGNvbXBhdGliaWxpdHlcblxuLy8jaWZkZWYgVFJVTkNBVEVfQkxPQ0tcbi8vICAvKiBUcnkgdG8gZ3Vlc3MgaWYgaXQgaXMgcHJvZml0YWJsZSB0byBzdG9wIHRoZSBjdXJyZW50IGJsb2NrIGhlcmUgKi9cbi8vICBpZiAoKHMubGFzdF9saXQgJiAweDFmZmYpID09PSAwICYmIHMubGV2ZWwgPiAyKSB7XG4vLyAgICAvKiBDb21wdXRlIGFuIHVwcGVyIGJvdW5kIGZvciB0aGUgY29tcHJlc3NlZCBsZW5ndGggKi9cbi8vICAgIG91dF9sZW5ndGggPSBzLmxhc3RfbGl0Kjg7XG4vLyAgICBpbl9sZW5ndGggPSBzLnN0cnN0YXJ0IC0gcy5ibG9ja19zdGFydDtcbi8vXG4vLyAgICBmb3IgKGRjb2RlID0gMDsgZGNvZGUgPCBEX0NPREVTOyBkY29kZSsrKSB7XG4vLyAgICAgIG91dF9sZW5ndGggKz0gcy5keW5fZHRyZWVbZGNvZGUqMl0vKi5GcmVxKi8gKiAoNSArIGV4dHJhX2RiaXRzW2Rjb2RlXSk7XG4vLyAgICB9XG4vLyAgICBvdXRfbGVuZ3RoID4+Pj0gMztcbi8vICAgIC8vVHJhY2V2KChzdGRlcnIsXCJcXG5sYXN0X2xpdCAldSwgaW4gJWxkLCBvdXQgfiVsZCglbGQlJSkgXCIsXG4vLyAgICAvLyAgICAgICBzLT5sYXN0X2xpdCwgaW5fbGVuZ3RoLCBvdXRfbGVuZ3RoLFxuLy8gICAgLy8gICAgICAgMTAwTCAtIG91dF9sZW5ndGgqMTAwTC9pbl9sZW5ndGgpKTtcbi8vICAgIGlmIChzLm1hdGNoZXMgPCAocy5sYXN0X2xpdD4+MSkvKmludCAvMiovICYmIG91dF9sZW5ndGggPCAoaW5fbGVuZ3RoPj4xKS8qaW50IC8yKi8pIHtcbi8vICAgICAgcmV0dXJuIHRydWU7XG4vLyAgICB9XG4vLyAgfVxuLy8jZW5kaWZcblxuICByZXR1cm4gKHMubGFzdF9saXQgPT09IHMubGl0X2J1ZnNpemUgLSAxKTtcbiAgLyogV2UgYXZvaWQgZXF1YWxpdHkgd2l0aCBsaXRfYnVmc2l6ZSBiZWNhdXNlIG9mIHdyYXBhcm91bmQgYXQgNjRLXG4gICAqIG9uIDE2IGJpdCBtYWNoaW5lcyBhbmQgYmVjYXVzZSBzdG9yZWQgYmxvY2tzIGFyZSByZXN0cmljdGVkIHRvXG4gICAqIDY0Sy0xIGJ5dGVzLlxuICAgKi9cbn07XG5cbnZhciBfdHJfaW5pdF8xICA9IF90cl9pbml0O1xudmFyIF90cl9zdG9yZWRfYmxvY2tfMSA9IF90cl9zdG9yZWRfYmxvY2s7XG52YXIgX3RyX2ZsdXNoX2Jsb2NrXzEgID0gX3RyX2ZsdXNoX2Jsb2NrO1xudmFyIF90cl90YWxseV8xID0gX3RyX3RhbGx5O1xudmFyIF90cl9hbGlnbl8xID0gX3RyX2FsaWduO1xuXG52YXIgdHJlZXMgPSB7XG5cdF90cl9pbml0OiBfdHJfaW5pdF8xLFxuXHRfdHJfc3RvcmVkX2Jsb2NrOiBfdHJfc3RvcmVkX2Jsb2NrXzEsXG5cdF90cl9mbHVzaF9ibG9jazogX3RyX2ZsdXNoX2Jsb2NrXzEsXG5cdF90cl90YWxseTogX3RyX3RhbGx5XzEsXG5cdF90cl9hbGlnbjogX3RyX2FsaWduXzFcbn07XG5cbi8vIE5vdGU6IGFkbGVyMzIgdGFrZXMgMTIlIGZvciBsZXZlbCAwIGFuZCAyJSBmb3IgbGV2ZWwgNi5cbi8vIEl0IGlzbid0IHdvcnRoIGl0IHRvIG1ha2UgYWRkaXRpb25hbCBvcHRpbWl6YXRpb25zIGFzIGluIG9yaWdpbmFsLlxuLy8gU21hbGwgc2l6ZSBpcyBwcmVmZXJhYmxlLlxuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmNvbnN0IGFkbGVyMzIgPSAoYWRsZXIsIGJ1ZiwgbGVuLCBwb3MpID0+IHtcbiAgbGV0IHMxID0gKGFkbGVyICYgMHhmZmZmKSB8MCxcbiAgICAgIHMyID0gKChhZGxlciA+Pj4gMTYpICYgMHhmZmZmKSB8MCxcbiAgICAgIG4gPSAwO1xuXG4gIHdoaWxlIChsZW4gIT09IDApIHtcbiAgICAvLyBTZXQgbGltaXQgfiB0d2ljZSBsZXNzIHRoYW4gNTU1MiwgdG8ga2VlcFxuICAgIC8vIHMyIGluIDMxLWJpdHMsIGJlY2F1c2Ugd2UgZm9yY2Ugc2lnbmVkIGludHMuXG4gICAgLy8gaW4gb3RoZXIgY2FzZSAlPSB3aWxsIGZhaWwuXG4gICAgbiA9IGxlbiA+IDIwMDAgPyAyMDAwIDogbGVuO1xuICAgIGxlbiAtPSBuO1xuXG4gICAgZG8ge1xuICAgICAgczEgPSAoczEgKyBidWZbcG9zKytdKSB8MDtcbiAgICAgIHMyID0gKHMyICsgczEpIHwwO1xuICAgIH0gd2hpbGUgKC0tbik7XG5cbiAgICBzMSAlPSA2NTUyMTtcbiAgICBzMiAlPSA2NTUyMTtcbiAgfVxuXG4gIHJldHVybiAoczEgfCAoczIgPDwgMTYpKSB8MDtcbn07XG5cblxudmFyIGFkbGVyMzJfMSA9IGFkbGVyMzI7XG5cbi8vIE5vdGU6IHdlIGNhbid0IGdldCBzaWduaWZpY2FudCBzcGVlZCBib29zdCBoZXJlLlxuLy8gU28gd3JpdGUgY29kZSB0byBtaW5pbWl6ZSBzaXplIC0gbm8gcHJlZ2VuZXJhdGVkIHRhYmxlc1xuLy8gYW5kIGFycmF5IHRvb2xzIGRlcGVuZGVuY2llcy5cblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG4vLyBVc2Ugb3JkaW5hcnkgYXJyYXksIHNpbmNlIHVudHlwZWQgbWFrZXMgbm8gYm9vc3QgaGVyZVxuY29uc3QgbWFrZVRhYmxlID0gKCkgPT4ge1xuICBsZXQgYywgdGFibGUgPSBbXTtcblxuICBmb3IgKHZhciBuID0gMDsgbiA8IDI1NjsgbisrKSB7XG4gICAgYyA9IG47XG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCA4OyBrKyspIHtcbiAgICAgIGMgPSAoKGMgJiAxKSA/ICgweEVEQjg4MzIwIF4gKGMgPj4+IDEpKSA6IChjID4+PiAxKSk7XG4gICAgfVxuICAgIHRhYmxlW25dID0gYztcbiAgfVxuXG4gIHJldHVybiB0YWJsZTtcbn07XG5cbi8vIENyZWF0ZSB0YWJsZSBvbiBsb2FkLiBKdXN0IDI1NSBzaWduZWQgbG9uZ3MuIE5vdCBhIHByb2JsZW0uXG5jb25zdCBjcmNUYWJsZSA9IG5ldyBVaW50MzJBcnJheShtYWtlVGFibGUoKSk7XG5cblxuY29uc3QgY3JjMzIgPSAoY3JjLCBidWYsIGxlbiwgcG9zKSA9PiB7XG4gIGNvbnN0IHQgPSBjcmNUYWJsZTtcbiAgY29uc3QgZW5kID0gcG9zICsgbGVuO1xuXG4gIGNyYyBePSAtMTtcblxuICBmb3IgKGxldCBpID0gcG9zOyBpIDwgZW5kOyBpKyspIHtcbiAgICBjcmMgPSAoY3JjID4+PiA4KSBeIHRbKGNyYyBeIGJ1ZltpXSkgJiAweEZGXTtcbiAgfVxuXG4gIHJldHVybiAoY3JjIF4gKC0xKSk7IC8vID4+PiAwO1xufTtcblxuXG52YXIgY3JjMzJfMSA9IGNyYzMyO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbnZhciBtZXNzYWdlcyA9IHtcbiAgMjogICAgICAnbmVlZCBkaWN0aW9uYXJ5JywgICAgIC8qIFpfTkVFRF9ESUNUICAgICAgIDIgICovXG4gIDE6ICAgICAgJ3N0cmVhbSBlbmQnLCAgICAgICAgICAvKiBaX1NUUkVBTV9FTkQgICAgICAxICAqL1xuICAwOiAgICAgICcnLCAgICAgICAgICAgICAgICAgICAgLyogWl9PSyAgICAgICAgICAgICAgMCAgKi9cbiAgJy0xJzogICAnZmlsZSBlcnJvcicsICAgICAgICAgIC8qIFpfRVJSTk8gICAgICAgICAoLTEpICovXG4gICctMic6ICAgJ3N0cmVhbSBlcnJvcicsICAgICAgICAvKiBaX1NUUkVBTV9FUlJPUiAgKC0yKSAqL1xuICAnLTMnOiAgICdkYXRhIGVycm9yJywgICAgICAgICAgLyogWl9EQVRBX0VSUk9SICAgICgtMykgKi9cbiAgJy00JzogICAnaW5zdWZmaWNpZW50IG1lbW9yeScsIC8qIFpfTUVNX0VSUk9SICAgICAoLTQpICovXG4gICctNSc6ICAgJ2J1ZmZlciBlcnJvcicsICAgICAgICAvKiBaX0JVRl9FUlJPUiAgICAgKC01KSAqL1xuICAnLTYnOiAgICdpbmNvbXBhdGlibGUgdmVyc2lvbicgLyogWl9WRVJTSU9OX0VSUk9SICgtNikgKi9cbn07XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxudmFyIGNvbnN0YW50cyA9IHtcblxuICAvKiBBbGxvd2VkIGZsdXNoIHZhbHVlczsgc2VlIGRlZmxhdGUoKSBhbmQgaW5mbGF0ZSgpIGJlbG93IGZvciBkZXRhaWxzICovXG4gIFpfTk9fRkxVU0g6ICAgICAgICAgMCxcbiAgWl9QQVJUSUFMX0ZMVVNIOiAgICAxLFxuICBaX1NZTkNfRkxVU0g6ICAgICAgIDIsXG4gIFpfRlVMTF9GTFVTSDogICAgICAgMyxcbiAgWl9GSU5JU0g6ICAgICAgICAgICA0LFxuICBaX0JMT0NLOiAgICAgICAgICAgIDUsXG4gIFpfVFJFRVM6ICAgICAgICAgICAgNixcblxuICAvKiBSZXR1cm4gY29kZXMgZm9yIHRoZSBjb21wcmVzc2lvbi9kZWNvbXByZXNzaW9uIGZ1bmN0aW9ucy4gTmVnYXRpdmUgdmFsdWVzXG4gICogYXJlIGVycm9ycywgcG9zaXRpdmUgdmFsdWVzIGFyZSB1c2VkIGZvciBzcGVjaWFsIGJ1dCBub3JtYWwgZXZlbnRzLlxuICAqL1xuICBaX09LOiAgICAgICAgICAgICAgIDAsXG4gIFpfU1RSRUFNX0VORDogICAgICAgMSxcbiAgWl9ORUVEX0RJQ1Q6ICAgICAgICAyLFxuICBaX0VSUk5POiAgICAgICAgICAgLTEsXG4gIFpfU1RSRUFNX0VSUk9SOiAgICAtMixcbiAgWl9EQVRBX0VSUk9SOiAgICAgIC0zLFxuICBaX01FTV9FUlJPUjogICAgICAgLTQsXG4gIFpfQlVGX0VSUk9SOiAgICAgICAtNSxcbiAgLy9aX1ZFUlNJT05fRVJST1I6IC02LFxuXG4gIC8qIGNvbXByZXNzaW9uIGxldmVscyAqL1xuICBaX05PX0NPTVBSRVNTSU9OOiAgICAgICAgIDAsXG4gIFpfQkVTVF9TUEVFRDogICAgICAgICAgICAgMSxcbiAgWl9CRVNUX0NPTVBSRVNTSU9OOiAgICAgICA5LFxuICBaX0RFRkFVTFRfQ09NUFJFU1NJT046ICAgLTEsXG5cblxuICBaX0ZJTFRFUkVEOiAgICAgICAgICAgICAgIDEsXG4gIFpfSFVGRk1BTl9PTkxZOiAgICAgICAgICAgMixcbiAgWl9STEU6ICAgICAgICAgICAgICAgICAgICAzLFxuICBaX0ZJWEVEOiAgICAgICAgICAgICAgICAgIDQsXG4gIFpfREVGQVVMVF9TVFJBVEVHWTogICAgICAgMCxcblxuICAvKiBQb3NzaWJsZSB2YWx1ZXMgb2YgdGhlIGRhdGFfdHlwZSBmaWVsZCAodGhvdWdoIHNlZSBpbmZsYXRlKCkpICovXG4gIFpfQklOQVJZOiAgICAgICAgICAgICAgICAgMCxcbiAgWl9URVhUOiAgICAgICAgICAgICAgICAgICAxLFxuICAvL1pfQVNDSUk6ICAgICAgICAgICAgICAgIDEsIC8vID0gWl9URVhUIChkZXByZWNhdGVkKVxuICBaX1VOS05PV046ICAgICAgICAgICAgICAgIDIsXG5cbiAgLyogVGhlIGRlZmxhdGUgY29tcHJlc3Npb24gbWV0aG9kICovXG4gIFpfREVGTEFURUQ6ICAgICAgICAgICAgICAgOFxuICAvL1pfTlVMTDogICAgICAgICAgICAgICAgIG51bGwgLy8gVXNlIC0xIG9yIG51bGwgaW5saW5lLCBkZXBlbmRpbmcgb24gdmFyIHR5cGVcbn07XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuY29uc3QgeyBfdHJfaW5pdDogX3RyX2luaXQkMSwgX3RyX3N0b3JlZF9ibG9jazogX3RyX3N0b3JlZF9ibG9jayQxLCBfdHJfZmx1c2hfYmxvY2s6IF90cl9mbHVzaF9ibG9jayQxLCBfdHJfdGFsbHk6IF90cl90YWxseSQxLCBfdHJfYWxpZ246IF90cl9hbGlnbiQxIH0gPSB0cmVlcztcblxuXG5cblxuLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmNvbnN0IHtcbiAgWl9OT19GTFVTSCwgWl9QQVJUSUFMX0ZMVVNILCBaX0ZVTExfRkxVU0gsIFpfRklOSVNILCBaX0JMT0NLLFxuICBaX09LLCBaX1NUUkVBTV9FTkQsIFpfU1RSRUFNX0VSUk9SLCBaX0RBVEFfRVJST1IsIFpfQlVGX0VSUk9SLFxuICBaX0RFRkFVTFRfQ09NUFJFU1NJT04sXG4gIFpfRklMVEVSRUQsIFpfSFVGRk1BTl9PTkxZLCBaX1JMRSwgWl9GSVhFRDogWl9GSVhFRCQxLCBaX0RFRkFVTFRfU1RSQVRFR1ksXG4gIFpfVU5LTk9XTjogWl9VTktOT1dOJDEsXG4gIFpfREVGTEFURURcbn0gPSBjb25zdGFudHM7XG5cbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuY29uc3QgTUFYX01FTV9MRVZFTCA9IDk7XG4vKiBNYXhpbXVtIHZhbHVlIGZvciBtZW1MZXZlbCBpbiBkZWZsYXRlSW5pdDIgKi9cbmNvbnN0IE1BWF9XQklUUyA9IDE1O1xuLyogMzJLIExaNzcgd2luZG93ICovXG5jb25zdCBERUZfTUVNX0xFVkVMID0gODtcblxuXG5jb25zdCBMRU5HVEhfQ09ERVMkMSAgPSAyOTtcbi8qIG51bWJlciBvZiBsZW5ndGggY29kZXMsIG5vdCBjb3VudGluZyB0aGUgc3BlY2lhbCBFTkRfQkxPQ0sgY29kZSAqL1xuY29uc3QgTElURVJBTFMkMSAgICAgID0gMjU2O1xuLyogbnVtYmVyIG9mIGxpdGVyYWwgYnl0ZXMgMC4uMjU1ICovXG5jb25zdCBMX0NPREVTJDEgICAgICAgPSBMSVRFUkFMUyQxICsgMSArIExFTkdUSF9DT0RFUyQxO1xuLyogbnVtYmVyIG9mIExpdGVyYWwgb3IgTGVuZ3RoIGNvZGVzLCBpbmNsdWRpbmcgdGhlIEVORF9CTE9DSyBjb2RlICovXG5jb25zdCBEX0NPREVTJDEgICAgICAgPSAzMDtcbi8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlcyAqL1xuY29uc3QgQkxfQ09ERVMkMSAgICAgID0gMTk7XG4vKiBudW1iZXIgb2YgY29kZXMgdXNlZCB0byB0cmFuc2ZlciB0aGUgYml0IGxlbmd0aHMgKi9cbmNvbnN0IEhFQVBfU0laRSQxICAgICA9IDIgKiBMX0NPREVTJDEgKyAxO1xuLyogbWF4aW11bSBoZWFwIHNpemUgKi9cbmNvbnN0IE1BWF9CSVRTJDEgID0gMTU7XG4vKiBBbGwgY29kZXMgbXVzdCBub3QgZXhjZWVkIE1BWF9CSVRTIGJpdHMgKi9cblxuY29uc3QgTUlOX01BVENIJDEgPSAzO1xuY29uc3QgTUFYX01BVENIJDEgPSAyNTg7XG5jb25zdCBNSU5fTE9PS0FIRUFEID0gKE1BWF9NQVRDSCQxICsgTUlOX01BVENIJDEgKyAxKTtcblxuY29uc3QgUFJFU0VUX0RJQ1QgPSAweDIwO1xuXG5jb25zdCBJTklUX1NUQVRFID0gNDI7XG5jb25zdCBFWFRSQV9TVEFURSA9IDY5O1xuY29uc3QgTkFNRV9TVEFURSA9IDczO1xuY29uc3QgQ09NTUVOVF9TVEFURSA9IDkxO1xuY29uc3QgSENSQ19TVEFURSA9IDEwMztcbmNvbnN0IEJVU1lfU1RBVEUgPSAxMTM7XG5jb25zdCBGSU5JU0hfU1RBVEUgPSA2NjY7XG5cbmNvbnN0IEJTX05FRURfTU9SRSAgICAgID0gMTsgLyogYmxvY2sgbm90IGNvbXBsZXRlZCwgbmVlZCBtb3JlIGlucHV0IG9yIG1vcmUgb3V0cHV0ICovXG5jb25zdCBCU19CTE9DS19ET05FICAgICA9IDI7IC8qIGJsb2NrIGZsdXNoIHBlcmZvcm1lZCAqL1xuY29uc3QgQlNfRklOSVNIX1NUQVJURUQgPSAzOyAvKiBmaW5pc2ggc3RhcnRlZCwgbmVlZCBvbmx5IG1vcmUgb3V0cHV0IGF0IG5leHQgZGVmbGF0ZSAqL1xuY29uc3QgQlNfRklOSVNIX0RPTkUgICAgPSA0OyAvKiBmaW5pc2ggZG9uZSwgYWNjZXB0IG5vIG1vcmUgaW5wdXQgb3Igb3V0cHV0ICovXG5cbmNvbnN0IE9TX0NPREUgPSAweDAzOyAvLyBVbml4IDopIC4gRG9uJ3QgZGV0ZWN0LCB1c2UgdGhpcyBkZWZhdWx0LlxuXG5jb25zdCBlcnIgPSAoc3RybSwgZXJyb3JDb2RlKSA9PiB7XG4gIHN0cm0ubXNnID0gbWVzc2FnZXNbZXJyb3JDb2RlXTtcbiAgcmV0dXJuIGVycm9yQ29kZTtcbn07XG5cbmNvbnN0IHJhbmsgPSAoZikgPT4ge1xuICByZXR1cm4gKChmKSA8PCAxKSAtICgoZikgPiA0ID8gOSA6IDApO1xufTtcblxuY29uc3QgemVybyQxID0gKGJ1ZikgPT4ge1xuICBsZXQgbGVuID0gYnVmLmxlbmd0aDsgd2hpbGUgKC0tbGVuID49IDApIHsgYnVmW2xlbl0gPSAwOyB9XG59O1xuXG5cbi8qIGVzbGludC1kaXNhYmxlIG5ldy1jYXAgKi9cbmxldCBIQVNIX1pMSUIgPSAocywgcHJldiwgZGF0YSkgPT4gKChwcmV2IDw8IHMuaGFzaF9zaGlmdCkgXiBkYXRhKSAmIHMuaGFzaF9tYXNrO1xuLy8gVGhpcyBoYXNoIGNhdXNlcyBsZXNzIGNvbGxpc2lvbnMsIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlY2EvcGFrby9pc3N1ZXMvMTM1XG4vLyBCdXQgYnJlYWtzIGJpbmFyeSBjb21wYXRpYmlsaXR5XG4vL2xldCBIQVNIX0ZBU1QgPSAocywgcHJldiwgZGF0YSkgPT4gKChwcmV2IDw8IDgpICsgKHByZXYgPj4gOCkgKyAoZGF0YSA8PCA0KSkgJiBzLmhhc2hfbWFzaztcbmxldCBIQVNIID0gSEFTSF9aTElCO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGbHVzaCBhcyBtdWNoIHBlbmRpbmcgb3V0cHV0IGFzIHBvc3NpYmxlLiBBbGwgZGVmbGF0ZSgpIG91dHB1dCBnb2VzXG4gKiB0aHJvdWdoIHRoaXMgZnVuY3Rpb24gc28gc29tZSBhcHBsaWNhdGlvbnMgbWF5IHdpc2ggdG8gbW9kaWZ5IGl0XG4gKiB0byBhdm9pZCBhbGxvY2F0aW5nIGEgbGFyZ2Ugc3RybS0+b3V0cHV0IGJ1ZmZlciBhbmQgY29weWluZyBpbnRvIGl0LlxuICogKFNlZSBhbHNvIHJlYWRfYnVmKCkpLlxuICovXG5jb25zdCBmbHVzaF9wZW5kaW5nID0gKHN0cm0pID0+IHtcbiAgY29uc3QgcyA9IHN0cm0uc3RhdGU7XG5cbiAgLy9fdHJfZmx1c2hfYml0cyhzKTtcbiAgbGV0IGxlbiA9IHMucGVuZGluZztcbiAgaWYgKGxlbiA+IHN0cm0uYXZhaWxfb3V0KSB7XG4gICAgbGVuID0gc3RybS5hdmFpbF9vdXQ7XG4gIH1cbiAgaWYgKGxlbiA9PT0gMCkgeyByZXR1cm47IH1cblxuICBzdHJtLm91dHB1dC5zZXQocy5wZW5kaW5nX2J1Zi5zdWJhcnJheShzLnBlbmRpbmdfb3V0LCBzLnBlbmRpbmdfb3V0ICsgbGVuKSwgc3RybS5uZXh0X291dCk7XG4gIHN0cm0ubmV4dF9vdXQgKz0gbGVuO1xuICBzLnBlbmRpbmdfb3V0ICs9IGxlbjtcbiAgc3RybS50b3RhbF9vdXQgKz0gbGVuO1xuICBzdHJtLmF2YWlsX291dCAtPSBsZW47XG4gIHMucGVuZGluZyAtPSBsZW47XG4gIGlmIChzLnBlbmRpbmcgPT09IDApIHtcbiAgICBzLnBlbmRpbmdfb3V0ID0gMDtcbiAgfVxufTtcblxuXG5jb25zdCBmbHVzaF9ibG9ja19vbmx5ID0gKHMsIGxhc3QpID0+IHtcbiAgX3RyX2ZsdXNoX2Jsb2NrJDEocywgKHMuYmxvY2tfc3RhcnQgPj0gMCA/IHMuYmxvY2tfc3RhcnQgOiAtMSksIHMuc3Ryc3RhcnQgLSBzLmJsb2NrX3N0YXJ0LCBsYXN0KTtcbiAgcy5ibG9ja19zdGFydCA9IHMuc3Ryc3RhcnQ7XG4gIGZsdXNoX3BlbmRpbmcocy5zdHJtKTtcbn07XG5cblxuY29uc3QgcHV0X2J5dGUgPSAocywgYikgPT4ge1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IGI7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFB1dCBhIHNob3J0IGluIHRoZSBwZW5kaW5nIGJ1ZmZlci4gVGhlIDE2LWJpdCB2YWx1ZSBpcyBwdXQgaW4gTVNCIG9yZGVyLlxuICogSU4gYXNzZXJ0aW9uOiB0aGUgc3RyZWFtIHN0YXRlIGlzIGNvcnJlY3QgYW5kIHRoZXJlIGlzIGVub3VnaCByb29tIGluXG4gKiBwZW5kaW5nX2J1Zi5cbiAqL1xuY29uc3QgcHV0U2hvcnRNU0IgPSAocywgYikgPT4ge1xuXG4gIC8vICBwdXRfYnl0ZShzLCAoQnl0ZSkoYiA+PiA4KSk7XG4vLyAgcHV0X2J5dGUocywgKEJ5dGUpKGIgJiAweGZmKSk7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gKGIgPj4+IDgpICYgMHhmZjtcbiAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBiICYgMHhmZjtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBSZWFkIGEgbmV3IGJ1ZmZlciBmcm9tIHRoZSBjdXJyZW50IGlucHV0IHN0cmVhbSwgdXBkYXRlIHRoZSBhZGxlcjMyXG4gKiBhbmQgdG90YWwgbnVtYmVyIG9mIGJ5dGVzIHJlYWQuICBBbGwgZGVmbGF0ZSgpIGlucHV0IGdvZXMgdGhyb3VnaFxuICogdGhpcyBmdW5jdGlvbiBzbyBzb21lIGFwcGxpY2F0aW9ucyBtYXkgd2lzaCB0byBtb2RpZnkgaXQgdG8gYXZvaWRcbiAqIGFsbG9jYXRpbmcgYSBsYXJnZSBzdHJtLT5pbnB1dCBidWZmZXIgYW5kIGNvcHlpbmcgZnJvbSBpdC5cbiAqIChTZWUgYWxzbyBmbHVzaF9wZW5kaW5nKCkpLlxuICovXG5jb25zdCByZWFkX2J1ZiA9IChzdHJtLCBidWYsIHN0YXJ0LCBzaXplKSA9PiB7XG5cbiAgbGV0IGxlbiA9IHN0cm0uYXZhaWxfaW47XG5cbiAgaWYgKGxlbiA+IHNpemUpIHsgbGVuID0gc2l6ZTsgfVxuICBpZiAobGVuID09PSAwKSB7IHJldHVybiAwOyB9XG5cbiAgc3RybS5hdmFpbF9pbiAtPSBsZW47XG5cbiAgLy8gem1lbWNweShidWYsIHN0cm0tPm5leHRfaW4sIGxlbik7XG4gIGJ1Zi5zZXQoc3RybS5pbnB1dC5zdWJhcnJheShzdHJtLm5leHRfaW4sIHN0cm0ubmV4dF9pbiArIGxlbiksIHN0YXJ0KTtcbiAgaWYgKHN0cm0uc3RhdGUud3JhcCA9PT0gMSkge1xuICAgIHN0cm0uYWRsZXIgPSBhZGxlcjMyXzEoc3RybS5hZGxlciwgYnVmLCBsZW4sIHN0YXJ0KTtcbiAgfVxuXG4gIGVsc2UgaWYgKHN0cm0uc3RhdGUud3JhcCA9PT0gMikge1xuICAgIHN0cm0uYWRsZXIgPSBjcmMzMl8xKHN0cm0uYWRsZXIsIGJ1ZiwgbGVuLCBzdGFydCk7XG4gIH1cblxuICBzdHJtLm5leHRfaW4gKz0gbGVuO1xuICBzdHJtLnRvdGFsX2luICs9IGxlbjtcblxuICByZXR1cm4gbGVuO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNldCBtYXRjaF9zdGFydCB0byB0aGUgbG9uZ2VzdCBtYXRjaCBzdGFydGluZyBhdCB0aGUgZ2l2ZW4gc3RyaW5nIGFuZFxuICogcmV0dXJuIGl0cyBsZW5ndGguIE1hdGNoZXMgc2hvcnRlciBvciBlcXVhbCB0byBwcmV2X2xlbmd0aCBhcmUgZGlzY2FyZGVkLFxuICogaW4gd2hpY2ggY2FzZSB0aGUgcmVzdWx0IGlzIGVxdWFsIHRvIHByZXZfbGVuZ3RoIGFuZCBtYXRjaF9zdGFydCBpc1xuICogZ2FyYmFnZS5cbiAqIElOIGFzc2VydGlvbnM6IGN1cl9tYXRjaCBpcyB0aGUgaGVhZCBvZiB0aGUgaGFzaCBjaGFpbiBmb3IgdGhlIGN1cnJlbnRcbiAqICAgc3RyaW5nIChzdHJzdGFydCkgYW5kIGl0cyBkaXN0YW5jZSBpcyA8PSBNQVhfRElTVCwgYW5kIHByZXZfbGVuZ3RoID49IDFcbiAqIE9VVCBhc3NlcnRpb246IHRoZSBtYXRjaCBsZW5ndGggaXMgbm90IGdyZWF0ZXIgdGhhbiBzLT5sb29rYWhlYWQuXG4gKi9cbmNvbnN0IGxvbmdlc3RfbWF0Y2ggPSAocywgY3VyX21hdGNoKSA9PiB7XG5cbiAgbGV0IGNoYWluX2xlbmd0aCA9IHMubWF4X2NoYWluX2xlbmd0aDsgICAgICAvKiBtYXggaGFzaCBjaGFpbiBsZW5ndGggKi9cbiAgbGV0IHNjYW4gPSBzLnN0cnN0YXJ0OyAvKiBjdXJyZW50IHN0cmluZyAqL1xuICBsZXQgbWF0Y2g7ICAgICAgICAgICAgICAgICAgICAgICAvKiBtYXRjaGVkIHN0cmluZyAqL1xuICBsZXQgbGVuOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBvZiBjdXJyZW50IG1hdGNoICovXG4gIGxldCBiZXN0X2xlbiA9IHMucHJldl9sZW5ndGg7ICAgICAgICAgICAgICAvKiBiZXN0IG1hdGNoIGxlbmd0aCBzbyBmYXIgKi9cbiAgbGV0IG5pY2VfbWF0Y2ggPSBzLm5pY2VfbWF0Y2g7ICAgICAgICAgICAgIC8qIHN0b3AgaWYgbWF0Y2ggbG9uZyBlbm91Z2ggKi9cbiAgY29uc3QgbGltaXQgPSAocy5zdHJzdGFydCA+IChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpKSA/XG4gICAgICBzLnN0cnN0YXJ0IC0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkgOiAwLypOSUwqLztcblxuICBjb25zdCBfd2luID0gcy53aW5kb3c7IC8vIHNob3J0Y3V0XG5cbiAgY29uc3Qgd21hc2sgPSBzLndfbWFzaztcbiAgY29uc3QgcHJldiAgPSBzLnByZXY7XG5cbiAgLyogU3RvcCB3aGVuIGN1cl9tYXRjaCBiZWNvbWVzIDw9IGxpbWl0LiBUbyBzaW1wbGlmeSB0aGUgY29kZSxcbiAgICogd2UgcHJldmVudCBtYXRjaGVzIHdpdGggdGhlIHN0cmluZyBvZiB3aW5kb3cgaW5kZXggMC5cbiAgICovXG5cbiAgY29uc3Qgc3RyZW5kID0gcy5zdHJzdGFydCArIE1BWF9NQVRDSCQxO1xuICBsZXQgc2Nhbl9lbmQxICA9IF93aW5bc2NhbiArIGJlc3RfbGVuIC0gMV07XG4gIGxldCBzY2FuX2VuZCAgID0gX3dpbltzY2FuICsgYmVzdF9sZW5dO1xuXG4gIC8qIFRoZSBjb2RlIGlzIG9wdGltaXplZCBmb3IgSEFTSF9CSVRTID49IDggYW5kIE1BWF9NQVRDSC0yIG11bHRpcGxlIG9mIDE2LlxuICAgKiBJdCBpcyBlYXN5IHRvIGdldCByaWQgb2YgdGhpcyBvcHRpbWl6YXRpb24gaWYgbmVjZXNzYXJ5LlxuICAgKi9cbiAgLy8gQXNzZXJ0KHMtPmhhc2hfYml0cyA+PSA4ICYmIE1BWF9NQVRDSCA9PSAyNTgsIFwiQ29kZSB0b28gY2xldmVyXCIpO1xuXG4gIC8qIERvIG5vdCB3YXN0ZSB0b28gbXVjaCB0aW1lIGlmIHdlIGFscmVhZHkgaGF2ZSBhIGdvb2QgbWF0Y2g6ICovXG4gIGlmIChzLnByZXZfbGVuZ3RoID49IHMuZ29vZF9tYXRjaCkge1xuICAgIGNoYWluX2xlbmd0aCA+Pj0gMjtcbiAgfVxuICAvKiBEbyBub3QgbG9vayBmb3IgbWF0Y2hlcyBiZXlvbmQgdGhlIGVuZCBvZiB0aGUgaW5wdXQuIFRoaXMgaXMgbmVjZXNzYXJ5XG4gICAqIHRvIG1ha2UgZGVmbGF0ZSBkZXRlcm1pbmlzdGljLlxuICAgKi9cbiAgaWYgKG5pY2VfbWF0Y2ggPiBzLmxvb2thaGVhZCkgeyBuaWNlX21hdGNoID0gcy5sb29rYWhlYWQ7IH1cblxuICAvLyBBc3NlcnQoKHVsZylzLT5zdHJzdGFydCA8PSBzLT53aW5kb3dfc2l6ZS1NSU5fTE9PS0FIRUFELCBcIm5lZWQgbG9va2FoZWFkXCIpO1xuXG4gIGRvIHtcbiAgICAvLyBBc3NlcnQoY3VyX21hdGNoIDwgcy0+c3Ryc3RhcnQsIFwibm8gZnV0dXJlXCIpO1xuICAgIG1hdGNoID0gY3VyX21hdGNoO1xuXG4gICAgLyogU2tpcCB0byBuZXh0IG1hdGNoIGlmIHRoZSBtYXRjaCBsZW5ndGggY2Fubm90IGluY3JlYXNlXG4gICAgICogb3IgaWYgdGhlIG1hdGNoIGxlbmd0aCBpcyBsZXNzIHRoYW4gMi4gIE5vdGUgdGhhdCB0aGUgY2hlY2tzIGJlbG93XG4gICAgICogZm9yIGluc3VmZmljaWVudCBsb29rYWhlYWQgb25seSBvY2N1ciBvY2Nhc2lvbmFsbHkgZm9yIHBlcmZvcm1hbmNlXG4gICAgICogcmVhc29ucy4gIFRoZXJlZm9yZSB1bmluaXRpYWxpemVkIG1lbW9yeSB3aWxsIGJlIGFjY2Vzc2VkLCBhbmRcbiAgICAgKiBjb25kaXRpb25hbCBqdW1wcyB3aWxsIGJlIG1hZGUgdGhhdCBkZXBlbmQgb24gdGhvc2UgdmFsdWVzLlxuICAgICAqIEhvd2V2ZXIgdGhlIGxlbmd0aCBvZiB0aGUgbWF0Y2ggaXMgbGltaXRlZCB0byB0aGUgbG9va2FoZWFkLCBzb1xuICAgICAqIHRoZSBvdXRwdXQgb2YgZGVmbGF0ZSBpcyBub3QgYWZmZWN0ZWQgYnkgdGhlIHVuaW5pdGlhbGl6ZWQgdmFsdWVzLlxuICAgICAqL1xuXG4gICAgaWYgKF93aW5bbWF0Y2ggKyBiZXN0X2xlbl0gICAgICE9PSBzY2FuX2VuZCAgfHxcbiAgICAgICAgX3dpblttYXRjaCArIGJlc3RfbGVuIC0gMV0gIT09IHNjYW5fZW5kMSB8fFxuICAgICAgICBfd2luW21hdGNoXSAgICAgICAgICAgICAgICAhPT0gX3dpbltzY2FuXSB8fFxuICAgICAgICBfd2luWysrbWF0Y2hdICAgICAgICAgICAgICAhPT0gX3dpbltzY2FuICsgMV0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qIFRoZSBjaGVjayBhdCBiZXN0X2xlbi0xIGNhbiBiZSByZW1vdmVkIGJlY2F1c2UgaXQgd2lsbCBiZSBtYWRlXG4gICAgICogYWdhaW4gbGF0ZXIuIChUaGlzIGhldXJpc3RpYyBpcyBub3QgYWx3YXlzIGEgd2luLilcbiAgICAgKiBJdCBpcyBub3QgbmVjZXNzYXJ5IHRvIGNvbXBhcmUgc2NhblsyXSBhbmQgbWF0Y2hbMl0gc2luY2UgdGhleVxuICAgICAqIGFyZSBhbHdheXMgZXF1YWwgd2hlbiB0aGUgb3RoZXIgYnl0ZXMgbWF0Y2gsIGdpdmVuIHRoYXRcbiAgICAgKiB0aGUgaGFzaCBrZXlzIGFyZSBlcXVhbCBhbmQgdGhhdCBIQVNIX0JJVFMgPj0gOC5cbiAgICAgKi9cbiAgICBzY2FuICs9IDI7XG4gICAgbWF0Y2grKztcbiAgICAvLyBBc3NlcnQoKnNjYW4gPT0gKm1hdGNoLCBcIm1hdGNoWzJdP1wiKTtcblxuICAgIC8qIFdlIGNoZWNrIGZvciBpbnN1ZmZpY2llbnQgbG9va2FoZWFkIG9ubHkgZXZlcnkgOHRoIGNvbXBhcmlzb247XG4gICAgICogdGhlIDI1NnRoIGNoZWNrIHdpbGwgYmUgbWFkZSBhdCBzdHJzdGFydCsyNTguXG4gICAgICovXG4gICAgZG8ge1xuICAgICAgLypqc2hpbnQgbm9lbXB0eTpmYWxzZSovXG4gICAgfSB3aGlsZSAoX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJlxuICAgICAgICAgICAgIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJiBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiZcbiAgICAgICAgICAgICBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmXG4gICAgICAgICAgICAgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJlxuICAgICAgICAgICAgIHNjYW4gPCBzdHJlbmQpO1xuXG4gICAgLy8gQXNzZXJ0KHNjYW4gPD0gcy0+d2luZG93Kyh1bnNpZ25lZCkocy0+d2luZG93X3NpemUtMSksIFwid2lsZCBzY2FuXCIpO1xuXG4gICAgbGVuID0gTUFYX01BVENIJDEgLSAoc3RyZW5kIC0gc2Nhbik7XG4gICAgc2NhbiA9IHN0cmVuZCAtIE1BWF9NQVRDSCQxO1xuXG4gICAgaWYgKGxlbiA+IGJlc3RfbGVuKSB7XG4gICAgICBzLm1hdGNoX3N0YXJ0ID0gY3VyX21hdGNoO1xuICAgICAgYmVzdF9sZW4gPSBsZW47XG4gICAgICBpZiAobGVuID49IG5pY2VfbWF0Y2gpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBzY2FuX2VuZDEgID0gX3dpbltzY2FuICsgYmVzdF9sZW4gLSAxXTtcbiAgICAgIHNjYW5fZW5kICAgPSBfd2luW3NjYW4gKyBiZXN0X2xlbl07XG4gICAgfVxuICB9IHdoaWxlICgoY3VyX21hdGNoID0gcHJldltjdXJfbWF0Y2ggJiB3bWFza10pID4gbGltaXQgJiYgLS1jaGFpbl9sZW5ndGggIT09IDApO1xuXG4gIGlmIChiZXN0X2xlbiA8PSBzLmxvb2thaGVhZCkge1xuICAgIHJldHVybiBiZXN0X2xlbjtcbiAgfVxuICByZXR1cm4gcy5sb29rYWhlYWQ7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRmlsbCB0aGUgd2luZG93IHdoZW4gdGhlIGxvb2thaGVhZCBiZWNvbWVzIGluc3VmZmljaWVudC5cbiAqIFVwZGF0ZXMgc3Ryc3RhcnQgYW5kIGxvb2thaGVhZC5cbiAqXG4gKiBJTiBhc3NlcnRpb246IGxvb2thaGVhZCA8IE1JTl9MT09LQUhFQURcbiAqIE9VVCBhc3NlcnRpb25zOiBzdHJzdGFydCA8PSB3aW5kb3dfc2l6ZS1NSU5fTE9PS0FIRUFEXG4gKiAgICBBdCBsZWFzdCBvbmUgYnl0ZSBoYXMgYmVlbiByZWFkLCBvciBhdmFpbF9pbiA9PSAwOyByZWFkcyBhcmVcbiAqICAgIHBlcmZvcm1lZCBmb3IgYXQgbGVhc3QgdHdvIGJ5dGVzIChyZXF1aXJlZCBmb3IgdGhlIHppcCB0cmFuc2xhdGVfZW9sXG4gKiAgICBvcHRpb24gLS0gbm90IHN1cHBvcnRlZCBoZXJlKS5cbiAqL1xuY29uc3QgZmlsbF93aW5kb3cgPSAocykgPT4ge1xuXG4gIGNvbnN0IF93X3NpemUgPSBzLndfc2l6ZTtcbiAgbGV0IHAsIG4sIG0sIG1vcmUsIHN0cjtcblxuICAvL0Fzc2VydChzLT5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFELCBcImFscmVhZHkgZW5vdWdoIGxvb2thaGVhZFwiKTtcblxuICBkbyB7XG4gICAgbW9yZSA9IHMud2luZG93X3NpemUgLSBzLmxvb2thaGVhZCAtIHMuc3Ryc3RhcnQ7XG5cbiAgICAvLyBKUyBpbnRzIGhhdmUgMzIgYml0LCBibG9jayBiZWxvdyBub3QgbmVlZGVkXG4gICAgLyogRGVhbCB3aXRoICFAIyQlIDY0SyBsaW1pdDogKi9cbiAgICAvL2lmIChzaXplb2YoaW50KSA8PSAyKSB7XG4gICAgLy8gICAgaWYgKG1vcmUgPT0gMCAmJiBzLT5zdHJzdGFydCA9PSAwICYmIHMtPmxvb2thaGVhZCA9PSAwKSB7XG4gICAgLy8gICAgICAgIG1vcmUgPSB3c2l6ZTtcbiAgICAvL1xuICAgIC8vICB9IGVsc2UgaWYgKG1vcmUgPT0gKHVuc2lnbmVkKSgtMSkpIHtcbiAgICAvLyAgICAgICAgLyogVmVyeSB1bmxpa2VseSwgYnV0IHBvc3NpYmxlIG9uIDE2IGJpdCBtYWNoaW5lIGlmXG4gICAgLy8gICAgICAgICAqIHN0cnN0YXJ0ID09IDAgJiYgbG9va2FoZWFkID09IDEgKGlucHV0IGRvbmUgYSBieXRlIGF0IHRpbWUpXG4gICAgLy8gICAgICAgICAqL1xuICAgIC8vICAgICAgICBtb3JlLS07XG4gICAgLy8gICAgfVxuICAgIC8vfVxuXG5cbiAgICAvKiBJZiB0aGUgd2luZG93IGlzIGFsbW9zdCBmdWxsIGFuZCB0aGVyZSBpcyBpbnN1ZmZpY2llbnQgbG9va2FoZWFkLFxuICAgICAqIG1vdmUgdGhlIHVwcGVyIGhhbGYgdG8gdGhlIGxvd2VyIG9uZSB0byBtYWtlIHJvb20gaW4gdGhlIHVwcGVyIGhhbGYuXG4gICAgICovXG4gICAgaWYgKHMuc3Ryc3RhcnQgPj0gX3dfc2l6ZSArIChfd19zaXplIC0gTUlOX0xPT0tBSEVBRCkpIHtcblxuICAgICAgcy53aW5kb3cuc2V0KHMud2luZG93LnN1YmFycmF5KF93X3NpemUsIF93X3NpemUgKyBfd19zaXplKSwgMCk7XG4gICAgICBzLm1hdGNoX3N0YXJ0IC09IF93X3NpemU7XG4gICAgICBzLnN0cnN0YXJ0IC09IF93X3NpemU7XG4gICAgICAvKiB3ZSBub3cgaGF2ZSBzdHJzdGFydCA+PSBNQVhfRElTVCAqL1xuICAgICAgcy5ibG9ja19zdGFydCAtPSBfd19zaXplO1xuXG4gICAgICAvKiBTbGlkZSB0aGUgaGFzaCB0YWJsZSAoY291bGQgYmUgYXZvaWRlZCB3aXRoIDMyIGJpdCB2YWx1ZXNcbiAgICAgICBhdCB0aGUgZXhwZW5zZSBvZiBtZW1vcnkgdXNhZ2UpLiBXZSBzbGlkZSBldmVuIHdoZW4gbGV2ZWwgPT0gMFxuICAgICAgIHRvIGtlZXAgdGhlIGhhc2ggdGFibGUgY29uc2lzdGVudCBpZiB3ZSBzd2l0Y2ggYmFjayB0byBsZXZlbCA+IDBcbiAgICAgICBsYXRlci4gKFVzaW5nIGxldmVsIDAgcGVybWFuZW50bHkgaXMgbm90IGFuIG9wdGltYWwgdXNhZ2Ugb2ZcbiAgICAgICB6bGliLCBzbyB3ZSBkb24ndCBjYXJlIGFib3V0IHRoaXMgcGF0aG9sb2dpY2FsIGNhc2UuKVxuICAgICAgICovXG5cbiAgICAgIG4gPSBzLmhhc2hfc2l6ZTtcbiAgICAgIHAgPSBuO1xuXG4gICAgICBkbyB7XG4gICAgICAgIG0gPSBzLmhlYWRbLS1wXTtcbiAgICAgICAgcy5oZWFkW3BdID0gKG0gPj0gX3dfc2l6ZSA/IG0gLSBfd19zaXplIDogMCk7XG4gICAgICB9IHdoaWxlICgtLW4pO1xuXG4gICAgICBuID0gX3dfc2l6ZTtcbiAgICAgIHAgPSBuO1xuXG4gICAgICBkbyB7XG4gICAgICAgIG0gPSBzLnByZXZbLS1wXTtcbiAgICAgICAgcy5wcmV2W3BdID0gKG0gPj0gX3dfc2l6ZSA/IG0gLSBfd19zaXplIDogMCk7XG4gICAgICAgIC8qIElmIG4gaXMgbm90IG9uIGFueSBoYXNoIGNoYWluLCBwcmV2W25dIGlzIGdhcmJhZ2UgYnV0XG4gICAgICAgICAqIGl0cyB2YWx1ZSB3aWxsIG5ldmVyIGJlIHVzZWQuXG4gICAgICAgICAqL1xuICAgICAgfSB3aGlsZSAoLS1uKTtcblxuICAgICAgbW9yZSArPSBfd19zaXplO1xuICAgIH1cbiAgICBpZiAocy5zdHJtLmF2YWlsX2luID09PSAwKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvKiBJZiB0aGVyZSB3YXMgbm8gc2xpZGluZzpcbiAgICAgKiAgICBzdHJzdGFydCA8PSBXU0laRStNQVhfRElTVC0xICYmIGxvb2thaGVhZCA8PSBNSU5fTE9PS0FIRUFEIC0gMSAmJlxuICAgICAqICAgIG1vcmUgPT0gd2luZG93X3NpemUgLSBsb29rYWhlYWQgLSBzdHJzdGFydFxuICAgICAqID0+IG1vcmUgPj0gd2luZG93X3NpemUgLSAoTUlOX0xPT0tBSEVBRC0xICsgV1NJWkUgKyBNQVhfRElTVC0xKVxuICAgICAqID0+IG1vcmUgPj0gd2luZG93X3NpemUgLSAyKldTSVpFICsgMlxuICAgICAqIEluIHRoZSBCSUdfTUVNIG9yIE1NQVAgY2FzZSAobm90IHlldCBzdXBwb3J0ZWQpLFxuICAgICAqICAgd2luZG93X3NpemUgPT0gaW5wdXRfc2l6ZSArIE1JTl9MT09LQUhFQUQgICYmXG4gICAgICogICBzdHJzdGFydCArIHMtPmxvb2thaGVhZCA8PSBpbnB1dF9zaXplID0+IG1vcmUgPj0gTUlOX0xPT0tBSEVBRC5cbiAgICAgKiBPdGhlcndpc2UsIHdpbmRvd19zaXplID09IDIqV1NJWkUgc28gbW9yZSA+PSAyLlxuICAgICAqIElmIHRoZXJlIHdhcyBzbGlkaW5nLCBtb3JlID49IFdTSVpFLiBTbyBpbiBhbGwgY2FzZXMsIG1vcmUgPj0gMi5cbiAgICAgKi9cbiAgICAvL0Fzc2VydChtb3JlID49IDIsIFwibW9yZSA8IDJcIik7XG4gICAgbiA9IHJlYWRfYnVmKHMuc3RybSwgcy53aW5kb3csIHMuc3Ryc3RhcnQgKyBzLmxvb2thaGVhZCwgbW9yZSk7XG4gICAgcy5sb29rYWhlYWQgKz0gbjtcblxuICAgIC8qIEluaXRpYWxpemUgdGhlIGhhc2ggdmFsdWUgbm93IHRoYXQgd2UgaGF2ZSBzb21lIGlucHV0OiAqL1xuICAgIGlmIChzLmxvb2thaGVhZCArIHMuaW5zZXJ0ID49IE1JTl9NQVRDSCQxKSB7XG4gICAgICBzdHIgPSBzLnN0cnN0YXJ0IC0gcy5pbnNlcnQ7XG4gICAgICBzLmluc19oID0gcy53aW5kb3dbc3RyXTtcblxuICAgICAgLyogVVBEQVRFX0hBU0gocywgcy0+aW5zX2gsIHMtPndpbmRvd1tzdHIgKyAxXSk7ICovXG4gICAgICBzLmluc19oID0gSEFTSChzLCBzLmluc19oLCBzLndpbmRvd1tzdHIgKyAxXSk7XG4vLyNpZiBNSU5fTUFUQ0ggIT0gM1xuLy8gICAgICAgIENhbGwgdXBkYXRlX2hhc2goKSBNSU5fTUFUQ0gtMyBtb3JlIHRpbWVzXG4vLyNlbmRpZlxuICAgICAgd2hpbGUgKHMuaW5zZXJ0KSB7XG4gICAgICAgIC8qIFVQREFURV9IQVNIKHMsIHMtPmluc19oLCBzLT53aW5kb3dbc3RyICsgTUlOX01BVENILTFdKTsgKi9cbiAgICAgICAgcy5pbnNfaCA9IEhBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbc3RyICsgTUlOX01BVENIJDEgLSAxXSk7XG5cbiAgICAgICAgcy5wcmV2W3N0ciAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTtcbiAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gc3RyO1xuICAgICAgICBzdHIrKztcbiAgICAgICAgcy5pbnNlcnQtLTtcbiAgICAgICAgaWYgKHMubG9va2FoZWFkICsgcy5pbnNlcnQgPCBNSU5fTUFUQ0gkMSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8qIElmIHRoZSB3aG9sZSBpbnB1dCBoYXMgbGVzcyB0aGFuIE1JTl9NQVRDSCBieXRlcywgaW5zX2ggaXMgZ2FyYmFnZSxcbiAgICAgKiBidXQgdGhpcyBpcyBub3QgaW1wb3J0YW50IHNpbmNlIG9ubHkgbGl0ZXJhbCBieXRlcyB3aWxsIGJlIGVtaXR0ZWQuXG4gICAgICovXG5cbiAgfSB3aGlsZSAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEICYmIHMuc3RybS5hdmFpbF9pbiAhPT0gMCk7XG5cbiAgLyogSWYgdGhlIFdJTl9JTklUIGJ5dGVzIGFmdGVyIHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgZGF0YSBoYXZlIG5ldmVyIGJlZW5cbiAgICogd3JpdHRlbiwgdGhlbiB6ZXJvIHRob3NlIGJ5dGVzIGluIG9yZGVyIHRvIGF2b2lkIG1lbW9yeSBjaGVjayByZXBvcnRzIG9mXG4gICAqIHRoZSB1c2Ugb2YgdW5pbml0aWFsaXplZCAob3IgdW5pbml0aWFsaXNlZCBhcyBKdWxpYW4gd3JpdGVzKSBieXRlcyBieVxuICAgKiB0aGUgbG9uZ2VzdCBtYXRjaCByb3V0aW5lcy4gIFVwZGF0ZSB0aGUgaGlnaCB3YXRlciBtYXJrIGZvciB0aGUgbmV4dFxuICAgKiB0aW1lIHRocm91Z2ggaGVyZS4gIFdJTl9JTklUIGlzIHNldCB0byBNQVhfTUFUQ0ggc2luY2UgdGhlIGxvbmdlc3QgbWF0Y2hcbiAgICogcm91dGluZXMgYWxsb3cgc2Nhbm5pbmcgdG8gc3Ryc3RhcnQgKyBNQVhfTUFUQ0gsIGlnbm9yaW5nIGxvb2thaGVhZC5cbiAgICovXG4vLyAgaWYgKHMuaGlnaF93YXRlciA8IHMud2luZG93X3NpemUpIHtcbi8vICAgIGNvbnN0IGN1cnIgPSBzLnN0cnN0YXJ0ICsgcy5sb29rYWhlYWQ7XG4vLyAgICBsZXQgaW5pdCA9IDA7XG4vL1xuLy8gICAgaWYgKHMuaGlnaF93YXRlciA8IGN1cnIpIHtcbi8vICAgICAgLyogUHJldmlvdXMgaGlnaCB3YXRlciBtYXJrIGJlbG93IGN1cnJlbnQgZGF0YSAtLSB6ZXJvIFdJTl9JTklUXG4vLyAgICAgICAqIGJ5dGVzIG9yIHVwIHRvIGVuZCBvZiB3aW5kb3csIHdoaWNoZXZlciBpcyBsZXNzLlxuLy8gICAgICAgKi9cbi8vICAgICAgaW5pdCA9IHMud2luZG93X3NpemUgLSBjdXJyO1xuLy8gICAgICBpZiAoaW5pdCA+IFdJTl9JTklUKVxuLy8gICAgICAgIGluaXQgPSBXSU5fSU5JVDtcbi8vICAgICAgem1lbXplcm8ocy0+d2luZG93ICsgY3VyciwgKHVuc2lnbmVkKWluaXQpO1xuLy8gICAgICBzLT5oaWdoX3dhdGVyID0gY3VyciArIGluaXQ7XG4vLyAgICB9XG4vLyAgICBlbHNlIGlmIChzLT5oaWdoX3dhdGVyIDwgKHVsZyljdXJyICsgV0lOX0lOSVQpIHtcbi8vICAgICAgLyogSGlnaCB3YXRlciBtYXJrIGF0IG9yIGFib3ZlIGN1cnJlbnQgZGF0YSwgYnV0IGJlbG93IGN1cnJlbnQgZGF0YVxuLy8gICAgICAgKiBwbHVzIFdJTl9JTklUIC0tIHplcm8gb3V0IHRvIGN1cnJlbnQgZGF0YSBwbHVzIFdJTl9JTklULCBvciB1cFxuLy8gICAgICAgKiB0byBlbmQgb2Ygd2luZG93LCB3aGljaGV2ZXIgaXMgbGVzcy5cbi8vICAgICAgICovXG4vLyAgICAgIGluaXQgPSAodWxnKWN1cnIgKyBXSU5fSU5JVCAtIHMtPmhpZ2hfd2F0ZXI7XG4vLyAgICAgIGlmIChpbml0ID4gcy0+d2luZG93X3NpemUgLSBzLT5oaWdoX3dhdGVyKVxuLy8gICAgICAgIGluaXQgPSBzLT53aW5kb3dfc2l6ZSAtIHMtPmhpZ2hfd2F0ZXI7XG4vLyAgICAgIHptZW16ZXJvKHMtPndpbmRvdyArIHMtPmhpZ2hfd2F0ZXIsICh1bnNpZ25lZClpbml0KTtcbi8vICAgICAgcy0+aGlnaF93YXRlciArPSBpbml0O1xuLy8gICAgfVxuLy8gIH1cbi8vXG4vLyAgQXNzZXJ0KCh1bGcpcy0+c3Ryc3RhcnQgPD0gcy0+d2luZG93X3NpemUgLSBNSU5fTE9PS0FIRUFELFxuLy8gICAgXCJub3QgZW5vdWdoIHJvb20gZm9yIHNlYXJjaFwiKTtcbn07XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weSB3aXRob3V0IGNvbXByZXNzaW9uIGFzIG11Y2ggYXMgcG9zc2libGUgZnJvbSB0aGUgaW5wdXQgc3RyZWFtLCByZXR1cm5cbiAqIHRoZSBjdXJyZW50IGJsb2NrIHN0YXRlLlxuICogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBpbnNlcnQgbmV3IHN0cmluZ3MgaW4gdGhlIGRpY3Rpb25hcnkgc2luY2VcbiAqIHVuY29tcHJlc3NpYmxlIGRhdGEgaXMgcHJvYmFibHkgbm90IHVzZWZ1bC4gVGhpcyBmdW5jdGlvbiBpcyB1c2VkXG4gKiBvbmx5IGZvciB0aGUgbGV2ZWw9MCBjb21wcmVzc2lvbiBvcHRpb24uXG4gKiBOT1RFOiB0aGlzIGZ1bmN0aW9uIHNob3VsZCBiZSBvcHRpbWl6ZWQgdG8gYXZvaWQgZXh0cmEgY29weWluZyBmcm9tXG4gKiB3aW5kb3cgdG8gcGVuZGluZ19idWYuXG4gKi9cbmNvbnN0IGRlZmxhdGVfc3RvcmVkID0gKHMsIGZsdXNoKSA9PiB7XG5cbiAgLyogU3RvcmVkIGJsb2NrcyBhcmUgbGltaXRlZCB0byAweGZmZmYgYnl0ZXMsIHBlbmRpbmdfYnVmIGlzIGxpbWl0ZWRcbiAgICogdG8gcGVuZGluZ19idWZfc2l6ZSwgYW5kIGVhY2ggc3RvcmVkIGJsb2NrIGhhcyBhIDUgYnl0ZSBoZWFkZXI6XG4gICAqL1xuICBsZXQgbWF4X2Jsb2NrX3NpemUgPSAweGZmZmY7XG5cbiAgaWYgKG1heF9ibG9ja19zaXplID4gcy5wZW5kaW5nX2J1Zl9zaXplIC0gNSkge1xuICAgIG1heF9ibG9ja19zaXplID0gcy5wZW5kaW5nX2J1Zl9zaXplIC0gNTtcbiAgfVxuXG4gIC8qIENvcHkgYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIGlucHV0IHRvIG91dHB1dDogKi9cbiAgZm9yICg7Oykge1xuICAgIC8qIEZpbGwgdGhlIHdpbmRvdyBhcyBtdWNoIGFzIHBvc3NpYmxlOiAqL1xuICAgIGlmIChzLmxvb2thaGVhZCA8PSAxKSB7XG5cbiAgICAgIC8vQXNzZXJ0KHMtPnN0cnN0YXJ0IDwgcy0+d19zaXplK01BWF9ESVNUKHMpIHx8XG4gICAgICAvLyAgcy0+YmxvY2tfc3RhcnQgPj0gKGxvbmcpcy0+d19zaXplLCBcInNsaWRlIHRvbyBsYXRlXCIpO1xuLy8gICAgICBpZiAoIShzLnN0cnN0YXJ0IDwgcy53X3NpemUgKyAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSB8fFxuLy8gICAgICAgIHMuYmxvY2tfc3RhcnQgPj0gcy53X3NpemUpKSB7XG4vLyAgICAgICAgdGhyb3cgIG5ldyBFcnJvcihcInNsaWRlIHRvbyBsYXRlXCIpO1xuLy8gICAgICB9XG5cbiAgICAgIGZpbGxfd2luZG93KHMpO1xuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG5cbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgfVxuICAgIC8vQXNzZXJ0KHMtPmJsb2NrX3N0YXJ0ID49IDBMLCBcImJsb2NrIGdvbmVcIik7XG4vLyAgICBpZiAocy5ibG9ja19zdGFydCA8IDApIHRocm93IG5ldyBFcnJvcihcImJsb2NrIGdvbmVcIik7XG5cbiAgICBzLnN0cnN0YXJ0ICs9IHMubG9va2FoZWFkO1xuICAgIHMubG9va2FoZWFkID0gMDtcblxuICAgIC8qIEVtaXQgYSBzdG9yZWQgYmxvY2sgaWYgcGVuZGluZ19idWYgd2lsbCBiZSBmdWxsOiAqL1xuICAgIGNvbnN0IG1heF9zdGFydCA9IHMuYmxvY2tfc3RhcnQgKyBtYXhfYmxvY2tfc2l6ZTtcblxuICAgIGlmIChzLnN0cnN0YXJ0ID09PSAwIHx8IHMuc3Ryc3RhcnQgPj0gbWF4X3N0YXJ0KSB7XG4gICAgICAvKiBzdHJzdGFydCA9PSAwIGlzIHBvc3NpYmxlIHdoZW4gd3JhcGFyb3VuZCBvbiAxNi1iaXQgbWFjaGluZSAqL1xuICAgICAgcy5sb29rYWhlYWQgPSBzLnN0cnN0YXJ0IC0gbWF4X3N0YXJ0O1xuICAgICAgcy5zdHJzdGFydCA9IG1heF9zdGFydDtcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIC8qKiovXG5cblxuICAgIH1cbiAgICAvKiBGbHVzaCBpZiB3ZSBtYXkgaGF2ZSB0byBzbGlkZSwgb3RoZXJ3aXNlIGJsb2NrX3N0YXJ0IG1heSBiZWNvbWVcbiAgICAgKiBuZWdhdGl2ZSBhbmQgdGhlIGRhdGEgd2lsbCBiZSBnb25lOlxuICAgICAqL1xuICAgIGlmIChzLnN0cnN0YXJ0IC0gcy5ibG9ja19zdGFydCA+PSAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkge1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cbiAgICB9XG4gIH1cblxuICBzLmluc2VydCA9IDA7XG5cbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7XG4gICAgfVxuICAgIC8qKiovXG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG5cbiAgaWYgKHMuc3Ryc3RhcnQgPiBzLmJsb2NrX3N0YXJ0KSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgIH1cbiAgICAvKioqL1xuICB9XG5cbiAgcmV0dXJuIEJTX05FRURfTU9SRTtcbn07XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29tcHJlc3MgYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIHRoZSBpbnB1dCBzdHJlYW0sIHJldHVybiB0aGUgY3VycmVudFxuICogYmxvY2sgc3RhdGUuXG4gKiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IHBlcmZvcm0gbGF6eSBldmFsdWF0aW9uIG9mIG1hdGNoZXMgYW5kIGluc2VydHNcbiAqIG5ldyBzdHJpbmdzIGluIHRoZSBkaWN0aW9uYXJ5IG9ubHkgZm9yIHVubWF0Y2hlZCBzdHJpbmdzIG9yIGZvciBzaG9ydFxuICogbWF0Y2hlcy4gSXQgaXMgdXNlZCBvbmx5IGZvciB0aGUgZmFzdCBjb21wcmVzc2lvbiBvcHRpb25zLlxuICovXG5jb25zdCBkZWZsYXRlX2Zhc3QgPSAocywgZmx1c2gpID0+IHtcblxuICBsZXQgaGFzaF9oZWFkOyAgICAgICAgLyogaGVhZCBvZiB0aGUgaGFzaCBjaGFpbiAqL1xuICBsZXQgYmZsdXNoOyAgICAgICAgICAgLyogc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkICovXG5cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG4gICAgICogZm9yIHRoZSBuZXh0IG1hdGNoLCBwbHVzIE1JTl9NQVRDSCBieXRlcyB0byBpbnNlcnQgdGhlXG4gICAgICogc3RyaW5nIGZvbGxvd2luZyB0aGUgbmV4dCBtYXRjaC5cbiAgICAgKi9cbiAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEKSB7XG4gICAgICBmaWxsX3dpbmRvdyhzKTtcbiAgICAgIGlmIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gpIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgICBicmVhazsgLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBJbnNlcnQgdGhlIHN0cmluZyB3aW5kb3dbc3Ryc3RhcnQgLi4gc3Ryc3RhcnQrMl0gaW4gdGhlXG4gICAgICogZGljdGlvbmFyeSwgYW5kIHNldCBoYXNoX2hlYWQgdG8gdGhlIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW46XG4gICAgICovXG4gICAgaGFzaF9oZWFkID0gMC8qTklMKi87XG4gICAgaWYgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCQxKSB7XG4gICAgICAvKioqIElOU0VSVF9TVFJJTkcocywgcy5zdHJzdGFydCwgaGFzaF9oZWFkKTsgKioqL1xuICAgICAgcy5pbnNfaCA9IEhBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCQxIC0gMV0pO1xuICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzLnN0cnN0YXJ0O1xuICAgICAgLyoqKi9cbiAgICB9XG5cbiAgICAvKiBGaW5kIHRoZSBsb25nZXN0IG1hdGNoLCBkaXNjYXJkaW5nIHRob3NlIDw9IHByZXZfbGVuZ3RoLlxuICAgICAqIEF0IHRoaXMgcG9pbnQgd2UgaGF2ZSBhbHdheXMgbWF0Y2hfbGVuZ3RoIDwgTUlOX01BVENIXG4gICAgICovXG4gICAgaWYgKGhhc2hfaGVhZCAhPT0gMC8qTklMKi8gJiYgKChzLnN0cnN0YXJ0IC0gaGFzaF9oZWFkKSA8PSAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkpIHtcbiAgICAgIC8qIFRvIHNpbXBsaWZ5IHRoZSBjb2RlLCB3ZSBwcmV2ZW50IG1hdGNoZXMgd2l0aCB0aGUgc3RyaW5nXG4gICAgICAgKiBvZiB3aW5kb3cgaW5kZXggMCAoaW4gcGFydGljdWxhciB3ZSBoYXZlIHRvIGF2b2lkIGEgbWF0Y2hcbiAgICAgICAqIG9mIHRoZSBzdHJpbmcgd2l0aCBpdHNlbGYgYXQgdGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBmaWxlKS5cbiAgICAgICAqL1xuICAgICAgcy5tYXRjaF9sZW5ndGggPSBsb25nZXN0X21hdGNoKHMsIGhhc2hfaGVhZCk7XG4gICAgICAvKiBsb25nZXN0X21hdGNoKCkgc2V0cyBtYXRjaF9zdGFydCAqL1xuICAgIH1cbiAgICBpZiAocy5tYXRjaF9sZW5ndGggPj0gTUlOX01BVENIJDEpIHtcbiAgICAgIC8vIGNoZWNrX21hdGNoKHMsIHMuc3Ryc3RhcnQsIHMubWF0Y2hfc3RhcnQsIHMubWF0Y2hfbGVuZ3RoKTsgLy8gZm9yIGRlYnVnIG9ubHlcblxuICAgICAgLyoqKiBfdHJfdGFsbHlfZGlzdChzLCBzLnN0cnN0YXJ0IC0gcy5tYXRjaF9zdGFydCxcbiAgICAgICAgICAgICAgICAgICAgIHMubWF0Y2hfbGVuZ3RoIC0gTUlOX01BVENILCBiZmx1c2gpOyAqKiovXG4gICAgICBiZmx1c2ggPSBfdHJfdGFsbHkkMShzLCBzLnN0cnN0YXJ0IC0gcy5tYXRjaF9zdGFydCwgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gkMSk7XG5cbiAgICAgIHMubG9va2FoZWFkIC09IHMubWF0Y2hfbGVuZ3RoO1xuXG4gICAgICAvKiBJbnNlcnQgbmV3IHN0cmluZ3MgaW4gdGhlIGhhc2ggdGFibGUgb25seSBpZiB0aGUgbWF0Y2ggbGVuZ3RoXG4gICAgICAgKiBpcyBub3QgdG9vIGxhcmdlLiBUaGlzIHNhdmVzIHRpbWUgYnV0IGRlZ3JhZGVzIGNvbXByZXNzaW9uLlxuICAgICAgICovXG4gICAgICBpZiAocy5tYXRjaF9sZW5ndGggPD0gcy5tYXhfbGF6eV9tYXRjaC8qbWF4X2luc2VydF9sZW5ndGgqLyAmJiBzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0gkMSkge1xuICAgICAgICBzLm1hdGNoX2xlbmd0aC0tOyAvKiBzdHJpbmcgYXQgc3Ryc3RhcnQgYWxyZWFkeSBpbiB0YWJsZSAqL1xuICAgICAgICBkbyB7XG4gICAgICAgICAgcy5zdHJzdGFydCsrO1xuICAgICAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXG4gICAgICAgICAgcy5pbnNfaCA9IEhBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCQxIC0gMV0pO1xuICAgICAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuICAgICAgICAgIHMuaGVhZFtzLmluc19oXSA9IHMuc3Ryc3RhcnQ7XG4gICAgICAgICAgLyoqKi9cbiAgICAgICAgICAvKiBzdHJzdGFydCBuZXZlciBleGNlZWRzIFdTSVpFLU1BWF9NQVRDSCwgc28gdGhlcmUgYXJlXG4gICAgICAgICAgICogYWx3YXlzIE1JTl9NQVRDSCBieXRlcyBhaGVhZC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgfSB3aGlsZSAoLS1zLm1hdGNoX2xlbmd0aCAhPT0gMCk7XG4gICAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICAgIH0gZWxzZVxuICAgICAge1xuICAgICAgICBzLnN0cnN0YXJ0ICs9IHMubWF0Y2hfbGVuZ3RoO1xuICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IDA7XG4gICAgICAgIHMuaW5zX2ggPSBzLndpbmRvd1tzLnN0cnN0YXJ0XTtcbiAgICAgICAgLyogVVBEQVRFX0hBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbcy5zdHJzdGFydCsxXSk7ICovXG4gICAgICAgIHMuaW5zX2ggPSBIQVNIKHMsIHMuaW5zX2gsIHMud2luZG93W3Muc3Ryc3RhcnQgKyAxXSk7XG5cbi8vI2lmIE1JTl9NQVRDSCAhPSAzXG4vLyAgICAgICAgICAgICAgICBDYWxsIFVQREFURV9IQVNIKCkgTUlOX01BVENILTMgbW9yZSB0aW1lc1xuLy8jZW5kaWZcbiAgICAgICAgLyogSWYgbG9va2FoZWFkIDwgTUlOX01BVENILCBpbnNfaCBpcyBnYXJiYWdlLCBidXQgaXQgZG9lcyBub3RcbiAgICAgICAgICogbWF0dGVyIHNpbmNlIGl0IHdpbGwgYmUgcmVjb21wdXRlZCBhdCBuZXh0IGRlZmxhdGUgY2FsbC5cbiAgICAgICAgICovXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIE5vIG1hdGNoLCBvdXRwdXQgYSBsaXRlcmFsIGJ5dGUgKi9cbiAgICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy53aW5kb3dbcy5zdHJzdGFydF0pKTtcbiAgICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gX3RyX3RhbGx5JDEocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydF0pO1xuXG4gICAgICBzLmxvb2thaGVhZC0tO1xuICAgICAgcy5zdHJzdGFydCsrO1xuICAgIH1cbiAgICBpZiAoYmZsdXNoKSB7XG4gICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICAvKioqL1xuICAgIH1cbiAgfVxuICBzLmluc2VydCA9ICgocy5zdHJzdGFydCA8IChNSU5fTUFUQ0gkMSAtIDEpKSA/IHMuc3Ryc3RhcnQgOiBNSU5fTUFUQ0gkMSAtIDEpO1xuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIKSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgdHJ1ZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDtcbiAgICB9XG4gICAgLyoqKi9cbiAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7XG4gIH1cbiAgaWYgKHMubGFzdF9saXQpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgfVxuICAgIC8qKiovXG4gIH1cbiAgcmV0dXJuIEJTX0JMT0NLX0RPTkU7XG59O1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNhbWUgYXMgYWJvdmUsIGJ1dCBhY2hpZXZlcyBiZXR0ZXIgY29tcHJlc3Npb24uIFdlIHVzZSBhIGxhenlcbiAqIGV2YWx1YXRpb24gZm9yIG1hdGNoZXM6IGEgbWF0Y2ggaXMgZmluYWxseSBhZG9wdGVkIG9ubHkgaWYgdGhlcmUgaXNcbiAqIG5vIGJldHRlciBtYXRjaCBhdCB0aGUgbmV4dCB3aW5kb3cgcG9zaXRpb24uXG4gKi9cbmNvbnN0IGRlZmxhdGVfc2xvdyA9IChzLCBmbHVzaCkgPT4ge1xuXG4gIGxldCBoYXNoX2hlYWQ7ICAgICAgICAgIC8qIGhlYWQgb2YgaGFzaCBjaGFpbiAqL1xuICBsZXQgYmZsdXNoOyAgICAgICAgICAgICAgLyogc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkICovXG5cbiAgbGV0IG1heF9pbnNlcnQ7XG5cbiAgLyogUHJvY2VzcyB0aGUgaW5wdXQgYmxvY2suICovXG4gIGZvciAoOzspIHtcbiAgICAvKiBNYWtlIHN1cmUgdGhhdCB3ZSBhbHdheXMgaGF2ZSBlbm91Z2ggbG9va2FoZWFkLCBleGNlcHRcbiAgICAgKiBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBmaWxlLiBXZSBuZWVkIE1BWF9NQVRDSCBieXRlc1xuICAgICAqIGZvciB0aGUgbmV4dCBtYXRjaCwgcGx1cyBNSU5fTUFUQ0ggYnl0ZXMgdG8gaW5zZXJ0IHRoZVxuICAgICAqIHN0cmluZyBmb2xsb3dpbmcgdGhlIG5leHQgbWF0Y2guXG4gICAgICovXG4gICAgaWYgKHMubG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCkge1xuICAgICAgZmlsbF93aW5kb3cocyk7XG4gICAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHsgYnJlYWs7IH0gLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cbiAgICB9XG5cbiAgICAvKiBJbnNlcnQgdGhlIHN0cmluZyB3aW5kb3dbc3Ryc3RhcnQgLi4gc3Ryc3RhcnQrMl0gaW4gdGhlXG4gICAgICogZGljdGlvbmFyeSwgYW5kIHNldCBoYXNoX2hlYWQgdG8gdGhlIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW46XG4gICAgICovXG4gICAgaGFzaF9oZWFkID0gMC8qTklMKi87XG4gICAgaWYgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCQxKSB7XG4gICAgICAvKioqIElOU0VSVF9TVFJJTkcocywgcy5zdHJzdGFydCwgaGFzaF9oZWFkKTsgKioqL1xuICAgICAgcy5pbnNfaCA9IEhBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCQxIC0gMV0pO1xuICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzLnN0cnN0YXJ0O1xuICAgICAgLyoqKi9cbiAgICB9XG5cbiAgICAvKiBGaW5kIHRoZSBsb25nZXN0IG1hdGNoLCBkaXNjYXJkaW5nIHRob3NlIDw9IHByZXZfbGVuZ3RoLlxuICAgICAqL1xuICAgIHMucHJldl9sZW5ndGggPSBzLm1hdGNoX2xlbmd0aDtcbiAgICBzLnByZXZfbWF0Y2ggPSBzLm1hdGNoX3N0YXJ0O1xuICAgIHMubWF0Y2hfbGVuZ3RoID0gTUlOX01BVENIJDEgLSAxO1xuXG4gICAgaWYgKGhhc2hfaGVhZCAhPT0gMC8qTklMKi8gJiYgcy5wcmV2X2xlbmd0aCA8IHMubWF4X2xhenlfbWF0Y2ggJiZcbiAgICAgICAgcy5zdHJzdGFydCAtIGhhc2hfaGVhZCA8PSAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKS8qTUFYX0RJU1QocykqLykge1xuICAgICAgLyogVG8gc2ltcGxpZnkgdGhlIGNvZGUsIHdlIHByZXZlbnQgbWF0Y2hlcyB3aXRoIHRoZSBzdHJpbmdcbiAgICAgICAqIG9mIHdpbmRvdyBpbmRleCAwIChpbiBwYXJ0aWN1bGFyIHdlIGhhdmUgdG8gYXZvaWQgYSBtYXRjaFxuICAgICAgICogb2YgdGhlIHN0cmluZyB3aXRoIGl0c2VsZiBhdCB0aGUgc3RhcnQgb2YgdGhlIGlucHV0IGZpbGUpLlxuICAgICAgICovXG4gICAgICBzLm1hdGNoX2xlbmd0aCA9IGxvbmdlc3RfbWF0Y2gocywgaGFzaF9oZWFkKTtcbiAgICAgIC8qIGxvbmdlc3RfbWF0Y2goKSBzZXRzIG1hdGNoX3N0YXJ0ICovXG5cbiAgICAgIGlmIChzLm1hdGNoX2xlbmd0aCA8PSA1ICYmXG4gICAgICAgICAocy5zdHJhdGVneSA9PT0gWl9GSUxURVJFRCB8fCAocy5tYXRjaF9sZW5ndGggPT09IE1JTl9NQVRDSCQxICYmIHMuc3Ryc3RhcnQgLSBzLm1hdGNoX3N0YXJ0ID4gNDA5Ni8qVE9PX0ZBUiovKSkpIHtcblxuICAgICAgICAvKiBJZiBwcmV2X21hdGNoIGlzIGFsc28gTUlOX01BVENILCBtYXRjaF9zdGFydCBpcyBnYXJiYWdlXG4gICAgICAgICAqIGJ1dCB3ZSB3aWxsIGlnbm9yZSB0aGUgY3VycmVudCBtYXRjaCBhbnl3YXkuXG4gICAgICAgICAqL1xuICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IE1JTl9NQVRDSCQxIC0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyogSWYgdGhlcmUgd2FzIGEgbWF0Y2ggYXQgdGhlIHByZXZpb3VzIHN0ZXAgYW5kIHRoZSBjdXJyZW50XG4gICAgICogbWF0Y2ggaXMgbm90IGJldHRlciwgb3V0cHV0IHRoZSBwcmV2aW91cyBtYXRjaDpcbiAgICAgKi9cbiAgICBpZiAocy5wcmV2X2xlbmd0aCA+PSBNSU5fTUFUQ0gkMSAmJiBzLm1hdGNoX2xlbmd0aCA8PSBzLnByZXZfbGVuZ3RoKSB7XG4gICAgICBtYXhfaW5zZXJ0ID0gcy5zdHJzdGFydCArIHMubG9va2FoZWFkIC0gTUlOX01BVENIJDE7XG4gICAgICAvKiBEbyBub3QgaW5zZXJ0IHN0cmluZ3MgaW4gaGFzaCB0YWJsZSBiZXlvbmQgdGhpcy4gKi9cblxuICAgICAgLy9jaGVja19tYXRjaChzLCBzLnN0cnN0YXJ0LTEsIHMucHJldl9tYXRjaCwgcy5wcmV2X2xlbmd0aCk7XG5cbiAgICAgIC8qKipfdHJfdGFsbHlfZGlzdChzLCBzLnN0cnN0YXJ0IC0gMSAtIHMucHJldl9tYXRjaCxcbiAgICAgICAgICAgICAgICAgICAgIHMucHJldl9sZW5ndGggLSBNSU5fTUFUQ0gsIGJmbHVzaCk7KioqL1xuICAgICAgYmZsdXNoID0gX3RyX3RhbGx5JDEocywgcy5zdHJzdGFydCAtIDEgLSBzLnByZXZfbWF0Y2gsIHMucHJldl9sZW5ndGggLSBNSU5fTUFUQ0gkMSk7XG4gICAgICAvKiBJbnNlcnQgaW4gaGFzaCB0YWJsZSBhbGwgc3RyaW5ncyB1cCB0byB0aGUgZW5kIG9mIHRoZSBtYXRjaC5cbiAgICAgICAqIHN0cnN0YXJ0LTEgYW5kIHN0cnN0YXJ0IGFyZSBhbHJlYWR5IGluc2VydGVkLiBJZiB0aGVyZSBpcyBub3RcbiAgICAgICAqIGVub3VnaCBsb29rYWhlYWQsIHRoZSBsYXN0IHR3byBzdHJpbmdzIGFyZSBub3QgaW5zZXJ0ZWQgaW5cbiAgICAgICAqIHRoZSBoYXNoIHRhYmxlLlxuICAgICAgICovXG4gICAgICBzLmxvb2thaGVhZCAtPSBzLnByZXZfbGVuZ3RoIC0gMTtcbiAgICAgIHMucHJldl9sZW5ndGggLT0gMjtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKCsrcy5zdHJzdGFydCA8PSBtYXhfaW5zZXJ0KSB7XG4gICAgICAgICAgLyoqKiBJTlNFUlRfU1RSSU5HKHMsIHMuc3Ryc3RhcnQsIGhhc2hfaGVhZCk7ICoqKi9cbiAgICAgICAgICBzLmluc19oID0gSEFTSChzLCBzLmluc19oLCBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIJDEgLSAxXSk7XG4gICAgICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDtcbiAgICAgICAgICAvKioqL1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlICgtLXMucHJldl9sZW5ndGggIT09IDApO1xuICAgICAgcy5tYXRjaF9hdmFpbGFibGUgPSAwO1xuICAgICAgcy5tYXRjaF9sZW5ndGggPSBNSU5fTUFUQ0gkMSAtIDE7XG4gICAgICBzLnN0cnN0YXJ0Kys7XG5cbiAgICAgIGlmIChiZmx1c2gpIHtcbiAgICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgICB9XG4gICAgICAgIC8qKiovXG4gICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKHMubWF0Y2hfYXZhaWxhYmxlKSB7XG4gICAgICAvKiBJZiB0aGVyZSB3YXMgbm8gbWF0Y2ggYXQgdGhlIHByZXZpb3VzIHBvc2l0aW9uLCBvdXRwdXQgYVxuICAgICAgICogc2luZ2xlIGxpdGVyYWwuIElmIHRoZXJlIHdhcyBhIG1hdGNoIGJ1dCB0aGUgY3VycmVudCBtYXRjaFxuICAgICAgICogaXMgbG9uZ2VyLCB0cnVuY2F0ZSB0aGUgcHJldmlvdXMgbWF0Y2ggdG8gYSBzaW5nbGUgbGl0ZXJhbC5cbiAgICAgICAqL1xuICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLT53aW5kb3dbcy0+c3Ryc3RhcnQtMV0pKTtcbiAgICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0LTFdLCBiZmx1c2gpOyAqKiovXG4gICAgICBiZmx1c2ggPSBfdHJfdGFsbHkkMShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0IC0gMV0pO1xuXG4gICAgICBpZiAoYmZsdXNoKSB7XG4gICAgICAgIC8qKiogRkxVU0hfQkxPQ0tfT05MWShzLCAwKSAqKiovXG4gICAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgICAvKioqL1xuICAgICAgfVxuICAgICAgcy5zdHJzdGFydCsrO1xuICAgICAgcy5sb29rYWhlYWQtLTtcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIFRoZXJlIGlzIG5vIHByZXZpb3VzIG1hdGNoIHRvIGNvbXBhcmUgd2l0aCwgd2FpdCBmb3JcbiAgICAgICAqIHRoZSBuZXh0IHN0ZXAgdG8gZGVjaWRlLlxuICAgICAgICovXG4gICAgICBzLm1hdGNoX2F2YWlsYWJsZSA9IDE7XG4gICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgICBzLmxvb2thaGVhZC0tO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAoZmx1c2ggIT0gWl9OT19GTFVTSCwgXCJubyBmbHVzaD9cIik7XG4gIGlmIChzLm1hdGNoX2F2YWlsYWJsZSkge1xuICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0LTFdKSk7XG4gICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnQtMV0sIGJmbHVzaCk7ICoqKi9cbiAgICBiZmx1c2ggPSBfdHJfdGFsbHkkMShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0IC0gMV0pO1xuXG4gICAgcy5tYXRjaF9hdmFpbGFibGUgPSAwO1xuICB9XG4gIHMuaW5zZXJ0ID0gcy5zdHJzdGFydCA8IE1JTl9NQVRDSCQxIC0gMSA/IHMuc3Ryc3RhcnQgOiBNSU5fTUFUQ0gkMSAtIDE7XG4gIGlmIChmbHVzaCA9PT0gWl9GSU5JU0gpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5sYXN0X2xpdCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuXG4gIHJldHVybiBCU19CTE9DS19ET05FO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZvciBaX1JMRSwgc2ltcGx5IGxvb2sgZm9yIHJ1bnMgb2YgYnl0ZXMsIGdlbmVyYXRlIG1hdGNoZXMgb25seSBvZiBkaXN0YW5jZVxuICogb25lLiAgRG8gbm90IG1haW50YWluIGEgaGFzaCB0YWJsZS4gIChJdCB3aWxsIGJlIHJlZ2VuZXJhdGVkIGlmIHRoaXMgcnVuIG9mXG4gKiBkZWZsYXRlIHN3aXRjaGVzIGF3YXkgZnJvbSBaX1JMRS4pXG4gKi9cbmNvbnN0IGRlZmxhdGVfcmxlID0gKHMsIGZsdXNoKSA9PiB7XG5cbiAgbGV0IGJmbHVzaDsgICAgICAgICAgICAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi9cbiAgbGV0IHByZXY7ICAgICAgICAgICAgICAvKiBieXRlIGF0IGRpc3RhbmNlIG9uZSB0byBtYXRjaCAqL1xuICBsZXQgc2Nhbiwgc3RyZW5kOyAgICAgIC8qIHNjYW4gZ29lcyB1cCB0byBzdHJlbmQgZm9yIGxlbmd0aCBvZiBydW4gKi9cblxuICBjb25zdCBfd2luID0gcy53aW5kb3c7XG5cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG4gICAgICogZm9yIHRoZSBsb25nZXN0IHJ1biwgcGx1cyBvbmUgZm9yIHRoZSB1bnJvbGxlZCBsb29wLlxuICAgICAqL1xuICAgIGlmIChzLmxvb2thaGVhZCA8PSBNQVhfTUFUQ0gkMSkge1xuICAgICAgZmlsbF93aW5kb3cocyk7XG4gICAgICBpZiAocy5sb29rYWhlYWQgPD0gTUFYX01BVENIJDEgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gpIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkgeyBicmVhazsgfSAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqL1xuICAgIH1cblxuICAgIC8qIFNlZSBob3cgbWFueSB0aW1lcyB0aGUgcHJldmlvdXMgYnl0ZSByZXBlYXRzICovXG4gICAgcy5tYXRjaF9sZW5ndGggPSAwO1xuICAgIGlmIChzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0gkMSAmJiBzLnN0cnN0YXJ0ID4gMCkge1xuICAgICAgc2NhbiA9IHMuc3Ryc3RhcnQgLSAxO1xuICAgICAgcHJldiA9IF93aW5bc2Nhbl07XG4gICAgICBpZiAocHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0pIHtcbiAgICAgICAgc3RyZW5kID0gcy5zdHJzdGFydCArIE1BWF9NQVRDSCQxO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgLypqc2hpbnQgbm9lbXB0eTpmYWxzZSovXG4gICAgICAgIH0gd2hpbGUgKHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiZcbiAgICAgICAgICAgICAgICAgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJlxuICAgICAgICAgICAgICAgICBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmXG4gICAgICAgICAgICAgICAgIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiZcbiAgICAgICAgICAgICAgICAgc2NhbiA8IHN0cmVuZCk7XG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gTUFYX01BVENIJDEgLSAoc3RyZW5kIC0gc2Nhbik7XG4gICAgICAgIGlmIChzLm1hdGNoX2xlbmd0aCA+IHMubG9va2FoZWFkKSB7XG4gICAgICAgICAgcy5tYXRjaF9sZW5ndGggPSBzLmxvb2thaGVhZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy9Bc3NlcnQoc2NhbiA8PSBzLT53aW5kb3crKHVJbnQpKHMtPndpbmRvd19zaXplLTEpLCBcIndpbGQgc2NhblwiKTtcbiAgICB9XG5cbiAgICAvKiBFbWl0IG1hdGNoIGlmIGhhdmUgcnVuIG9mIE1JTl9NQVRDSCBvciBsb25nZXIsIGVsc2UgZW1pdCBsaXRlcmFsICovXG4gICAgaWYgKHMubWF0Y2hfbGVuZ3RoID49IE1JTl9NQVRDSCQxKSB7XG4gICAgICAvL2NoZWNrX21hdGNoKHMsIHMuc3Ryc3RhcnQsIHMuc3Ryc3RhcnQgLSAxLCBzLm1hdGNoX2xlbmd0aCk7XG5cbiAgICAgIC8qKiogX3RyX3RhbGx5X2Rpc3QocywgMSwgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gsIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IF90cl90YWxseSQxKHMsIDEsIHMubWF0Y2hfbGVuZ3RoIC0gTUlOX01BVENIJDEpO1xuXG4gICAgICBzLmxvb2thaGVhZCAtPSBzLm1hdGNoX2xlbmd0aDtcbiAgICAgIHMuc3Ryc3RhcnQgKz0gcy5tYXRjaF9sZW5ndGg7XG4gICAgICBzLm1hdGNoX2xlbmd0aCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIE5vIG1hdGNoLCBvdXRwdXQgYSBsaXRlcmFsIGJ5dGUgKi9cbiAgICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0XSkpO1xuICAgICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnRdLCBiZmx1c2gpOyAqKiovXG4gICAgICBiZmx1c2ggPSBfdHJfdGFsbHkkMShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSk7XG5cbiAgICAgIHMubG9va2FoZWFkLS07XG4gICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgfVxuICAgIGlmIChiZmx1c2gpIHtcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIC8qKiovXG4gICAgfVxuICB9XG4gIHMuaW5zZXJ0ID0gMDtcbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7XG4gICAgfVxuICAgIC8qKiovXG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG4gIGlmIChzLmxhc3RfbGl0KSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgIH1cbiAgICAvKioqL1xuICB9XG4gIHJldHVybiBCU19CTE9DS19ET05FO1xufTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGb3IgWl9IVUZGTUFOX09OTFksIGRvIG5vdCBsb29rIGZvciBtYXRjaGVzLiAgRG8gbm90IG1haW50YWluIGEgaGFzaCB0YWJsZS5cbiAqIChJdCB3aWxsIGJlIHJlZ2VuZXJhdGVkIGlmIHRoaXMgcnVuIG9mIGRlZmxhdGUgc3dpdGNoZXMgYXdheSBmcm9tIEh1ZmZtYW4uKVxuICovXG5jb25zdCBkZWZsYXRlX2h1ZmYgPSAocywgZmx1c2gpID0+IHtcblxuICBsZXQgYmZsdXNoOyAgICAgICAgICAgICAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi9cblxuICBmb3IgKDs7KSB7XG4gICAgLyogTWFrZSBzdXJlIHRoYXQgd2UgaGF2ZSBhIGxpdGVyYWwgdG8gd3JpdGUuICovXG4gICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XG4gICAgICBmaWxsX3dpbmRvdyhzKTtcbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgICBpZiAoZmx1c2ggPT09IFpfTk9fRkxVU0gpIHtcbiAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrOyAgICAgIC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogT3V0cHV0IGEgbGl0ZXJhbCBieXRlICovXG4gICAgcy5tYXRjaF9sZW5ndGggPSAwO1xuICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0XSkpO1xuICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqL1xuICAgIGJmbHVzaCA9IF90cl90YWxseSQxKHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnRdKTtcbiAgICBzLmxvb2thaGVhZC0tO1xuICAgIHMuc3Ryc3RhcnQrKztcbiAgICBpZiAoYmZsdXNoKSB7XG4gICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICAvKioqL1xuICAgIH1cbiAgfVxuICBzLmluc2VydCA9IDA7XG4gIGlmIChmbHVzaCA9PT0gWl9GSU5JU0gpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5sYXN0X2xpdCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcbn07XG5cbi8qIFZhbHVlcyBmb3IgbWF4X2xhenlfbWF0Y2gsIGdvb2RfbWF0Y2ggYW5kIG1heF9jaGFpbl9sZW5ndGgsIGRlcGVuZGluZyBvblxuICogdGhlIGRlc2lyZWQgcGFjayBsZXZlbCAoMC4uOSkuIFRoZSB2YWx1ZXMgZ2l2ZW4gYmVsb3cgaGF2ZSBiZWVuIHR1bmVkIHRvXG4gKiBleGNsdWRlIHdvcnN0IGNhc2UgcGVyZm9ybWFuY2UgZm9yIHBhdGhvbG9naWNhbCBmaWxlcy4gQmV0dGVyIHZhbHVlcyBtYXkgYmVcbiAqIGZvdW5kIGZvciBzcGVjaWZpYyBmaWxlcy5cbiAqL1xuZnVuY3Rpb24gQ29uZmlnKGdvb2RfbGVuZ3RoLCBtYXhfbGF6eSwgbmljZV9sZW5ndGgsIG1heF9jaGFpbiwgZnVuYykge1xuXG4gIHRoaXMuZ29vZF9sZW5ndGggPSBnb29kX2xlbmd0aDtcbiAgdGhpcy5tYXhfbGF6eSA9IG1heF9sYXp5O1xuICB0aGlzLm5pY2VfbGVuZ3RoID0gbmljZV9sZW5ndGg7XG4gIHRoaXMubWF4X2NoYWluID0gbWF4X2NoYWluO1xuICB0aGlzLmZ1bmMgPSBmdW5jO1xufVxuXG5jb25zdCBjb25maWd1cmF0aW9uX3RhYmxlID0gW1xuICAvKiAgICAgIGdvb2QgbGF6eSBuaWNlIGNoYWluICovXG4gIG5ldyBDb25maWcoMCwgMCwgMCwgMCwgZGVmbGF0ZV9zdG9yZWQpLCAgICAgICAgICAvKiAwIHN0b3JlIG9ubHkgKi9cbiAgbmV3IENvbmZpZyg0LCA0LCA4LCA0LCBkZWZsYXRlX2Zhc3QpLCAgICAgICAgICAgIC8qIDEgbWF4IHNwZWVkLCBubyBsYXp5IG1hdGNoZXMgKi9cbiAgbmV3IENvbmZpZyg0LCA1LCAxNiwgOCwgZGVmbGF0ZV9mYXN0KSwgICAgICAgICAgIC8qIDIgKi9cbiAgbmV3IENvbmZpZyg0LCA2LCAzMiwgMzIsIGRlZmxhdGVfZmFzdCksICAgICAgICAgIC8qIDMgKi9cblxuICBuZXcgQ29uZmlnKDQsIDQsIDE2LCAxNiwgZGVmbGF0ZV9zbG93KSwgICAgICAgICAgLyogNCBsYXp5IG1hdGNoZXMgKi9cbiAgbmV3IENvbmZpZyg4LCAxNiwgMzIsIDMyLCBkZWZsYXRlX3Nsb3cpLCAgICAgICAgIC8qIDUgKi9cbiAgbmV3IENvbmZpZyg4LCAxNiwgMTI4LCAxMjgsIGRlZmxhdGVfc2xvdyksICAgICAgIC8qIDYgKi9cbiAgbmV3IENvbmZpZyg4LCAzMiwgMTI4LCAyNTYsIGRlZmxhdGVfc2xvdyksICAgICAgIC8qIDcgKi9cbiAgbmV3IENvbmZpZygzMiwgMTI4LCAyNTgsIDEwMjQsIGRlZmxhdGVfc2xvdyksICAgIC8qIDggKi9cbiAgbmV3IENvbmZpZygzMiwgMjU4LCAyNTgsIDQwOTYsIGRlZmxhdGVfc2xvdykgICAgIC8qIDkgbWF4IGNvbXByZXNzaW9uICovXG5dO1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSB0aGUgXCJsb25nZXN0IG1hdGNoXCIgcm91dGluZXMgZm9yIGEgbmV3IHpsaWIgc3RyZWFtXG4gKi9cbmNvbnN0IGxtX2luaXQgPSAocykgPT4ge1xuXG4gIHMud2luZG93X3NpemUgPSAyICogcy53X3NpemU7XG5cbiAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovXG4gIHplcm8kMShzLmhlYWQpOyAvLyBGaWxsIHdpdGggTklMICg9IDApO1xuXG4gIC8qIFNldCB0aGUgZGVmYXVsdCBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnM6XG4gICAqL1xuICBzLm1heF9sYXp5X21hdGNoID0gY29uZmlndXJhdGlvbl90YWJsZVtzLmxldmVsXS5tYXhfbGF6eTtcbiAgcy5nb29kX21hdGNoID0gY29uZmlndXJhdGlvbl90YWJsZVtzLmxldmVsXS5nb29kX2xlbmd0aDtcbiAgcy5uaWNlX21hdGNoID0gY29uZmlndXJhdGlvbl90YWJsZVtzLmxldmVsXS5uaWNlX2xlbmd0aDtcbiAgcy5tYXhfY2hhaW5fbGVuZ3RoID0gY29uZmlndXJhdGlvbl90YWJsZVtzLmxldmVsXS5tYXhfY2hhaW47XG5cbiAgcy5zdHJzdGFydCA9IDA7XG4gIHMuYmxvY2tfc3RhcnQgPSAwO1xuICBzLmxvb2thaGVhZCA9IDA7XG4gIHMuaW5zZXJ0ID0gMDtcbiAgcy5tYXRjaF9sZW5ndGggPSBzLnByZXZfbGVuZ3RoID0gTUlOX01BVENIJDEgLSAxO1xuICBzLm1hdGNoX2F2YWlsYWJsZSA9IDA7XG4gIHMuaW5zX2ggPSAwO1xufTtcblxuXG5mdW5jdGlvbiBEZWZsYXRlU3RhdGUoKSB7XG4gIHRoaXMuc3RybSA9IG51bGw7ICAgICAgICAgICAgLyogcG9pbnRlciBiYWNrIHRvIHRoaXMgemxpYiBzdHJlYW0gKi9cbiAgdGhpcy5zdGF0dXMgPSAwOyAgICAgICAgICAgIC8qIGFzIHRoZSBuYW1lIGltcGxpZXMgKi9cbiAgdGhpcy5wZW5kaW5nX2J1ZiA9IG51bGw7ICAgICAgLyogb3V0cHV0IHN0aWxsIHBlbmRpbmcgKi9cbiAgdGhpcy5wZW5kaW5nX2J1Zl9zaXplID0gMDsgIC8qIHNpemUgb2YgcGVuZGluZ19idWYgKi9cbiAgdGhpcy5wZW5kaW5nX291dCA9IDA7ICAgICAgIC8qIG5leHQgcGVuZGluZyBieXRlIHRvIG91dHB1dCB0byB0aGUgc3RyZWFtICovXG4gIHRoaXMucGVuZGluZyA9IDA7ICAgICAgICAgICAvKiBuYiBvZiBieXRlcyBpbiB0aGUgcGVuZGluZyBidWZmZXIgKi9cbiAgdGhpcy53cmFwID0gMDsgICAgICAgICAgICAgIC8qIGJpdCAwIHRydWUgZm9yIHpsaWIsIGJpdCAxIHRydWUgZm9yIGd6aXAgKi9cbiAgdGhpcy5nemhlYWQgPSBudWxsOyAgICAgICAgIC8qIGd6aXAgaGVhZGVyIGluZm9ybWF0aW9uIHRvIHdyaXRlICovXG4gIHRoaXMuZ3ppbmRleCA9IDA7ICAgICAgICAgICAvKiB3aGVyZSBpbiBleHRyYSwgbmFtZSwgb3IgY29tbWVudCAqL1xuICB0aGlzLm1ldGhvZCA9IFpfREVGTEFURUQ7IC8qIGNhbiBvbmx5IGJlIERFRkxBVEVEICovXG4gIHRoaXMubGFzdF9mbHVzaCA9IC0xOyAgIC8qIHZhbHVlIG9mIGZsdXNoIHBhcmFtIGZvciBwcmV2aW91cyBkZWZsYXRlIGNhbGwgKi9cblxuICB0aGlzLndfc2l6ZSA9IDA7ICAvKiBMWjc3IHdpbmRvdyBzaXplICgzMksgYnkgZGVmYXVsdCkgKi9cbiAgdGhpcy53X2JpdHMgPSAwOyAgLyogbG9nMih3X3NpemUpICAoOC4uMTYpICovXG4gIHRoaXMud19tYXNrID0gMDsgIC8qIHdfc2l6ZSAtIDEgKi9cblxuICB0aGlzLndpbmRvdyA9IG51bGw7XG4gIC8qIFNsaWRpbmcgd2luZG93LiBJbnB1dCBieXRlcyBhcmUgcmVhZCBpbnRvIHRoZSBzZWNvbmQgaGFsZiBvZiB0aGUgd2luZG93LFxuICAgKiBhbmQgbW92ZSB0byB0aGUgZmlyc3QgaGFsZiBsYXRlciB0byBrZWVwIGEgZGljdGlvbmFyeSBvZiBhdCBsZWFzdCB3U2l6ZVxuICAgKiBieXRlcy4gV2l0aCB0aGlzIG9yZ2FuaXphdGlvbiwgbWF0Y2hlcyBhcmUgbGltaXRlZCB0byBhIGRpc3RhbmNlIG9mXG4gICAqIHdTaXplLU1BWF9NQVRDSCBieXRlcywgYnV0IHRoaXMgZW5zdXJlcyB0aGF0IElPIGlzIGFsd2F5c1xuICAgKiBwZXJmb3JtZWQgd2l0aCBhIGxlbmd0aCBtdWx0aXBsZSBvZiB0aGUgYmxvY2sgc2l6ZS5cbiAgICovXG5cbiAgdGhpcy53aW5kb3dfc2l6ZSA9IDA7XG4gIC8qIEFjdHVhbCBzaXplIG9mIHdpbmRvdzogMip3U2l6ZSwgZXhjZXB0IHdoZW4gdGhlIHVzZXIgaW5wdXQgYnVmZmVyXG4gICAqIGlzIGRpcmVjdGx5IHVzZWQgYXMgc2xpZGluZyB3aW5kb3cuXG4gICAqL1xuXG4gIHRoaXMucHJldiA9IG51bGw7XG4gIC8qIExpbmsgdG8gb2xkZXIgc3RyaW5nIHdpdGggc2FtZSBoYXNoIGluZGV4LiBUbyBsaW1pdCB0aGUgc2l6ZSBvZiB0aGlzXG4gICAqIGFycmF5IHRvIDY0SywgdGhpcyBsaW5rIGlzIG1haW50YWluZWQgb25seSBmb3IgdGhlIGxhc3QgMzJLIHN0cmluZ3MuXG4gICAqIEFuIGluZGV4IGluIHRoaXMgYXJyYXkgaXMgdGh1cyBhIHdpbmRvdyBpbmRleCBtb2R1bG8gMzJLLlxuICAgKi9cblxuICB0aGlzLmhlYWQgPSBudWxsOyAgIC8qIEhlYWRzIG9mIHRoZSBoYXNoIGNoYWlucyBvciBOSUwuICovXG5cbiAgdGhpcy5pbnNfaCA9IDA7ICAgICAgIC8qIGhhc2ggaW5kZXggb2Ygc3RyaW5nIHRvIGJlIGluc2VydGVkICovXG4gIHRoaXMuaGFzaF9zaXplID0gMDsgICAvKiBudW1iZXIgb2YgZWxlbWVudHMgaW4gaGFzaCB0YWJsZSAqL1xuICB0aGlzLmhhc2hfYml0cyA9IDA7ICAgLyogbG9nMihoYXNoX3NpemUpICovXG4gIHRoaXMuaGFzaF9tYXNrID0gMDsgICAvKiBoYXNoX3NpemUtMSAqL1xuXG4gIHRoaXMuaGFzaF9zaGlmdCA9IDA7XG4gIC8qIE51bWJlciBvZiBiaXRzIGJ5IHdoaWNoIGluc19oIG11c3QgYmUgc2hpZnRlZCBhdCBlYWNoIGlucHV0XG4gICAqIHN0ZXAuIEl0IG11c3QgYmUgc3VjaCB0aGF0IGFmdGVyIE1JTl9NQVRDSCBzdGVwcywgdGhlIG9sZGVzdFxuICAgKiBieXRlIG5vIGxvbmdlciB0YWtlcyBwYXJ0IGluIHRoZSBoYXNoIGtleSwgdGhhdCBpczpcbiAgICogICBoYXNoX3NoaWZ0ICogTUlOX01BVENIID49IGhhc2hfYml0c1xuICAgKi9cblxuICB0aGlzLmJsb2NrX3N0YXJ0ID0gMDtcbiAgLyogV2luZG93IHBvc2l0aW9uIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGN1cnJlbnQgb3V0cHV0IGJsb2NrLiBHZXRzXG4gICAqIG5lZ2F0aXZlIHdoZW4gdGhlIHdpbmRvdyBpcyBtb3ZlZCBiYWNrd2FyZHMuXG4gICAqL1xuXG4gIHRoaXMubWF0Y2hfbGVuZ3RoID0gMDsgICAgICAvKiBsZW5ndGggb2YgYmVzdCBtYXRjaCAqL1xuICB0aGlzLnByZXZfbWF0Y2ggPSAwOyAgICAgICAgLyogcHJldmlvdXMgbWF0Y2ggKi9cbiAgdGhpcy5tYXRjaF9hdmFpbGFibGUgPSAwOyAgIC8qIHNldCBpZiBwcmV2aW91cyBtYXRjaCBleGlzdHMgKi9cbiAgdGhpcy5zdHJzdGFydCA9IDA7ICAgICAgICAgIC8qIHN0YXJ0IG9mIHN0cmluZyB0byBpbnNlcnQgKi9cbiAgdGhpcy5tYXRjaF9zdGFydCA9IDA7ICAgICAgIC8qIHN0YXJ0IG9mIG1hdGNoaW5nIHN0cmluZyAqL1xuICB0aGlzLmxvb2thaGVhZCA9IDA7ICAgICAgICAgLyogbnVtYmVyIG9mIHZhbGlkIGJ5dGVzIGFoZWFkIGluIHdpbmRvdyAqL1xuXG4gIHRoaXMucHJldl9sZW5ndGggPSAwO1xuICAvKiBMZW5ndGggb2YgdGhlIGJlc3QgbWF0Y2ggYXQgcHJldmlvdXMgc3RlcC4gTWF0Y2hlcyBub3QgZ3JlYXRlciB0aGFuIHRoaXNcbiAgICogYXJlIGRpc2NhcmRlZC4gVGhpcyBpcyB1c2VkIGluIHRoZSBsYXp5IG1hdGNoIGV2YWx1YXRpb24uXG4gICAqL1xuXG4gIHRoaXMubWF4X2NoYWluX2xlbmd0aCA9IDA7XG4gIC8qIFRvIHNwZWVkIHVwIGRlZmxhdGlvbiwgaGFzaCBjaGFpbnMgYXJlIG5ldmVyIHNlYXJjaGVkIGJleW9uZCB0aGlzXG4gICAqIGxlbmd0aC4gIEEgaGlnaGVyIGxpbWl0IGltcHJvdmVzIGNvbXByZXNzaW9uIHJhdGlvIGJ1dCBkZWdyYWRlcyB0aGVcbiAgICogc3BlZWQuXG4gICAqL1xuXG4gIHRoaXMubWF4X2xhenlfbWF0Y2ggPSAwO1xuICAvKiBBdHRlbXB0IHRvIGZpbmQgYSBiZXR0ZXIgbWF0Y2ggb25seSB3aGVuIHRoZSBjdXJyZW50IG1hdGNoIGlzIHN0cmljdGx5XG4gICAqIHNtYWxsZXIgdGhhbiB0aGlzIHZhbHVlLiBUaGlzIG1lY2hhbmlzbSBpcyB1c2VkIG9ubHkgZm9yIGNvbXByZXNzaW9uXG4gICAqIGxldmVscyA+PSA0LlxuICAgKi9cbiAgLy8gVGhhdCdzIGFsaWFzIHRvIG1heF9sYXp5X21hdGNoLCBkb24ndCB1c2UgZGlyZWN0bHlcbiAgLy90aGlzLm1heF9pbnNlcnRfbGVuZ3RoID0gMDtcbiAgLyogSW5zZXJ0IG5ldyBzdHJpbmdzIGluIHRoZSBoYXNoIHRhYmxlIG9ubHkgaWYgdGhlIG1hdGNoIGxlbmd0aCBpcyBub3RcbiAgICogZ3JlYXRlciB0aGFuIHRoaXMgbGVuZ3RoLiBUaGlzIHNhdmVzIHRpbWUgYnV0IGRlZ3JhZGVzIGNvbXByZXNzaW9uLlxuICAgKiBtYXhfaW5zZXJ0X2xlbmd0aCBpcyB1c2VkIG9ubHkgZm9yIGNvbXByZXNzaW9uIGxldmVscyA8PSAzLlxuICAgKi9cblxuICB0aGlzLmxldmVsID0gMDsgICAgIC8qIGNvbXByZXNzaW9uIGxldmVsICgxLi45KSAqL1xuICB0aGlzLnN0cmF0ZWd5ID0gMDsgIC8qIGZhdm9yIG9yIGZvcmNlIEh1ZmZtYW4gY29kaW5nKi9cblxuICB0aGlzLmdvb2RfbWF0Y2ggPSAwO1xuICAvKiBVc2UgYSBmYXN0ZXIgc2VhcmNoIHdoZW4gdGhlIHByZXZpb3VzIG1hdGNoIGlzIGxvbmdlciB0aGFuIHRoaXMgKi9cblxuICB0aGlzLm5pY2VfbWF0Y2ggPSAwOyAvKiBTdG9wIHNlYXJjaGluZyB3aGVuIGN1cnJlbnQgbWF0Y2ggZXhjZWVkcyB0aGlzICovXG5cbiAgICAgICAgICAgICAgLyogdXNlZCBieSB0cmVlcy5jOiAqL1xuXG4gIC8qIERpZG4ndCB1c2UgY3RfZGF0YSB0eXBlZGVmIGJlbG93IHRvIHN1cHByZXNzIGNvbXBpbGVyIHdhcm5pbmcgKi9cblxuICAvLyBzdHJ1Y3QgY3RfZGF0YV9zIGR5bl9sdHJlZVtIRUFQX1NJWkVdOyAgIC8qIGxpdGVyYWwgYW5kIGxlbmd0aCB0cmVlICovXG4gIC8vIHN0cnVjdCBjdF9kYXRhX3MgZHluX2R0cmVlWzIqRF9DT0RFUysxXTsgLyogZGlzdGFuY2UgdHJlZSAqL1xuICAvLyBzdHJ1Y3QgY3RfZGF0YV9zIGJsX3RyZWVbMipCTF9DT0RFUysxXTsgIC8qIEh1ZmZtYW4gdHJlZSBmb3IgYml0IGxlbmd0aHMgKi9cblxuICAvLyBVc2UgZmxhdCBhcnJheSBvZiBET1VCTEUgc2l6ZSwgd2l0aCBpbnRlcmxlYXZlZCBmYXRhLFxuICAvLyBiZWNhdXNlIEpTIGRvZXMgbm90IHN1cHBvcnQgZWZmZWN0aXZlXG4gIHRoaXMuZHluX2x0cmVlICA9IG5ldyBVaW50MTZBcnJheShIRUFQX1NJWkUkMSAqIDIpO1xuICB0aGlzLmR5bl9kdHJlZSAgPSBuZXcgVWludDE2QXJyYXkoKDIgKiBEX0NPREVTJDEgKyAxKSAqIDIpO1xuICB0aGlzLmJsX3RyZWUgICAgPSBuZXcgVWludDE2QXJyYXkoKDIgKiBCTF9DT0RFUyQxICsgMSkgKiAyKTtcbiAgemVybyQxKHRoaXMuZHluX2x0cmVlKTtcbiAgemVybyQxKHRoaXMuZHluX2R0cmVlKTtcbiAgemVybyQxKHRoaXMuYmxfdHJlZSk7XG5cbiAgdGhpcy5sX2Rlc2MgICA9IG51bGw7ICAgICAgICAgLyogZGVzYy4gZm9yIGxpdGVyYWwgdHJlZSAqL1xuICB0aGlzLmRfZGVzYyAgID0gbnVsbDsgICAgICAgICAvKiBkZXNjLiBmb3IgZGlzdGFuY2UgdHJlZSAqL1xuICB0aGlzLmJsX2Rlc2MgID0gbnVsbDsgICAgICAgICAvKiBkZXNjLiBmb3IgYml0IGxlbmd0aCB0cmVlICovXG5cbiAgLy91c2ggYmxfY291bnRbTUFYX0JJVFMrMV07XG4gIHRoaXMuYmxfY291bnQgPSBuZXcgVWludDE2QXJyYXkoTUFYX0JJVFMkMSArIDEpO1xuICAvKiBudW1iZXIgb2YgY29kZXMgYXQgZWFjaCBiaXQgbGVuZ3RoIGZvciBhbiBvcHRpbWFsIHRyZWUgKi9cblxuICAvL2ludCBoZWFwWzIqTF9DT0RFUysxXTsgICAgICAvKiBoZWFwIHVzZWQgdG8gYnVpbGQgdGhlIEh1ZmZtYW4gdHJlZXMgKi9cbiAgdGhpcy5oZWFwID0gbmV3IFVpbnQxNkFycmF5KDIgKiBMX0NPREVTJDEgKyAxKTsgIC8qIGhlYXAgdXNlZCB0byBidWlsZCB0aGUgSHVmZm1hbiB0cmVlcyAqL1xuICB6ZXJvJDEodGhpcy5oZWFwKTtcblxuICB0aGlzLmhlYXBfbGVuID0gMDsgICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhlIGhlYXAgKi9cbiAgdGhpcy5oZWFwX21heCA9IDA7ICAgICAgICAgICAgICAgLyogZWxlbWVudCBvZiBsYXJnZXN0IGZyZXF1ZW5jeSAqL1xuICAvKiBUaGUgc29ucyBvZiBoZWFwW25dIGFyZSBoZWFwWzIqbl0gYW5kIGhlYXBbMipuKzFdLiBoZWFwWzBdIGlzIG5vdCB1c2VkLlxuICAgKiBUaGUgc2FtZSBoZWFwIGFycmF5IGlzIHVzZWQgdG8gYnVpbGQgYWxsIHRyZWVzLlxuICAgKi9cblxuICB0aGlzLmRlcHRoID0gbmV3IFVpbnQxNkFycmF5KDIgKiBMX0NPREVTJDEgKyAxKTsgLy91Y2ggZGVwdGhbMipMX0NPREVTKzFdO1xuICB6ZXJvJDEodGhpcy5kZXB0aCk7XG4gIC8qIERlcHRoIG9mIGVhY2ggc3VidHJlZSB1c2VkIGFzIHRpZSBicmVha2VyIGZvciB0cmVlcyBvZiBlcXVhbCBmcmVxdWVuY3lcbiAgICovXG5cbiAgdGhpcy5sX2J1ZiA9IDA7ICAgICAgICAgIC8qIGJ1ZmZlciBpbmRleCBmb3IgbGl0ZXJhbHMgb3IgbGVuZ3RocyAqL1xuXG4gIHRoaXMubGl0X2J1ZnNpemUgPSAwO1xuICAvKiBTaXplIG9mIG1hdGNoIGJ1ZmZlciBmb3IgbGl0ZXJhbHMvbGVuZ3Rocy4gIFRoZXJlIGFyZSA0IHJlYXNvbnMgZm9yXG4gICAqIGxpbWl0aW5nIGxpdF9idWZzaXplIHRvIDY0SzpcbiAgICogICAtIGZyZXF1ZW5jaWVzIGNhbiBiZSBrZXB0IGluIDE2IGJpdCBjb3VudGVyc1xuICAgKiAgIC0gaWYgY29tcHJlc3Npb24gaXMgbm90IHN1Y2Nlc3NmdWwgZm9yIHRoZSBmaXJzdCBibG9jaywgYWxsIGlucHV0XG4gICAqICAgICBkYXRhIGlzIHN0aWxsIGluIHRoZSB3aW5kb3cgc28gd2UgY2FuIHN0aWxsIGVtaXQgYSBzdG9yZWQgYmxvY2sgZXZlblxuICAgKiAgICAgd2hlbiBpbnB1dCBjb21lcyBmcm9tIHN0YW5kYXJkIGlucHV0LiAgKFRoaXMgY2FuIGFsc28gYmUgZG9uZSBmb3JcbiAgICogICAgIGFsbCBibG9ja3MgaWYgbGl0X2J1ZnNpemUgaXMgbm90IGdyZWF0ZXIgdGhhbiAzMksuKVxuICAgKiAgIC0gaWYgY29tcHJlc3Npb24gaXMgbm90IHN1Y2Nlc3NmdWwgZm9yIGEgZmlsZSBzbWFsbGVyIHRoYW4gNjRLLCB3ZSBjYW5cbiAgICogICAgIGV2ZW4gZW1pdCBhIHN0b3JlZCBmaWxlIGluc3RlYWQgb2YgYSBzdG9yZWQgYmxvY2sgKHNhdmluZyA1IGJ5dGVzKS5cbiAgICogICAgIFRoaXMgaXMgYXBwbGljYWJsZSBvbmx5IGZvciB6aXAgKG5vdCBnemlwIG9yIHpsaWIpLlxuICAgKiAgIC0gY3JlYXRpbmcgbmV3IEh1ZmZtYW4gdHJlZXMgbGVzcyBmcmVxdWVudGx5IG1heSBub3QgcHJvdmlkZSBmYXN0XG4gICAqICAgICBhZGFwdGF0aW9uIHRvIGNoYW5nZXMgaW4gdGhlIGlucHV0IGRhdGEgc3RhdGlzdGljcy4gKFRha2UgZm9yXG4gICAqICAgICBleGFtcGxlIGEgYmluYXJ5IGZpbGUgd2l0aCBwb29ybHkgY29tcHJlc3NpYmxlIGNvZGUgZm9sbG93ZWQgYnlcbiAgICogICAgIGEgaGlnaGx5IGNvbXByZXNzaWJsZSBzdHJpbmcgdGFibGUuKSBTbWFsbGVyIGJ1ZmZlciBzaXplcyBnaXZlXG4gICAqICAgICBmYXN0IGFkYXB0YXRpb24gYnV0IGhhdmUgb2YgY291cnNlIHRoZSBvdmVyaGVhZCBvZiB0cmFuc21pdHRpbmdcbiAgICogICAgIHRyZWVzIG1vcmUgZnJlcXVlbnRseS5cbiAgICogICAtIEkgY2FuJ3QgY291bnQgYWJvdmUgNFxuICAgKi9cblxuICB0aGlzLmxhc3RfbGl0ID0gMDsgICAgICAvKiBydW5uaW5nIGluZGV4IGluIGxfYnVmICovXG5cbiAgdGhpcy5kX2J1ZiA9IDA7XG4gIC8qIEJ1ZmZlciBpbmRleCBmb3IgZGlzdGFuY2VzLiBUbyBzaW1wbGlmeSB0aGUgY29kZSwgZF9idWYgYW5kIGxfYnVmIGhhdmVcbiAgICogdGhlIHNhbWUgbnVtYmVyIG9mIGVsZW1lbnRzLiBUbyB1c2UgZGlmZmVyZW50IGxlbmd0aHMsIGFuIGV4dHJhIGZsYWdcbiAgICogYXJyYXkgd291bGQgYmUgbmVjZXNzYXJ5LlxuICAgKi9cblxuICB0aGlzLm9wdF9sZW4gPSAwOyAgICAgICAvKiBiaXQgbGVuZ3RoIG9mIGN1cnJlbnQgYmxvY2sgd2l0aCBvcHRpbWFsIHRyZWVzICovXG4gIHRoaXMuc3RhdGljX2xlbiA9IDA7ICAgIC8qIGJpdCBsZW5ndGggb2YgY3VycmVudCBibG9jayB3aXRoIHN0YXRpYyB0cmVlcyAqL1xuICB0aGlzLm1hdGNoZXMgPSAwOyAgICAgICAvKiBudW1iZXIgb2Ygc3RyaW5nIG1hdGNoZXMgaW4gY3VycmVudCBibG9jayAqL1xuICB0aGlzLmluc2VydCA9IDA7ICAgICAgICAvKiBieXRlcyBhdCBlbmQgb2Ygd2luZG93IGxlZnQgdG8gaW5zZXJ0ICovXG5cblxuICB0aGlzLmJpX2J1ZiA9IDA7XG4gIC8qIE91dHB1dCBidWZmZXIuIGJpdHMgYXJlIGluc2VydGVkIHN0YXJ0aW5nIGF0IHRoZSBib3R0b20gKGxlYXN0XG4gICAqIHNpZ25pZmljYW50IGJpdHMpLlxuICAgKi9cbiAgdGhpcy5iaV92YWxpZCA9IDA7XG4gIC8qIE51bWJlciBvZiB2YWxpZCBiaXRzIGluIGJpX2J1Zi4gIEFsbCBiaXRzIGFib3ZlIHRoZSBsYXN0IHZhbGlkIGJpdFxuICAgKiBhcmUgYWx3YXlzIHplcm8uXG4gICAqL1xuXG4gIC8vIFVzZWQgZm9yIHdpbmRvdyBtZW1vcnkgaW5pdC4gV2Ugc2FmZWx5IGlnbm9yZSBpdCBmb3IgSlMuIFRoYXQgbWFrZXNcbiAgLy8gc2Vuc2Ugb25seSBmb3IgcG9pbnRlcnMgYW5kIG1lbW9yeSBjaGVjayB0b29scy5cbiAgLy90aGlzLmhpZ2hfd2F0ZXIgPSAwO1xuICAvKiBIaWdoIHdhdGVyIG1hcmsgb2Zmc2V0IGluIHdpbmRvdyBmb3IgaW5pdGlhbGl6ZWQgYnl0ZXMgLS0gYnl0ZXMgYWJvdmVcbiAgICogdGhpcyBhcmUgc2V0IHRvIHplcm8gaW4gb3JkZXIgdG8gYXZvaWQgbWVtb3J5IGNoZWNrIHdhcm5pbmdzIHdoZW5cbiAgICogbG9uZ2VzdCBtYXRjaCByb3V0aW5lcyBhY2Nlc3MgYnl0ZXMgcGFzdCB0aGUgaW5wdXQuICBUaGlzIGlzIHRoZW5cbiAgICogdXBkYXRlZCB0byB0aGUgbmV3IGhpZ2ggd2F0ZXIgbWFyay5cbiAgICovXG59XG5cblxuY29uc3QgZGVmbGF0ZVJlc2V0S2VlcCA9IChzdHJtKSA9PiB7XG5cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7XG4gICAgcmV0dXJuIGVycihzdHJtLCBaX1NUUkVBTV9FUlJPUik7XG4gIH1cblxuICBzdHJtLnRvdGFsX2luID0gc3RybS50b3RhbF9vdXQgPSAwO1xuICBzdHJtLmRhdGFfdHlwZSA9IFpfVU5LTk9XTiQxO1xuXG4gIGNvbnN0IHMgPSBzdHJtLnN0YXRlO1xuICBzLnBlbmRpbmcgPSAwO1xuICBzLnBlbmRpbmdfb3V0ID0gMDtcblxuICBpZiAocy53cmFwIDwgMCkge1xuICAgIHMud3JhcCA9IC1zLndyYXA7XG4gICAgLyogd2FzIG1hZGUgbmVnYXRpdmUgYnkgZGVmbGF0ZSguLi4sIFpfRklOSVNIKTsgKi9cbiAgfVxuICBzLnN0YXR1cyA9IChzLndyYXAgPyBJTklUX1NUQVRFIDogQlVTWV9TVEFURSk7XG4gIHN0cm0uYWRsZXIgPSAocy53cmFwID09PSAyKSA/XG4gICAgMCAgLy8gY3JjMzIoMCwgWl9OVUxMLCAwKVxuICA6XG4gICAgMTsgLy8gYWRsZXIzMigwLCBaX05VTEwsIDApXG4gIHMubGFzdF9mbHVzaCA9IFpfTk9fRkxVU0g7XG4gIF90cl9pbml0JDEocyk7XG4gIHJldHVybiBaX09LO1xufTtcblxuXG5jb25zdCBkZWZsYXRlUmVzZXQgPSAoc3RybSkgPT4ge1xuXG4gIGNvbnN0IHJldCA9IGRlZmxhdGVSZXNldEtlZXAoc3RybSk7XG4gIGlmIChyZXQgPT09IFpfT0spIHtcbiAgICBsbV9pbml0KHN0cm0uc3RhdGUpO1xuICB9XG4gIHJldHVybiByZXQ7XG59O1xuXG5cbmNvbnN0IGRlZmxhdGVTZXRIZWFkZXIgPSAoc3RybSwgaGVhZCkgPT4ge1xuXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cbiAgaWYgKHN0cm0uc3RhdGUud3JhcCAhPT0gMikgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cbiAgc3RybS5zdGF0ZS5nemhlYWQgPSBoZWFkO1xuICByZXR1cm4gWl9PSztcbn07XG5cblxuY29uc3QgZGVmbGF0ZUluaXQyID0gKHN0cm0sIGxldmVsLCBtZXRob2QsIHdpbmRvd0JpdHMsIG1lbUxldmVsLCBzdHJhdGVneSkgPT4ge1xuXG4gIGlmICghc3RybSkgeyAvLyA9PT0gWl9OVUxMXG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG4gIGxldCB3cmFwID0gMTtcblxuICBpZiAobGV2ZWwgPT09IFpfREVGQVVMVF9DT01QUkVTU0lPTikge1xuICAgIGxldmVsID0gNjtcbiAgfVxuXG4gIGlmICh3aW5kb3dCaXRzIDwgMCkgeyAvKiBzdXBwcmVzcyB6bGliIHdyYXBwZXIgKi9cbiAgICB3cmFwID0gMDtcbiAgICB3aW5kb3dCaXRzID0gLXdpbmRvd0JpdHM7XG4gIH1cblxuICBlbHNlIGlmICh3aW5kb3dCaXRzID4gMTUpIHtcbiAgICB3cmFwID0gMjsgICAgICAgICAgIC8qIHdyaXRlIGd6aXAgd3JhcHBlciBpbnN0ZWFkICovXG4gICAgd2luZG93Qml0cyAtPSAxNjtcbiAgfVxuXG5cbiAgaWYgKG1lbUxldmVsIDwgMSB8fCBtZW1MZXZlbCA+IE1BWF9NRU1fTEVWRUwgfHwgbWV0aG9kICE9PSBaX0RFRkxBVEVEIHx8XG4gICAgd2luZG93Qml0cyA8IDggfHwgd2luZG93Qml0cyA+IDE1IHx8IGxldmVsIDwgMCB8fCBsZXZlbCA+IDkgfHxcbiAgICBzdHJhdGVneSA8IDAgfHwgc3RyYXRlZ3kgPiBaX0ZJWEVEJDEpIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SKTtcbiAgfVxuXG5cbiAgaWYgKHdpbmRvd0JpdHMgPT09IDgpIHtcbiAgICB3aW5kb3dCaXRzID0gOTtcbiAgfVxuICAvKiB1bnRpbCAyNTYtYnl0ZSB3aW5kb3cgYnVnIGZpeGVkICovXG5cbiAgY29uc3QgcyA9IG5ldyBEZWZsYXRlU3RhdGUoKTtcblxuICBzdHJtLnN0YXRlID0gcztcbiAgcy5zdHJtID0gc3RybTtcblxuICBzLndyYXAgPSB3cmFwO1xuICBzLmd6aGVhZCA9IG51bGw7XG4gIHMud19iaXRzID0gd2luZG93Qml0cztcbiAgcy53X3NpemUgPSAxIDw8IHMud19iaXRzO1xuICBzLndfbWFzayA9IHMud19zaXplIC0gMTtcblxuICBzLmhhc2hfYml0cyA9IG1lbUxldmVsICsgNztcbiAgcy5oYXNoX3NpemUgPSAxIDw8IHMuaGFzaF9iaXRzO1xuICBzLmhhc2hfbWFzayA9IHMuaGFzaF9zaXplIC0gMTtcbiAgcy5oYXNoX3NoaWZ0ID0gfn4oKHMuaGFzaF9iaXRzICsgTUlOX01BVENIJDEgLSAxKSAvIE1JTl9NQVRDSCQxKTtcblxuICBzLndpbmRvdyA9IG5ldyBVaW50OEFycmF5KHMud19zaXplICogMik7XG4gIHMuaGVhZCA9IG5ldyBVaW50MTZBcnJheShzLmhhc2hfc2l6ZSk7XG4gIHMucHJldiA9IG5ldyBVaW50MTZBcnJheShzLndfc2l6ZSk7XG5cbiAgLy8gRG9uJ3QgbmVlZCBtZW0gaW5pdCBtYWdpYyBmb3IgSlMuXG4gIC8vcy5oaWdoX3dhdGVyID0gMDsgIC8qIG5vdGhpbmcgd3JpdHRlbiB0byBzLT53aW5kb3cgeWV0ICovXG5cbiAgcy5saXRfYnVmc2l6ZSA9IDEgPDwgKG1lbUxldmVsICsgNik7IC8qIDE2SyBlbGVtZW50cyBieSBkZWZhdWx0ICovXG5cbiAgcy5wZW5kaW5nX2J1Zl9zaXplID0gcy5saXRfYnVmc2l6ZSAqIDQ7XG5cbiAgLy9vdmVybGF5ID0gKHVzaGYgKikgWkFMTE9DKHN0cm0sIHMtPmxpdF9idWZzaXplLCBzaXplb2YodXNoKSsyKTtcbiAgLy9zLT5wZW5kaW5nX2J1ZiA9ICh1Y2hmICopIG92ZXJsYXk7XG4gIHMucGVuZGluZ19idWYgPSBuZXcgVWludDhBcnJheShzLnBlbmRpbmdfYnVmX3NpemUpO1xuXG4gIC8vIEl0IGlzIG9mZnNldCBmcm9tIGBzLnBlbmRpbmdfYnVmYCAoc2l6ZSBpcyBgcy5saXRfYnVmc2l6ZSAqIDJgKVxuICAvL3MtPmRfYnVmID0gb3ZlcmxheSArIHMtPmxpdF9idWZzaXplL3NpemVvZih1c2gpO1xuICBzLmRfYnVmID0gMSAqIHMubGl0X2J1ZnNpemU7XG5cbiAgLy9zLT5sX2J1ZiA9IHMtPnBlbmRpbmdfYnVmICsgKDErc2l6ZW9mKHVzaCkpKnMtPmxpdF9idWZzaXplO1xuICBzLmxfYnVmID0gKDEgKyAyKSAqIHMubGl0X2J1ZnNpemU7XG5cbiAgcy5sZXZlbCA9IGxldmVsO1xuICBzLnN0cmF0ZWd5ID0gc3RyYXRlZ3k7XG4gIHMubWV0aG9kID0gbWV0aG9kO1xuXG4gIHJldHVybiBkZWZsYXRlUmVzZXQoc3RybSk7XG59O1xuXG5jb25zdCBkZWZsYXRlSW5pdCA9IChzdHJtLCBsZXZlbCkgPT4ge1xuXG4gIHJldHVybiBkZWZsYXRlSW5pdDIoc3RybSwgbGV2ZWwsIFpfREVGTEFURUQsIE1BWF9XQklUUywgREVGX01FTV9MRVZFTCwgWl9ERUZBVUxUX1NUUkFURUdZKTtcbn07XG5cblxuY29uc3QgZGVmbGF0ZSA9IChzdHJtLCBmbHVzaCkgPT4ge1xuXG4gIGxldCBiZWcsIHZhbDsgLy8gZm9yIGd6aXAgaGVhZGVyIHdyaXRlIG9ubHlcblxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUgfHxcbiAgICBmbHVzaCA+IFpfQkxPQ0sgfHwgZmx1c2ggPCAwKSB7XG4gICAgcmV0dXJuIHN0cm0gPyBlcnIoc3RybSwgWl9TVFJFQU1fRVJST1IpIDogWl9TVFJFQU1fRVJST1I7XG4gIH1cblxuICBjb25zdCBzID0gc3RybS5zdGF0ZTtcblxuICBpZiAoIXN0cm0ub3V0cHV0IHx8XG4gICAgICAoIXN0cm0uaW5wdXQgJiYgc3RybS5hdmFpbF9pbiAhPT0gMCkgfHxcbiAgICAgIChzLnN0YXR1cyA9PT0gRklOSVNIX1NUQVRFICYmIGZsdXNoICE9PSBaX0ZJTklTSCkpIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIChzdHJtLmF2YWlsX291dCA9PT0gMCkgPyBaX0JVRl9FUlJPUiA6IFpfU1RSRUFNX0VSUk9SKTtcbiAgfVxuXG4gIHMuc3RybSA9IHN0cm07IC8qIGp1c3QgaW4gY2FzZSAqL1xuICBjb25zdCBvbGRfZmx1c2ggPSBzLmxhc3RfZmx1c2g7XG4gIHMubGFzdF9mbHVzaCA9IGZsdXNoO1xuXG4gIC8qIFdyaXRlIHRoZSBoZWFkZXIgKi9cbiAgaWYgKHMuc3RhdHVzID09PSBJTklUX1NUQVRFKSB7XG5cbiAgICBpZiAocy53cmFwID09PSAyKSB7IC8vIEdaSVAgaGVhZGVyXG4gICAgICBzdHJtLmFkbGVyID0gMDsgIC8vY3JjMzIoMEwsIFpfTlVMTCwgMCk7XG4gICAgICBwdXRfYnl0ZShzLCAzMSk7XG4gICAgICBwdXRfYnl0ZShzLCAxMzkpO1xuICAgICAgcHV0X2J5dGUocywgOCk7XG4gICAgICBpZiAoIXMuZ3poZWFkKSB7IC8vIHMtPmd6aGVhZCA9PSBaX05VTExcbiAgICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICAgIHB1dF9ieXRlKHMsIDApO1xuICAgICAgICBwdXRfYnl0ZShzLCAwKTtcbiAgICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICAgIHB1dF9ieXRlKHMsIDApO1xuICAgICAgICBwdXRfYnl0ZShzLCBzLmxldmVsID09PSA5ID8gMiA6XG4gICAgICAgICAgICAgICAgICAgIChzLnN0cmF0ZWd5ID49IFpfSFVGRk1BTl9PTkxZIHx8IHMubGV2ZWwgPCAyID9cbiAgICAgICAgICAgICAgICAgICAgIDQgOiAwKSk7XG4gICAgICAgIHB1dF9ieXRlKHMsIE9TX0NPREUpO1xuICAgICAgICBzLnN0YXR1cyA9IEJVU1lfU1RBVEU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRleHQgPyAxIDogMCkgK1xuICAgICAgICAgICAgICAgICAgICAocy5nemhlYWQuaGNyYyA/IDIgOiAwKSArXG4gICAgICAgICAgICAgICAgICAgICghcy5nemhlYWQuZXh0cmEgPyAwIDogNCkgK1xuICAgICAgICAgICAgICAgICAgICAoIXMuZ3poZWFkLm5hbWUgPyAwIDogOCkgK1xuICAgICAgICAgICAgICAgICAgICAoIXMuZ3poZWFkLmNvbW1lbnQgPyAwIDogMTYpXG4gICAgICAgICk7XG4gICAgICAgIHB1dF9ieXRlKHMsIHMuZ3poZWFkLnRpbWUgJiAweGZmKTtcbiAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRpbWUgPj4gOCkgJiAweGZmKTtcbiAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRpbWUgPj4gMTYpICYgMHhmZik7XG4gICAgICAgIHB1dF9ieXRlKHMsIChzLmd6aGVhZC50aW1lID4+IDI0KSAmIDB4ZmYpO1xuICAgICAgICBwdXRfYnl0ZShzLCBzLmxldmVsID09PSA5ID8gMiA6XG4gICAgICAgICAgICAgICAgICAgIChzLnN0cmF0ZWd5ID49IFpfSFVGRk1BTl9PTkxZIHx8IHMubGV2ZWwgPCAyID9cbiAgICAgICAgICAgICAgICAgICAgIDQgOiAwKSk7XG4gICAgICAgIHB1dF9ieXRlKHMsIHMuZ3poZWFkLm9zICYgMHhmZik7XG4gICAgICAgIGlmIChzLmd6aGVhZC5leHRyYSAmJiBzLmd6aGVhZC5leHRyYS5sZW5ndGgpIHtcbiAgICAgICAgICBwdXRfYnl0ZShzLCBzLmd6aGVhZC5leHRyYS5sZW5ndGggJiAweGZmKTtcbiAgICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQuZXh0cmEubGVuZ3RoID4+IDgpICYgMHhmZik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMpIHtcbiAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzJfMShzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcsIDApO1xuICAgICAgICB9XG4gICAgICAgIHMuZ3ppbmRleCA9IDA7XG4gICAgICAgIHMuc3RhdHVzID0gRVhUUkFfU1RBVEU7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgLy8gREVGTEFURSBoZWFkZXJcbiAgICB7XG4gICAgICBsZXQgaGVhZGVyID0gKFpfREVGTEFURUQgKyAoKHMud19iaXRzIC0gOCkgPDwgNCkpIDw8IDg7XG4gICAgICBsZXQgbGV2ZWxfZmxhZ3MgPSAtMTtcblxuICAgICAgaWYgKHMuc3RyYXRlZ3kgPj0gWl9IVUZGTUFOX09OTFkgfHwgcy5sZXZlbCA8IDIpIHtcbiAgICAgICAgbGV2ZWxfZmxhZ3MgPSAwO1xuICAgICAgfSBlbHNlIGlmIChzLmxldmVsIDwgNikge1xuICAgICAgICBsZXZlbF9mbGFncyA9IDE7XG4gICAgICB9IGVsc2UgaWYgKHMubGV2ZWwgPT09IDYpIHtcbiAgICAgICAgbGV2ZWxfZmxhZ3MgPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV2ZWxfZmxhZ3MgPSAzO1xuICAgICAgfVxuICAgICAgaGVhZGVyIHw9IChsZXZlbF9mbGFncyA8PCA2KTtcbiAgICAgIGlmIChzLnN0cnN0YXJ0ICE9PSAwKSB7IGhlYWRlciB8PSBQUkVTRVRfRElDVDsgfVxuICAgICAgaGVhZGVyICs9IDMxIC0gKGhlYWRlciAlIDMxKTtcblxuICAgICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFO1xuICAgICAgcHV0U2hvcnRNU0IocywgaGVhZGVyKTtcblxuICAgICAgLyogU2F2ZSB0aGUgYWRsZXIzMiBvZiB0aGUgcHJlc2V0IGRpY3Rpb25hcnk6ICovXG4gICAgICBpZiAocy5zdHJzdGFydCAhPT0gMCkge1xuICAgICAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyID4+PiAxNik7XG4gICAgICAgIHB1dFNob3J0TVNCKHMsIHN0cm0uYWRsZXIgJiAweGZmZmYpO1xuICAgICAgfVxuICAgICAgc3RybS5hZGxlciA9IDE7IC8vIGFkbGVyMzIoMEwsIFpfTlVMTCwgMCk7XG4gICAgfVxuICB9XG5cbi8vI2lmZGVmIEdaSVBcbiAgaWYgKHMuc3RhdHVzID09PSBFWFRSQV9TVEFURSkge1xuICAgIGlmIChzLmd6aGVhZC5leHRyYS8qICE9IFpfTlVMTCovKSB7XG4gICAgICBiZWcgPSBzLnBlbmRpbmc7ICAvKiBzdGFydCBvZiBieXRlcyB0byB1cGRhdGUgY3JjICovXG5cbiAgICAgIHdoaWxlIChzLmd6aW5kZXggPCAocy5nemhlYWQuZXh0cmEubGVuZ3RoICYgMHhmZmZmKSkge1xuICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMl8xKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICAgICAgICBiZWcgPSBzLnBlbmRpbmc7XG4gICAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQuZXh0cmFbcy5nemluZGV4XSAmIDB4ZmYpO1xuICAgICAgICBzLmd6aW5kZXgrKztcbiAgICAgIH1cbiAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzJfMShzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICB9XG4gICAgICBpZiAocy5nemluZGV4ID09PSBzLmd6aGVhZC5leHRyYS5sZW5ndGgpIHtcbiAgICAgICAgcy5nemluZGV4ID0gMDtcbiAgICAgICAgcy5zdGF0dXMgPSBOQU1FX1NUQVRFO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHMuc3RhdHVzID0gTkFNRV9TVEFURTtcbiAgICB9XG4gIH1cbiAgaWYgKHMuc3RhdHVzID09PSBOQU1FX1NUQVRFKSB7XG4gICAgaWYgKHMuZ3poZWFkLm5hbWUvKiAhPSBaX05VTEwqLykge1xuICAgICAgYmVnID0gcy5wZW5kaW5nOyAgLyogc3RhcnQgb2YgYnl0ZXMgdG8gdXBkYXRlIGNyYyAqL1xuICAgICAgLy9pbnQgdmFsO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyXzEoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgICAgIGJlZyA9IHMucGVuZGluZztcbiAgICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICAgIHZhbCA9IDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSlMgc3BlY2lmaWM6IGxpdHRsZSBtYWdpYyB0byBhZGQgemVybyB0ZXJtaW5hdG9yIHRvIGVuZCBvZiBzdHJpbmdcbiAgICAgICAgaWYgKHMuZ3ppbmRleCA8IHMuZ3poZWFkLm5hbWUubGVuZ3RoKSB7XG4gICAgICAgICAgdmFsID0gcy5nemhlYWQubmFtZS5jaGFyQ29kZUF0KHMuZ3ppbmRleCsrKSAmIDB4ZmY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsID0gMDtcbiAgICAgICAgfVxuICAgICAgICBwdXRfYnl0ZShzLCB2YWwpO1xuICAgICAgfSB3aGlsZSAodmFsICE9PSAwKTtcblxuICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMl8xKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWwgPT09IDApIHtcbiAgICAgICAgcy5nemluZGV4ID0gMDtcbiAgICAgICAgcy5zdGF0dXMgPSBDT01NRU5UX1NUQVRFO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHMuc3RhdHVzID0gQ09NTUVOVF9TVEFURTtcbiAgICB9XG4gIH1cbiAgaWYgKHMuc3RhdHVzID09PSBDT01NRU5UX1NUQVRFKSB7XG4gICAgaWYgKHMuZ3poZWFkLmNvbW1lbnQvKiAhPSBaX05VTEwqLykge1xuICAgICAgYmVnID0gcy5wZW5kaW5nOyAgLyogc3RhcnQgb2YgYnl0ZXMgdG8gdXBkYXRlIGNyYyAqL1xuICAgICAgLy9pbnQgdmFsO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyXzEoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgICAgIGJlZyA9IHMucGVuZGluZztcbiAgICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICAgIHZhbCA9IDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSlMgc3BlY2lmaWM6IGxpdHRsZSBtYWdpYyB0byBhZGQgemVybyB0ZXJtaW5hdG9yIHRvIGVuZCBvZiBzdHJpbmdcbiAgICAgICAgaWYgKHMuZ3ppbmRleCA8IHMuZ3poZWFkLmNvbW1lbnQubGVuZ3RoKSB7XG4gICAgICAgICAgdmFsID0gcy5nemhlYWQuY29tbWVudC5jaGFyQ29kZUF0KHMuZ3ppbmRleCsrKSAmIDB4ZmY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsID0gMDtcbiAgICAgICAgfVxuICAgICAgICBwdXRfYnl0ZShzLCB2YWwpO1xuICAgICAgfSB3aGlsZSAodmFsICE9PSAwKTtcblxuICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMl8xKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWwgPT09IDApIHtcbiAgICAgICAgcy5zdGF0dXMgPSBIQ1JDX1NUQVRFO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHMuc3RhdHVzID0gSENSQ19TVEFURTtcbiAgICB9XG4gIH1cbiAgaWYgKHMuc3RhdHVzID09PSBIQ1JDX1NUQVRFKSB7XG4gICAgaWYgKHMuZ3poZWFkLmhjcmMpIHtcbiAgICAgIGlmIChzLnBlbmRpbmcgKyAyID4gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgICB9XG4gICAgICBpZiAocy5wZW5kaW5nICsgMiA8PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgcHV0X2J5dGUocywgc3RybS5hZGxlciAmIDB4ZmYpO1xuICAgICAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiA4KSAmIDB4ZmYpO1xuICAgICAgICBzdHJtLmFkbGVyID0gMDsgLy9jcmMzMigwTCwgWl9OVUxMLCAwKTtcbiAgICAgICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcbiAgICB9XG4gIH1cbi8vI2VuZGlmXG5cbiAgLyogRmx1c2ggYXMgbXVjaCBwZW5kaW5nIG91dHB1dCBhcyBwb3NzaWJsZSAqL1xuICBpZiAocy5wZW5kaW5nICE9PSAwKSB7XG4gICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIC8qIFNpbmNlIGF2YWlsX291dCBpcyAwLCBkZWZsYXRlIHdpbGwgYmUgY2FsbGVkIGFnYWluIHdpdGhcbiAgICAgICAqIG1vcmUgb3V0cHV0IHNwYWNlLCBidXQgcG9zc2libHkgd2l0aCBib3RoIHBlbmRpbmcgYW5kXG4gICAgICAgKiBhdmFpbF9pbiBlcXVhbCB0byB6ZXJvLiBUaGVyZSB3b24ndCBiZSBhbnl0aGluZyB0byBkbyxcbiAgICAgICAqIGJ1dCB0aGlzIGlzIG5vdCBhbiBlcnJvciBzaXR1YXRpb24gc28gbWFrZSBzdXJlIHdlXG4gICAgICAgKiByZXR1cm4gT0sgaW5zdGVhZCBvZiBCVUZfRVJST1IgYXQgbmV4dCBjYWxsIG9mIGRlZmxhdGU6XG4gICAgICAgKi9cbiAgICAgIHMubGFzdF9mbHVzaCA9IC0xO1xuICAgICAgcmV0dXJuIFpfT0s7XG4gICAgfVxuXG4gICAgLyogTWFrZSBzdXJlIHRoZXJlIGlzIHNvbWV0aGluZyB0byBkbyBhbmQgYXZvaWQgZHVwbGljYXRlIGNvbnNlY3V0aXZlXG4gICAgICogZmx1c2hlcy4gRm9yIHJlcGVhdGVkIGFuZCB1c2VsZXNzIGNhbGxzIHdpdGggWl9GSU5JU0gsIHdlIGtlZXBcbiAgICAgKiByZXR1cm5pbmcgWl9TVFJFQU1fRU5EIGluc3RlYWQgb2YgWl9CVUZfRVJST1IuXG4gICAgICovXG4gIH0gZWxzZSBpZiAoc3RybS5hdmFpbF9pbiA9PT0gMCAmJiByYW5rKGZsdXNoKSA8PSByYW5rKG9sZF9mbHVzaCkgJiZcbiAgICBmbHVzaCAhPT0gWl9GSU5JU0gpIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfQlVGX0VSUk9SKTtcbiAgfVxuXG4gIC8qIFVzZXIgbXVzdCBub3QgcHJvdmlkZSBtb3JlIGlucHV0IGFmdGVyIHRoZSBmaXJzdCBGSU5JU0g6ICovXG4gIGlmIChzLnN0YXR1cyA9PT0gRklOSVNIX1NUQVRFICYmIHN0cm0uYXZhaWxfaW4gIT09IDApIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfQlVGX0VSUk9SKTtcbiAgfVxuXG4gIC8qIFN0YXJ0IGEgbmV3IGJsb2NrIG9yIGNvbnRpbnVlIHRoZSBjdXJyZW50IG9uZS5cbiAgICovXG4gIGlmIChzdHJtLmF2YWlsX2luICE9PSAwIHx8IHMubG9va2FoZWFkICE9PSAwIHx8XG4gICAgKGZsdXNoICE9PSBaX05PX0ZMVVNIICYmIHMuc3RhdHVzICE9PSBGSU5JU0hfU1RBVEUpKSB7XG4gICAgbGV0IGJzdGF0ZSA9IChzLnN0cmF0ZWd5ID09PSBaX0hVRkZNQU5fT05MWSkgPyBkZWZsYXRlX2h1ZmYocywgZmx1c2gpIDpcbiAgICAgIChzLnN0cmF0ZWd5ID09PSBaX1JMRSA/IGRlZmxhdGVfcmxlKHMsIGZsdXNoKSA6XG4gICAgICAgIGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0uZnVuYyhzLCBmbHVzaCkpO1xuXG4gICAgaWYgKGJzdGF0ZSA9PT0gQlNfRklOSVNIX1NUQVJURUQgfHwgYnN0YXRlID09PSBCU19GSU5JU0hfRE9ORSkge1xuICAgICAgcy5zdGF0dXMgPSBGSU5JU0hfU1RBVEU7XG4gICAgfVxuICAgIGlmIChic3RhdGUgPT09IEJTX05FRURfTU9SRSB8fCBic3RhdGUgPT09IEJTX0ZJTklTSF9TVEFSVEVEKSB7XG4gICAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7XG4gICAgICAgIC8qIGF2b2lkIEJVRl9FUlJPUiBuZXh0IGNhbGwsIHNlZSBhYm92ZSAqL1xuICAgICAgfVxuICAgICAgcmV0dXJuIFpfT0s7XG4gICAgICAvKiBJZiBmbHVzaCAhPSBaX05PX0ZMVVNIICYmIGF2YWlsX291dCA9PSAwLCB0aGUgbmV4dCBjYWxsXG4gICAgICAgKiBvZiBkZWZsYXRlIHNob3VsZCB1c2UgdGhlIHNhbWUgZmx1c2ggcGFyYW1ldGVyIHRvIG1ha2Ugc3VyZVxuICAgICAgICogdGhhdCB0aGUgZmx1c2ggaXMgY29tcGxldGUuIFNvIHdlIGRvbid0IGhhdmUgdG8gb3V0cHV0IGFuXG4gICAgICAgKiBlbXB0eSBibG9jayBoZXJlLCB0aGlzIHdpbGwgYmUgZG9uZSBhdCBuZXh0IGNhbGwuIFRoaXMgYWxzb1xuICAgICAgICogZW5zdXJlcyB0aGF0IGZvciBhIHZlcnkgc21hbGwgb3V0cHV0IGJ1ZmZlciwgd2UgZW1pdCBhdCBtb3N0XG4gICAgICAgKiBvbmUgZW1wdHkgYmxvY2suXG4gICAgICAgKi9cbiAgICB9XG4gICAgaWYgKGJzdGF0ZSA9PT0gQlNfQkxPQ0tfRE9ORSkge1xuICAgICAgaWYgKGZsdXNoID09PSBaX1BBUlRJQUxfRkxVU0gpIHtcbiAgICAgICAgX3RyX2FsaWduJDEocyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChmbHVzaCAhPT0gWl9CTE9DSykgeyAvKiBGVUxMX0ZMVVNIIG9yIFNZTkNfRkxVU0ggKi9cblxuICAgICAgICBfdHJfc3RvcmVkX2Jsb2NrJDEocywgMCwgMCwgZmFsc2UpO1xuICAgICAgICAvKiBGb3IgYSBmdWxsIGZsdXNoLCB0aGlzIGVtcHR5IGJsb2NrIHdpbGwgYmUgcmVjb2duaXplZFxuICAgICAgICAgKiBhcyBhIHNwZWNpYWwgbWFya2VyIGJ5IGluZmxhdGVfc3luYygpLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGZsdXNoID09PSBaX0ZVTExfRkxVU0gpIHtcbiAgICAgICAgICAvKioqIENMRUFSX0hBU0gocyk7ICoqKi8gICAgICAgICAgICAgLyogZm9yZ2V0IGhpc3RvcnkgKi9cbiAgICAgICAgICB6ZXJvJDEocy5oZWFkKTsgLy8gRmlsbCB3aXRoIE5JTCAoPSAwKTtcblxuICAgICAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgICAgICAgcy5zdHJzdGFydCA9IDA7XG4gICAgICAgICAgICBzLmJsb2NrX3N0YXJ0ID0gMDtcbiAgICAgICAgICAgIHMuaW5zZXJ0ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7IC8qIGF2b2lkIEJVRl9FUlJPUiBhdCBuZXh0IGNhbGwsIHNlZSBhYm92ZSAqL1xuICAgICAgICByZXR1cm4gWl9PSztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy9Bc3NlcnQoc3RybS0+YXZhaWxfb3V0ID4gMCwgXCJidWcyXCIpO1xuICAvL2lmIChzdHJtLmF2YWlsX291dCA8PSAwKSB7IHRocm93IG5ldyBFcnJvcihcImJ1ZzJcIik7fVxuXG4gIGlmIChmbHVzaCAhPT0gWl9GSU5JU0gpIHsgcmV0dXJuIFpfT0s7IH1cbiAgaWYgKHMud3JhcCA8PSAwKSB7IHJldHVybiBaX1NUUkVBTV9FTkQ7IH1cblxuICAvKiBXcml0ZSB0aGUgdHJhaWxlciAqL1xuICBpZiAocy53cmFwID09PSAyKSB7XG4gICAgcHV0X2J5dGUocywgc3RybS5hZGxlciAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDgpICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0uYWRsZXIgPj4gMTYpICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0uYWRsZXIgPj4gMjQpICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgc3RybS50b3RhbF9pbiAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLnRvdGFsX2luID4+IDgpICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0udG90YWxfaW4gPj4gMTYpICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0udG90YWxfaW4gPj4gMjQpICYgMHhmZik7XG4gIH1cbiAgZWxzZVxuICB7XG4gICAgcHV0U2hvcnRNU0Iocywgc3RybS5hZGxlciA+Pj4gMTYpO1xuICAgIHB1dFNob3J0TVNCKHMsIHN0cm0uYWRsZXIgJiAweGZmZmYpO1xuICB9XG5cbiAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgLyogSWYgYXZhaWxfb3V0IGlzIHplcm8sIHRoZSBhcHBsaWNhdGlvbiB3aWxsIGNhbGwgZGVmbGF0ZSBhZ2FpblxuICAgKiB0byBmbHVzaCB0aGUgcmVzdC5cbiAgICovXG4gIGlmIChzLndyYXAgPiAwKSB7IHMud3JhcCA9IC1zLndyYXA7IH1cbiAgLyogd3JpdGUgdGhlIHRyYWlsZXIgb25seSBvbmNlISAqL1xuICByZXR1cm4gcy5wZW5kaW5nICE9PSAwID8gWl9PSyA6IFpfU1RSRUFNX0VORDtcbn07XG5cblxuY29uc3QgZGVmbGF0ZUVuZCA9IChzdHJtKSA9PiB7XG5cbiAgaWYgKCFzdHJtLyo9PSBaX05VTEwqLyB8fCAhc3RybS5zdGF0ZS8qPT0gWl9OVUxMKi8pIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cblxuICBjb25zdCBzdGF0dXMgPSBzdHJtLnN0YXRlLnN0YXR1cztcbiAgaWYgKHN0YXR1cyAhPT0gSU5JVF9TVEFURSAmJlxuICAgIHN0YXR1cyAhPT0gRVhUUkFfU1RBVEUgJiZcbiAgICBzdGF0dXMgIT09IE5BTUVfU1RBVEUgJiZcbiAgICBzdGF0dXMgIT09IENPTU1FTlRfU1RBVEUgJiZcbiAgICBzdGF0dXMgIT09IEhDUkNfU1RBVEUgJiZcbiAgICBzdGF0dXMgIT09IEJVU1lfU1RBVEUgJiZcbiAgICBzdGF0dXMgIT09IEZJTklTSF9TVEFURVxuICApIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SKTtcbiAgfVxuXG4gIHN0cm0uc3RhdGUgPSBudWxsO1xuXG4gIHJldHVybiBzdGF0dXMgPT09IEJVU1lfU1RBVEUgPyBlcnIoc3RybSwgWl9EQVRBX0VSUk9SKSA6IFpfT0s7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEluaXRpYWxpemVzIHRoZSBjb21wcmVzc2lvbiBkaWN0aW9uYXJ5IGZyb20gdGhlIGdpdmVuIGJ5dGVcbiAqIHNlcXVlbmNlIHdpdGhvdXQgcHJvZHVjaW5nIGFueSBjb21wcmVzc2VkIG91dHB1dC5cbiAqL1xuY29uc3QgZGVmbGF0ZVNldERpY3Rpb25hcnkgPSAoc3RybSwgZGljdGlvbmFyeSkgPT4ge1xuXG4gIGxldCBkaWN0TGVuZ3RoID0gZGljdGlvbmFyeS5sZW5ndGg7XG5cbiAgaWYgKCFzdHJtLyo9PSBaX05VTEwqLyB8fCAhc3RybS5zdGF0ZS8qPT0gWl9OVUxMKi8pIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cblxuICBjb25zdCBzID0gc3RybS5zdGF0ZTtcbiAgY29uc3Qgd3JhcCA9IHMud3JhcDtcblxuICBpZiAod3JhcCA9PT0gMiB8fCAod3JhcCA9PT0gMSAmJiBzLnN0YXR1cyAhPT0gSU5JVF9TVEFURSkgfHwgcy5sb29rYWhlYWQpIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cblxuICAvKiB3aGVuIHVzaW5nIHpsaWIgd3JhcHBlcnMsIGNvbXB1dGUgQWRsZXItMzIgZm9yIHByb3ZpZGVkIGRpY3Rpb25hcnkgKi9cbiAgaWYgKHdyYXAgPT09IDEpIHtcbiAgICAvKiBhZGxlcjMyKHN0cm0tPmFkbGVyLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoKTsgKi9cbiAgICBzdHJtLmFkbGVyID0gYWRsZXIzMl8xKHN0cm0uYWRsZXIsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgsIDApO1xuICB9XG5cbiAgcy53cmFwID0gMDsgICAvKiBhdm9pZCBjb21wdXRpbmcgQWRsZXItMzIgaW4gcmVhZF9idWYgKi9cblxuICAvKiBpZiBkaWN0aW9uYXJ5IHdvdWxkIGZpbGwgd2luZG93LCBqdXN0IHJlcGxhY2UgdGhlIGhpc3RvcnkgKi9cbiAgaWYgKGRpY3RMZW5ndGggPj0gcy53X3NpemUpIHtcbiAgICBpZiAod3JhcCA9PT0gMCkgeyAgICAgICAgICAgIC8qIGFscmVhZHkgZW1wdHkgb3RoZXJ3aXNlICovXG4gICAgICAvKioqIENMRUFSX0hBU0gocyk7ICoqKi9cbiAgICAgIHplcm8kMShzLmhlYWQpOyAvLyBGaWxsIHdpdGggTklMICg9IDApO1xuICAgICAgcy5zdHJzdGFydCA9IDA7XG4gICAgICBzLmJsb2NrX3N0YXJ0ID0gMDtcbiAgICAgIHMuaW5zZXJ0ID0gMDtcbiAgICB9XG4gICAgLyogdXNlIHRoZSB0YWlsICovXG4gICAgLy8gZGljdGlvbmFyeSA9IGRpY3Rpb25hcnkuc2xpY2UoZGljdExlbmd0aCAtIHMud19zaXplKTtcbiAgICBsZXQgdG1wRGljdCA9IG5ldyBVaW50OEFycmF5KHMud19zaXplKTtcbiAgICB0bXBEaWN0LnNldChkaWN0aW9uYXJ5LnN1YmFycmF5KGRpY3RMZW5ndGggLSBzLndfc2l6ZSwgZGljdExlbmd0aCksIDApO1xuICAgIGRpY3Rpb25hcnkgPSB0bXBEaWN0O1xuICAgIGRpY3RMZW5ndGggPSBzLndfc2l6ZTtcbiAgfVxuICAvKiBpbnNlcnQgZGljdGlvbmFyeSBpbnRvIHdpbmRvdyBhbmQgaGFzaCAqL1xuICBjb25zdCBhdmFpbCA9IHN0cm0uYXZhaWxfaW47XG4gIGNvbnN0IG5leHQgPSBzdHJtLm5leHRfaW47XG4gIGNvbnN0IGlucHV0ID0gc3RybS5pbnB1dDtcbiAgc3RybS5hdmFpbF9pbiA9IGRpY3RMZW5ndGg7XG4gIHN0cm0ubmV4dF9pbiA9IDA7XG4gIHN0cm0uaW5wdXQgPSBkaWN0aW9uYXJ5O1xuICBmaWxsX3dpbmRvdyhzKTtcbiAgd2hpbGUgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCQxKSB7XG4gICAgbGV0IHN0ciA9IHMuc3Ryc3RhcnQ7XG4gICAgbGV0IG4gPSBzLmxvb2thaGVhZCAtIChNSU5fTUFUQ0gkMSAtIDEpO1xuICAgIGRvIHtcbiAgICAgIC8qIFVQREFURV9IQVNIKHMsIHMtPmluc19oLCBzLT53aW5kb3dbc3RyICsgTUlOX01BVENILTFdKTsgKi9cbiAgICAgIHMuaW5zX2ggPSBIQVNIKHMsIHMuaW5zX2gsIHMud2luZG93W3N0ciArIE1JTl9NQVRDSCQxIC0gMV0pO1xuXG4gICAgICBzLnByZXZbc3RyICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuXG4gICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzdHI7XG4gICAgICBzdHIrKztcbiAgICB9IHdoaWxlICgtLW4pO1xuICAgIHMuc3Ryc3RhcnQgPSBzdHI7XG4gICAgcy5sb29rYWhlYWQgPSBNSU5fTUFUQ0gkMSAtIDE7XG4gICAgZmlsbF93aW5kb3cocyk7XG4gIH1cbiAgcy5zdHJzdGFydCArPSBzLmxvb2thaGVhZDtcbiAgcy5ibG9ja19zdGFydCA9IHMuc3Ryc3RhcnQ7XG4gIHMuaW5zZXJ0ID0gcy5sb29rYWhlYWQ7XG4gIHMubG9va2FoZWFkID0gMDtcbiAgcy5tYXRjaF9sZW5ndGggPSBzLnByZXZfbGVuZ3RoID0gTUlOX01BVENIJDEgLSAxO1xuICBzLm1hdGNoX2F2YWlsYWJsZSA9IDA7XG4gIHN0cm0ubmV4dF9pbiA9IG5leHQ7XG4gIHN0cm0uaW5wdXQgPSBpbnB1dDtcbiAgc3RybS5hdmFpbF9pbiA9IGF2YWlsO1xuICBzLndyYXAgPSB3cmFwO1xuICByZXR1cm4gWl9PSztcbn07XG5cblxudmFyIGRlZmxhdGVJbml0XzEgPSBkZWZsYXRlSW5pdDtcbnZhciBkZWZsYXRlSW5pdDJfMSA9IGRlZmxhdGVJbml0MjtcbnZhciBkZWZsYXRlUmVzZXRfMSA9IGRlZmxhdGVSZXNldDtcbnZhciBkZWZsYXRlUmVzZXRLZWVwXzEgPSBkZWZsYXRlUmVzZXRLZWVwO1xudmFyIGRlZmxhdGVTZXRIZWFkZXJfMSA9IGRlZmxhdGVTZXRIZWFkZXI7XG52YXIgZGVmbGF0ZV8yID0gZGVmbGF0ZTtcbnZhciBkZWZsYXRlRW5kXzEgPSBkZWZsYXRlRW5kO1xudmFyIGRlZmxhdGVTZXREaWN0aW9uYXJ5XzEgPSBkZWZsYXRlU2V0RGljdGlvbmFyeTtcbnZhciBkZWZsYXRlSW5mbyA9ICdwYWtvIGRlZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpJztcblxuLyogTm90IGltcGxlbWVudGVkXG5tb2R1bGUuZXhwb3J0cy5kZWZsYXRlQm91bmQgPSBkZWZsYXRlQm91bmQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZsYXRlQ29weSA9IGRlZmxhdGVDb3B5O1xubW9kdWxlLmV4cG9ydHMuZGVmbGF0ZVBhcmFtcyA9IGRlZmxhdGVQYXJhbXM7XG5tb2R1bGUuZXhwb3J0cy5kZWZsYXRlUGVuZGluZyA9IGRlZmxhdGVQZW5kaW5nO1xubW9kdWxlLmV4cG9ydHMuZGVmbGF0ZVByaW1lID0gZGVmbGF0ZVByaW1lO1xubW9kdWxlLmV4cG9ydHMuZGVmbGF0ZVR1bmUgPSBkZWZsYXRlVHVuZTtcbiovXG5cbnZhciBkZWZsYXRlXzEgPSB7XG5cdGRlZmxhdGVJbml0OiBkZWZsYXRlSW5pdF8xLFxuXHRkZWZsYXRlSW5pdDI6IGRlZmxhdGVJbml0Ml8xLFxuXHRkZWZsYXRlUmVzZXQ6IGRlZmxhdGVSZXNldF8xLFxuXHRkZWZsYXRlUmVzZXRLZWVwOiBkZWZsYXRlUmVzZXRLZWVwXzEsXG5cdGRlZmxhdGVTZXRIZWFkZXI6IGRlZmxhdGVTZXRIZWFkZXJfMSxcblx0ZGVmbGF0ZTogZGVmbGF0ZV8yLFxuXHRkZWZsYXRlRW5kOiBkZWZsYXRlRW5kXzEsXG5cdGRlZmxhdGVTZXREaWN0aW9uYXJ5OiBkZWZsYXRlU2V0RGljdGlvbmFyeV8xLFxuXHRkZWZsYXRlSW5mbzogZGVmbGF0ZUluZm9cbn07XG5cbmNvbnN0IF9oYXMgPSAob2JqLCBrZXkpID0+IHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59O1xuXG52YXIgYXNzaWduID0gZnVuY3Rpb24gKG9iaiAvKmZyb20xLCBmcm9tMiwgZnJvbTMsIC4uLiovKSB7XG4gIGNvbnN0IHNvdXJjZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB3aGlsZSAoc291cmNlcy5sZW5ndGgpIHtcbiAgICBjb25zdCBzb3VyY2UgPSBzb3VyY2VzLnNoaWZ0KCk7XG4gICAgaWYgKCFzb3VyY2UpIHsgY29udGludWU7IH1cblxuICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzb3VyY2UgKyAnbXVzdCBiZSBub24tb2JqZWN0Jyk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBwIGluIHNvdXJjZSkge1xuICAgICAgaWYgKF9oYXMoc291cmNlLCBwKSkge1xuICAgICAgICBvYmpbcF0gPSBzb3VyY2VbcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cblxuLy8gSm9pbiBhcnJheSBvZiBjaHVua3MgdG8gc2luZ2xlIGFycmF5LlxudmFyIGZsYXR0ZW5DaHVua3MgPSAoY2h1bmtzKSA9PiB7XG4gIC8vIGNhbGN1bGF0ZSBkYXRhIGxlbmd0aFxuICBsZXQgbGVuID0gMDtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGNodW5rcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBsZW4gKz0gY2h1bmtzW2ldLmxlbmd0aDtcbiAgfVxuXG4gIC8vIGpvaW4gY2h1bmtzXG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbik7XG5cbiAgZm9yIChsZXQgaSA9IDAsIHBvcyA9IDAsIGwgPSBjaHVua3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGV0IGNodW5rID0gY2h1bmtzW2ldO1xuICAgIHJlc3VsdC5zZXQoY2h1bmssIHBvcyk7XG4gICAgcG9zICs9IGNodW5rLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgY29tbW9uID0ge1xuXHRhc3NpZ246IGFzc2lnbixcblx0ZmxhdHRlbkNodW5rczogZmxhdHRlbkNodW5rc1xufTtcblxuLy8gU3RyaW5nIGVuY29kZS9kZWNvZGUgaGVscGVyc1xuXG5cbi8vIFF1aWNrIGNoZWNrIGlmIHdlIGNhbiB1c2UgZmFzdCBhcnJheSB0byBiaW4gc3RyaW5nIGNvbnZlcnNpb25cbi8vXG4vLyAtIGFwcGx5KEFycmF5KSBjYW4gZmFpbCBvbiBBbmRyb2lkIDIuMlxuLy8gLSBhcHBseShVaW50OEFycmF5KSBjYW4gZmFpbCBvbiBpT1MgNS4xIFNhZmFyaVxuLy9cbmxldCBTVFJfQVBQTFlfVUlBX09LID0gdHJ1ZTtcblxudHJ5IHsgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheSgxKSk7IH0gY2F0Y2ggKF9fKSB7IFNUUl9BUFBMWV9VSUFfT0sgPSBmYWxzZTsgfVxuXG5cbi8vIFRhYmxlIHdpdGggdXRmOCBsZW5ndGhzIChjYWxjdWxhdGVkIGJ5IGZpcnN0IGJ5dGUgb2Ygc2VxdWVuY2UpXG4vLyBOb3RlLCB0aGF0IDUgJiA2LWJ5dGUgdmFsdWVzIGFuZCBzb21lIDQtYnl0ZSB2YWx1ZXMgY2FuIG5vdCBiZSByZXByZXNlbnRlZCBpbiBKUyxcbi8vIGJlY2F1c2UgbWF4IHBvc3NpYmxlIGNvZGVwb2ludCBpcyAweDEwZmZmZlxuY29uc3QgX3V0ZjhsZW4gPSBuZXcgVWludDhBcnJheSgyNTYpO1xuZm9yIChsZXQgcSA9IDA7IHEgPCAyNTY7IHErKykge1xuICBfdXRmOGxlbltxXSA9IChxID49IDI1MiA/IDYgOiBxID49IDI0OCA/IDUgOiBxID49IDI0MCA/IDQgOiBxID49IDIyNCA/IDMgOiBxID49IDE5MiA/IDIgOiAxKTtcbn1cbl91dGY4bGVuWzI1NF0gPSBfdXRmOGxlblsyNTRdID0gMTsgLy8gSW52YWxpZCBzZXF1ZW5jZSBzdGFydFxuXG5cbi8vIGNvbnZlcnQgc3RyaW5nIHRvIGFycmF5ICh0eXBlZCwgd2hlbiBwb3NzaWJsZSlcbnZhciBzdHJpbmcyYnVmID0gKHN0cikgPT4ge1xuICBsZXQgYnVmLCBjLCBjMiwgbV9wb3MsIGksIHN0cl9sZW4gPSBzdHIubGVuZ3RoLCBidWZfbGVuID0gMDtcblxuICAvLyBjb3VudCBiaW5hcnkgc2l6ZVxuICBmb3IgKG1fcG9zID0gMDsgbV9wb3MgPCBzdHJfbGVuOyBtX3BvcysrKSB7XG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zKTtcbiAgICBpZiAoKGMgJiAweGZjMDApID09PSAweGQ4MDAgJiYgKG1fcG9zICsgMSA8IHN0cl9sZW4pKSB7XG4gICAgICBjMiA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zICsgMSk7XG4gICAgICBpZiAoKGMyICYgMHhmYzAwKSA9PT0gMHhkYzAwKSB7XG4gICAgICAgIGMgPSAweDEwMDAwICsgKChjIC0gMHhkODAwKSA8PCAxMCkgKyAoYzIgLSAweGRjMDApO1xuICAgICAgICBtX3BvcysrO1xuICAgICAgfVxuICAgIH1cbiAgICBidWZfbGVuICs9IGMgPCAweDgwID8gMSA6IGMgPCAweDgwMCA/IDIgOiBjIDwgMHgxMDAwMCA/IDMgOiA0O1xuICB9XG5cbiAgLy8gYWxsb2NhdGUgYnVmZmVyXG4gIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGJ1Zl9sZW4pO1xuXG4gIC8vIGNvbnZlcnRcbiAgZm9yIChpID0gMCwgbV9wb3MgPSAwOyBpIDwgYnVmX2xlbjsgbV9wb3MrKykge1xuICAgIGMgPSBzdHIuY2hhckNvZGVBdChtX3Bvcyk7XG4gICAgaWYgKChjICYgMHhmYzAwKSA9PT0gMHhkODAwICYmIChtX3BvcyArIDEgPCBzdHJfbGVuKSkge1xuICAgICAgYzIgPSBzdHIuY2hhckNvZGVBdChtX3BvcyArIDEpO1xuICAgICAgaWYgKChjMiAmIDB4ZmMwMCkgPT09IDB4ZGMwMCkge1xuICAgICAgICBjID0gMHgxMDAwMCArICgoYyAtIDB4ZDgwMCkgPDwgMTApICsgKGMyIC0gMHhkYzAwKTtcbiAgICAgICAgbV9wb3MrKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGMgPCAweDgwKSB7XG4gICAgICAvKiBvbmUgYnl0ZSAqL1xuICAgICAgYnVmW2krK10gPSBjO1xuICAgIH0gZWxzZSBpZiAoYyA8IDB4ODAwKSB7XG4gICAgICAvKiB0d28gYnl0ZXMgKi9cbiAgICAgIGJ1ZltpKytdID0gMHhDMCB8IChjID4+PiA2KTtcbiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjICYgMHgzZik7XG4gICAgfSBlbHNlIGlmIChjIDwgMHgxMDAwMCkge1xuICAgICAgLyogdGhyZWUgYnl0ZXMgKi9cbiAgICAgIGJ1ZltpKytdID0gMHhFMCB8IChjID4+PiAxMik7XG4gICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyA+Pj4gNiAmIDB4M2YpO1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgJiAweDNmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyogZm91ciBieXRlcyAqL1xuICAgICAgYnVmW2krK10gPSAweGYwIHwgKGMgPj4+IDE4KTtcbiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjID4+PiAxMiAmIDB4M2YpO1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgPj4+IDYgJiAweDNmKTtcbiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjICYgMHgzZik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1Zjtcbn07XG5cbi8vIEhlbHBlclxuY29uc3QgYnVmMmJpbnN0cmluZyA9IChidWYsIGxlbikgPT4ge1xuICAvLyBPbiBDaHJvbWUsIHRoZSBhcmd1bWVudHMgaW4gYSBmdW5jdGlvbiBjYWxsIHRoYXQgYXJlIGFsbG93ZWQgaXMgYDY1NTM0YC5cbiAgLy8gSWYgdGhlIGxlbmd0aCBvZiB0aGUgYnVmZmVyIGlzIHNtYWxsZXIgdGhhbiB0aGF0LCB3ZSBjYW4gdXNlIHRoaXMgb3B0aW1pemF0aW9uLFxuICAvLyBvdGhlcndpc2Ugd2Ugd2lsbCB0YWtlIGEgc2xvd2VyIHBhdGguXG4gIGlmIChsZW4gPCA2NTUzNCkge1xuICAgIGlmIChidWYuc3ViYXJyYXkgJiYgU1RSX0FQUExZX1VJQV9PSykge1xuICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYnVmLmxlbmd0aCA9PT0gbGVuID8gYnVmIDogYnVmLnN1YmFycmF5KDAsIGxlbikpO1xuICAgIH1cbiAgfVxuXG4gIGxldCByZXN1bHQgPSAnJztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLy8gY29udmVydCBhcnJheSB0byBzdHJpbmdcbnZhciBidWYyc3RyaW5nID0gKGJ1ZiwgbWF4KSA9PiB7XG4gIGxldCBpLCBvdXQ7XG4gIGNvbnN0IGxlbiA9IG1heCB8fCBidWYubGVuZ3RoO1xuXG4gIC8vIFJlc2VydmUgbWF4IHBvc3NpYmxlIGxlbmd0aCAoMiB3b3JkcyBwZXIgY2hhcilcbiAgLy8gTkI6IGJ5IHVua25vd24gcmVhc29ucywgQXJyYXkgaXMgc2lnbmlmaWNhbnRseSBmYXN0ZXIgZm9yXG4gIC8vICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5IHRoYW4gVWludDE2QXJyYXkuXG4gIGNvbnN0IHV0ZjE2YnVmID0gbmV3IEFycmF5KGxlbiAqIDIpO1xuXG4gIGZvciAob3V0ID0gMCwgaSA9IDA7IGkgPCBsZW47KSB7XG4gICAgbGV0IGMgPSBidWZbaSsrXTtcbiAgICAvLyBxdWljayBwcm9jZXNzIGFzY2lpXG4gICAgaWYgKGMgPCAweDgwKSB7IHV0ZjE2YnVmW291dCsrXSA9IGM7IGNvbnRpbnVlOyB9XG5cbiAgICBsZXQgY19sZW4gPSBfdXRmOGxlbltjXTtcbiAgICAvLyBza2lwIDUgJiA2IGJ5dGUgY29kZXNcbiAgICBpZiAoY19sZW4gPiA0KSB7IHV0ZjE2YnVmW291dCsrXSA9IDB4ZmZmZDsgaSArPSBjX2xlbiAtIDE7IGNvbnRpbnVlOyB9XG5cbiAgICAvLyBhcHBseSBtYXNrIG9uIGZpcnN0IGJ5dGVcbiAgICBjICY9IGNfbGVuID09PSAyID8gMHgxZiA6IGNfbGVuID09PSAzID8gMHgwZiA6IDB4MDc7XG4gICAgLy8gam9pbiB0aGUgcmVzdFxuICAgIHdoaWxlIChjX2xlbiA+IDEgJiYgaSA8IGxlbikge1xuICAgICAgYyA9IChjIDw8IDYpIHwgKGJ1ZltpKytdICYgMHgzZik7XG4gICAgICBjX2xlbi0tO1xuICAgIH1cblxuICAgIC8vIHRlcm1pbmF0ZWQgYnkgZW5kIG9mIHN0cmluZz9cbiAgICBpZiAoY19sZW4gPiAxKSB7IHV0ZjE2YnVmW291dCsrXSA9IDB4ZmZmZDsgY29udGludWU7IH1cblxuICAgIGlmIChjIDwgMHgxMDAwMCkge1xuICAgICAgdXRmMTZidWZbb3V0KytdID0gYztcbiAgICB9IGVsc2Uge1xuICAgICAgYyAtPSAweDEwMDAwO1xuICAgICAgdXRmMTZidWZbb3V0KytdID0gMHhkODAwIHwgKChjID4+IDEwKSAmIDB4M2ZmKTtcbiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IDB4ZGMwMCB8IChjICYgMHgzZmYpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWYyYmluc3RyaW5nKHV0ZjE2YnVmLCBvdXQpO1xufTtcblxuXG4vLyBDYWxjdWxhdGUgbWF4IHBvc3NpYmxlIHBvc2l0aW9uIGluIHV0ZjggYnVmZmVyLFxuLy8gdGhhdCB3aWxsIG5vdCBicmVhayBzZXF1ZW5jZS4gSWYgdGhhdCdzIG5vdCBwb3NzaWJsZVxuLy8gLSAodmVyeSBzbWFsbCBsaW1pdHMpIHJldHVybiBtYXggc2l6ZSBhcyBpcy5cbi8vXG4vLyBidWZbXSAtIHV0ZjggYnl0ZXMgYXJyYXlcbi8vIG1heCAgIC0gbGVuZ3RoIGxpbWl0IChtYW5kYXRvcnkpO1xudmFyIHV0Zjhib3JkZXIgPSAoYnVmLCBtYXgpID0+IHtcblxuICBtYXggPSBtYXggfHwgYnVmLmxlbmd0aDtcbiAgaWYgKG1heCA+IGJ1Zi5sZW5ndGgpIHsgbWF4ID0gYnVmLmxlbmd0aDsgfVxuXG4gIC8vIGdvIGJhY2sgZnJvbSBsYXN0IHBvc2l0aW9uLCB1bnRpbCBzdGFydCBvZiBzZXF1ZW5jZSBmb3VuZFxuICBsZXQgcG9zID0gbWF4IC0gMTtcbiAgd2hpbGUgKHBvcyA+PSAwICYmIChidWZbcG9zXSAmIDB4QzApID09PSAweDgwKSB7IHBvcy0tOyB9XG5cbiAgLy8gVmVyeSBzbWFsbCBhbmQgYnJva2VuIHNlcXVlbmNlLFxuICAvLyByZXR1cm4gbWF4LCBiZWNhdXNlIHdlIHNob3VsZCByZXR1cm4gc29tZXRoaW5nIGFueXdheS5cbiAgaWYgKHBvcyA8IDApIHsgcmV0dXJuIG1heDsgfVxuXG4gIC8vIElmIHdlIGNhbWUgdG8gc3RhcnQgb2YgYnVmZmVyIC0gdGhhdCBtZWFucyBidWZmZXIgaXMgdG9vIHNtYWxsLFxuICAvLyByZXR1cm4gbWF4IHRvby5cbiAgaWYgKHBvcyA9PT0gMCkgeyByZXR1cm4gbWF4OyB9XG5cbiAgcmV0dXJuIChwb3MgKyBfdXRmOGxlbltidWZbcG9zXV0gPiBtYXgpID8gcG9zIDogbWF4O1xufTtcblxudmFyIHN0cmluZ3MgPSB7XG5cdHN0cmluZzJidWY6IHN0cmluZzJidWYsXG5cdGJ1ZjJzdHJpbmc6IGJ1ZjJzdHJpbmcsXG5cdHV0Zjhib3JkZXI6IHV0Zjhib3JkZXJcbn07XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuZnVuY3Rpb24gWlN0cmVhbSgpIHtcbiAgLyogbmV4dCBpbnB1dCBieXRlICovXG4gIHRoaXMuaW5wdXQgPSBudWxsOyAvLyBKUyBzcGVjaWZpYywgYmVjYXVzZSB3ZSBoYXZlIG5vIHBvaW50ZXJzXG4gIHRoaXMubmV4dF9pbiA9IDA7XG4gIC8qIG51bWJlciBvZiBieXRlcyBhdmFpbGFibGUgYXQgaW5wdXQgKi9cbiAgdGhpcy5hdmFpbF9pbiA9IDA7XG4gIC8qIHRvdGFsIG51bWJlciBvZiBpbnB1dCBieXRlcyByZWFkIHNvIGZhciAqL1xuICB0aGlzLnRvdGFsX2luID0gMDtcbiAgLyogbmV4dCBvdXRwdXQgYnl0ZSBzaG91bGQgYmUgcHV0IHRoZXJlICovXG4gIHRoaXMub3V0cHV0ID0gbnVsbDsgLy8gSlMgc3BlY2lmaWMsIGJlY2F1c2Ugd2UgaGF2ZSBubyBwb2ludGVyc1xuICB0aGlzLm5leHRfb3V0ID0gMDtcbiAgLyogcmVtYWluaW5nIGZyZWUgc3BhY2UgYXQgb3V0cHV0ICovXG4gIHRoaXMuYXZhaWxfb3V0ID0gMDtcbiAgLyogdG90YWwgbnVtYmVyIG9mIGJ5dGVzIG91dHB1dCBzbyBmYXIgKi9cbiAgdGhpcy50b3RhbF9vdXQgPSAwO1xuICAvKiBsYXN0IGVycm9yIG1lc3NhZ2UsIE5VTEwgaWYgbm8gZXJyb3IgKi9cbiAgdGhpcy5tc2cgPSAnJy8qWl9OVUxMKi87XG4gIC8qIG5vdCB2aXNpYmxlIGJ5IGFwcGxpY2F0aW9ucyAqL1xuICB0aGlzLnN0YXRlID0gbnVsbDtcbiAgLyogYmVzdCBndWVzcyBhYm91dCB0aGUgZGF0YSB0eXBlOiBiaW5hcnkgb3IgdGV4dCAqL1xuICB0aGlzLmRhdGFfdHlwZSA9IDIvKlpfVU5LTk9XTiovO1xuICAvKiBhZGxlcjMyIHZhbHVlIG9mIHRoZSB1bmNvbXByZXNzZWQgZGF0YSAqL1xuICB0aGlzLmFkbGVyID0gMDtcbn1cblxudmFyIHpzdHJlYW0gPSBaU3RyZWFtO1xuXG5jb25zdCB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5jb25zdCB7XG4gIFpfTk9fRkxVU0g6IFpfTk9fRkxVU0gkMSwgWl9TWU5DX0ZMVVNILCBaX0ZVTExfRkxVU0g6IFpfRlVMTF9GTFVTSCQxLCBaX0ZJTklTSDogWl9GSU5JU0gkMSxcbiAgWl9PSzogWl9PSyQxLCBaX1NUUkVBTV9FTkQ6IFpfU1RSRUFNX0VORCQxLFxuICBaX0RFRkFVTFRfQ09NUFJFU1NJT046IFpfREVGQVVMVF9DT01QUkVTU0lPTiQxLFxuICBaX0RFRkFVTFRfU1RSQVRFR1k6IFpfREVGQVVMVF9TVFJBVEVHWSQxLFxuICBaX0RFRkxBVEVEOiBaX0RFRkxBVEVEJDFcbn0gPSBjb25zdGFudHM7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuLyoqXG4gKiBjbGFzcyBEZWZsYXRlXG4gKlxuICogR2VuZXJpYyBKUy1zdHlsZSB3cmFwcGVyIGZvciB6bGliIGNhbGxzLiBJZiB5b3UgZG9uJ3QgbmVlZFxuICogc3RyZWFtaW5nIGJlaGF2aW91ciAtIHVzZSBtb3JlIHNpbXBsZSBmdW5jdGlvbnM6IFtbZGVmbGF0ZV1dLFxuICogW1tkZWZsYXRlUmF3XV0gYW5kIFtbZ3ppcF1dLlxuICoqL1xuXG4vKiBpbnRlcm5hbFxuICogRGVmbGF0ZS5jaHVua3MgLT4gQXJyYXlcbiAqXG4gKiBDaHVua3Mgb2Ygb3V0cHV0IGRhdGEsIGlmIFtbRGVmbGF0ZSNvbkRhdGFdXSBub3Qgb3ZlcnJpZGRlbi5cbiAqKi9cblxuLyoqXG4gKiBEZWZsYXRlLnJlc3VsdCAtPiBVaW50OEFycmF5XG4gKlxuICogQ29tcHJlc3NlZCByZXN1bHQsIGdlbmVyYXRlZCBieSBkZWZhdWx0IFtbRGVmbGF0ZSNvbkRhdGFdXVxuICogYW5kIFtbRGVmbGF0ZSNvbkVuZF1dIGhhbmRsZXJzLiBGaWxsZWQgYWZ0ZXIgeW91IHB1c2ggbGFzdCBjaHVua1xuICogKGNhbGwgW1tEZWZsYXRlI3B1c2hdXSB3aXRoIGBaX0ZJTklTSGAgLyBgdHJ1ZWAgcGFyYW0pLlxuICoqL1xuXG4vKipcbiAqIERlZmxhdGUuZXJyIC0+IE51bWJlclxuICpcbiAqIEVycm9yIGNvZGUgYWZ0ZXIgZGVmbGF0ZSBmaW5pc2hlZC4gMCAoWl9PSykgb24gc3VjY2Vzcy5cbiAqIFlvdSB3aWxsIG5vdCBuZWVkIGl0IGluIHJlYWwgbGlmZSwgYmVjYXVzZSBkZWZsYXRlIGVycm9yc1xuICogYXJlIHBvc3NpYmxlIG9ubHkgb24gd3Jvbmcgb3B0aW9ucyBvciBiYWQgYG9uRGF0YWAgLyBgb25FbmRgXG4gKiBjdXN0b20gaGFuZGxlcnMuXG4gKiovXG5cbi8qKlxuICogRGVmbGF0ZS5tc2cgLT4gU3RyaW5nXG4gKlxuICogRXJyb3IgbWVzc2FnZSwgaWYgW1tEZWZsYXRlLmVycl1dICE9IDBcbiAqKi9cblxuXG4vKipcbiAqIG5ldyBEZWZsYXRlKG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgZGVmbGF0ZSBvcHRpb25zLlxuICpcbiAqIENyZWF0ZXMgbmV3IGRlZmxhdG9yIGluc3RhbmNlIHdpdGggc3BlY2lmaWVkIHBhcmFtcy4gVGhyb3dzIGV4Y2VwdGlvblxuICogb24gYmFkIHBhcmFtcy4gU3VwcG9ydGVkIG9wdGlvbnM6XG4gKlxuICogLSBgbGV2ZWxgXG4gKiAtIGB3aW5kb3dCaXRzYFxuICogLSBgbWVtTGV2ZWxgXG4gKiAtIGBzdHJhdGVneWBcbiAqIC0gYGRpY3Rpb25hcnlgXG4gKlxuICogW2h0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZF0oaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkKVxuICogZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlc2UuXG4gKlxuICogQWRkaXRpb25hbCBvcHRpb25zLCBmb3IgaW50ZXJuYWwgbmVlZHM6XG4gKlxuICogLSBgY2h1bmtTaXplYCAtIHNpemUgb2YgZ2VuZXJhdGVkIGRhdGEgY2h1bmtzICgxNksgYnkgZGVmYXVsdClcbiAqIC0gYHJhd2AgKEJvb2xlYW4pIC0gZG8gcmF3IGRlZmxhdGVcbiAqIC0gYGd6aXBgIChCb29sZWFuKSAtIGNyZWF0ZSBnemlwIHdyYXBwZXJcbiAqIC0gYGhlYWRlcmAgKE9iamVjdCkgLSBjdXN0b20gaGVhZGVyIGZvciBnemlwXG4gKiAgIC0gYHRleHRgIChCb29sZWFuKSAtIHRydWUgaWYgY29tcHJlc3NlZCBkYXRhIGJlbGlldmVkIHRvIGJlIHRleHRcbiAqICAgLSBgdGltZWAgKE51bWJlcikgLSBtb2RpZmljYXRpb24gdGltZSwgdW5peCB0aW1lc3RhbXBcbiAqICAgLSBgb3NgIChOdW1iZXIpIC0gb3BlcmF0aW9uIHN5c3RlbSBjb2RlXG4gKiAgIC0gYGV4dHJhYCAoQXJyYXkpIC0gYXJyYXkgb2YgYnl0ZXMgd2l0aCBleHRyYSBkYXRhIChtYXggNjU1MzYpXG4gKiAgIC0gYG5hbWVgIChTdHJpbmcpIC0gZmlsZSBuYW1lIChiaW5hcnkgc3RyaW5nKVxuICogICAtIGBjb21tZW50YCAoU3RyaW5nKSAtIGNvbW1lbnQgKGJpbmFyeSBzdHJpbmcpXG4gKiAgIC0gYGhjcmNgIChCb29sZWFuKSAtIHRydWUgaWYgaGVhZGVyIGNyYyBzaG91bGQgYmUgYWRkZWRcbiAqXG4gKiAjIyMjIyBFeGFtcGxlOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IHBha28gPSByZXF1aXJlKCdwYWtvJylcbiAqICAgLCBjaHVuazEgPSBuZXcgVWludDhBcnJheShbMSwyLDMsNCw1LDYsNyw4LDldKVxuICogICAsIGNodW5rMiA9IG5ldyBVaW50OEFycmF5KFsxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOCwxOV0pO1xuICpcbiAqIGNvbnN0IGRlZmxhdGUgPSBuZXcgcGFrby5EZWZsYXRlKHsgbGV2ZWw6IDN9KTtcbiAqXG4gKiBkZWZsYXRlLnB1c2goY2h1bmsxLCBmYWxzZSk7XG4gKiBkZWZsYXRlLnB1c2goY2h1bmsyLCB0cnVlKTsgIC8vIHRydWUgLT4gbGFzdCBjaHVua1xuICpcbiAqIGlmIChkZWZsYXRlLmVycikgeyB0aHJvdyBuZXcgRXJyb3IoZGVmbGF0ZS5lcnIpOyB9XG4gKlxuICogY29uc29sZS5sb2coZGVmbGF0ZS5yZXN1bHQpO1xuICogYGBgXG4gKiovXG5mdW5jdGlvbiBEZWZsYXRlKG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gY29tbW9uLmFzc2lnbih7XG4gICAgbGV2ZWw6IFpfREVGQVVMVF9DT01QUkVTU0lPTiQxLFxuICAgIG1ldGhvZDogWl9ERUZMQVRFRCQxLFxuICAgIGNodW5rU2l6ZTogMTYzODQsXG4gICAgd2luZG93Qml0czogMTUsXG4gICAgbWVtTGV2ZWw6IDgsXG4gICAgc3RyYXRlZ3k6IFpfREVGQVVMVF9TVFJBVEVHWSQxXG4gIH0sIG9wdGlvbnMgfHwge30pO1xuXG4gIGxldCBvcHQgPSB0aGlzLm9wdGlvbnM7XG5cbiAgaWYgKG9wdC5yYXcgJiYgKG9wdC53aW5kb3dCaXRzID4gMCkpIHtcbiAgICBvcHQud2luZG93Qml0cyA9IC1vcHQud2luZG93Qml0cztcbiAgfVxuXG4gIGVsc2UgaWYgKG9wdC5nemlwICYmIChvcHQud2luZG93Qml0cyA+IDApICYmIChvcHQud2luZG93Qml0cyA8IDE2KSkge1xuICAgIG9wdC53aW5kb3dCaXRzICs9IDE2O1xuICB9XG5cbiAgdGhpcy5lcnIgICAgPSAwOyAgICAgIC8vIGVycm9yIGNvZGUsIGlmIGhhcHBlbnMgKDAgPSBaX09LKVxuICB0aGlzLm1zZyAgICA9ICcnOyAgICAgLy8gZXJyb3IgbWVzc2FnZVxuICB0aGlzLmVuZGVkICA9IGZhbHNlOyAgLy8gdXNlZCB0byBhdm9pZCBtdWx0aXBsZSBvbkVuZCgpIGNhbGxzXG4gIHRoaXMuY2h1bmtzID0gW107ICAgICAvLyBjaHVua3Mgb2YgY29tcHJlc3NlZCBkYXRhXG5cbiAgdGhpcy5zdHJtID0gbmV3IHpzdHJlYW0oKTtcbiAgdGhpcy5zdHJtLmF2YWlsX291dCA9IDA7XG5cbiAgbGV0IHN0YXR1cyA9IGRlZmxhdGVfMS5kZWZsYXRlSW5pdDIoXG4gICAgdGhpcy5zdHJtLFxuICAgIG9wdC5sZXZlbCxcbiAgICBvcHQubWV0aG9kLFxuICAgIG9wdC53aW5kb3dCaXRzLFxuICAgIG9wdC5tZW1MZXZlbCxcbiAgICBvcHQuc3RyYXRlZ3lcbiAgKTtcblxuICBpZiAoc3RhdHVzICE9PSBaX09LJDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZXNbc3RhdHVzXSk7XG4gIH1cblxuICBpZiAob3B0LmhlYWRlcikge1xuICAgIGRlZmxhdGVfMS5kZWZsYXRlU2V0SGVhZGVyKHRoaXMuc3RybSwgb3B0LmhlYWRlcik7XG4gIH1cblxuICBpZiAob3B0LmRpY3Rpb25hcnkpIHtcbiAgICBsZXQgZGljdDtcbiAgICAvLyBDb252ZXJ0IGRhdGEgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBvcHQuZGljdGlvbmFyeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIElmIHdlIG5lZWQgdG8gY29tcHJlc3MgdGV4dCwgY2hhbmdlIGVuY29kaW5nIHRvIHV0ZjguXG4gICAgICBkaWN0ID0gc3RyaW5ncy5zdHJpbmcyYnVmKG9wdC5kaWN0aW9uYXJ5KTtcbiAgICB9IGVsc2UgaWYgKHRvU3RyaW5nLmNhbGwob3B0LmRpY3Rpb25hcnkpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nKSB7XG4gICAgICBkaWN0ID0gbmV3IFVpbnQ4QXJyYXkob3B0LmRpY3Rpb25hcnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkaWN0ID0gb3B0LmRpY3Rpb25hcnk7XG4gICAgfVxuXG4gICAgc3RhdHVzID0gZGVmbGF0ZV8xLmRlZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSwgZGljdCk7XG5cbiAgICBpZiAoc3RhdHVzICE9PSBaX09LJDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlc1tzdGF0dXNdKTtcbiAgICB9XG5cbiAgICB0aGlzLl9kaWN0X3NldCA9IHRydWU7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWZsYXRlI3B1c2goZGF0YVssIGZsdXNoX21vZGVdKSAtPiBCb29sZWFuXG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXl8QXJyYXlCdWZmZXJ8U3RyaW5nKTogaW5wdXQgZGF0YS4gU3RyaW5ncyB3aWxsIGJlXG4gKiAgIGNvbnZlcnRlZCB0byB1dGY4IGJ5dGUgc2VxdWVuY2UuXG4gKiAtIGZsdXNoX21vZGUgKE51bWJlcnxCb29sZWFuKTogMC4uNiBmb3IgY29ycmVzcG9uZGluZyBaX05PX0ZMVVNILi5aX1RSRUUgbW9kZXMuXG4gKiAgIFNlZSBjb25zdGFudHMuIFNraXBwZWQgb3IgYGZhbHNlYCBtZWFucyBaX05PX0ZMVVNILCBgdHJ1ZWAgbWVhbnMgWl9GSU5JU0guXG4gKlxuICogU2VuZHMgaW5wdXQgZGF0YSB0byBkZWZsYXRlIHBpcGUsIGdlbmVyYXRpbmcgW1tEZWZsYXRlI29uRGF0YV1dIGNhbGxzIHdpdGhcbiAqIG5ldyBjb21wcmVzc2VkIGNodW5rcy4gUmV0dXJucyBgdHJ1ZWAgb24gc3VjY2Vzcy4gVGhlIGxhc3QgZGF0YSBibG9jayBtdXN0XG4gKiBoYXZlIGBmbHVzaF9tb2RlYCBaX0ZJTklTSCAob3IgYHRydWVgKS4gVGhhdCB3aWxsIGZsdXNoIGludGVybmFsIHBlbmRpbmdcbiAqIGJ1ZmZlcnMgYW5kIGNhbGwgW1tEZWZsYXRlI29uRW5kXV0uXG4gKlxuICogT24gZmFpbCBjYWxsIFtbRGVmbGF0ZSNvbkVuZF1dIHdpdGggZXJyb3IgY29kZSBhbmQgcmV0dXJuIGZhbHNlLlxuICpcbiAqICMjIyMjIEV4YW1wbGVcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBwdXNoKGNodW5rLCBmYWxzZSk7IC8vIHB1c2ggb25lIG9mIGRhdGEgY2h1bmtzXG4gKiAuLi5cbiAqIHB1c2goY2h1bmssIHRydWUpOyAgLy8gcHVzaCBsYXN0IGNodW5rXG4gKiBgYGBcbiAqKi9cbkRlZmxhdGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoZGF0YSwgZmx1c2hfbW9kZSkge1xuICBjb25zdCBzdHJtID0gdGhpcy5zdHJtO1xuICBjb25zdCBjaHVua1NpemUgPSB0aGlzLm9wdGlvbnMuY2h1bmtTaXplO1xuICBsZXQgc3RhdHVzLCBfZmx1c2hfbW9kZTtcblxuICBpZiAodGhpcy5lbmRlZCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICBpZiAoZmx1c2hfbW9kZSA9PT0gfn5mbHVzaF9tb2RlKSBfZmx1c2hfbW9kZSA9IGZsdXNoX21vZGU7XG4gIGVsc2UgX2ZsdXNoX21vZGUgPSBmbHVzaF9tb2RlID09PSB0cnVlID8gWl9GSU5JU0gkMSA6IFpfTk9fRkxVU0gkMTtcblxuICAvLyBDb252ZXJ0IGRhdGEgaWYgbmVlZGVkXG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBJZiB3ZSBuZWVkIHRvIGNvbXByZXNzIHRleHQsIGNoYW5nZSBlbmNvZGluZyB0byB1dGY4LlxuICAgIHN0cm0uaW5wdXQgPSBzdHJpbmdzLnN0cmluZzJidWYoZGF0YSk7XG4gIH0gZWxzZSBpZiAodG9TdHJpbmcuY2FsbChkYXRhKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJykge1xuICAgIHN0cm0uaW5wdXQgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHJtLmlucHV0ID0gZGF0YTtcbiAgfVxuXG4gIHN0cm0ubmV4dF9pbiA9IDA7XG4gIHN0cm0uYXZhaWxfaW4gPSBzdHJtLmlucHV0Lmxlbmd0aDtcblxuICBmb3IgKDs7KSB7XG4gICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICBzdHJtLm91dHB1dCA9IG5ldyBVaW50OEFycmF5KGNodW5rU2l6ZSk7XG4gICAgICBzdHJtLm5leHRfb3V0ID0gMDtcbiAgICAgIHN0cm0uYXZhaWxfb3V0ID0gY2h1bmtTaXplO1xuICAgIH1cblxuICAgIC8vIE1ha2Ugc3VyZSBhdmFpbF9vdXQgPiA2IHRvIGF2b2lkIHJlcGVhdGluZyBtYXJrZXJzXG4gICAgaWYgKChfZmx1c2hfbW9kZSA9PT0gWl9TWU5DX0ZMVVNIIHx8IF9mbHVzaF9tb2RlID09PSBaX0ZVTExfRkxVU0gkMSkgJiYgc3RybS5hdmFpbF9vdXQgPD0gNikge1xuICAgICAgdGhpcy5vbkRhdGEoc3RybS5vdXRwdXQuc3ViYXJyYXkoMCwgc3RybS5uZXh0X291dCkpO1xuICAgICAgc3RybS5hdmFpbF9vdXQgPSAwO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgc3RhdHVzID0gZGVmbGF0ZV8xLmRlZmxhdGUoc3RybSwgX2ZsdXNoX21vZGUpO1xuXG4gICAgLy8gRW5kZWQgPT4gZmx1c2ggYW5kIGZpbmlzaFxuICAgIGlmIChzdGF0dXMgPT09IFpfU1RSRUFNX0VORCQxKSB7XG4gICAgICBpZiAoc3RybS5uZXh0X291dCA+IDApIHtcbiAgICAgICAgdGhpcy5vbkRhdGEoc3RybS5vdXRwdXQuc3ViYXJyYXkoMCwgc3RybS5uZXh0X291dCkpO1xuICAgICAgfVxuICAgICAgc3RhdHVzID0gZGVmbGF0ZV8xLmRlZmxhdGVFbmQodGhpcy5zdHJtKTtcbiAgICAgIHRoaXMub25FbmQoc3RhdHVzKTtcbiAgICAgIHRoaXMuZW5kZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHN0YXR1cyA9PT0gWl9PSyQxO1xuICAgIH1cblxuICAgIC8vIEZsdXNoIGlmIG91dCBidWZmZXIgZnVsbFxuICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgdGhpcy5vbkRhdGEoc3RybS5vdXRwdXQpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gRmx1c2ggaWYgcmVxdWVzdGVkIGFuZCBoYXMgZGF0YVxuICAgIGlmIChfZmx1c2hfbW9kZSA+IDAgJiYgc3RybS5uZXh0X291dCA+IDApIHtcbiAgICAgIHRoaXMub25EYXRhKHN0cm0ub3V0cHV0LnN1YmFycmF5KDAsIHN0cm0ubmV4dF9vdXQpKTtcbiAgICAgIHN0cm0uYXZhaWxfb3V0ID0gMDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChzdHJtLmF2YWlsX2luID09PSAwKSBicmVhaztcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuXG4vKipcbiAqIERlZmxhdGUjb25EYXRhKGNodW5rKSAtPiBWb2lkXG4gKiAtIGNodW5rIChVaW50OEFycmF5KTogb3V0cHV0IGRhdGEuXG4gKlxuICogQnkgZGVmYXVsdCwgc3RvcmVzIGRhdGEgYmxvY2tzIGluIGBjaHVua3NbXWAgcHJvcGVydHkgYW5kIGdsdWVcbiAqIHRob3NlIGluIGBvbkVuZGAuIE92ZXJyaWRlIHRoaXMgaGFuZGxlciwgaWYgeW91IG5lZWQgYW5vdGhlciBiZWhhdmlvdXIuXG4gKiovXG5EZWZsYXRlLnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgdGhpcy5jaHVua3MucHVzaChjaHVuayk7XG59O1xuXG5cbi8qKlxuICogRGVmbGF0ZSNvbkVuZChzdGF0dXMpIC0+IFZvaWRcbiAqIC0gc3RhdHVzIChOdW1iZXIpOiBkZWZsYXRlIHN0YXR1cy4gMCAoWl9PSykgb24gc3VjY2VzcyxcbiAqICAgb3RoZXIgaWYgbm90LlxuICpcbiAqIENhbGxlZCBvbmNlIGFmdGVyIHlvdSB0ZWxsIGRlZmxhdGUgdGhhdCB0aGUgaW5wdXQgc3RyZWFtIGlzXG4gKiBjb21wbGV0ZSAoWl9GSU5JU0gpLiBCeSBkZWZhdWx0IC0gam9pbiBjb2xsZWN0ZWQgY2h1bmtzLFxuICogZnJlZSBtZW1vcnkgYW5kIGZpbGwgYHJlc3VsdHNgIC8gYGVycmAgcHJvcGVydGllcy5cbiAqKi9cbkRlZmxhdGUucHJvdG90eXBlLm9uRW5kID0gZnVuY3Rpb24gKHN0YXR1cykge1xuICAvLyBPbiBzdWNjZXNzIC0gam9pblxuICBpZiAoc3RhdHVzID09PSBaX09LJDEpIHtcbiAgICB0aGlzLnJlc3VsdCA9IGNvbW1vbi5mbGF0dGVuQ2h1bmtzKHRoaXMuY2h1bmtzKTtcbiAgfVxuICB0aGlzLmNodW5rcyA9IFtdO1xuICB0aGlzLmVyciA9IHN0YXR1cztcbiAgdGhpcy5tc2cgPSB0aGlzLnN0cm0ubXNnO1xufTtcblxuXG4vKipcbiAqIGRlZmxhdGUoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5XG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXl8U3RyaW5nKTogaW5wdXQgZGF0YSB0byBjb21wcmVzcy5cbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBkZWZsYXRlIG9wdGlvbnMuXG4gKlxuICogQ29tcHJlc3MgYGRhdGFgIHdpdGggZGVmbGF0ZSBhbGdvcml0aG0gYW5kIGBvcHRpb25zYC5cbiAqXG4gKiBTdXBwb3J0ZWQgb3B0aW9ucyBhcmU6XG4gKlxuICogLSBsZXZlbFxuICogLSB3aW5kb3dCaXRzXG4gKiAtIG1lbUxldmVsXG4gKiAtIHN0cmF0ZWd5XG4gKiAtIGRpY3Rpb25hcnlcbiAqXG4gKiBbaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkXShodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWQpXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiB0aGVzZS5cbiAqXG4gKiBTdWdhciAob3B0aW9ucyk6XG4gKlxuICogLSBgcmF3YCAoQm9vbGVhbikgLSBzYXkgdGhhdCB3ZSB3b3JrIHdpdGggcmF3IHN0cmVhbSwgaWYgeW91IGRvbid0IHdpc2ggdG8gc3BlY2lmeVxuICogICBuZWdhdGl2ZSB3aW5kb3dCaXRzIGltcGxpY2l0bHkuXG4gKlxuICogIyMjIyMgRXhhbXBsZTpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBwYWtvID0gcmVxdWlyZSgncGFrbycpXG4gKiBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoWzEsMiwzLDQsNSw2LDcsOCw5XSk7XG4gKlxuICogY29uc29sZS5sb2cocGFrby5kZWZsYXRlKGRhdGEpKTtcbiAqIGBgYFxuICoqL1xuZnVuY3Rpb24gZGVmbGF0ZSQxKGlucHV0LCBvcHRpb25zKSB7XG4gIGNvbnN0IGRlZmxhdG9yID0gbmV3IERlZmxhdGUob3B0aW9ucyk7XG5cbiAgZGVmbGF0b3IucHVzaChpbnB1dCwgdHJ1ZSk7XG5cbiAgLy8gVGhhdCB3aWxsIG5ldmVyIGhhcHBlbnMsIGlmIHlvdSBkb24ndCBjaGVhdCB3aXRoIG9wdGlvbnMgOilcbiAgaWYgKGRlZmxhdG9yLmVycikgeyB0aHJvdyBkZWZsYXRvci5tc2cgfHwgbWVzc2FnZXNbZGVmbGF0b3IuZXJyXTsgfVxuXG4gIHJldHVybiBkZWZsYXRvci5yZXN1bHQ7XG59XG5cblxuLyoqXG4gKiBkZWZsYXRlUmF3KGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheVxuICogLSBkYXRhIChVaW50OEFycmF5fFN0cmluZyk6IGlucHV0IGRhdGEgdG8gY29tcHJlc3MuXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgZGVmbGF0ZSBvcHRpb25zLlxuICpcbiAqIFRoZSBzYW1lIGFzIFtbZGVmbGF0ZV1dLCBidXQgY3JlYXRlcyByYXcgZGF0YSwgd2l0aG91dCB3cmFwcGVyXG4gKiAoaGVhZGVyIGFuZCBhZGxlcjMyIGNyYykuXG4gKiovXG5mdW5jdGlvbiBkZWZsYXRlUmF3KGlucHV0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLnJhdyA9IHRydWU7XG4gIHJldHVybiBkZWZsYXRlJDEoaW5wdXQsIG9wdGlvbnMpO1xufVxuXG5cbi8qKlxuICogZ3ppcChkYXRhWywgb3B0aW9uc10pIC0+IFVpbnQ4QXJyYXlcbiAqIC0gZGF0YSAoVWludDhBcnJheXxTdHJpbmcpOiBpbnB1dCBkYXRhIHRvIGNvbXByZXNzLlxuICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGRlZmxhdGUgb3B0aW9ucy5cbiAqXG4gKiBUaGUgc2FtZSBhcyBbW2RlZmxhdGVdXSwgYnV0IGNyZWF0ZSBnemlwIHdyYXBwZXIgaW5zdGVhZCBvZlxuICogZGVmbGF0ZSBvbmUuXG4gKiovXG5mdW5jdGlvbiBnemlwKGlucHV0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLmd6aXAgPSB0cnVlO1xuICByZXR1cm4gZGVmbGF0ZSQxKGlucHV0LCBvcHRpb25zKTtcbn1cblxuXG52YXIgRGVmbGF0ZV8xID0gRGVmbGF0ZTtcbnZhciBkZWZsYXRlXzIkMSA9IGRlZmxhdGUkMTtcbnZhciBkZWZsYXRlUmF3XzEgPSBkZWZsYXRlUmF3O1xudmFyIGd6aXBfMSA9IGd6aXA7XG52YXIgY29uc3RhbnRzJDEgPSBjb25zdGFudHM7XG5cbnZhciBkZWZsYXRlXzEkMSA9IHtcblx0RGVmbGF0ZTogRGVmbGF0ZV8xLFxuXHRkZWZsYXRlOiBkZWZsYXRlXzIkMSxcblx0ZGVmbGF0ZVJhdzogZGVmbGF0ZVJhd18xLFxuXHRnemlwOiBnemlwXzEsXG5cdGNvbnN0YW50czogY29uc3RhbnRzJDFcbn07XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuLy8gU2VlIHN0YXRlIGRlZnMgZnJvbSBpbmZsYXRlLmpzXG5jb25zdCBCQUQgPSAzMDsgICAgICAgLyogZ290IGEgZGF0YSBlcnJvciAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xuY29uc3QgVFlQRSA9IDEyOyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIHR5cGUgYml0cywgaW5jbHVkaW5nIGxhc3QtZmxhZyBiaXQgKi9cblxuLypcbiAgIERlY29kZSBsaXRlcmFsLCBsZW5ndGgsIGFuZCBkaXN0YW5jZSBjb2RlcyBhbmQgd3JpdGUgb3V0IHRoZSByZXN1bHRpbmdcbiAgIGxpdGVyYWwgYW5kIG1hdGNoIGJ5dGVzIHVudGlsIGVpdGhlciBub3QgZW5vdWdoIGlucHV0IG9yIG91dHB1dCBpc1xuICAgYXZhaWxhYmxlLCBhbiBlbmQtb2YtYmxvY2sgaXMgZW5jb3VudGVyZWQsIG9yIGEgZGF0YSBlcnJvciBpcyBlbmNvdW50ZXJlZC5cbiAgIFdoZW4gbGFyZ2UgZW5vdWdoIGlucHV0IGFuZCBvdXRwdXQgYnVmZmVycyBhcmUgc3VwcGxpZWQgdG8gaW5mbGF0ZSgpLCBmb3JcbiAgIGV4YW1wbGUsIGEgMTZLIGlucHV0IGJ1ZmZlciBhbmQgYSA2NEsgb3V0cHV0IGJ1ZmZlciwgbW9yZSB0aGFuIDk1JSBvZiB0aGVcbiAgIGluZmxhdGUgZXhlY3V0aW9uIHRpbWUgaXMgc3BlbnQgaW4gdGhpcyByb3V0aW5lLlxuXG4gICBFbnRyeSBhc3N1bXB0aW9uczpcblxuICAgICAgICBzdGF0ZS5tb2RlID09PSBMRU5cbiAgICAgICAgc3RybS5hdmFpbF9pbiA+PSA2XG4gICAgICAgIHN0cm0uYXZhaWxfb3V0ID49IDI1OFxuICAgICAgICBzdGFydCA+PSBzdHJtLmF2YWlsX291dFxuICAgICAgICBzdGF0ZS5iaXRzIDwgOFxuXG4gICBPbiByZXR1cm4sIHN0YXRlLm1vZGUgaXMgb25lIG9mOlxuXG4gICAgICAgIExFTiAtLSByYW4gb3V0IG9mIGVub3VnaCBvdXRwdXQgc3BhY2Ugb3IgZW5vdWdoIGF2YWlsYWJsZSBpbnB1dFxuICAgICAgICBUWVBFIC0tIHJlYWNoZWQgZW5kIG9mIGJsb2NrIGNvZGUsIGluZmxhdGUoKSB0byBpbnRlcnByZXQgbmV4dCBibG9ja1xuICAgICAgICBCQUQgLS0gZXJyb3IgaW4gYmxvY2sgZGF0YVxuXG4gICBOb3RlczpcblxuICAgIC0gVGhlIG1heGltdW0gaW5wdXQgYml0cyB1c2VkIGJ5IGEgbGVuZ3RoL2Rpc3RhbmNlIHBhaXIgaXMgMTUgYml0cyBmb3IgdGhlXG4gICAgICBsZW5ndGggY29kZSwgNSBiaXRzIGZvciB0aGUgbGVuZ3RoIGV4dHJhLCAxNSBiaXRzIGZvciB0aGUgZGlzdGFuY2UgY29kZSxcbiAgICAgIGFuZCAxMyBiaXRzIGZvciB0aGUgZGlzdGFuY2UgZXh0cmEuICBUaGlzIHRvdGFscyA0OCBiaXRzLCBvciBzaXggYnl0ZXMuXG4gICAgICBUaGVyZWZvcmUgaWYgc3RybS5hdmFpbF9pbiA+PSA2LCB0aGVuIHRoZXJlIGlzIGVub3VnaCBpbnB1dCB0byBhdm9pZFxuICAgICAgY2hlY2tpbmcgZm9yIGF2YWlsYWJsZSBpbnB1dCB3aGlsZSBkZWNvZGluZy5cblxuICAgIC0gVGhlIG1heGltdW0gYnl0ZXMgdGhhdCBhIHNpbmdsZSBsZW5ndGgvZGlzdGFuY2UgcGFpciBjYW4gb3V0cHV0IGlzIDI1OFxuICAgICAgYnl0ZXMsIHdoaWNoIGlzIHRoZSBtYXhpbXVtIGxlbmd0aCB0aGF0IGNhbiBiZSBjb2RlZC4gIGluZmxhdGVfZmFzdCgpXG4gICAgICByZXF1aXJlcyBzdHJtLmF2YWlsX291dCA+PSAyNTggZm9yIGVhY2ggbG9vcCB0byBhdm9pZCBjaGVja2luZyBmb3JcbiAgICAgIG91dHB1dCBzcGFjZS5cbiAqL1xudmFyIGluZmZhc3QgPSBmdW5jdGlvbiBpbmZsYXRlX2Zhc3Qoc3RybSwgc3RhcnQpIHtcbiAgbGV0IF9pbjsgICAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uaW5wdXQgKi9cbiAgbGV0IGxhc3Q7ICAgICAgICAgICAgICAgICAgIC8qIGhhdmUgZW5vdWdoIGlucHV0IHdoaWxlIGluIDwgbGFzdCAqL1xuICBsZXQgX291dDsgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5vdXRwdXQgKi9cbiAgbGV0IGJlZzsgICAgICAgICAgICAgICAgICAgIC8qIGluZmxhdGUoKSdzIGluaXRpYWwgc3RybS5vdXRwdXQgKi9cbiAgbGV0IGVuZDsgICAgICAgICAgICAgICAgICAgIC8qIHdoaWxlIG91dCA8IGVuZCwgZW5vdWdoIHNwYWNlIGF2YWlsYWJsZSAqL1xuLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1RcbiAgbGV0IGRtYXg7ICAgICAgICAgICAgICAgICAgIC8qIG1heGltdW0gZGlzdGFuY2UgZnJvbSB6bGliIGhlYWRlciAqL1xuLy8jZW5kaWZcbiAgbGV0IHdzaXplOyAgICAgICAgICAgICAgICAgIC8qIHdpbmRvdyBzaXplIG9yIHplcm8gaWYgbm90IHVzaW5nIHdpbmRvdyAqL1xuICBsZXQgd2hhdmU7ICAgICAgICAgICAgICAgICAgLyogdmFsaWQgYnl0ZXMgaW4gdGhlIHdpbmRvdyAqL1xuICBsZXQgd25leHQ7ICAgICAgICAgICAgICAgICAgLyogd2luZG93IHdyaXRlIGluZGV4ICovXG4gIC8vIFVzZSBgc193aW5kb3dgIGluc3RlYWQgYHdpbmRvd2AsIGF2b2lkIGNvbmZsaWN0IHdpdGggaW5zdHJ1bWVudGF0aW9uIHRvb2xzXG4gIGxldCBzX3dpbmRvdzsgICAgICAgICAgICAgICAvKiBhbGxvY2F0ZWQgc2xpZGluZyB3aW5kb3csIGlmIHdzaXplICE9IDAgKi9cbiAgbGV0IGhvbGQ7ICAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uaG9sZCAqL1xuICBsZXQgYml0czsgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5iaXRzICovXG4gIGxldCBsY29kZTsgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLmxlbmNvZGUgKi9cbiAgbGV0IGRjb2RlOyAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uZGlzdGNvZGUgKi9cbiAgbGV0IGxtYXNrOyAgICAgICAgICAgICAgICAgIC8qIG1hc2sgZm9yIGZpcnN0IGxldmVsIG9mIGxlbmd0aCBjb2RlcyAqL1xuICBsZXQgZG1hc2s7ICAgICAgICAgICAgICAgICAgLyogbWFzayBmb3IgZmlyc3QgbGV2ZWwgb2YgZGlzdGFuY2UgY29kZXMgKi9cbiAgbGV0IGhlcmU7ICAgICAgICAgICAgICAgICAgIC8qIHJldHJpZXZlZCB0YWJsZSBlbnRyeSAqL1xuICBsZXQgb3A7ICAgICAgICAgICAgICAgICAgICAgLyogY29kZSBiaXRzLCBvcGVyYXRpb24sIGV4dHJhIGJpdHMsIG9yICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAgd2luZG93IHBvc2l0aW9uLCB3aW5kb3cgYnl0ZXMgdG8gY29weSAqL1xuICBsZXQgbGVuOyAgICAgICAgICAgICAgICAgICAgLyogbWF0Y2ggbGVuZ3RoLCB1bnVzZWQgYnl0ZXMgKi9cbiAgbGV0IGRpc3Q7ICAgICAgICAgICAgICAgICAgIC8qIG1hdGNoIGRpc3RhbmNlICovXG4gIGxldCBmcm9tOyAgICAgICAgICAgICAgICAgICAvKiB3aGVyZSB0byBjb3B5IG1hdGNoIGZyb20gKi9cbiAgbGV0IGZyb21fc291cmNlO1xuXG5cbiAgbGV0IGlucHV0LCBvdXRwdXQ7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnNcblxuICAvKiBjb3B5IHN0YXRlIHRvIGxvY2FsIHZhcmlhYmxlcyAqL1xuICBjb25zdCBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIC8vaGVyZSA9IHN0YXRlLmhlcmU7XG4gIF9pbiA9IHN0cm0ubmV4dF9pbjtcbiAgaW5wdXQgPSBzdHJtLmlucHV0O1xuICBsYXN0ID0gX2luICsgKHN0cm0uYXZhaWxfaW4gLSA1KTtcbiAgX291dCA9IHN0cm0ubmV4dF9vdXQ7XG4gIG91dHB1dCA9IHN0cm0ub3V0cHV0O1xuICBiZWcgPSBfb3V0IC0gKHN0YXJ0IC0gc3RybS5hdmFpbF9vdXQpO1xuICBlbmQgPSBfb3V0ICsgKHN0cm0uYXZhaWxfb3V0IC0gMjU3KTtcbi8vI2lmZGVmIElORkxBVEVfU1RSSUNUXG4gIGRtYXggPSBzdGF0ZS5kbWF4O1xuLy8jZW5kaWZcbiAgd3NpemUgPSBzdGF0ZS53c2l6ZTtcbiAgd2hhdmUgPSBzdGF0ZS53aGF2ZTtcbiAgd25leHQgPSBzdGF0ZS53bmV4dDtcbiAgc193aW5kb3cgPSBzdGF0ZS53aW5kb3c7XG4gIGhvbGQgPSBzdGF0ZS5ob2xkO1xuICBiaXRzID0gc3RhdGUuYml0cztcbiAgbGNvZGUgPSBzdGF0ZS5sZW5jb2RlO1xuICBkY29kZSA9IHN0YXRlLmRpc3Rjb2RlO1xuICBsbWFzayA9ICgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMTtcbiAgZG1hc2sgPSAoMSA8PCBzdGF0ZS5kaXN0Yml0cykgLSAxO1xuXG5cbiAgLyogZGVjb2RlIGxpdGVyYWxzIGFuZCBsZW5ndGgvZGlzdGFuY2VzIHVudGlsIGVuZC1vZi1ibG9jayBvciBub3QgZW5vdWdoXG4gICAgIGlucHV0IGRhdGEgb3Igb3V0cHV0IHNwYWNlICovXG5cbiAgdG9wOlxuICBkbyB7XG4gICAgaWYgKGJpdHMgPCAxNSkge1xuICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgIGJpdHMgKz0gODtcbiAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICBiaXRzICs9IDg7XG4gICAgfVxuXG4gICAgaGVyZSA9IGxjb2RlW2hvbGQgJiBsbWFza107XG5cbiAgICBkb2xlbjpcbiAgICBmb3IgKDs7KSB7IC8vIEdvdG8gZW11bGF0aW9uXG4gICAgICBvcCA9IGhlcmUgPj4+IDI0LypoZXJlLmJpdHMqLztcbiAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgIGJpdHMgLT0gb3A7XG4gICAgICBvcCA9IChoZXJlID4+PiAxNikgJiAweGZmLypoZXJlLm9wKi87XG4gICAgICBpZiAob3AgPT09IDApIHsgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGxpdGVyYWwgKi9cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIGhlcmUudmFsID49IDB4MjAgJiYgaGVyZS52YWwgPCAweDdmID9cbiAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsICclYydcXG5cIiA6XG4gICAgICAgIC8vICAgICAgICBcImluZmxhdGU6ICAgICAgICAgbGl0ZXJhbCAweCUwMnhcXG5cIiwgaGVyZS52YWwpKTtcbiAgICAgICAgb3V0cHV0W19vdXQrK10gPSBoZXJlICYgMHhmZmZmLypoZXJlLnZhbCovO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAob3AgJiAxNikgeyAgICAgICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBiYXNlICovXG4gICAgICAgIGxlbiA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG4gICAgICAgIG9wICY9IDE1OyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzICovXG4gICAgICAgIGlmIChvcCkge1xuICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbiArPSBob2xkICYgKCgxIDw8IG9wKSAtIDEpO1xuICAgICAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgICAgICBiaXRzIC09IG9wO1xuICAgICAgICB9XG4gICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgbGVuZ3RoICV1XFxuXCIsIGxlbikpO1xuICAgICAgICBpZiAoYml0cyA8IDE1KSB7XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgaGVyZSA9IGRjb2RlW2hvbGQgJiBkbWFza107XG5cbiAgICAgICAgZG9kaXN0OlxuICAgICAgICBmb3IgKDs7KSB7IC8vIGdvdG8gZW11bGF0aW9uXG4gICAgICAgICAgb3AgPSBoZXJlID4+PiAyNC8qaGVyZS5iaXRzKi87XG4gICAgICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgICAgIGJpdHMgLT0gb3A7XG4gICAgICAgICAgb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZi8qaGVyZS5vcCovO1xuXG4gICAgICAgICAgaWYgKG9wICYgMTYpIHsgICAgICAgICAgICAgICAgICAgICAgLyogZGlzdGFuY2UgYmFzZSAqL1xuICAgICAgICAgICAgZGlzdCA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG4gICAgICAgICAgICBvcCAmPSAxNTsgICAgICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzICovXG4gICAgICAgICAgICBpZiAoYml0cyA8IG9wKSB7XG4gICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgaWYgKGJpdHMgPCBvcCkge1xuICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXN0ICs9IGhvbGQgJiAoKDEgPDwgb3ApIC0gMSk7XG4vLyNpZmRlZiBJTkZMQVRFX1NUUklDVFxuICAgICAgICAgICAgaWYgKGRpc3QgPiBkbWF4KSB7XG4gICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJztcbiAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgICAgfVxuLy8jZW5kaWZcbiAgICAgICAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgICAgICAgIGJpdHMgLT0gb3A7XG4gICAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGRpc3RhbmNlICV1XFxuXCIsIGRpc3QpKTtcbiAgICAgICAgICAgIG9wID0gX291dCAtIGJlZzsgICAgICAgICAgICAgICAgLyogbWF4IGRpc3RhbmNlIGluIG91dHB1dCAqL1xuICAgICAgICAgICAgaWYgKGRpc3QgPiBvcCkgeyAgICAgICAgICAgICAgICAvKiBzZWUgaWYgY29weSBmcm9tIHdpbmRvdyAqL1xuICAgICAgICAgICAgICBvcCA9IGRpc3QgLSBvcDsgICAgICAgICAgICAgICAvKiBkaXN0YW5jZSBiYWNrIGluIHdpbmRvdyAqL1xuICAgICAgICAgICAgICBpZiAob3AgPiB3aGF2ZSkge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zYW5lKSB7XG4gICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7XG4gICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgICAgICAgIH1cblxuLy8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhdWx0cyxcbi8vIGRvbid0IGVuYWJsZSBpdCBmb3IgYmluYXJ5IGNvbXBhdGliaWxpdHlcbi8vI2lmZGVmIElORkxBVEVfQUxMT1dfSU5WQUxJRF9ESVNUQU5DRV9UT09GQVJfQVJSUlxuLy8gICAgICAgICAgICAgICAgaWYgKGxlbiA8PSBvcCAtIHdoYXZlKSB7XG4vLyAgICAgICAgICAgICAgICAgIGRvIHtcbi8vICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IDA7XG4vLyAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tbGVuKTtcbi8vICAgICAgICAgICAgICAgICAgY29udGludWUgdG9wO1xuLy8gICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgbGVuIC09IG9wIC0gd2hhdmU7XG4vLyAgICAgICAgICAgICAgICBkbyB7XG4vLyAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gMDtcbi8vICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3AgPiB3aGF2ZSk7XG4vLyAgICAgICAgICAgICAgICBpZiAob3AgPT09IDApIHtcbi8vICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0O1xuLy8gICAgICAgICAgICAgICAgICBkbyB7XG4vLyAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbi8vICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1sZW4pO1xuLy8gICAgICAgICAgICAgICAgICBjb250aW51ZSB0b3A7XG4vLyAgICAgICAgICAgICAgICB9XG4vLyNlbmRpZlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZyb20gPSAwOyAvLyB3aW5kb3cgaW5kZXhcbiAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBzX3dpbmRvdztcbiAgICAgICAgICAgICAgaWYgKHduZXh0ID09PSAwKSB7ICAgICAgICAgICAvKiB2ZXJ5IGNvbW1vbiBjYXNlICovXG4gICAgICAgICAgICAgICAgZnJvbSArPSB3c2l6ZSAtIG9wO1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDtcbiAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7XG4gICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAvKiByZXN0IGZyb20gb3V0cHV0ICovXG4gICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSBpZiAod25leHQgPCBvcCkgeyAgICAgIC8qIHdyYXAgYXJvdW5kIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgIGZyb20gKz0gd3NpemUgKyB3bmV4dCAtIG9wO1xuICAgICAgICAgICAgICAgIG9wIC09IHduZXh0O1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSBlbmQgb2Ygd2luZG93ICovXG4gICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgZnJvbSA9IDA7XG4gICAgICAgICAgICAgICAgICBpZiAod25leHQgPCBsZW4pIHsgIC8qIHNvbWUgZnJvbSBzdGFydCBvZiB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgICAgb3AgPSB3bmV4dDtcbiAgICAgICAgICAgICAgICAgICAgbGVuIC09IG9wO1xuICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTtcbiAgICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgICAgIC8qIHJlc3QgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAvKiBjb250aWd1b3VzIGluIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgIGZyb20gKz0gd25leHQgLSBvcDtcbiAgICAgICAgICAgICAgICBpZiAob3AgPCBsZW4pIHsgICAgICAgICAvKiBzb21lIGZyb20gd2luZG93ICovXG4gICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgLyogcmVzdCBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHdoaWxlIChsZW4gPiAyKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG4gICAgICAgICAgICAgICAgbGVuIC09IDM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkge1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIGZyb20gPSBfb3V0IC0gZGlzdDsgICAgICAgICAgLyogY29weSBkaXJlY3QgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICAgICAgZG8geyAgICAgICAgICAgICAgICAgICAgICAgIC8qIG1pbmltdW0gbGVuZ3RoIGlzIHRocmVlICovXG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107XG4gICAgICAgICAgICAgICAgbGVuIC09IDM7XG4gICAgICAgICAgICAgIH0gd2hpbGUgKGxlbiA+IDIpO1xuICAgICAgICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkge1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoKG9wICYgNjQpID09PSAwKSB7ICAgICAgICAgIC8qIDJuZCBsZXZlbCBkaXN0YW5jZSBjb2RlICovXG4gICAgICAgICAgICBoZXJlID0gZGNvZGVbKGhlcmUgJiAweGZmZmYpLypoZXJlLnZhbCovICsgKGhvbGQgJiAoKDEgPDwgb3ApIC0gMSkpXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIGRvZGlzdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIGNvZGUnO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgIGJyZWFrIHRvcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhazsgLy8gbmVlZCB0byBlbXVsYXRlIGdvdG8gdmlhIFwiY29udGludWVcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmICgob3AgJiA2NCkgPT09IDApIHsgICAgICAgICAgICAgIC8qIDJuZCBsZXZlbCBsZW5ndGggY29kZSAqL1xuICAgICAgICBoZXJlID0gbGNvZGVbKGhlcmUgJiAweGZmZmYpLypoZXJlLnZhbCovICsgKGhvbGQgJiAoKDEgPDwgb3ApIC0gMSkpXTtcbiAgICAgICAgY29udGludWUgZG9sZW47XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChvcCAmIDMyKSB7ICAgICAgICAgICAgICAgICAgICAgLyogZW5kLW9mLWJsb2NrICovXG4gICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgZW5kIG9mIGJsb2NrXFxuXCIpKTtcbiAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgIGJyZWFrIHRvcDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGUnO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICBicmVhayB0b3A7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrOyAvLyBuZWVkIHRvIGVtdWxhdGUgZ290byB2aWEgXCJjb250aW51ZVwiXG4gICAgfVxuICB9IHdoaWxlIChfaW4gPCBsYXN0ICYmIF9vdXQgPCBlbmQpO1xuXG4gIC8qIHJldHVybiB1bnVzZWQgYnl0ZXMgKG9uIGVudHJ5LCBiaXRzIDwgOCwgc28gaW4gd29uJ3QgZ28gdG9vIGZhciBiYWNrKSAqL1xuICBsZW4gPSBiaXRzID4+IDM7XG4gIF9pbiAtPSBsZW47XG4gIGJpdHMgLT0gbGVuIDw8IDM7XG4gIGhvbGQgJj0gKDEgPDwgYml0cykgLSAxO1xuXG4gIC8qIHVwZGF0ZSBzdGF0ZSBhbmQgcmV0dXJuICovXG4gIHN0cm0ubmV4dF9pbiA9IF9pbjtcbiAgc3RybS5uZXh0X291dCA9IF9vdXQ7XG4gIHN0cm0uYXZhaWxfaW4gPSAoX2luIDwgbGFzdCA/IDUgKyAobGFzdCAtIF9pbikgOiA1IC0gKF9pbiAtIGxhc3QpKTtcbiAgc3RybS5hdmFpbF9vdXQgPSAoX291dCA8IGVuZCA/IDI1NyArIChlbmQgLSBfb3V0KSA6IDI1NyAtIChfb3V0IC0gZW5kKSk7XG4gIHN0YXRlLmhvbGQgPSBob2xkO1xuICBzdGF0ZS5iaXRzID0gYml0cztcbiAgcmV0dXJuO1xufTtcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5jb25zdCBNQVhCSVRTID0gMTU7XG5jb25zdCBFTk9VR0hfTEVOUyA9IDg1MjtcbmNvbnN0IEVOT1VHSF9ESVNUUyA9IDU5Mjtcbi8vY29uc3QgRU5PVUdIID0gKEVOT1VHSF9MRU5TK0VOT1VHSF9ESVNUUyk7XG5cbmNvbnN0IENPREVTID0gMDtcbmNvbnN0IExFTlMgPSAxO1xuY29uc3QgRElTVFMgPSAyO1xuXG5jb25zdCBsYmFzZSA9IG5ldyBVaW50MTZBcnJheShbIC8qIExlbmd0aCBjb2RlcyAyNTcuLjI4NSBiYXNlICovXG4gIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTMsIDE1LCAxNywgMTksIDIzLCAyNywgMzEsXG4gIDM1LCA0MywgNTEsIDU5LCA2NywgODMsIDk5LCAxMTUsIDEzMSwgMTYzLCAxOTUsIDIyNywgMjU4LCAwLCAwXG5dKTtcblxuY29uc3QgbGV4dCA9IG5ldyBVaW50OEFycmF5KFsgLyogTGVuZ3RoIGNvZGVzIDI1Ny4uMjg1IGV4dHJhICovXG4gIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTcsIDE3LCAxNywgMTcsIDE4LCAxOCwgMTgsIDE4LFxuICAxOSwgMTksIDE5LCAxOSwgMjAsIDIwLCAyMCwgMjAsIDIxLCAyMSwgMjEsIDIxLCAxNiwgNzIsIDc4XG5dKTtcblxuY29uc3QgZGJhc2UgPSBuZXcgVWludDE2QXJyYXkoWyAvKiBEaXN0YW5jZSBjb2RlcyAwLi4yOSBiYXNlICovXG4gIDEsIDIsIDMsIDQsIDUsIDcsIDksIDEzLCAxNywgMjUsIDMzLCA0OSwgNjUsIDk3LCAxMjksIDE5MyxcbiAgMjU3LCAzODUsIDUxMywgNzY5LCAxMDI1LCAxNTM3LCAyMDQ5LCAzMDczLCA0MDk3LCA2MTQ1LFxuICA4MTkzLCAxMjI4OSwgMTYzODUsIDI0NTc3LCAwLCAwXG5dKTtcblxuY29uc3QgZGV4dCA9IG5ldyBVaW50OEFycmF5KFsgLyogRGlzdGFuY2UgY29kZXMgMC4uMjkgZXh0cmEgKi9cbiAgMTYsIDE2LCAxNiwgMTYsIDE3LCAxNywgMTgsIDE4LCAxOSwgMTksIDIwLCAyMCwgMjEsIDIxLCAyMiwgMjIsXG4gIDIzLCAyMywgMjQsIDI0LCAyNSwgMjUsIDI2LCAyNiwgMjcsIDI3LFxuICAyOCwgMjgsIDI5LCAyOSwgNjQsIDY0XG5dKTtcblxuY29uc3QgaW5mbGF0ZV90YWJsZSA9ICh0eXBlLCBsZW5zLCBsZW5zX2luZGV4LCBjb2RlcywgdGFibGUsIHRhYmxlX2luZGV4LCB3b3JrLCBvcHRzKSA9Plxue1xuICBjb25zdCBiaXRzID0gb3B0cy5iaXRzO1xuICAgICAgLy9oZXJlID0gb3B0cy5oZXJlOyAvKiB0YWJsZSBlbnRyeSBmb3IgZHVwbGljYXRpb24gKi9cblxuICBsZXQgbGVuID0gMDsgICAgICAgICAgICAgICAvKiBhIGNvZGUncyBsZW5ndGggaW4gYml0cyAqL1xuICBsZXQgc3ltID0gMDsgICAgICAgICAgICAgICAvKiBpbmRleCBvZiBjb2RlIHN5bWJvbHMgKi9cbiAgbGV0IG1pbiA9IDAsIG1heCA9IDA7ICAgICAgICAgIC8qIG1pbmltdW0gYW5kIG1heGltdW0gY29kZSBsZW5ndGhzICovXG4gIGxldCByb290ID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBpbmRleCBiaXRzIGZvciByb290IHRhYmxlICovXG4gIGxldCBjdXJyID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBpbmRleCBiaXRzIGZvciBjdXJyZW50IHRhYmxlICovXG4gIGxldCBkcm9wID0gMDsgICAgICAgICAgICAgIC8qIGNvZGUgYml0cyB0byBkcm9wIGZvciBzdWItdGFibGUgKi9cbiAgbGV0IGxlZnQgPSAwOyAgICAgICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgcHJlZml4IGNvZGVzIGF2YWlsYWJsZSAqL1xuICBsZXQgdXNlZCA9IDA7ICAgICAgICAgICAgICAvKiBjb2RlIGVudHJpZXMgaW4gdGFibGUgdXNlZCAqL1xuICBsZXQgaHVmZiA9IDA7ICAgICAgICAgICAgICAvKiBIdWZmbWFuIGNvZGUgKi9cbiAgbGV0IGluY3I7ICAgICAgICAgICAgICAvKiBmb3IgaW5jcmVtZW50aW5nIGNvZGUsIGluZGV4ICovXG4gIGxldCBmaWxsOyAgICAgICAgICAgICAgLyogaW5kZXggZm9yIHJlcGxpY2F0aW5nIGVudHJpZXMgKi9cbiAgbGV0IGxvdzsgICAgICAgICAgICAgICAvKiBsb3cgYml0cyBmb3IgY3VycmVudCByb290IGVudHJ5ICovXG4gIGxldCBtYXNrOyAgICAgICAgICAgICAgLyogbWFzayBmb3IgbG93IHJvb3QgYml0cyAqL1xuICBsZXQgbmV4dDsgICAgICAgICAgICAgLyogbmV4dCBhdmFpbGFibGUgc3BhY2UgaW4gdGFibGUgKi9cbiAgbGV0IGJhc2UgPSBudWxsOyAgICAgLyogYmFzZSB2YWx1ZSB0YWJsZSB0byB1c2UgKi9cbiAgbGV0IGJhc2VfaW5kZXggPSAwO1xuLy8gIGxldCBzaG9leHRyYTsgICAgLyogZXh0cmEgYml0cyB0YWJsZSB0byB1c2UgKi9cbiAgbGV0IGVuZDsgICAgICAgICAgICAgICAgICAgIC8qIHVzZSBiYXNlIGFuZCBleHRyYSBmb3Igc3ltYm9sID4gZW5kICovXG4gIGNvbnN0IGNvdW50ID0gbmV3IFVpbnQxNkFycmF5KE1BWEJJVFMgKyAxKTsgLy9bTUFYQklUUysxXTsgICAgLyogbnVtYmVyIG9mIGNvZGVzIG9mIGVhY2ggbGVuZ3RoICovXG4gIGNvbnN0IG9mZnMgPSBuZXcgVWludDE2QXJyYXkoTUFYQklUUyArIDEpOyAvL1tNQVhCSVRTKzFdOyAgICAgLyogb2Zmc2V0cyBpbiB0YWJsZSBmb3IgZWFjaCBsZW5ndGggKi9cbiAgbGV0IGV4dHJhID0gbnVsbDtcbiAgbGV0IGV4dHJhX2luZGV4ID0gMDtcblxuICBsZXQgaGVyZV9iaXRzLCBoZXJlX29wLCBoZXJlX3ZhbDtcblxuICAvKlxuICAgUHJvY2VzcyBhIHNldCBvZiBjb2RlIGxlbmd0aHMgdG8gY3JlYXRlIGEgY2Fub25pY2FsIEh1ZmZtYW4gY29kZS4gIFRoZVxuICAgY29kZSBsZW5ndGhzIGFyZSBsZW5zWzAuLmNvZGVzLTFdLiAgRWFjaCBsZW5ndGggY29ycmVzcG9uZHMgdG8gdGhlXG4gICBzeW1ib2xzIDAuLmNvZGVzLTEuICBUaGUgSHVmZm1hbiBjb2RlIGlzIGdlbmVyYXRlZCBieSBmaXJzdCBzb3J0aW5nIHRoZVxuICAgc3ltYm9scyBieSBsZW5ndGggZnJvbSBzaG9ydCB0byBsb25nLCBhbmQgcmV0YWluaW5nIHRoZSBzeW1ib2wgb3JkZXJcbiAgIGZvciBjb2RlcyB3aXRoIGVxdWFsIGxlbmd0aHMuICBUaGVuIHRoZSBjb2RlIHN0YXJ0cyB3aXRoIGFsbCB6ZXJvIGJpdHNcbiAgIGZvciB0aGUgZmlyc3QgY29kZSBvZiB0aGUgc2hvcnRlc3QgbGVuZ3RoLCBhbmQgdGhlIGNvZGVzIGFyZSBpbnRlZ2VyXG4gICBpbmNyZW1lbnRzIGZvciB0aGUgc2FtZSBsZW5ndGgsIGFuZCB6ZXJvcyBhcmUgYXBwZW5kZWQgYXMgdGhlIGxlbmd0aFxuICAgaW5jcmVhc2VzLiAgRm9yIHRoZSBkZWZsYXRlIGZvcm1hdCwgdGhlc2UgYml0cyBhcmUgc3RvcmVkIGJhY2t3YXJkc1xuICAgZnJvbSB0aGVpciBtb3JlIG5hdHVyYWwgaW50ZWdlciBpbmNyZW1lbnQgb3JkZXJpbmcsIGFuZCBzbyB3aGVuIHRoZVxuICAgZGVjb2RpbmcgdGFibGVzIGFyZSBidWlsdCBpbiB0aGUgbGFyZ2UgbG9vcCBiZWxvdywgdGhlIGludGVnZXIgY29kZXNcbiAgIGFyZSBpbmNyZW1lbnRlZCBiYWNrd2FyZHMuXG5cbiAgIFRoaXMgcm91dGluZSBhc3N1bWVzLCBidXQgZG9lcyBub3QgY2hlY2ssIHRoYXQgYWxsIG9mIHRoZSBlbnRyaWVzIGluXG4gICBsZW5zW10gYXJlIGluIHRoZSByYW5nZSAwLi5NQVhCSVRTLiAgVGhlIGNhbGxlciBtdXN0IGFzc3VyZSB0aGlzLlxuICAgMS4uTUFYQklUUyBpcyBpbnRlcnByZXRlZCBhcyB0aGF0IGNvZGUgbGVuZ3RoLiAgemVybyBtZWFucyB0aGF0IHRoYXRcbiAgIHN5bWJvbCBkb2VzIG5vdCBvY2N1ciBpbiB0aGlzIGNvZGUuXG5cbiAgIFRoZSBjb2RlcyBhcmUgc29ydGVkIGJ5IGNvbXB1dGluZyBhIGNvdW50IG9mIGNvZGVzIGZvciBlYWNoIGxlbmd0aCxcbiAgIGNyZWF0aW5nIGZyb20gdGhhdCBhIHRhYmxlIG9mIHN0YXJ0aW5nIGluZGljZXMgZm9yIGVhY2ggbGVuZ3RoIGluIHRoZVxuICAgc29ydGVkIHRhYmxlLCBhbmQgdGhlbiBlbnRlcmluZyB0aGUgc3ltYm9scyBpbiBvcmRlciBpbiB0aGUgc29ydGVkXG4gICB0YWJsZS4gIFRoZSBzb3J0ZWQgdGFibGUgaXMgd29ya1tdLCB3aXRoIHRoYXQgc3BhY2UgYmVpbmcgcHJvdmlkZWQgYnlcbiAgIHRoZSBjYWxsZXIuXG5cbiAgIFRoZSBsZW5ndGggY291bnRzIGFyZSB1c2VkIGZvciBvdGhlciBwdXJwb3NlcyBhcyB3ZWxsLCBpLmUuIGZpbmRpbmdcbiAgIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIGxlbmd0aCBjb2RlcywgZGV0ZXJtaW5pbmcgaWYgdGhlcmUgYXJlIGFueVxuICAgY29kZXMgYXQgYWxsLCBjaGVja2luZyBmb3IgYSB2YWxpZCBzZXQgb2YgbGVuZ3RocywgYW5kIGxvb2tpbmcgYWhlYWRcbiAgIGF0IGxlbmd0aCBjb3VudHMgdG8gZGV0ZXJtaW5lIHN1Yi10YWJsZSBzaXplcyB3aGVuIGJ1aWxkaW5nIHRoZVxuICAgZGVjb2RpbmcgdGFibGVzLlxuICAgKi9cblxuICAvKiBhY2N1bXVsYXRlIGxlbmd0aHMgZm9yIGNvZGVzIChhc3N1bWVzIGxlbnNbXSBhbGwgaW4gMC4uTUFYQklUUykgKi9cbiAgZm9yIChsZW4gPSAwOyBsZW4gPD0gTUFYQklUUzsgbGVuKyspIHtcbiAgICBjb3VudFtsZW5dID0gMDtcbiAgfVxuICBmb3IgKHN5bSA9IDA7IHN5bSA8IGNvZGVzOyBzeW0rKykge1xuICAgIGNvdW50W2xlbnNbbGVuc19pbmRleCArIHN5bV1dKys7XG4gIH1cblxuICAvKiBib3VuZCBjb2RlIGxlbmd0aHMsIGZvcmNlIHJvb3QgdG8gYmUgd2l0aGluIGNvZGUgbGVuZ3RocyAqL1xuICByb290ID0gYml0cztcbiAgZm9yIChtYXggPSBNQVhCSVRTOyBtYXggPj0gMTsgbWF4LS0pIHtcbiAgICBpZiAoY291bnRbbWF4XSAhPT0gMCkgeyBicmVhazsgfVxuICB9XG4gIGlmIChyb290ID4gbWF4KSB7XG4gICAgcm9vdCA9IG1heDtcbiAgfVxuICBpZiAobWF4ID09PSAwKSB7ICAgICAgICAgICAgICAgICAgICAgLyogbm8gc3ltYm9scyB0byBjb2RlIGF0IGFsbCAqL1xuICAgIC8vdGFibGUub3Bbb3B0cy50YWJsZV9pbmRleF0gPSA2NDsgIC8vaGVyZS5vcCA9ICh2YXIgY2hhcik2NDsgICAgLyogaW52YWxpZCBjb2RlIG1hcmtlciAqL1xuICAgIC8vdGFibGUuYml0c1tvcHRzLnRhYmxlX2luZGV4XSA9IDE7ICAgLy9oZXJlLmJpdHMgPSAodmFyIGNoYXIpMTtcbiAgICAvL3RhYmxlLnZhbFtvcHRzLnRhYmxlX2luZGV4KytdID0gMDsgICAvL2hlcmUudmFsID0gKHZhciBzaG9ydCkwO1xuICAgIHRhYmxlW3RhYmxlX2luZGV4KytdID0gKDEgPDwgMjQpIHwgKDY0IDw8IDE2KSB8IDA7XG5cblxuICAgIC8vdGFibGUub3Bbb3B0cy50YWJsZV9pbmRleF0gPSA2NDtcbiAgICAvL3RhYmxlLmJpdHNbb3B0cy50YWJsZV9pbmRleF0gPSAxO1xuICAgIC8vdGFibGUudmFsW29wdHMudGFibGVfaW5kZXgrK10gPSAwO1xuICAgIHRhYmxlW3RhYmxlX2luZGV4KytdID0gKDEgPDwgMjQpIHwgKDY0IDw8IDE2KSB8IDA7XG5cbiAgICBvcHRzLmJpdHMgPSAxO1xuICAgIHJldHVybiAwOyAgICAgLyogbm8gc3ltYm9scywgYnV0IHdhaXQgZm9yIGRlY29kaW5nIHRvIHJlcG9ydCBlcnJvciAqL1xuICB9XG4gIGZvciAobWluID0gMTsgbWluIDwgbWF4OyBtaW4rKykge1xuICAgIGlmIChjb3VudFttaW5dICE9PSAwKSB7IGJyZWFrOyB9XG4gIH1cbiAgaWYgKHJvb3QgPCBtaW4pIHtcbiAgICByb290ID0gbWluO1xuICB9XG5cbiAgLyogY2hlY2sgZm9yIGFuIG92ZXItc3Vic2NyaWJlZCBvciBpbmNvbXBsZXRlIHNldCBvZiBsZW5ndGhzICovXG4gIGxlZnQgPSAxO1xuICBmb3IgKGxlbiA9IDE7IGxlbiA8PSBNQVhCSVRTOyBsZW4rKykge1xuICAgIGxlZnQgPDw9IDE7XG4gICAgbGVmdCAtPSBjb3VudFtsZW5dO1xuICAgIGlmIChsZWZ0IDwgMCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gICAgICAgIC8qIG92ZXItc3Vic2NyaWJlZCAqL1xuICB9XG4gIGlmIChsZWZ0ID4gMCAmJiAodHlwZSA9PT0gQ09ERVMgfHwgbWF4ICE9PSAxKSkge1xuICAgIHJldHVybiAtMTsgICAgICAgICAgICAgICAgICAgICAgLyogaW5jb21wbGV0ZSBzZXQgKi9cbiAgfVxuXG4gIC8qIGdlbmVyYXRlIG9mZnNldHMgaW50byBzeW1ib2wgdGFibGUgZm9yIGVhY2ggbGVuZ3RoIGZvciBzb3J0aW5nICovXG4gIG9mZnNbMV0gPSAwO1xuICBmb3IgKGxlbiA9IDE7IGxlbiA8IE1BWEJJVFM7IGxlbisrKSB7XG4gICAgb2Zmc1tsZW4gKyAxXSA9IG9mZnNbbGVuXSArIGNvdW50W2xlbl07XG4gIH1cblxuICAvKiBzb3J0IHN5bWJvbHMgYnkgbGVuZ3RoLCBieSBzeW1ib2wgb3JkZXIgd2l0aGluIGVhY2ggbGVuZ3RoICovXG4gIGZvciAoc3ltID0gMDsgc3ltIDwgY29kZXM7IHN5bSsrKSB7XG4gICAgaWYgKGxlbnNbbGVuc19pbmRleCArIHN5bV0gIT09IDApIHtcbiAgICAgIHdvcmtbb2Zmc1tsZW5zW2xlbnNfaW5kZXggKyBzeW1dXSsrXSA9IHN5bTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgQ3JlYXRlIGFuZCBmaWxsIGluIGRlY29kaW5nIHRhYmxlcy4gIEluIHRoaXMgbG9vcCwgdGhlIHRhYmxlIGJlaW5nXG4gICBmaWxsZWQgaXMgYXQgbmV4dCBhbmQgaGFzIGN1cnIgaW5kZXggYml0cy4gIFRoZSBjb2RlIGJlaW5nIHVzZWQgaXMgaHVmZlxuICAgd2l0aCBsZW5ndGggbGVuLiAgVGhhdCBjb2RlIGlzIGNvbnZlcnRlZCB0byBhbiBpbmRleCBieSBkcm9wcGluZyBkcm9wXG4gICBiaXRzIG9mZiBvZiB0aGUgYm90dG9tLiAgRm9yIGNvZGVzIHdoZXJlIGxlbiBpcyBsZXNzIHRoYW4gZHJvcCArIGN1cnIsXG4gICB0aG9zZSB0b3AgZHJvcCArIGN1cnIgLSBsZW4gYml0cyBhcmUgaW5jcmVtZW50ZWQgdGhyb3VnaCBhbGwgdmFsdWVzIHRvXG4gICBmaWxsIHRoZSB0YWJsZSB3aXRoIHJlcGxpY2F0ZWQgZW50cmllcy5cblxuICAgcm9vdCBpcyB0aGUgbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIHRoZSByb290IHRhYmxlLiAgV2hlbiBsZW4gZXhjZWVkc1xuICAgcm9vdCwgc3ViLXRhYmxlcyBhcmUgY3JlYXRlZCBwb2ludGVkIHRvIGJ5IHRoZSByb290IGVudHJ5IHdpdGggYW4gaW5kZXhcbiAgIG9mIHRoZSBsb3cgcm9vdCBiaXRzIG9mIGh1ZmYuICBUaGlzIGlzIHNhdmVkIGluIGxvdyB0byBjaGVjayBmb3Igd2hlbiBhXG4gICBuZXcgc3ViLXRhYmxlIHNob3VsZCBiZSBzdGFydGVkLiAgZHJvcCBpcyB6ZXJvIHdoZW4gdGhlIHJvb3QgdGFibGUgaXNcbiAgIGJlaW5nIGZpbGxlZCwgYW5kIGRyb3AgaXMgcm9vdCB3aGVuIHN1Yi10YWJsZXMgYXJlIGJlaW5nIGZpbGxlZC5cblxuICAgV2hlbiBhIG5ldyBzdWItdGFibGUgaXMgbmVlZGVkLCBpdCBpcyBuZWNlc3NhcnkgdG8gbG9vayBhaGVhZCBpbiB0aGVcbiAgIGNvZGUgbGVuZ3RocyB0byBkZXRlcm1pbmUgd2hhdCBzaXplIHN1Yi10YWJsZSBpcyBuZWVkZWQuICBUaGUgbGVuZ3RoXG4gICBjb3VudHMgYXJlIHVzZWQgZm9yIHRoaXMsIGFuZCBzbyBjb3VudFtdIGlzIGRlY3JlbWVudGVkIGFzIGNvZGVzIGFyZVxuICAgZW50ZXJlZCBpbiB0aGUgdGFibGVzLlxuXG4gICB1c2VkIGtlZXBzIHRyYWNrIG9mIGhvdyBtYW55IHRhYmxlIGVudHJpZXMgaGF2ZSBiZWVuIGFsbG9jYXRlZCBmcm9tIHRoZVxuICAgcHJvdmlkZWQgKnRhYmxlIHNwYWNlLiAgSXQgaXMgY2hlY2tlZCBmb3IgTEVOUyBhbmQgRElTVCB0YWJsZXMgYWdhaW5zdFxuICAgdGhlIGNvbnN0YW50cyBFTk9VR0hfTEVOUyBhbmQgRU5PVUdIX0RJU1RTIHRvIGd1YXJkIGFnYWluc3QgY2hhbmdlcyBpblxuICAgdGhlIGluaXRpYWwgcm9vdCB0YWJsZSBzaXplIGNvbnN0YW50cy4gIFNlZSB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaFxuICAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG5cbiAgIHN5bSBpbmNyZW1lbnRzIHRocm91Z2ggYWxsIHN5bWJvbHMsIGFuZCB0aGUgbG9vcCB0ZXJtaW5hdGVzIHdoZW5cbiAgIGFsbCBjb2RlcyBvZiBsZW5ndGggbWF4LCBpLmUuIGFsbCBjb2RlcywgaGF2ZSBiZWVuIHByb2Nlc3NlZC4gIFRoaXNcbiAgIHJvdXRpbmUgcGVybWl0cyBpbmNvbXBsZXRlIGNvZGVzLCBzbyBhbm90aGVyIGxvb3AgYWZ0ZXIgdGhpcyBvbmUgZmlsbHNcbiAgIGluIHRoZSByZXN0IG9mIHRoZSBkZWNvZGluZyB0YWJsZXMgd2l0aCBpbnZhbGlkIGNvZGUgbWFya2Vycy5cbiAgICovXG5cbiAgLyogc2V0IHVwIGZvciBjb2RlIHR5cGUgKi9cbiAgLy8gcG9vciBtYW4gb3B0aW1pemF0aW9uIC0gdXNlIGlmLWVsc2UgaW5zdGVhZCBvZiBzd2l0Y2gsXG4gIC8vIHRvIGF2b2lkIGRlb3B0cyBpbiBvbGQgdjhcbiAgaWYgKHR5cGUgPT09IENPREVTKSB7XG4gICAgYmFzZSA9IGV4dHJhID0gd29yazsgICAgLyogZHVtbXkgdmFsdWUtLW5vdCB1c2VkICovXG4gICAgZW5kID0gMTk7XG5cbiAgfSBlbHNlIGlmICh0eXBlID09PSBMRU5TKSB7XG4gICAgYmFzZSA9IGxiYXNlO1xuICAgIGJhc2VfaW5kZXggLT0gMjU3O1xuICAgIGV4dHJhID0gbGV4dDtcbiAgICBleHRyYV9pbmRleCAtPSAyNTc7XG4gICAgZW5kID0gMjU2O1xuXG4gIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAvKiBESVNUUyAqL1xuICAgIGJhc2UgPSBkYmFzZTtcbiAgICBleHRyYSA9IGRleHQ7XG4gICAgZW5kID0gLTE7XG4gIH1cblxuICAvKiBpbml0aWFsaXplIG9wdHMgZm9yIGxvb3AgKi9cbiAgaHVmZiA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIHN0YXJ0aW5nIGNvZGUgKi9cbiAgc3ltID0gMDsgICAgICAgICAgICAgICAgICAgIC8qIHN0YXJ0aW5nIGNvZGUgc3ltYm9sICovXG4gIGxlbiA9IG1pbjsgICAgICAgICAgICAgICAgICAvKiBzdGFydGluZyBjb2RlIGxlbmd0aCAqL1xuICBuZXh0ID0gdGFibGVfaW5kZXg7ICAgICAgICAgICAgICAvKiBjdXJyZW50IHRhYmxlIHRvIGZpbGwgaW4gKi9cbiAgY3VyciA9IHJvb3Q7ICAgICAgICAgICAgICAgIC8qIGN1cnJlbnQgdGFibGUgaW5kZXggYml0cyAqL1xuICBkcm9wID0gMDsgICAgICAgICAgICAgICAgICAgLyogY3VycmVudCBiaXRzIHRvIGRyb3AgZnJvbSBjb2RlIGZvciBpbmRleCAqL1xuICBsb3cgPSAtMTsgICAgICAgICAgICAgICAgICAgLyogdHJpZ2dlciBuZXcgc3ViLXRhYmxlIHdoZW4gbGVuID4gcm9vdCAqL1xuICB1c2VkID0gMSA8PCByb290OyAgICAgICAgICAvKiB1c2Ugcm9vdCB0YWJsZSBlbnRyaWVzICovXG4gIG1hc2sgPSB1c2VkIC0gMTsgICAgICAgICAgICAvKiBtYXNrIGZvciBjb21wYXJpbmcgbG93ICovXG5cbiAgLyogY2hlY2sgYXZhaWxhYmxlIHRhYmxlIHNwYWNlICovXG4gIGlmICgodHlwZSA9PT0gTEVOUyAmJiB1c2VkID4gRU5PVUdIX0xFTlMpIHx8XG4gICAgKHR5cGUgPT09IERJU1RTICYmIHVzZWQgPiBFTk9VR0hfRElTVFMpKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICAvKiBwcm9jZXNzIGFsbCBjb2RlcyBhbmQgbWFrZSB0YWJsZSBlbnRyaWVzICovXG4gIGZvciAoOzspIHtcbiAgICAvKiBjcmVhdGUgdGFibGUgZW50cnkgKi9cbiAgICBoZXJlX2JpdHMgPSBsZW4gLSBkcm9wO1xuICAgIGlmICh3b3JrW3N5bV0gPCBlbmQpIHtcbiAgICAgIGhlcmVfb3AgPSAwO1xuICAgICAgaGVyZV92YWwgPSB3b3JrW3N5bV07XG4gICAgfVxuICAgIGVsc2UgaWYgKHdvcmtbc3ltXSA+IGVuZCkge1xuICAgICAgaGVyZV9vcCA9IGV4dHJhW2V4dHJhX2luZGV4ICsgd29ya1tzeW1dXTtcbiAgICAgIGhlcmVfdmFsID0gYmFzZVtiYXNlX2luZGV4ICsgd29ya1tzeW1dXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBoZXJlX29wID0gMzIgKyA2NDsgICAgICAgICAvKiBlbmQgb2YgYmxvY2sgKi9cbiAgICAgIGhlcmVfdmFsID0gMDtcbiAgICB9XG5cbiAgICAvKiByZXBsaWNhdGUgZm9yIHRob3NlIGluZGljZXMgd2l0aCBsb3cgbGVuIGJpdHMgZXF1YWwgdG8gaHVmZiAqL1xuICAgIGluY3IgPSAxIDw8IChsZW4gLSBkcm9wKTtcbiAgICBmaWxsID0gMSA8PCBjdXJyO1xuICAgIG1pbiA9IGZpbGw7ICAgICAgICAgICAgICAgICAvKiBzYXZlIG9mZnNldCB0byBuZXh0IHRhYmxlICovXG4gICAgZG8ge1xuICAgICAgZmlsbCAtPSBpbmNyO1xuICAgICAgdGFibGVbbmV4dCArIChodWZmID4+IGRyb3ApICsgZmlsbF0gPSAoaGVyZV9iaXRzIDw8IDI0KSB8IChoZXJlX29wIDw8IDE2KSB8IGhlcmVfdmFsIHwwO1xuICAgIH0gd2hpbGUgKGZpbGwgIT09IDApO1xuXG4gICAgLyogYmFja3dhcmRzIGluY3JlbWVudCB0aGUgbGVuLWJpdCBjb2RlIGh1ZmYgKi9cbiAgICBpbmNyID0gMSA8PCAobGVuIC0gMSk7XG4gICAgd2hpbGUgKGh1ZmYgJiBpbmNyKSB7XG4gICAgICBpbmNyID4+PSAxO1xuICAgIH1cbiAgICBpZiAoaW5jciAhPT0gMCkge1xuICAgICAgaHVmZiAmPSBpbmNyIC0gMTtcbiAgICAgIGh1ZmYgKz0gaW5jcjtcbiAgICB9IGVsc2Uge1xuICAgICAgaHVmZiA9IDA7XG4gICAgfVxuXG4gICAgLyogZ28gdG8gbmV4dCBzeW1ib2wsIHVwZGF0ZSBjb3VudCwgbGVuICovXG4gICAgc3ltKys7XG4gICAgaWYgKC0tY291bnRbbGVuXSA9PT0gMCkge1xuICAgICAgaWYgKGxlbiA9PT0gbWF4KSB7IGJyZWFrOyB9XG4gICAgICBsZW4gPSBsZW5zW2xlbnNfaW5kZXggKyB3b3JrW3N5bV1dO1xuICAgIH1cblxuICAgIC8qIGNyZWF0ZSBuZXcgc3ViLXRhYmxlIGlmIG5lZWRlZCAqL1xuICAgIGlmIChsZW4gPiByb290ICYmIChodWZmICYgbWFzaykgIT09IGxvdykge1xuICAgICAgLyogaWYgZmlyc3QgdGltZSwgdHJhbnNpdGlvbiB0byBzdWItdGFibGVzICovXG4gICAgICBpZiAoZHJvcCA9PT0gMCkge1xuICAgICAgICBkcm9wID0gcm9vdDtcbiAgICAgIH1cblxuICAgICAgLyogaW5jcmVtZW50IHBhc3QgbGFzdCB0YWJsZSAqL1xuICAgICAgbmV4dCArPSBtaW47ICAgICAgICAgICAgLyogaGVyZSBtaW4gaXMgMSA8PCBjdXJyICovXG5cbiAgICAgIC8qIGRldGVybWluZSBsZW5ndGggb2YgbmV4dCB0YWJsZSAqL1xuICAgICAgY3VyciA9IGxlbiAtIGRyb3A7XG4gICAgICBsZWZ0ID0gMSA8PCBjdXJyO1xuICAgICAgd2hpbGUgKGN1cnIgKyBkcm9wIDwgbWF4KSB7XG4gICAgICAgIGxlZnQgLT0gY291bnRbY3VyciArIGRyb3BdO1xuICAgICAgICBpZiAobGVmdCA8PSAwKSB7IGJyZWFrOyB9XG4gICAgICAgIGN1cnIrKztcbiAgICAgICAgbGVmdCA8PD0gMTtcbiAgICAgIH1cblxuICAgICAgLyogY2hlY2sgZm9yIGVub3VnaCBzcGFjZSAqL1xuICAgICAgdXNlZCArPSAxIDw8IGN1cnI7XG4gICAgICBpZiAoKHR5cGUgPT09IExFTlMgJiYgdXNlZCA+IEVOT1VHSF9MRU5TKSB8fFxuICAgICAgICAodHlwZSA9PT0gRElTVFMgJiYgdXNlZCA+IEVOT1VHSF9ESVNUUykpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG5cbiAgICAgIC8qIHBvaW50IGVudHJ5IGluIHJvb3QgdGFibGUgdG8gc3ViLXRhYmxlICovXG4gICAgICBsb3cgPSBodWZmICYgbWFzaztcbiAgICAgIC8qdGFibGUub3BbbG93XSA9IGN1cnI7XG4gICAgICB0YWJsZS5iaXRzW2xvd10gPSByb290O1xuICAgICAgdGFibGUudmFsW2xvd10gPSBuZXh0IC0gb3B0cy50YWJsZV9pbmRleDsqL1xuICAgICAgdGFibGVbbG93XSA9IChyb290IDw8IDI0KSB8IChjdXJyIDw8IDE2KSB8IChuZXh0IC0gdGFibGVfaW5kZXgpIHwwO1xuICAgIH1cbiAgfVxuXG4gIC8qIGZpbGwgaW4gcmVtYWluaW5nIHRhYmxlIGVudHJ5IGlmIGNvZGUgaXMgaW5jb21wbGV0ZSAoZ3VhcmFudGVlZCB0byBoYXZlXG4gICBhdCBtb3N0IG9uZSByZW1haW5pbmcgZW50cnksIHNpbmNlIGlmIHRoZSBjb2RlIGlzIGluY29tcGxldGUsIHRoZVxuICAgbWF4aW11bSBjb2RlIGxlbmd0aCB0aGF0IHdhcyBhbGxvd2VkIHRvIGdldCB0aGlzIGZhciBpcyBvbmUgYml0KSAqL1xuICBpZiAoaHVmZiAhPT0gMCkge1xuICAgIC8vdGFibGUub3BbbmV4dCArIGh1ZmZdID0gNjQ7ICAgICAgICAgICAgLyogaW52YWxpZCBjb2RlIG1hcmtlciAqL1xuICAgIC8vdGFibGUuYml0c1tuZXh0ICsgaHVmZl0gPSBsZW4gLSBkcm9wO1xuICAgIC8vdGFibGUudmFsW25leHQgKyBodWZmXSA9IDA7XG4gICAgdGFibGVbbmV4dCArIGh1ZmZdID0gKChsZW4gLSBkcm9wKSA8PCAyNCkgfCAoNjQgPDwgMTYpIHwwO1xuICB9XG5cbiAgLyogc2V0IHJldHVybiBwYXJhbWV0ZXJzICovXG4gIC8vb3B0cy50YWJsZV9pbmRleCArPSB1c2VkO1xuICBvcHRzLmJpdHMgPSByb290O1xuICByZXR1cm4gMDtcbn07XG5cblxudmFyIGluZnRyZWVzID0gaW5mbGF0ZV90YWJsZTtcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5cblxuXG5cblxuY29uc3QgQ09ERVMkMSA9IDA7XG5jb25zdCBMRU5TJDEgPSAxO1xuY29uc3QgRElTVFMkMSA9IDI7XG5cbi8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5jb25zdCB7XG4gIFpfRklOSVNIOiBaX0ZJTklTSCQyLCBaX0JMT0NLOiBaX0JMT0NLJDEsIFpfVFJFRVMsXG4gIFpfT0s6IFpfT0skMiwgWl9TVFJFQU1fRU5EOiBaX1NUUkVBTV9FTkQkMiwgWl9ORUVEX0RJQ1QsIFpfU1RSRUFNX0VSUk9SOiBaX1NUUkVBTV9FUlJPUiQxLCBaX0RBVEFfRVJST1I6IFpfREFUQV9FUlJPUiQxLCBaX01FTV9FUlJPUiwgWl9CVUZfRVJST1I6IFpfQlVGX0VSUk9SJDEsXG4gIFpfREVGTEFURUQ6IFpfREVGTEFURUQkMlxufSA9IGNvbnN0YW50cztcblxuXG4vKiBTVEFURVMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG5jb25zdCAgICBIRUFEID0gMTsgICAgICAgLyogaTogd2FpdGluZyBmb3IgbWFnaWMgaGVhZGVyICovXG5jb25zdCAgICBGTEFHUyA9IDI7ICAgICAgLyogaTogd2FpdGluZyBmb3IgbWV0aG9kIGFuZCBmbGFncyAoZ3ppcCkgKi9cbmNvbnN0ICAgIFRJTUUgPSAzOyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBtb2RpZmljYXRpb24gdGltZSAoZ3ppcCkgKi9cbmNvbnN0ICAgIE9TID0gNDsgICAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBleHRyYSBmbGFncyBhbmQgb3BlcmF0aW5nIHN5c3RlbSAoZ3ppcCkgKi9cbmNvbnN0ICAgIEVYTEVOID0gNTsgICAgICAvKiBpOiB3YWl0aW5nIGZvciBleHRyYSBsZW5ndGggKGd6aXApICovXG5jb25zdCAgICBFWFRSQSA9IDY7ICAgICAgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgYnl0ZXMgKGd6aXApICovXG5jb25zdCAgICBOQU1FID0gNzsgICAgICAgLyogaTogd2FpdGluZyBmb3IgZW5kIG9mIGZpbGUgbmFtZSAoZ3ppcCkgKi9cbmNvbnN0ICAgIENPTU1FTlQgPSA4OyAgICAvKiBpOiB3YWl0aW5nIGZvciBlbmQgb2YgY29tbWVudCAoZ3ppcCkgKi9cbmNvbnN0ICAgIEhDUkMgPSA5OyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBoZWFkZXIgY3JjIChnemlwKSAqL1xuY29uc3QgICAgRElDVElEID0gMTA7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIGRpY3Rpb25hcnkgY2hlY2sgdmFsdWUgKi9cbmNvbnN0ICAgIERJQ1QgPSAxMTsgICAgICAvKiB3YWl0aW5nIGZvciBpbmZsYXRlU2V0RGljdGlvbmFyeSgpIGNhbGwgKi9cbmNvbnN0ICAgICAgICBUWVBFJDEgPSAxMjsgICAgICAvKiBpOiB3YWl0aW5nIGZvciB0eXBlIGJpdHMsIGluY2x1ZGluZyBsYXN0LWZsYWcgYml0ICovXG5jb25zdCAgICAgICAgVFlQRURPID0gMTM7ICAgIC8qIGk6IHNhbWUsIGJ1dCBza2lwIGNoZWNrIHRvIGV4aXQgaW5mbGF0ZSBvbiBuZXcgYmxvY2sgKi9cbmNvbnN0ICAgICAgICBTVE9SRUQgPSAxNDsgICAgLyogaTogd2FpdGluZyBmb3Igc3RvcmVkIHNpemUgKGxlbmd0aCBhbmQgY29tcGxlbWVudCkgKi9cbmNvbnN0ICAgICAgICBDT1BZXyA9IDE1OyAgICAgLyogaS9vOiBzYW1lIGFzIENPUFkgYmVsb3csIGJ1dCBvbmx5IGZpcnN0IHRpbWUgaW4gKi9cbmNvbnN0ICAgICAgICBDT1BZID0gMTY7ICAgICAgLyogaS9vOiB3YWl0aW5nIGZvciBpbnB1dCBvciBvdXRwdXQgdG8gY29weSBzdG9yZWQgYmxvY2sgKi9cbmNvbnN0ICAgICAgICBUQUJMRSA9IDE3OyAgICAgLyogaTogd2FpdGluZyBmb3IgZHluYW1pYyBibG9jayB0YWJsZSBsZW5ndGhzICovXG5jb25zdCAgICAgICAgTEVOTEVOUyA9IDE4OyAgIC8qIGk6IHdhaXRpbmcgZm9yIGNvZGUgbGVuZ3RoIGNvZGUgbGVuZ3RocyAqL1xuY29uc3QgICAgICAgIENPREVMRU5TID0gMTk7ICAvKiBpOiB3YWl0aW5nIGZvciBsZW5ndGgvbGl0IGFuZCBkaXN0YW5jZSBjb2RlIGxlbmd0aHMgKi9cbmNvbnN0ICAgICAgICAgICAgTEVOXyA9IDIwOyAgICAgIC8qIGk6IHNhbWUgYXMgTEVOIGJlbG93LCBidXQgb25seSBmaXJzdCB0aW1lIGluICovXG5jb25zdCAgICAgICAgICAgIExFTiA9IDIxOyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBsZW5ndGgvbGl0L2VvYiBjb2RlICovXG5jb25zdCAgICAgICAgICAgIExFTkVYVCA9IDIyOyAgICAvKiBpOiB3YWl0aW5nIGZvciBsZW5ndGggZXh0cmEgYml0cyAqL1xuY29uc3QgICAgICAgICAgICBESVNUID0gMjM7ICAgICAgLyogaTogd2FpdGluZyBmb3IgZGlzdGFuY2UgY29kZSAqL1xuY29uc3QgICAgICAgICAgICBESVNURVhUID0gMjQ7ICAgLyogaTogd2FpdGluZyBmb3IgZGlzdGFuY2UgZXh0cmEgYml0cyAqL1xuY29uc3QgICAgICAgICAgICBNQVRDSCA9IDI1OyAgICAgLyogbzogd2FpdGluZyBmb3Igb3V0cHV0IHNwYWNlIHRvIGNvcHkgc3RyaW5nICovXG5jb25zdCAgICAgICAgICAgIExJVCA9IDI2OyAgICAgICAvKiBvOiB3YWl0aW5nIGZvciBvdXRwdXQgc3BhY2UgdG8gd3JpdGUgbGl0ZXJhbCAqL1xuY29uc3QgICAgQ0hFQ0sgPSAyNzsgICAgIC8qIGk6IHdhaXRpbmcgZm9yIDMyLWJpdCBjaGVjayB2YWx1ZSAqL1xuY29uc3QgICAgTEVOR1RIID0gMjg7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIDMyLWJpdCBsZW5ndGggKGd6aXApICovXG5jb25zdCAgICBET05FID0gMjk7ICAgICAgLyogZmluaXNoZWQgY2hlY2ssIGRvbmUgLS0gcmVtYWluIGhlcmUgdW50aWwgcmVzZXQgKi9cbmNvbnN0ICAgIEJBRCQxID0gMzA7ICAgICAgIC8qIGdvdCBhIGRhdGEgZXJyb3IgLS0gcmVtYWluIGhlcmUgdW50aWwgcmVzZXQgKi9cbmNvbnN0ICAgIE1FTSA9IDMxOyAgICAgICAvKiBnb3QgYW4gaW5mbGF0ZSgpIG1lbW9yeSBlcnJvciAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xuY29uc3QgICAgU1lOQyA9IDMyOyAgICAgIC8qIGxvb2tpbmcgZm9yIHN5bmNocm9uaXphdGlvbiBieXRlcyB0byByZXN0YXJ0IGluZmxhdGUoKSAqL1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cblxuY29uc3QgRU5PVUdIX0xFTlMkMSA9IDg1MjtcbmNvbnN0IEVOT1VHSF9ESVNUUyQxID0gNTkyO1xuLy9jb25zdCBFTk9VR0ggPSAgKEVOT1VHSF9MRU5TK0VOT1VHSF9ESVNUUyk7XG5cbmNvbnN0IE1BWF9XQklUUyQxID0gMTU7XG4vKiAzMksgTFo3NyB3aW5kb3cgKi9cbmNvbnN0IERFRl9XQklUUyA9IE1BWF9XQklUUyQxO1xuXG5cbmNvbnN0IHpzd2FwMzIgPSAocSkgPT4ge1xuXG4gIHJldHVybiAgKCgocSA+Pj4gMjQpICYgMHhmZikgK1xuICAgICAgICAgICgocSA+Pj4gOCkgJiAweGZmMDApICtcbiAgICAgICAgICAoKHEgJiAweGZmMDApIDw8IDgpICtcbiAgICAgICAgICAoKHEgJiAweGZmKSA8PCAyNCkpO1xufTtcblxuXG5mdW5jdGlvbiBJbmZsYXRlU3RhdGUoKSB7XG4gIHRoaXMubW9kZSA9IDA7ICAgICAgICAgICAgIC8qIGN1cnJlbnQgaW5mbGF0ZSBtb2RlICovXG4gIHRoaXMubGFzdCA9IGZhbHNlOyAgICAgICAgICAvKiB0cnVlIGlmIHByb2Nlc3NpbmcgbGFzdCBibG9jayAqL1xuICB0aGlzLndyYXAgPSAwOyAgICAgICAgICAgICAgLyogYml0IDAgdHJ1ZSBmb3IgemxpYiwgYml0IDEgdHJ1ZSBmb3IgZ3ppcCAqL1xuICB0aGlzLmhhdmVkaWN0ID0gZmFsc2U7ICAgICAgLyogdHJ1ZSBpZiBkaWN0aW9uYXJ5IHByb3ZpZGVkICovXG4gIHRoaXMuZmxhZ3MgPSAwOyAgICAgICAgICAgICAvKiBnemlwIGhlYWRlciBtZXRob2QgYW5kIGZsYWdzICgwIGlmIHpsaWIpICovXG4gIHRoaXMuZG1heCA9IDA7ICAgICAgICAgICAgICAvKiB6bGliIGhlYWRlciBtYXggZGlzdGFuY2UgKElORkxBVEVfU1RSSUNUKSAqL1xuICB0aGlzLmNoZWNrID0gMDsgICAgICAgICAgICAgLyogcHJvdGVjdGVkIGNvcHkgb2YgY2hlY2sgdmFsdWUgKi9cbiAgdGhpcy50b3RhbCA9IDA7ICAgICAgICAgICAgIC8qIHByb3RlY3RlZCBjb3B5IG9mIG91dHB1dCBjb3VudCAqL1xuICAvLyBUT0RPOiBtYXkgYmUge31cbiAgdGhpcy5oZWFkID0gbnVsbDsgICAgICAgICAgIC8qIHdoZXJlIHRvIHNhdmUgZ3ppcCBoZWFkZXIgaW5mb3JtYXRpb24gKi9cblxuICAvKiBzbGlkaW5nIHdpbmRvdyAqL1xuICB0aGlzLndiaXRzID0gMDsgICAgICAgICAgICAgLyogbG9nIGJhc2UgMiBvZiByZXF1ZXN0ZWQgd2luZG93IHNpemUgKi9cbiAgdGhpcy53c2l6ZSA9IDA7ICAgICAgICAgICAgIC8qIHdpbmRvdyBzaXplIG9yIHplcm8gaWYgbm90IHVzaW5nIHdpbmRvdyAqL1xuICB0aGlzLndoYXZlID0gMDsgICAgICAgICAgICAgLyogdmFsaWQgYnl0ZXMgaW4gdGhlIHdpbmRvdyAqL1xuICB0aGlzLnduZXh0ID0gMDsgICAgICAgICAgICAgLyogd2luZG93IHdyaXRlIGluZGV4ICovXG4gIHRoaXMud2luZG93ID0gbnVsbDsgICAgICAgICAvKiBhbGxvY2F0ZWQgc2xpZGluZyB3aW5kb3csIGlmIG5lZWRlZCAqL1xuXG4gIC8qIGJpdCBhY2N1bXVsYXRvciAqL1xuICB0aGlzLmhvbGQgPSAwOyAgICAgICAgICAgICAgLyogaW5wdXQgYml0IGFjY3VtdWxhdG9yICovXG4gIHRoaXMuYml0cyA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgYml0cyBpbiBcImluXCIgKi9cblxuICAvKiBmb3Igc3RyaW5nIGFuZCBzdG9yZWQgYmxvY2sgY29weWluZyAqL1xuICB0aGlzLmxlbmd0aCA9IDA7ICAgICAgICAgICAgLyogbGl0ZXJhbCBvciBsZW5ndGggb2YgZGF0YSB0byBjb3B5ICovXG4gIHRoaXMub2Zmc2V0ID0gMDsgICAgICAgICAgICAvKiBkaXN0YW5jZSBiYWNrIHRvIGNvcHkgc3RyaW5nIGZyb20gKi9cblxuICAvKiBmb3IgdGFibGUgYW5kIGNvZGUgZGVjb2RpbmcgKi9cbiAgdGhpcy5leHRyYSA9IDA7ICAgICAgICAgICAgIC8qIGV4dHJhIGJpdHMgbmVlZGVkICovXG5cbiAgLyogZml4ZWQgYW5kIGR5bmFtaWMgY29kZSB0YWJsZXMgKi9cbiAgdGhpcy5sZW5jb2RlID0gbnVsbDsgICAgICAgICAgLyogc3RhcnRpbmcgdGFibGUgZm9yIGxlbmd0aC9saXRlcmFsIGNvZGVzICovXG4gIHRoaXMuZGlzdGNvZGUgPSBudWxsOyAgICAgICAgIC8qIHN0YXJ0aW5nIHRhYmxlIGZvciBkaXN0YW5jZSBjb2RlcyAqL1xuICB0aGlzLmxlbmJpdHMgPSAwOyAgICAgICAgICAgLyogaW5kZXggYml0cyBmb3IgbGVuY29kZSAqL1xuICB0aGlzLmRpc3RiaXRzID0gMDsgICAgICAgICAgLyogaW5kZXggYml0cyBmb3IgZGlzdGNvZGUgKi9cblxuICAvKiBkeW5hbWljIHRhYmxlIGJ1aWxkaW5nICovXG4gIHRoaXMubmNvZGUgPSAwOyAgICAgICAgICAgICAvKiBudW1iZXIgb2YgY29kZSBsZW5ndGggY29kZSBsZW5ndGhzICovXG4gIHRoaXMubmxlbiA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgbGVuZ3RoIGNvZGUgbGVuZ3RocyAqL1xuICB0aGlzLm5kaXN0ID0gMDsgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGRpc3RhbmNlIGNvZGUgbGVuZ3RocyAqL1xuICB0aGlzLmhhdmUgPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGNvZGUgbGVuZ3RocyBpbiBsZW5zW10gKi9cbiAgdGhpcy5uZXh0ID0gbnVsbDsgICAgICAgICAgICAgIC8qIG5leHQgYXZhaWxhYmxlIHNwYWNlIGluIGNvZGVzW10gKi9cblxuICB0aGlzLmxlbnMgPSBuZXcgVWludDE2QXJyYXkoMzIwKTsgLyogdGVtcG9yYXJ5IHN0b3JhZ2UgZm9yIGNvZGUgbGVuZ3RocyAqL1xuICB0aGlzLndvcmsgPSBuZXcgVWludDE2QXJyYXkoMjg4KTsgLyogd29yayBhcmVhIGZvciBjb2RlIHRhYmxlIGJ1aWxkaW5nICovXG5cbiAgLypcbiAgIGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSBwb2ludGVycyBpbiBqcywgd2UgdXNlIGxlbmNvZGUgYW5kIGRpc3Rjb2RlIGRpcmVjdGx5XG4gICBhcyBidWZmZXJzIHNvIHdlIGRvbid0IG5lZWQgY29kZXNcbiAgKi9cbiAgLy90aGlzLmNvZGVzID0gbmV3IEludDMyQXJyYXkoRU5PVUdIKTsgICAgICAgLyogc3BhY2UgZm9yIGNvZGUgdGFibGVzICovXG4gIHRoaXMubGVuZHluID0gbnVsbDsgICAgICAgICAgICAgIC8qIGR5bmFtaWMgdGFibGUgZm9yIGxlbmd0aC9saXRlcmFsIGNvZGVzIChKUyBzcGVjaWZpYykgKi9cbiAgdGhpcy5kaXN0ZHluID0gbnVsbDsgICAgICAgICAgICAgLyogZHluYW1pYyB0YWJsZSBmb3IgZGlzdGFuY2UgY29kZXMgKEpTIHNwZWNpZmljKSAqL1xuICB0aGlzLnNhbmUgPSAwOyAgICAgICAgICAgICAgICAgICAvKiBpZiBmYWxzZSwgYWxsb3cgaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyICovXG4gIHRoaXMuYmFjayA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIGJpdHMgYmFjayBvZiBsYXN0IHVucHJvY2Vzc2VkIGxlbmd0aC9saXQgKi9cbiAgdGhpcy53YXMgPSAwOyAgICAgICAgICAgICAgICAgICAgLyogaW5pdGlhbCBsZW5ndGggb2YgbWF0Y2ggKi9cbn1cblxuXG5jb25zdCBpbmZsYXRlUmVzZXRLZWVwID0gKHN0cm0pID0+IHtcblxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDE7IH1cbiAgY29uc3Qgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICBzdHJtLnRvdGFsX2luID0gc3RybS50b3RhbF9vdXQgPSBzdGF0ZS50b3RhbCA9IDA7XG4gIHN0cm0ubXNnID0gJyc7IC8qWl9OVUxMKi9cbiAgaWYgKHN0YXRlLndyYXApIHsgICAgICAgLyogdG8gc3VwcG9ydCBpbGwtY29uY2VpdmVkIEphdmEgdGVzdCBzdWl0ZSAqL1xuICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS53cmFwICYgMTtcbiAgfVxuICBzdGF0ZS5tb2RlID0gSEVBRDtcbiAgc3RhdGUubGFzdCA9IDA7XG4gIHN0YXRlLmhhdmVkaWN0ID0gMDtcbiAgc3RhdGUuZG1heCA9IDMyNzY4O1xuICBzdGF0ZS5oZWFkID0gbnVsbC8qWl9OVUxMKi87XG4gIHN0YXRlLmhvbGQgPSAwO1xuICBzdGF0ZS5iaXRzID0gMDtcbiAgLy9zdGF0ZS5sZW5jb2RlID0gc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5uZXh0ID0gc3RhdGUuY29kZXM7XG4gIHN0YXRlLmxlbmNvZGUgPSBzdGF0ZS5sZW5keW4gPSBuZXcgSW50MzJBcnJheShFTk9VR0hfTEVOUyQxKTtcbiAgc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5kaXN0ZHluID0gbmV3IEludDMyQXJyYXkoRU5PVUdIX0RJU1RTJDEpO1xuXG4gIHN0YXRlLnNhbmUgPSAxO1xuICBzdGF0ZS5iYWNrID0gLTE7XG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogcmVzZXRcXG5cIikpO1xuICByZXR1cm4gWl9PSyQyO1xufTtcblxuXG5jb25zdCBpbmZsYXRlUmVzZXQgPSAoc3RybSkgPT4ge1xuXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1IkMTsgfVxuICBjb25zdCBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIHN0YXRlLndzaXplID0gMDtcbiAgc3RhdGUud2hhdmUgPSAwO1xuICBzdGF0ZS53bmV4dCA9IDA7XG4gIHJldHVybiBpbmZsYXRlUmVzZXRLZWVwKHN0cm0pO1xuXG59O1xuXG5cbmNvbnN0IGluZmxhdGVSZXNldDIgPSAoc3RybSwgd2luZG93Qml0cykgPT4ge1xuICBsZXQgd3JhcDtcblxuICAvKiBnZXQgdGhlIHN0YXRlICovXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1IkMTsgfVxuICBjb25zdCBzdGF0ZSA9IHN0cm0uc3RhdGU7XG5cbiAgLyogZXh0cmFjdCB3cmFwIHJlcXVlc3QgZnJvbSB3aW5kb3dCaXRzIHBhcmFtZXRlciAqL1xuICBpZiAod2luZG93Qml0cyA8IDApIHtcbiAgICB3cmFwID0gMDtcbiAgICB3aW5kb3dCaXRzID0gLXdpbmRvd0JpdHM7XG4gIH1cbiAgZWxzZSB7XG4gICAgd3JhcCA9ICh3aW5kb3dCaXRzID4+IDQpICsgMTtcbiAgICBpZiAod2luZG93Qml0cyA8IDQ4KSB7XG4gICAgICB3aW5kb3dCaXRzICY9IDE1O1xuICAgIH1cbiAgfVxuXG4gIC8qIHNldCBudW1iZXIgb2Ygd2luZG93IGJpdHMsIGZyZWUgd2luZG93IGlmIGRpZmZlcmVudCAqL1xuICBpZiAod2luZG93Qml0cyAmJiAod2luZG93Qml0cyA8IDggfHwgd2luZG93Qml0cyA+IDE1KSkge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUiQxO1xuICB9XG4gIGlmIChzdGF0ZS53aW5kb3cgIT09IG51bGwgJiYgc3RhdGUud2JpdHMgIT09IHdpbmRvd0JpdHMpIHtcbiAgICBzdGF0ZS53aW5kb3cgPSBudWxsO1xuICB9XG5cbiAgLyogdXBkYXRlIHN0YXRlIGFuZCByZXNldCB0aGUgcmVzdCBvZiBpdCAqL1xuICBzdGF0ZS53cmFwID0gd3JhcDtcbiAgc3RhdGUud2JpdHMgPSB3aW5kb3dCaXRzO1xuICByZXR1cm4gaW5mbGF0ZVJlc2V0KHN0cm0pO1xufTtcblxuXG5jb25zdCBpbmZsYXRlSW5pdDIgPSAoc3RybSwgd2luZG93Qml0cykgPT4ge1xuXG4gIGlmICghc3RybSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1IkMTsgfVxuICAvL3N0cm0ubXNnID0gWl9OVUxMOyAgICAgICAgICAgICAgICAgLyogaW4gY2FzZSB3ZSByZXR1cm4gYW4gZXJyb3IgKi9cblxuICBjb25zdCBzdGF0ZSA9IG5ldyBJbmZsYXRlU3RhdGUoKTtcblxuICAvL2lmIChzdGF0ZSA9PT0gWl9OVUxMKSByZXR1cm4gWl9NRU1fRVJST1I7XG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogYWxsb2NhdGVkXFxuXCIpKTtcbiAgc3RybS5zdGF0ZSA9IHN0YXRlO1xuICBzdGF0ZS53aW5kb3cgPSBudWxsLypaX05VTEwqLztcbiAgY29uc3QgcmV0ID0gaW5mbGF0ZVJlc2V0MihzdHJtLCB3aW5kb3dCaXRzKTtcbiAgaWYgKHJldCAhPT0gWl9PSyQyKSB7XG4gICAgc3RybS5zdGF0ZSA9IG51bGwvKlpfTlVMTCovO1xuICB9XG4gIHJldHVybiByZXQ7XG59O1xuXG5cbmNvbnN0IGluZmxhdGVJbml0ID0gKHN0cm0pID0+IHtcblxuICByZXR1cm4gaW5mbGF0ZUluaXQyKHN0cm0sIERFRl9XQklUUyk7XG59O1xuXG5cbi8qXG4gUmV0dXJuIHN0YXRlIHdpdGggbGVuZ3RoIGFuZCBkaXN0YW5jZSBkZWNvZGluZyB0YWJsZXMgYW5kIGluZGV4IHNpemVzIHNldCB0b1xuIGZpeGVkIGNvZGUgZGVjb2RpbmcuICBOb3JtYWxseSB0aGlzIHJldHVybnMgZml4ZWQgdGFibGVzIGZyb20gaW5mZml4ZWQuaC5cbiBJZiBCVUlMREZJWEVEIGlzIGRlZmluZWQsIHRoZW4gaW5zdGVhZCB0aGlzIHJvdXRpbmUgYnVpbGRzIHRoZSB0YWJsZXMgdGhlXG4gZmlyc3QgdGltZSBpdCdzIGNhbGxlZCwgYW5kIHJldHVybnMgdGhvc2UgdGFibGVzIHRoZSBmaXJzdCB0aW1lIGFuZFxuIHRoZXJlYWZ0ZXIuICBUaGlzIHJlZHVjZXMgdGhlIHNpemUgb2YgdGhlIGNvZGUgYnkgYWJvdXQgMksgYnl0ZXMsIGluXG4gZXhjaGFuZ2UgZm9yIGEgbGl0dGxlIGV4ZWN1dGlvbiB0aW1lLiAgSG93ZXZlciwgQlVJTERGSVhFRCBzaG91bGQgbm90IGJlXG4gdXNlZCBmb3IgdGhyZWFkZWQgYXBwbGljYXRpb25zLCBzaW5jZSB0aGUgcmV3cml0aW5nIG9mIHRoZSB0YWJsZXMgYW5kIHZpcmdpblxuIG1heSBub3QgYmUgdGhyZWFkLXNhZmUuXG4gKi9cbmxldCB2aXJnaW4gPSB0cnVlO1xuXG5sZXQgbGVuZml4LCBkaXN0Zml4OyAvLyBXZSBoYXZlIG5vIHBvaW50ZXJzIGluIEpTLCBzbyBrZWVwIHRhYmxlcyBzZXBhcmF0ZVxuXG5cbmNvbnN0IGZpeGVkdGFibGVzID0gKHN0YXRlKSA9PiB7XG5cbiAgLyogYnVpbGQgZml4ZWQgaHVmZm1hbiB0YWJsZXMgaWYgZmlyc3QgY2FsbCAobWF5IG5vdCBiZSB0aHJlYWQgc2FmZSkgKi9cbiAgaWYgKHZpcmdpbikge1xuICAgIGxlbmZpeCA9IG5ldyBJbnQzMkFycmF5KDUxMik7XG4gICAgZGlzdGZpeCA9IG5ldyBJbnQzMkFycmF5KDMyKTtcblxuICAgIC8qIGxpdGVyYWwvbGVuZ3RoIHRhYmxlICovXG4gICAgbGV0IHN5bSA9IDA7XG4gICAgd2hpbGUgKHN5bSA8IDE0NCkgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDg7IH1cbiAgICB3aGlsZSAoc3ltIDwgMjU2KSB7IHN0YXRlLmxlbnNbc3ltKytdID0gOTsgfVxuICAgIHdoaWxlIChzeW0gPCAyODApIHsgc3RhdGUubGVuc1tzeW0rK10gPSA3OyB9XG4gICAgd2hpbGUgKHN5bSA8IDI4OCkgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDg7IH1cblxuICAgIGluZnRyZWVzKExFTlMkMSwgIHN0YXRlLmxlbnMsIDAsIDI4OCwgbGVuZml4LCAgIDAsIHN0YXRlLndvcmssIHsgYml0czogOSB9KTtcblxuICAgIC8qIGRpc3RhbmNlIHRhYmxlICovXG4gICAgc3ltID0gMDtcbiAgICB3aGlsZSAoc3ltIDwgMzIpIHsgc3RhdGUubGVuc1tzeW0rK10gPSA1OyB9XG5cbiAgICBpbmZ0cmVlcyhESVNUUyQxLCBzdGF0ZS5sZW5zLCAwLCAzMiwgICBkaXN0Zml4LCAwLCBzdGF0ZS53b3JrLCB7IGJpdHM6IDUgfSk7XG5cbiAgICAvKiBkbyB0aGlzIGp1c3Qgb25jZSAqL1xuICAgIHZpcmdpbiA9IGZhbHNlO1xuICB9XG5cbiAgc3RhdGUubGVuY29kZSA9IGxlbmZpeDtcbiAgc3RhdGUubGVuYml0cyA9IDk7XG4gIHN0YXRlLmRpc3Rjb2RlID0gZGlzdGZpeDtcbiAgc3RhdGUuZGlzdGJpdHMgPSA1O1xufTtcblxuXG4vKlxuIFVwZGF0ZSB0aGUgd2luZG93IHdpdGggdGhlIGxhc3Qgd3NpemUgKG5vcm1hbGx5IDMySykgYnl0ZXMgd3JpdHRlbiBiZWZvcmVcbiByZXR1cm5pbmcuICBJZiB3aW5kb3cgZG9lcyBub3QgZXhpc3QgeWV0LCBjcmVhdGUgaXQuICBUaGlzIGlzIG9ubHkgY2FsbGVkXG4gd2hlbiBhIHdpbmRvdyBpcyBhbHJlYWR5IGluIHVzZSwgb3Igd2hlbiBvdXRwdXQgaGFzIGJlZW4gd3JpdHRlbiBkdXJpbmcgdGhpc1xuIGluZmxhdGUgY2FsbCwgYnV0IHRoZSBlbmQgb2YgdGhlIGRlZmxhdGUgc3RyZWFtIGhhcyBub3QgYmVlbiByZWFjaGVkIHlldC5cbiBJdCBpcyBhbHNvIGNhbGxlZCB0byBjcmVhdGUgYSB3aW5kb3cgZm9yIGRpY3Rpb25hcnkgZGF0YSB3aGVuIGEgZGljdGlvbmFyeVxuIGlzIGxvYWRlZC5cblxuIFByb3ZpZGluZyBvdXRwdXQgYnVmZmVycyBsYXJnZXIgdGhhbiAzMksgdG8gaW5mbGF0ZSgpIHNob3VsZCBwcm92aWRlIGEgc3BlZWRcbiBhZHZhbnRhZ2UsIHNpbmNlIG9ubHkgdGhlIGxhc3QgMzJLIG9mIG91dHB1dCBpcyBjb3BpZWQgdG8gdGhlIHNsaWRpbmcgd2luZG93XG4gdXBvbiByZXR1cm4gZnJvbSBpbmZsYXRlKCksIGFuZCBzaW5jZSBhbGwgZGlzdGFuY2VzIGFmdGVyIHRoZSBmaXJzdCAzMksgb2ZcbiBvdXRwdXQgd2lsbCBmYWxsIGluIHRoZSBvdXRwdXQgZGF0YSwgbWFraW5nIG1hdGNoIGNvcGllcyBzaW1wbGVyIGFuZCBmYXN0ZXIuXG4gVGhlIGFkdmFudGFnZSBtYXkgYmUgZGVwZW5kZW50IG9uIHRoZSBzaXplIG9mIHRoZSBwcm9jZXNzb3IncyBkYXRhIGNhY2hlcy5cbiAqL1xuY29uc3QgdXBkYXRld2luZG93ID0gKHN0cm0sIHNyYywgZW5kLCBjb3B5KSA9PiB7XG5cbiAgbGV0IGRpc3Q7XG4gIGNvbnN0IHN0YXRlID0gc3RybS5zdGF0ZTtcblxuICAvKiBpZiBpdCBoYXNuJ3QgYmVlbiBkb25lIGFscmVhZHksIGFsbG9jYXRlIHNwYWNlIGZvciB0aGUgd2luZG93ICovXG4gIGlmIChzdGF0ZS53aW5kb3cgPT09IG51bGwpIHtcbiAgICBzdGF0ZS53c2l6ZSA9IDEgPDwgc3RhdGUud2JpdHM7XG4gICAgc3RhdGUud25leHQgPSAwO1xuICAgIHN0YXRlLndoYXZlID0gMDtcblxuICAgIHN0YXRlLndpbmRvdyA9IG5ldyBVaW50OEFycmF5KHN0YXRlLndzaXplKTtcbiAgfVxuXG4gIC8qIGNvcHkgc3RhdGUtPndzaXplIG9yIGxlc3Mgb3V0cHV0IGJ5dGVzIGludG8gdGhlIGNpcmN1bGFyIHdpbmRvdyAqL1xuICBpZiAoY29weSA+PSBzdGF0ZS53c2l6ZSkge1xuICAgIHN0YXRlLndpbmRvdy5zZXQoc3JjLnN1YmFycmF5KGVuZCAtIHN0YXRlLndzaXplLCBlbmQpLCAwKTtcbiAgICBzdGF0ZS53bmV4dCA9IDA7XG4gICAgc3RhdGUud2hhdmUgPSBzdGF0ZS53c2l6ZTtcbiAgfVxuICBlbHNlIHtcbiAgICBkaXN0ID0gc3RhdGUud3NpemUgLSBzdGF0ZS53bmV4dDtcbiAgICBpZiAoZGlzdCA+IGNvcHkpIHtcbiAgICAgIGRpc3QgPSBjb3B5O1xuICAgIH1cbiAgICAvL3ptZW1jcHkoc3RhdGUtPndpbmRvdyArIHN0YXRlLT53bmV4dCwgZW5kIC0gY29weSwgZGlzdCk7XG4gICAgc3RhdGUud2luZG93LnNldChzcmMuc3ViYXJyYXkoZW5kIC0gY29weSwgZW5kIC0gY29weSArIGRpc3QpLCBzdGF0ZS53bmV4dCk7XG4gICAgY29weSAtPSBkaXN0O1xuICAgIGlmIChjb3B5KSB7XG4gICAgICAvL3ptZW1jcHkoc3RhdGUtPndpbmRvdywgZW5kIC0gY29weSwgY29weSk7XG4gICAgICBzdGF0ZS53aW5kb3cuc2V0KHNyYy5zdWJhcnJheShlbmQgLSBjb3B5LCBlbmQpLCAwKTtcbiAgICAgIHN0YXRlLnduZXh0ID0gY29weTtcbiAgICAgIHN0YXRlLndoYXZlID0gc3RhdGUud3NpemU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgc3RhdGUud25leHQgKz0gZGlzdDtcbiAgICAgIGlmIChzdGF0ZS53bmV4dCA9PT0gc3RhdGUud3NpemUpIHsgc3RhdGUud25leHQgPSAwOyB9XG4gICAgICBpZiAoc3RhdGUud2hhdmUgPCBzdGF0ZS53c2l6ZSkgeyBzdGF0ZS53aGF2ZSArPSBkaXN0OyB9XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufTtcblxuXG5jb25zdCBpbmZsYXRlID0gKHN0cm0sIGZsdXNoKSA9PiB7XG5cbiAgbGV0IHN0YXRlO1xuICBsZXQgaW5wdXQsIG91dHB1dDsgICAgICAgICAgLy8gaW5wdXQvb3V0cHV0IGJ1ZmZlcnNcbiAgbGV0IG5leHQ7ICAgICAgICAgICAgICAgICAgIC8qIG5leHQgaW5wdXQgSU5ERVggKi9cbiAgbGV0IHB1dDsgICAgICAgICAgICAgICAgICAgIC8qIG5leHQgb3V0cHV0IElOREVYICovXG4gIGxldCBoYXZlLCBsZWZ0OyAgICAgICAgICAgICAvKiBhdmFpbGFibGUgaW5wdXQgYW5kIG91dHB1dCAqL1xuICBsZXQgaG9sZDsgICAgICAgICAgICAgICAgICAgLyogYml0IGJ1ZmZlciAqL1xuICBsZXQgYml0czsgICAgICAgICAgICAgICAgICAgLyogYml0cyBpbiBiaXQgYnVmZmVyICovXG4gIGxldCBfaW4sIF9vdXQ7ICAgICAgICAgICAgICAvKiBzYXZlIHN0YXJ0aW5nIGF2YWlsYWJsZSBpbnB1dCBhbmQgb3V0cHV0ICovXG4gIGxldCBjb3B5OyAgICAgICAgICAgICAgICAgICAvKiBudW1iZXIgb2Ygc3RvcmVkIG9yIG1hdGNoIGJ5dGVzIHRvIGNvcHkgKi9cbiAgbGV0IGZyb207ICAgICAgICAgICAgICAgICAgIC8qIHdoZXJlIHRvIGNvcHkgbWF0Y2ggYnl0ZXMgZnJvbSAqL1xuICBsZXQgZnJvbV9zb3VyY2U7XG4gIGxldCBoZXJlID0gMDsgICAgICAgICAgICAgICAvKiBjdXJyZW50IGRlY29kaW5nIHRhYmxlIGVudHJ5ICovXG4gIGxldCBoZXJlX2JpdHMsIGhlcmVfb3AsIGhlcmVfdmFsOyAvLyBwYWtlZCBcImhlcmVcIiBkZW5vcm1hbGl6ZWQgKEpTIHNwZWNpZmljKVxuICAvL2xldCBsYXN0OyAgICAgICAgICAgICAgICAgICAvKiBwYXJlbnQgdGFibGUgZW50cnkgKi9cbiAgbGV0IGxhc3RfYml0cywgbGFzdF9vcCwgbGFzdF92YWw7IC8vIHBha2VkIFwibGFzdFwiIGRlbm9ybWFsaXplZCAoSlMgc3BlY2lmaWMpXG4gIGxldCBsZW47ICAgICAgICAgICAgICAgICAgICAvKiBsZW5ndGggdG8gY29weSBmb3IgcmVwZWF0cywgYml0cyB0byBkcm9wICovXG4gIGxldCByZXQ7ICAgICAgICAgICAgICAgICAgICAvKiByZXR1cm4gY29kZSAqL1xuICBjb25zdCBoYnVmID0gbmV3IFVpbnQ4QXJyYXkoNCk7ICAgIC8qIGJ1ZmZlciBmb3IgZ3ppcCBoZWFkZXIgY3JjIGNhbGN1bGF0aW9uICovXG4gIGxldCBvcHRzO1xuXG4gIGxldCBuOyAvLyB0ZW1wb3JhcnkgdmFyaWFibGUgZm9yIE5FRURfQklUU1xuXG4gIGNvbnN0IG9yZGVyID0gLyogcGVybXV0YXRpb24gb2YgY29kZSBsZW5ndGhzICovXG4gICAgbmV3IFVpbnQ4QXJyYXkoWyAxNiwgMTcsIDE4LCAwLCA4LCA3LCA5LCA2LCAxMCwgNSwgMTEsIDQsIDEyLCAzLCAxMywgMiwgMTQsIDEsIDE1IF0pO1xuXG5cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlIHx8ICFzdHJtLm91dHB1dCB8fFxuICAgICAgKCFzdHJtLmlucHV0ICYmIHN0cm0uYXZhaWxfaW4gIT09IDApKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDE7XG4gIH1cblxuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIGlmIChzdGF0ZS5tb2RlID09PSBUWVBFJDEpIHsgc3RhdGUubW9kZSA9IFRZUEVETzsgfSAgICAvKiBza2lwIGNoZWNrICovXG5cblxuICAvLy0tLSBMT0FEKCkgLS0tXG4gIHB1dCA9IHN0cm0ubmV4dF9vdXQ7XG4gIG91dHB1dCA9IHN0cm0ub3V0cHV0O1xuICBsZWZ0ID0gc3RybS5hdmFpbF9vdXQ7XG4gIG5leHQgPSBzdHJtLm5leHRfaW47XG4gIGlucHV0ID0gc3RybS5pbnB1dDtcbiAgaGF2ZSA9IHN0cm0uYXZhaWxfaW47XG4gIGhvbGQgPSBzdGF0ZS5ob2xkO1xuICBiaXRzID0gc3RhdGUuYml0cztcbiAgLy8tLS1cblxuICBfaW4gPSBoYXZlO1xuICBfb3V0ID0gbGVmdDtcbiAgcmV0ID0gWl9PSyQyO1xuXG4gIGluZl9sZWF2ZTogLy8gZ290byBlbXVsYXRpb25cbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoc3RhdGUubW9kZSkge1xuICAgICAgY2FzZSBIRUFEOlxuICAgICAgICBpZiAoc3RhdGUud3JhcCA9PT0gMCkge1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFRE87XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpO1xuICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIGlmICgoc3RhdGUud3JhcCAmIDIpICYmIGhvbGQgPT09IDB4OGIxZikgeyAgLyogZ3ppcCBoZWFkZXIgKi9cbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IDAvKmNyYzMyKDBMLCBaX05VTEwsIDApKi87XG4gICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7XG4gICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xuICAgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzJfMShzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7XG4gICAgICAgICAgLy89PT0vL1xuXG4gICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICBob2xkID0gMDtcbiAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RhdGUubW9kZSA9IEZMQUdTO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmZsYWdzID0gMDsgICAgICAgICAgIC8qIGV4cGVjdCB6bGliIGhlYWRlciAqL1xuICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQuZG9uZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKHN0YXRlLndyYXAgJiAxKSB8fCAgIC8qIGNoZWNrIGlmIHpsaWIgaGVhZGVyIGFsbG93ZWQgKi9cbiAgICAgICAgICAoKChob2xkICYgMHhmZikvKkJJVFMoOCkqLyA8PCA4KSArIChob2xkID4+IDgpKSAlIDMxKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW5jb3JyZWN0IGhlYWRlciBjaGVjayc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoaG9sZCAmIDB4MGYpLypCSVRTKDQpKi8gIT09IFpfREVGTEFURUQkMikge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ3Vua25vd24gY29tcHJlc3Npb24gbWV0aG9kJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEJDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoNCkgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDQ7XG4gICAgICAgIGJpdHMgLT0gNDtcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBsZW4gPSAoaG9sZCAmIDB4MGYpLypCSVRTKDQpKi8gKyA4O1xuICAgICAgICBpZiAoc3RhdGUud2JpdHMgPT09IDApIHtcbiAgICAgICAgICBzdGF0ZS53Yml0cyA9IGxlbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsZW4gPiBzdGF0ZS53Yml0cykge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgd2luZG93IHNpemUnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vICEhISBwYWtvIHBhdGNoLiBGb3JjZSB1c2UgYG9wdGlvbnMud2luZG93Qml0c2AgaWYgcGFzc2VkLlxuICAgICAgICAvLyBSZXF1aXJlZCB0byBhbHdheXMgdXNlIG1heCB3aW5kb3cgc2l6ZSBieSBkZWZhdWx0LlxuICAgICAgICBzdGF0ZS5kbWF4ID0gMSA8PCBzdGF0ZS53Yml0cztcbiAgICAgICAgLy9zdGF0ZS5kbWF4ID0gMSA8PCBsZW47XG5cbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIHpsaWIgaGVhZGVyIG9rXFxuXCIpKTtcbiAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMS8qYWRsZXIzMigwTCwgWl9OVUxMLCAwKSovO1xuICAgICAgICBzdGF0ZS5tb2RlID0gaG9sZCAmIDB4MjAwID8gRElDVElEIDogVFlQRSQxO1xuICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICBob2xkID0gMDtcbiAgICAgICAgYml0cyA9IDA7XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEZMQUdTOlxuICAgICAgICAvLz09PSBORUVEQklUUygxNik7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUuZmxhZ3MgPSBob2xkO1xuICAgICAgICBpZiAoKHN0YXRlLmZsYWdzICYgMHhmZikgIT09IFpfREVGTEFURUQkMikge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ3Vua25vd24gY29tcHJlc3Npb24gbWV0aG9kJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEJDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHhlMDAwKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBoZWFkZXIgZmxhZ3Mgc2V0JztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEJDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLnRleHQgPSAoKGhvbGQgPj4gOCkgJiAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTtcbiAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMl8xKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBUSU1FO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIFRJTUU6XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQudGltZSA9IGhvbGQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgLy89PT0gQ1JDNChzdGF0ZS5jaGVjaywgaG9sZClcbiAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsyXSA9IChob2xkID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgIGhidWZbM10gPSAoaG9sZCA+Pj4gMjQpICYgMHhmZjtcbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyXzEoc3RhdGUuY2hlY2ssIGhidWYsIDQsIDApO1xuICAgICAgICAgIC8vPT09XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBPUztcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBPUzpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC54ZmxhZ3MgPSAoaG9sZCAmIDB4ZmYpO1xuICAgICAgICAgIHN0YXRlLmhlYWQub3MgPSAoaG9sZCA+PiA4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTtcbiAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMl8xKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBFWExFTjtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBFWExFTjpcbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwNDAwKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBzdGF0ZS5sZW5ndGggPSBob2xkO1xuICAgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhX2xlbiA9IGhvbGQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7XG4gICAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzJfMShzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7XG4gICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhID0gbnVsbC8qWl9OVUxMKi87XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubW9kZSA9IEVYVFJBO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIEVYVFJBOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA0MDApIHtcbiAgICAgICAgICBjb3B5ID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICAgIGlmIChjb3B5ID4gaGF2ZSkgeyBjb3B5ID0gaGF2ZTsgfVxuICAgICAgICAgIGlmIChjb3B5KSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgICAgICBsZW4gPSBzdGF0ZS5oZWFkLmV4dHJhX2xlbiAtIHN0YXRlLmxlbmd0aDtcbiAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5oZWFkLmV4dHJhKSB7XG4gICAgICAgICAgICAgICAgLy8gVXNlIHVudHlwZWQgYXJyYXkgZm9yIG1vcmUgY29udmVuaWVudCBwcm9jZXNzaW5nIGxhdGVyXG4gICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5leHRyYSA9IG5ldyBVaW50OEFycmF5KHN0YXRlLmhlYWQuZXh0cmFfbGVuKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhLnNldChcbiAgICAgICAgICAgICAgICBpbnB1dC5zdWJhcnJheShcbiAgICAgICAgICAgICAgICAgIG5leHQsXG4gICAgICAgICAgICAgICAgICAvLyBleHRyYSBmaWVsZCBpcyBsaW1pdGVkIHRvIDY1NTM2IGJ5dGVzXG4gICAgICAgICAgICAgICAgICAvLyAtIG5vIG5lZWQgZm9yIGFkZGl0aW9uYWwgc2l6ZSBjaGVja1xuICAgICAgICAgICAgICAgICAgbmV4dCArIGNvcHlcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIC8qbGVuICsgY29weSA+IHN0YXRlLmhlYWQuZXh0cmFfbWF4IC0gbGVuID8gc3RhdGUuaGVhZC5leHRyYV9tYXggOiBjb3B5LCovXG4gICAgICAgICAgICAgICAgbGVuXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIC8vem1lbWNweShzdGF0ZS5oZWFkLmV4dHJhICsgbGVuLCBuZXh0LFxuICAgICAgICAgICAgICAvLyAgICAgICAgbGVuICsgY29weSA+IHN0YXRlLmhlYWQuZXh0cmFfbWF4ID9cbiAgICAgICAgICAgICAgLy8gICAgICAgIHN0YXRlLmhlYWQuZXh0cmFfbWF4IC0gbGVuIDogY29weSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMl8xKHN0YXRlLmNoZWNrLCBpbnB1dCwgY29weSwgbmV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYXZlIC09IGNvcHk7XG4gICAgICAgICAgICBuZXh0ICs9IGNvcHk7XG4gICAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5sZW5ndGggPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gTkFNRTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBOQU1FOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA4MDApIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBjb3B5ID0gMDtcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAvLyBUT0RPOiAyIG9yIDEgYnl0ZXM/XG4gICAgICAgICAgICBsZW4gPSBpbnB1dFtuZXh0ICsgY29weSsrXTtcbiAgICAgICAgICAgIC8qIHVzZSBjb25zdGFudCBsaW1pdCBiZWNhdXNlIGluIGpzIHdlIHNob3VsZCBub3QgcHJlYWxsb2NhdGUgbWVtb3J5ICovXG4gICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCAmJiBsZW4gJiZcbiAgICAgICAgICAgICAgICAoc3RhdGUubGVuZ3RoIDwgNjU1MzYgLypzdGF0ZS5oZWFkLm5hbWVfbWF4Ki8pKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmhlYWQubmFtZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAobGVuICYmIGNvcHkgPCBoYXZlKTtcblxuICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMl8xKHN0YXRlLmNoZWNrLCBpbnB1dCwgY29weSwgbmV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGhhdmUgLT0gY29weTtcbiAgICAgICAgICBuZXh0ICs9IGNvcHk7XG4gICAgICAgICAgaWYgKGxlbikgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC5uYW1lID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5sZW5ndGggPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQ09NTUVOVDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBDT01NRU5UOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDEwMDApIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBjb3B5ID0gMDtcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBsZW4gPSBpbnB1dFtuZXh0ICsgY29weSsrXTtcbiAgICAgICAgICAgIC8qIHVzZSBjb25zdGFudCBsaW1pdCBiZWNhdXNlIGluIGpzIHdlIHNob3VsZCBub3QgcHJlYWxsb2NhdGUgbWVtb3J5ICovXG4gICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCAmJiBsZW4gJiZcbiAgICAgICAgICAgICAgICAoc3RhdGUubGVuZ3RoIDwgNjU1MzYgLypzdGF0ZS5oZWFkLmNvbW1fbWF4Ki8pKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmhlYWQuY29tbWVudCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAobGVuICYmIGNvcHkgPCBoYXZlKTtcbiAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzJfMShzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBoYXZlIC09IGNvcHk7XG4gICAgICAgICAgbmV4dCArPSBjb3B5O1xuICAgICAgICAgIGlmIChsZW4pIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQuY29tbWVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubW9kZSA9IEhDUkM7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgSENSQzpcbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBpZiAoaG9sZCAhPT0gKHN0YXRlLmNoZWNrICYgMHhmZmZmKSkge1xuICAgICAgICAgICAgc3RybS5tc2cgPSAnaGVhZGVyIGNyYyBtaXNtYXRjaCc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEJDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICBob2xkID0gMDtcbiAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLmhjcmMgPSAoKHN0YXRlLmZsYWdzID4+IDkpICYgMSk7XG4gICAgICAgICAgc3RhdGUuaGVhZC5kb25lID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRSQxO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRElDVElEOlxuICAgICAgICAvLz09PSBORUVEQklUUygzMik7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0genN3YXAzMihob2xkKTtcbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBESUNUO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIERJQ1Q6XG4gICAgICAgIGlmIChzdGF0ZS5oYXZlZGljdCA9PT0gMCkge1xuICAgICAgICAgIC8vLS0tIFJFU1RPUkUoKSAtLS1cbiAgICAgICAgICBzdHJtLm5leHRfb3V0ID0gcHV0O1xuICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcbiAgICAgICAgICBzdHJtLm5leHRfaW4gPSBuZXh0O1xuICAgICAgICAgIHN0cm0uYXZhaWxfaW4gPSBoYXZlO1xuICAgICAgICAgIHN0YXRlLmhvbGQgPSBob2xkO1xuICAgICAgICAgIHN0YXRlLmJpdHMgPSBiaXRzO1xuICAgICAgICAgIC8vLS0tXG4gICAgICAgICAgcmV0dXJuIFpfTkVFRF9ESUNUO1xuICAgICAgICB9XG4gICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IDEvKmFkbGVyMzIoMEwsIFpfTlVMTCwgMCkqLztcbiAgICAgICAgc3RhdGUubW9kZSA9IFRZUEUkMTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBUWVBFJDE6XG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9CTE9DSyQxIHx8IGZsdXNoID09PSBaX1RSRUVTKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIFRZUEVETzpcbiAgICAgICAgaWYgKHN0YXRlLmxhc3QpIHtcbiAgICAgICAgICAvLy0tLSBCWVRFQklUUygpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IGJpdHMgJiA3O1xuICAgICAgICAgIGJpdHMgLT0gYml0cyAmIDc7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBDSEVDSztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLz09PSBORUVEQklUUygzKTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAzKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLmxhc3QgPSAoaG9sZCAmIDB4MDEpLypCSVRTKDEpKi87XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDEpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSAxO1xuICAgICAgICBiaXRzIC09IDE7XG4gICAgICAgIC8vLS0tLy9cblxuICAgICAgICBzd2l0Y2ggKChob2xkICYgMHgwMykvKkJJVFMoMikqLykge1xuICAgICAgICAgIGNhc2UgMDogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHN0b3JlZCBibG9jayAqL1xuICAgICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgc3RvcmVkIGJsb2NrJXNcXG5cIixcbiAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gU1RPUkVEO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZml4ZWQgYmxvY2sgKi9cbiAgICAgICAgICAgIGZpeGVkdGFibGVzKHN0YXRlKTtcbiAgICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgIGZpeGVkIGNvZGVzIGJsb2NrJXNcXG5cIixcbiAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gTEVOXzsgICAgICAgICAgICAgLyogZGVjb2RlIGNvZGVzICovXG4gICAgICAgICAgICBpZiAoZmx1c2ggPT09IFpfVFJFRVMpIHtcbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IDI7XG4gICAgICAgICAgICAgIGJpdHMgLT0gMjtcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBkeW5hbWljIGJsb2NrICovXG4gICAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICBkeW5hbWljIGNvZGVzIGJsb2NrJXNcXG5cIixcbiAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gVEFCTEU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGJsb2NrIHR5cGUnO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxO1xuICAgICAgICB9XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDIpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSAyO1xuICAgICAgICBiaXRzIC09IDI7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFNUT1JFRDpcbiAgICAgICAgLy8tLS0gQllURUJJVFMoKSAtLS0vLyAvKiBnbyB0byBieXRlIGJvdW5kYXJ5ICovXG4gICAgICAgIGhvbGQgPj4+PSBiaXRzICYgNztcbiAgICAgICAgYml0cyAtPSBiaXRzICYgNztcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICAvLz09PSBORUVEQklUUygzMik7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgaWYgKChob2xkICYgMHhmZmZmKSAhPT0gKChob2xkID4+PiAxNikgXiAweGZmZmYpKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBzdG9yZWQgYmxvY2sgbGVuZ3Rocyc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmxlbmd0aCA9IGhvbGQgJiAweGZmZmY7XG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgc3RvcmVkIGxlbmd0aCAldVxcblwiLFxuICAgICAgICAvLyAgICAgICAgc3RhdGUubGVuZ3RoKSk7XG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgIGhvbGQgPSAwO1xuICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5tb2RlID0gQ09QWV87XG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBDT1BZXzpcbiAgICAgICAgc3RhdGUubW9kZSA9IENPUFk7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgQ09QWTpcbiAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDtcbiAgICAgICAgaWYgKGNvcHkpIHtcbiAgICAgICAgICBpZiAoY29weSA+IGhhdmUpIHsgY29weSA9IGhhdmU7IH1cbiAgICAgICAgICBpZiAoY29weSA+IGxlZnQpIHsgY29weSA9IGxlZnQ7IH1cbiAgICAgICAgICBpZiAoY29weSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAvLy0tLSB6bWVtY3B5KHB1dCwgbmV4dCwgY29weSk7IC0tLVxuICAgICAgICAgIG91dHB1dC5zZXQoaW5wdXQuc3ViYXJyYXkobmV4dCwgbmV4dCArIGNvcHkpLCBwdXQpO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBoYXZlIC09IGNvcHk7XG4gICAgICAgICAgbmV4dCArPSBjb3B5O1xuICAgICAgICAgIGxlZnQgLT0gY29weTtcbiAgICAgICAgICBwdXQgKz0gY29weTtcbiAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIHN0b3JlZCBlbmRcXG5cIikpO1xuICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRSQxO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVEFCTEU6XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDE0KTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAxNCkge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5ubGVuID0gKGhvbGQgJiAweDFmKS8qQklUUyg1KSovICsgMjU3O1xuICAgICAgICAvLy0tLSBEUk9QQklUUyg1KSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gNTtcbiAgICAgICAgYml0cyAtPSA1O1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIHN0YXRlLm5kaXN0ID0gKGhvbGQgJiAweDFmKS8qQklUUyg1KSovICsgMTtcbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoNSkgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDU7XG4gICAgICAgIGJpdHMgLT0gNTtcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBzdGF0ZS5uY29kZSA9IChob2xkICYgMHgwZikvKkJJVFMoNCkqLyArIDQ7XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDQpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSA0O1xuICAgICAgICBiaXRzIC09IDQ7XG4gICAgICAgIC8vLS0tLy9cbi8vI2lmbmRlZiBQS1pJUF9CVUdfV09SS0FST1VORFxuICAgICAgICBpZiAoc3RhdGUubmxlbiA+IDI4NiB8fCBzdGF0ZS5uZGlzdCA+IDMwKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAndG9vIG1hbnkgbGVuZ3RoIG9yIGRpc3RhbmNlIHN5bWJvbHMnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuLy8jZW5kaWZcbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICB0YWJsZSBzaXplcyBva1xcblwiKSk7XG4gICAgICAgIHN0YXRlLmhhdmUgPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOTEVOUztcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU5MRU5TOlxuICAgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IHN0YXRlLm5jb2RlKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMyk7XG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCAzKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RhdGUubGVuc1tvcmRlcltzdGF0ZS5oYXZlKytdXSA9IChob2xkICYgMHgwNyk7Ly9CSVRTKDMpO1xuICAgICAgICAgIC8vLS0tIERST1BCSVRTKDMpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IDM7XG4gICAgICAgICAgYml0cyAtPSAzO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IDE5KSB7XG4gICAgICAgICAgc3RhdGUubGVuc1tvcmRlcltzdGF0ZS5oYXZlKytdXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC5cbiAgICAgICAgLy9zdGF0ZS5uZXh0ID0gc3RhdGUuY29kZXM7XG4gICAgICAgIC8vc3RhdGUubGVuY29kZSA9IHN0YXRlLm5leHQ7XG4gICAgICAgIC8vIFN3aXRjaCB0byB1c2UgZHluYW1pYyB0YWJsZVxuICAgICAgICBzdGF0ZS5sZW5jb2RlID0gc3RhdGUubGVuZHluO1xuICAgICAgICBzdGF0ZS5sZW5iaXRzID0gNztcblxuICAgICAgICBvcHRzID0geyBiaXRzOiBzdGF0ZS5sZW5iaXRzIH07XG4gICAgICAgIHJldCA9IGluZnRyZWVzKENPREVTJDEsIHN0YXRlLmxlbnMsIDAsIDE5LCBzdGF0ZS5sZW5jb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTtcbiAgICAgICAgc3RhdGUubGVuYml0cyA9IG9wdHMuYml0cztcblxuICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBjb2RlIGxlbmd0aHMgc2V0JztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEJDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICBjb2RlIGxlbmd0aHMgb2tcXG5cIikpO1xuICAgICAgICBzdGF0ZS5oYXZlID0gMDtcbiAgICAgICAgc3RhdGUubW9kZSA9IENPREVMRU5TO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIENPREVMRU5TOlxuICAgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IHN0YXRlLm5sZW4gKyBzdGF0ZS5uZGlzdCkge1xuICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5sZW5jb2RlW2hvbGQgJiAoKDEgPDwgc3RhdGUubGVuYml0cykgLSAxKV07LypCSVRTKHN0YXRlLmxlbmJpdHMpKi9cbiAgICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG4gICAgICAgICAgICBpZiAoKGhlcmVfYml0cykgPD0gYml0cykgeyBicmVhazsgfVxuICAgICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhlcmVfdmFsIDwgMTYpIHtcbiAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgIHN0YXRlLmxlbnNbc3RhdGUuaGF2ZSsrXSA9IGhlcmVfdmFsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChoZXJlX3ZhbCA9PT0gMTYpIHtcbiAgICAgICAgICAgICAgLy89PT0gTkVFREJJVFMoaGVyZS5iaXRzICsgMik7XG4gICAgICAgICAgICAgIG4gPSBoZXJlX2JpdHMgKyAyO1xuICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgICBpZiAoc3RhdGUuaGF2ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgYml0IGxlbmd0aCByZXBlYXQnO1xuICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsZW4gPSBzdGF0ZS5sZW5zW3N0YXRlLmhhdmUgLSAxXTtcbiAgICAgICAgICAgICAgY29weSA9IDMgKyAoaG9sZCAmIDB4MDMpOy8vQklUUygyKTtcbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IDI7XG4gICAgICAgICAgICAgIGJpdHMgLT0gMjtcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaGVyZV92YWwgPT09IDE3KSB7XG4gICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKGhlcmUuYml0cyArIDMpO1xuICAgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgMztcbiAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgbGVuID0gMDtcbiAgICAgICAgICAgICAgY29weSA9IDMgKyAoaG9sZCAmIDB4MDcpOy8vQklUUygzKTtcbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IDM7XG4gICAgICAgICAgICAgIGJpdHMgLT0gMztcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKGhlcmUuYml0cyArIDcpO1xuICAgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgNztcbiAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgbGVuID0gMDtcbiAgICAgICAgICAgICAgY29weSA9IDExICsgKGhvbGQgJiAweDdmKTsvL0JJVFMoNyk7XG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDcpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSA3O1xuICAgICAgICAgICAgICBiaXRzIC09IDc7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ZS5oYXZlICsgY29weSA+IHN0YXRlLm5sZW4gKyBzdGF0ZS5uZGlzdCkge1xuICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0JztcbiAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChjb3B5LS0pIHtcbiAgICAgICAgICAgICAgc3RhdGUubGVuc1tzdGF0ZS5oYXZlKytdID0gbGVuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGhhbmRsZSBlcnJvciBicmVha3MgaW4gd2hpbGUgKi9cbiAgICAgICAgaWYgKHN0YXRlLm1vZGUgPT09IEJBRCQxKSB7IGJyZWFrOyB9XG5cbiAgICAgICAgLyogY2hlY2sgZm9yIGVuZC1vZi1ibG9jayBjb2RlIChiZXR0ZXIgaGF2ZSBvbmUpICovXG4gICAgICAgIGlmIChzdGF0ZS5sZW5zWzI1Nl0gPT09IDApIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGNvZGUgLS0gbWlzc2luZyBlbmQtb2YtYmxvY2snO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGJ1aWxkIGNvZGUgdGFibGVzIC0tIG5vdGU6IGRvIG5vdCBjaGFuZ2UgdGhlIGxlbmJpdHMgb3IgZGlzdGJpdHNcbiAgICAgICAgICAgdmFsdWVzIGhlcmUgKDkgYW5kIDYpIHdpdGhvdXQgcmVhZGluZyB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaFxuICAgICAgICAgICBjb25jZXJuaW5nIHRoZSBFTk9VR0ggY29uc3RhbnRzLCB3aGljaCBkZXBlbmQgb24gdGhvc2UgdmFsdWVzICovXG4gICAgICAgIHN0YXRlLmxlbmJpdHMgPSA5O1xuXG4gICAgICAgIG9wdHMgPSB7IGJpdHM6IHN0YXRlLmxlbmJpdHMgfTtcbiAgICAgICAgcmV0ID0gaW5mdHJlZXMoTEVOUyQxLCBzdGF0ZS5sZW5zLCAwLCBzdGF0ZS5ubGVuLCBzdGF0ZS5sZW5jb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTtcbiAgICAgICAgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC5cbiAgICAgICAgLy8gc3RhdGUubmV4dF9pbmRleCA9IG9wdHMudGFibGVfaW5kZXg7XG4gICAgICAgIHN0YXRlLmxlbmJpdHMgPSBvcHRzLmJpdHM7XG4gICAgICAgIC8vIHN0YXRlLmxlbmNvZGUgPSBzdGF0ZS5uZXh0O1xuXG4gICAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGxpdGVyYWwvbGVuZ3RocyBzZXQnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlLmRpc3RiaXRzID0gNjtcbiAgICAgICAgLy9zdGF0ZS5kaXN0Y29kZS5jb3B5KHN0YXRlLmNvZGVzKTtcbiAgICAgICAgLy8gU3dpdGNoIHRvIHVzZSBkeW5hbWljIHRhYmxlXG4gICAgICAgIHN0YXRlLmRpc3Rjb2RlID0gc3RhdGUuZGlzdGR5bjtcbiAgICAgICAgb3B0cyA9IHsgYml0czogc3RhdGUuZGlzdGJpdHMgfTtcbiAgICAgICAgcmV0ID0gaW5mdHJlZXMoRElTVFMkMSwgc3RhdGUubGVucywgc3RhdGUubmxlbiwgc3RhdGUubmRpc3QsIHN0YXRlLmRpc3Rjb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTtcbiAgICAgICAgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC5cbiAgICAgICAgLy8gc3RhdGUubmV4dF9pbmRleCA9IG9wdHMudGFibGVfaW5kZXg7XG4gICAgICAgIHN0YXRlLmRpc3RiaXRzID0gb3B0cy5iaXRzO1xuICAgICAgICAvLyBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLm5leHQ7XG5cbiAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2VzIHNldCc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsICdpbmZsYXRlOiAgICAgICBjb2RlcyBva1xcbicpKTtcbiAgICAgICAgc3RhdGUubW9kZSA9IExFTl87XG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU5fOlxuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIExFTjpcbiAgICAgICAgaWYgKGhhdmUgPj0gNiAmJiBsZWZ0ID49IDI1OCkge1xuICAgICAgICAgIC8vLS0tIFJFU1RPUkUoKSAtLS1cbiAgICAgICAgICBzdHJtLm5leHRfb3V0ID0gcHV0O1xuICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcbiAgICAgICAgICBzdHJtLm5leHRfaW4gPSBuZXh0O1xuICAgICAgICAgIHN0cm0uYXZhaWxfaW4gPSBoYXZlO1xuICAgICAgICAgIHN0YXRlLmhvbGQgPSBob2xkO1xuICAgICAgICAgIHN0YXRlLmJpdHMgPSBiaXRzO1xuICAgICAgICAgIC8vLS0tXG4gICAgICAgICAgaW5mZmFzdChzdHJtLCBfb3V0KTtcbiAgICAgICAgICAvLy0tLSBMT0FEKCkgLS0tXG4gICAgICAgICAgcHV0ID0gc3RybS5uZXh0X291dDtcbiAgICAgICAgICBvdXRwdXQgPSBzdHJtLm91dHB1dDtcbiAgICAgICAgICBsZWZ0ID0gc3RybS5hdmFpbF9vdXQ7XG4gICAgICAgICAgbmV4dCA9IHN0cm0ubmV4dF9pbjtcbiAgICAgICAgICBpbnB1dCA9IHN0cm0uaW5wdXQ7XG4gICAgICAgICAgaGF2ZSA9IHN0cm0uYXZhaWxfaW47XG4gICAgICAgICAgaG9sZCA9IHN0YXRlLmhvbGQ7XG4gICAgICAgICAgYml0cyA9IHN0YXRlLmJpdHM7XG4gICAgICAgICAgLy8tLS1cblxuICAgICAgICAgIGlmIChzdGF0ZS5tb2RlID09PSBUWVBFJDEpIHtcbiAgICAgICAgICAgIHN0YXRlLmJhY2sgPSAtMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuYmFjayA9IDA7XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICBoZXJlID0gc3RhdGUubGVuY29kZVtob2xkICYgKCgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMSldOyAgLypCSVRTKHN0YXRlLmxlbmJpdHMpKi9cbiAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG4gICAgICAgICAgaWYgKGhlcmVfYml0cyA8PSBiaXRzKSB7IGJyZWFrOyB9XG4gICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZXJlX29wICYmIChoZXJlX29wICYgMHhmMCkgPT09IDApIHtcbiAgICAgICAgICBsYXN0X2JpdHMgPSBoZXJlX2JpdHM7XG4gICAgICAgICAgbGFzdF9vcCA9IGhlcmVfb3A7XG4gICAgICAgICAgbGFzdF92YWwgPSBoZXJlX3ZhbDtcbiAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBoZXJlID0gc3RhdGUubGVuY29kZVtsYXN0X3ZhbCArXG4gICAgICAgICAgICAgICAgICAgICgoaG9sZCAmICgoMSA8PCAobGFzdF9iaXRzICsgbGFzdF9vcCkpIC0gMSkpLypCSVRTKGxhc3QuYml0cyArIGxhc3Qub3ApKi8gPj4gbGFzdF9iaXRzKV07XG4gICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgICAgaWYgKChsYXN0X2JpdHMgKyBoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cbiAgICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy9cbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vLS0tIERST1BCSVRTKGxhc3QuYml0cykgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gbGFzdF9iaXRzO1xuICAgICAgICAgIGJpdHMgLT0gbGFzdF9iaXRzO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBzdGF0ZS5iYWNrICs9IGxhc3RfYml0cztcbiAgICAgICAgfVxuICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIHN0YXRlLmJhY2sgKz0gaGVyZV9iaXRzO1xuICAgICAgICBzdGF0ZS5sZW5ndGggPSBoZXJlX3ZhbDtcbiAgICAgICAgaWYgKGhlcmVfb3AgPT09IDApIHtcbiAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgaGVyZS52YWwgPj0gMHgyMCAmJiBoZXJlLnZhbCA8IDB4N2YgP1xuICAgICAgICAgIC8vICAgICAgICBcImluZmxhdGU6ICAgICAgICAgbGl0ZXJhbCAnJWMnXFxuXCIgOlxuICAgICAgICAgIC8vICAgICAgICBcImluZmxhdGU6ICAgICAgICAgbGl0ZXJhbCAweCUwMnhcXG5cIiwgaGVyZS52YWwpKTtcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gTElUO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZXJlX29wICYgMzIpIHtcbiAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGVuZCBvZiBibG9ja1xcblwiKSk7XG4gICAgICAgICAgc3RhdGUuYmFjayA9IC0xO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFJDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlcmVfb3AgJiA2NCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmV4dHJhID0gaGVyZV9vcCAmIDE1O1xuICAgICAgICBzdGF0ZS5tb2RlID0gTEVORVhUO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIExFTkVYVDpcbiAgICAgICAgaWYgKHN0YXRlLmV4dHJhKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoc3RhdGUuZXh0cmEpO1xuICAgICAgICAgIG4gPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBzdGF0ZS5sZW5ndGggKz0gaG9sZCAmICgoMSA8PCBzdGF0ZS5leHRyYSkgLSAxKS8qQklUUyhzdGF0ZS5leHRyYSkqLztcbiAgICAgICAgICAvLy0tLSBEUk9QQklUUyhzdGF0ZS5leHRyYSkgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgYml0cyAtPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgc3RhdGUuYmFjayArPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgfVxuICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGxlbmd0aCAldVxcblwiLCBzdGF0ZS5sZW5ndGgpKTtcbiAgICAgICAgc3RhdGUud2FzID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICBzdGF0ZS5tb2RlID0gRElTVDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBESVNUOlxuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgaGVyZSA9IHN0YXRlLmRpc3Rjb2RlW2hvbGQgJiAoKDEgPDwgc3RhdGUuZGlzdGJpdHMpIC0gMSldOy8qQklUUyhzdGF0ZS5kaXN0Yml0cykqL1xuICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cbiAgICAgICAgICBpZiAoKGhlcmVfYml0cykgPD0gYml0cykgeyBicmVhazsgfVxuICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy9cbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgfVxuICAgICAgICBpZiAoKGhlcmVfb3AgJiAweGYwKSA9PT0gMCkge1xuICAgICAgICAgIGxhc3RfYml0cyA9IGhlcmVfYml0cztcbiAgICAgICAgICBsYXN0X29wID0gaGVyZV9vcDtcbiAgICAgICAgICBsYXN0X3ZhbCA9IGhlcmVfdmFsO1xuICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5kaXN0Y29kZVtsYXN0X3ZhbCArXG4gICAgICAgICAgICAgICAgICAgICgoaG9sZCAmICgoMSA8PCAobGFzdF9iaXRzICsgbGFzdF9vcCkpIC0gMSkpLypCSVRTKGxhc3QuYml0cyArIGxhc3Qub3ApKi8gPj4gbGFzdF9iaXRzKV07XG4gICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgICAgaWYgKChsYXN0X2JpdHMgKyBoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cbiAgICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy9cbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vLS0tIERST1BCSVRTKGxhc3QuYml0cykgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gbGFzdF9iaXRzO1xuICAgICAgICAgIGJpdHMgLT0gbGFzdF9iaXRzO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBzdGF0ZS5iYWNrICs9IGxhc3RfYml0cztcbiAgICAgICAgfVxuICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIHN0YXRlLmJhY2sgKz0gaGVyZV9iaXRzO1xuICAgICAgICBpZiAoaGVyZV9vcCAmIDY0KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSBjb2RlJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEJDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUub2Zmc2V0ID0gaGVyZV92YWw7XG4gICAgICAgIHN0YXRlLmV4dHJhID0gKGhlcmVfb3ApICYgMTU7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBESVNURVhUO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIERJU1RFWFQ6XG4gICAgICAgIGlmIChzdGF0ZS5leHRyYSkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKHN0YXRlLmV4dHJhKTtcbiAgICAgICAgICBuID0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RhdGUub2Zmc2V0ICs9IGhvbGQgJiAoKDEgPDwgc3RhdGUuZXh0cmEpIC0gMSkvKkJJVFMoc3RhdGUuZXh0cmEpKi87XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMoc3RhdGUuZXh0cmEpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIGJpdHMgLT0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLmJhY2sgKz0gc3RhdGUuZXh0cmE7XG4gICAgICAgIH1cbi8vI2lmZGVmIElORkxBVEVfU1RSSUNUXG4gICAgICAgIGlmIChzdGF0ZS5vZmZzZXQgPiBzdGF0ZS5kbWF4KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuLy8jZW5kaWZcbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBkaXN0YW5jZSAldVxcblwiLCBzdGF0ZS5vZmZzZXQpKTtcbiAgICAgICAgc3RhdGUubW9kZSA9IE1BVENIO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIE1BVENIOlxuICAgICAgICBpZiAobGVmdCA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgY29weSA9IF9vdXQgLSBsZWZ0O1xuICAgICAgICBpZiAoc3RhdGUub2Zmc2V0ID4gY29weSkgeyAgICAgICAgIC8qIGNvcHkgZnJvbSB3aW5kb3cgKi9cbiAgICAgICAgICBjb3B5ID0gc3RhdGUub2Zmc2V0IC0gY29weTtcbiAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLndoYXZlKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUuc2FuZSkge1xuICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7XG4gICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQkMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4vLyAoISkgVGhpcyBibG9jayBpcyBkaXNhYmxlZCBpbiB6bGliIGRlZmF1bHRzLFxuLy8gZG9uJ3QgZW5hYmxlIGl0IGZvciBiaW5hcnkgY29tcGF0aWJpbGl0eVxuLy8jaWZkZWYgSU5GTEFURV9BTExPV19JTlZBTElEX0RJU1RBTkNFX1RPT0ZBUl9BUlJSXG4vLyAgICAgICAgICBUcmFjZSgoc3RkZXJyLCBcImluZmxhdGUuYyB0b28gZmFyXFxuXCIpKTtcbi8vICAgICAgICAgIGNvcHkgLT0gc3RhdGUud2hhdmU7XG4vLyAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLmxlbmd0aCkgeyBjb3B5ID0gc3RhdGUubGVuZ3RoOyB9XG4vLyAgICAgICAgICBpZiAoY29weSA+IGxlZnQpIHsgY29weSA9IGxlZnQ7IH1cbi8vICAgICAgICAgIGxlZnQgLT0gY29weTtcbi8vICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xuLy8gICAgICAgICAgZG8ge1xuLy8gICAgICAgICAgICBvdXRwdXRbcHV0KytdID0gMDtcbi8vICAgICAgICAgIH0gd2hpbGUgKC0tY29weSk7XG4vLyAgICAgICAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7IHN0YXRlLm1vZGUgPSBMRU47IH1cbi8vICAgICAgICAgIGJyZWFrO1xuLy8jZW5kaWZcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS53bmV4dCkge1xuICAgICAgICAgICAgY29weSAtPSBzdGF0ZS53bmV4dDtcbiAgICAgICAgICAgIGZyb20gPSBzdGF0ZS53c2l6ZSAtIGNvcHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZnJvbSA9IHN0YXRlLnduZXh0IC0gY29weTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS5sZW5ndGgpIHsgY29weSA9IHN0YXRlLmxlbmd0aDsgfVxuICAgICAgICAgIGZyb21fc291cmNlID0gc3RhdGUud2luZG93O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGNvcHkgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcbiAgICAgICAgICBmcm9tID0gcHV0IC0gc3RhdGUub2Zmc2V0O1xuICAgICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvcHkgPiBsZWZ0KSB7IGNvcHkgPSBsZWZ0OyB9XG4gICAgICAgIGxlZnQgLT0gY29weTtcbiAgICAgICAgc3RhdGUubGVuZ3RoIC09IGNvcHk7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBvdXRwdXRbcHV0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgfSB3aGlsZSAoLS1jb3B5KTtcbiAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgeyBzdGF0ZS5tb2RlID0gTEVOOyB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMSVQ6XG4gICAgICAgIGlmIChsZWZ0ID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICBvdXRwdXRbcHV0KytdID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICBsZWZ0LS07XG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU47XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDSEVDSzpcbiAgICAgICAgaWYgKHN0YXRlLndyYXApIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUygzMik7XG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAvLyBVc2UgJ3wnIGluc3RlYWQgb2YgJysnIHRvIG1ha2Ugc3VyZSB0aGF0IHJlc3VsdCBpcyBzaWduZWRcbiAgICAgICAgICAgIGhvbGQgfD0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgX291dCAtPSBsZWZ0O1xuICAgICAgICAgIHN0cm0udG90YWxfb3V0ICs9IF9vdXQ7XG4gICAgICAgICAgc3RhdGUudG90YWwgKz0gX291dDtcbiAgICAgICAgICBpZiAoX291dCkge1xuICAgICAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID1cbiAgICAgICAgICAgICAgICAvKlVQREFURShzdGF0ZS5jaGVjaywgcHV0IC0gX291dCwgX291dCk7Ki9cbiAgICAgICAgICAgICAgICAoc3RhdGUuZmxhZ3MgPyBjcmMzMl8xKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHB1dCAtIF9vdXQpIDogYWRsZXIzMl8xKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHB1dCAtIF9vdXQpKTtcblxuICAgICAgICAgIH1cbiAgICAgICAgICBfb3V0ID0gbGVmdDtcbiAgICAgICAgICAvLyBOQjogY3JjMzIgc3RvcmVkIGFzIHNpZ25lZCAzMi1iaXQgaW50LCB6c3dhcDMyIHJldHVybnMgc2lnbmVkIHRvb1xuICAgICAgICAgIGlmICgoc3RhdGUuZmxhZ3MgPyBob2xkIDogenN3YXAzMihob2xkKSkgIT09IHN0YXRlLmNoZWNrKSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbmNvcnJlY3QgZGF0YSBjaGVjayc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEJDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICBob2xkID0gMDtcbiAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIGNoZWNrIG1hdGNoZXMgdHJhaWxlclxcblwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubW9kZSA9IExFTkdUSDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU5HVEg6XG4gICAgICAgIGlmIChzdGF0ZS53cmFwICYmIHN0YXRlLmZsYWdzKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpO1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBpZiAoaG9sZCAhPT0gKHN0YXRlLnRvdGFsICYgMHhmZmZmZmZmZikpIHtcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBsZW5ndGggY2hlY2snO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICBsZW5ndGggbWF0Y2hlcyB0cmFpbGVyXFxuXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5tb2RlID0gRE9ORTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBET05FOlxuICAgICAgICByZXQgPSBaX1NUUkVBTV9FTkQkMjtcbiAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgY2FzZSBCQUQkMTpcbiAgICAgICAgcmV0ID0gWl9EQVRBX0VSUk9SJDE7XG4gICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgIGNhc2UgTUVNOlxuICAgICAgICByZXR1cm4gWl9NRU1fRVJST1I7XG4gICAgICBjYXNlIFNZTkM6XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUiQxO1xuICAgIH1cbiAgfVxuXG4gIC8vIGluZl9sZWF2ZSA8LSBoZXJlIGlzIHJlYWwgcGxhY2UgZm9yIFwiZ290byBpbmZfbGVhdmVcIiwgZW11bGF0ZWQgdmlhIFwiYnJlYWsgaW5mX2xlYXZlXCJcblxuICAvKlxuICAgICBSZXR1cm4gZnJvbSBpbmZsYXRlKCksIHVwZGF0aW5nIHRoZSB0b3RhbCBjb3VudHMgYW5kIHRoZSBjaGVjayB2YWx1ZS5cbiAgICAgSWYgdGhlcmUgd2FzIG5vIHByb2dyZXNzIGR1cmluZyB0aGUgaW5mbGF0ZSgpIGNhbGwsIHJldHVybiBhIGJ1ZmZlclxuICAgICBlcnJvci4gIENhbGwgdXBkYXRld2luZG93KCkgdG8gY3JlYXRlIGFuZC9vciB1cGRhdGUgdGhlIHdpbmRvdyBzdGF0ZS5cbiAgICAgTm90ZTogYSBtZW1vcnkgZXJyb3IgZnJvbSBpbmZsYXRlKCkgaXMgbm9uLXJlY292ZXJhYmxlLlxuICAgKi9cblxuICAvLy0tLSBSRVNUT1JFKCkgLS0tXG4gIHN0cm0ubmV4dF9vdXQgPSBwdXQ7XG4gIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcbiAgc3RybS5uZXh0X2luID0gbmV4dDtcbiAgc3RybS5hdmFpbF9pbiA9IGhhdmU7XG4gIHN0YXRlLmhvbGQgPSBob2xkO1xuICBzdGF0ZS5iaXRzID0gYml0cztcbiAgLy8tLS1cblxuICBpZiAoc3RhdGUud3NpemUgfHwgKF9vdXQgIT09IHN0cm0uYXZhaWxfb3V0ICYmIHN0YXRlLm1vZGUgPCBCQUQkMSAmJlxuICAgICAgICAgICAgICAgICAgICAgIChzdGF0ZS5tb2RlIDwgQ0hFQ0sgfHwgZmx1c2ggIT09IFpfRklOSVNIJDIpKSkge1xuICAgIGlmICh1cGRhdGV3aW5kb3coc3RybSwgc3RybS5vdXRwdXQsIHN0cm0ubmV4dF9vdXQsIF9vdXQgLSBzdHJtLmF2YWlsX291dCkpIDtcbiAgfVxuICBfaW4gLT0gc3RybS5hdmFpbF9pbjtcbiAgX291dCAtPSBzdHJtLmF2YWlsX291dDtcbiAgc3RybS50b3RhbF9pbiArPSBfaW47XG4gIHN0cm0udG90YWxfb3V0ICs9IF9vdXQ7XG4gIHN0YXRlLnRvdGFsICs9IF9vdXQ7XG4gIGlmIChzdGF0ZS53cmFwICYmIF9vdXQpIHtcbiAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAvKlVQREFURShzdGF0ZS5jaGVjaywgc3RybS5uZXh0X291dCAtIF9vdXQsIF9vdXQpOyovXG4gICAgICAoc3RhdGUuZmxhZ3MgPyBjcmMzMl8xKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHN0cm0ubmV4dF9vdXQgLSBfb3V0KSA6IGFkbGVyMzJfMShzdGF0ZS5jaGVjaywgb3V0cHV0LCBfb3V0LCBzdHJtLm5leHRfb3V0IC0gX291dCkpO1xuICB9XG4gIHN0cm0uZGF0YV90eXBlID0gc3RhdGUuYml0cyArIChzdGF0ZS5sYXN0ID8gNjQgOiAwKSArXG4gICAgICAgICAgICAgICAgICAgIChzdGF0ZS5tb2RlID09PSBUWVBFJDEgPyAxMjggOiAwKSArXG4gICAgICAgICAgICAgICAgICAgIChzdGF0ZS5tb2RlID09PSBMRU5fIHx8IHN0YXRlLm1vZGUgPT09IENPUFlfID8gMjU2IDogMCk7XG4gIGlmICgoKF9pbiA9PT0gMCAmJiBfb3V0ID09PSAwKSB8fCBmbHVzaCA9PT0gWl9GSU5JU0gkMikgJiYgcmV0ID09PSBaX09LJDIpIHtcbiAgICByZXQgPSBaX0JVRl9FUlJPUiQxO1xuICB9XG4gIHJldHVybiByZXQ7XG59O1xuXG5cbmNvbnN0IGluZmxhdGVFbmQgPSAoc3RybSkgPT4ge1xuXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSAvKnx8IHN0cm0tPnpmcmVlID09IChmcmVlX2Z1bmMpMCovKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDE7XG4gIH1cblxuICBsZXQgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICBpZiAoc3RhdGUud2luZG93KSB7XG4gICAgc3RhdGUud2luZG93ID0gbnVsbDtcbiAgfVxuICBzdHJtLnN0YXRlID0gbnVsbDtcbiAgcmV0dXJuIFpfT0skMjtcbn07XG5cblxuY29uc3QgaW5mbGF0ZUdldEhlYWRlciA9IChzdHJtLCBoZWFkKSA9PiB7XG5cbiAgLyogY2hlY2sgc3RhdGUgKi9cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUiQxOyB9XG4gIGNvbnN0IHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgaWYgKChzdGF0ZS53cmFwICYgMikgPT09IDApIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDE7IH1cblxuICAvKiBzYXZlIGhlYWRlciBzdHJ1Y3R1cmUgKi9cbiAgc3RhdGUuaGVhZCA9IGhlYWQ7XG4gIGhlYWQuZG9uZSA9IGZhbHNlO1xuICByZXR1cm4gWl9PSyQyO1xufTtcblxuXG5jb25zdCBpbmZsYXRlU2V0RGljdGlvbmFyeSA9IChzdHJtLCBkaWN0aW9uYXJ5KSA9PiB7XG4gIGNvbnN0IGRpY3RMZW5ndGggPSBkaWN0aW9uYXJ5Lmxlbmd0aDtcblxuICBsZXQgc3RhdGU7XG4gIGxldCBkaWN0aWQ7XG4gIGxldCByZXQ7XG5cbiAgLyogY2hlY2sgc3RhdGUgKi9cbiAgaWYgKCFzdHJtIC8qID09IFpfTlVMTCAqLyB8fCAhc3RybS5zdGF0ZSAvKiA9PSBaX05VTEwgKi8pIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDE7IH1cbiAgc3RhdGUgPSBzdHJtLnN0YXRlO1xuXG4gIGlmIChzdGF0ZS53cmFwICE9PSAwICYmIHN0YXRlLm1vZGUgIT09IERJQ1QpIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1IkMTtcbiAgfVxuXG4gIC8qIGNoZWNrIGZvciBjb3JyZWN0IGRpY3Rpb25hcnkgaWRlbnRpZmllciAqL1xuICBpZiAoc3RhdGUubW9kZSA9PT0gRElDVCkge1xuICAgIGRpY3RpZCA9IDE7IC8qIGFkbGVyMzIoMCwgbnVsbCwgMCkqL1xuICAgIC8qIGRpY3RpZCA9IGFkbGVyMzIoZGljdGlkLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoKTsgKi9cbiAgICBkaWN0aWQgPSBhZGxlcjMyXzEoZGljdGlkLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoLCAwKTtcbiAgICBpZiAoZGljdGlkICE9PSBzdGF0ZS5jaGVjaykge1xuICAgICAgcmV0dXJuIFpfREFUQV9FUlJPUiQxO1xuICAgIH1cbiAgfVxuICAvKiBjb3B5IGRpY3Rpb25hcnkgdG8gd2luZG93IHVzaW5nIHVwZGF0ZXdpbmRvdygpLCB3aGljaCB3aWxsIGFtZW5kIHRoZVxuICAgZXhpc3RpbmcgZGljdGlvbmFyeSBpZiBhcHByb3ByaWF0ZSAqL1xuICByZXQgPSB1cGRhdGV3aW5kb3coc3RybSwgZGljdGlvbmFyeSwgZGljdExlbmd0aCwgZGljdExlbmd0aCk7XG4gIGlmIChyZXQpIHtcbiAgICBzdGF0ZS5tb2RlID0gTUVNO1xuICAgIHJldHVybiBaX01FTV9FUlJPUjtcbiAgfVxuICBzdGF0ZS5oYXZlZGljdCA9IDE7XG4gIC8vIFRyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgZGljdGlvbmFyeSBzZXRcXG5cIikpO1xuICByZXR1cm4gWl9PSyQyO1xufTtcblxuXG52YXIgaW5mbGF0ZVJlc2V0XzEgPSBpbmZsYXRlUmVzZXQ7XG52YXIgaW5mbGF0ZVJlc2V0Ml8xID0gaW5mbGF0ZVJlc2V0MjtcbnZhciBpbmZsYXRlUmVzZXRLZWVwXzEgPSBpbmZsYXRlUmVzZXRLZWVwO1xudmFyIGluZmxhdGVJbml0XzEgPSBpbmZsYXRlSW5pdDtcbnZhciBpbmZsYXRlSW5pdDJfMSA9IGluZmxhdGVJbml0MjtcbnZhciBpbmZsYXRlXzIgPSBpbmZsYXRlO1xudmFyIGluZmxhdGVFbmRfMSA9IGluZmxhdGVFbmQ7XG52YXIgaW5mbGF0ZUdldEhlYWRlcl8xID0gaW5mbGF0ZUdldEhlYWRlcjtcbnZhciBpbmZsYXRlU2V0RGljdGlvbmFyeV8xID0gaW5mbGF0ZVNldERpY3Rpb25hcnk7XG52YXIgaW5mbGF0ZUluZm8gPSAncGFrbyBpbmZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KSc7XG5cbi8qIE5vdCBpbXBsZW1lbnRlZFxubW9kdWxlLmV4cG9ydHMuaW5mbGF0ZUNvcHkgPSBpbmZsYXRlQ29weTtcbm1vZHVsZS5leHBvcnRzLmluZmxhdGVHZXREaWN0aW9uYXJ5ID0gaW5mbGF0ZUdldERpY3Rpb25hcnk7XG5tb2R1bGUuZXhwb3J0cy5pbmZsYXRlTWFyayA9IGluZmxhdGVNYXJrO1xubW9kdWxlLmV4cG9ydHMuaW5mbGF0ZVByaW1lID0gaW5mbGF0ZVByaW1lO1xubW9kdWxlLmV4cG9ydHMuaW5mbGF0ZVN5bmMgPSBpbmZsYXRlU3luYztcbm1vZHVsZS5leHBvcnRzLmluZmxhdGVTeW5jUG9pbnQgPSBpbmZsYXRlU3luY1BvaW50O1xubW9kdWxlLmV4cG9ydHMuaW5mbGF0ZVVuZGVybWluZSA9IGluZmxhdGVVbmRlcm1pbmU7XG4qL1xuXG52YXIgaW5mbGF0ZV8xID0ge1xuXHRpbmZsYXRlUmVzZXQ6IGluZmxhdGVSZXNldF8xLFxuXHRpbmZsYXRlUmVzZXQyOiBpbmZsYXRlUmVzZXQyXzEsXG5cdGluZmxhdGVSZXNldEtlZXA6IGluZmxhdGVSZXNldEtlZXBfMSxcblx0aW5mbGF0ZUluaXQ6IGluZmxhdGVJbml0XzEsXG5cdGluZmxhdGVJbml0MjogaW5mbGF0ZUluaXQyXzEsXG5cdGluZmxhdGU6IGluZmxhdGVfMixcblx0aW5mbGF0ZUVuZDogaW5mbGF0ZUVuZF8xLFxuXHRpbmZsYXRlR2V0SGVhZGVyOiBpbmZsYXRlR2V0SGVhZGVyXzEsXG5cdGluZmxhdGVTZXREaWN0aW9uYXJ5OiBpbmZsYXRlU2V0RGljdGlvbmFyeV8xLFxuXHRpbmZsYXRlSW5mbzogaW5mbGF0ZUluZm9cbn07XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuZnVuY3Rpb24gR1poZWFkZXIoKSB7XG4gIC8qIHRydWUgaWYgY29tcHJlc3NlZCBkYXRhIGJlbGlldmVkIHRvIGJlIHRleHQgKi9cbiAgdGhpcy50ZXh0ICAgICAgID0gMDtcbiAgLyogbW9kaWZpY2F0aW9uIHRpbWUgKi9cbiAgdGhpcy50aW1lICAgICAgID0gMDtcbiAgLyogZXh0cmEgZmxhZ3MgKG5vdCB1c2VkIHdoZW4gd3JpdGluZyBhIGd6aXAgZmlsZSkgKi9cbiAgdGhpcy54ZmxhZ3MgICAgID0gMDtcbiAgLyogb3BlcmF0aW5nIHN5c3RlbSAqL1xuICB0aGlzLm9zICAgICAgICAgPSAwO1xuICAvKiBwb2ludGVyIHRvIGV4dHJhIGZpZWxkIG9yIFpfTlVMTCBpZiBub25lICovXG4gIHRoaXMuZXh0cmEgICAgICA9IG51bGw7XG4gIC8qIGV4dHJhIGZpZWxkIGxlbmd0aCAodmFsaWQgaWYgZXh0cmEgIT0gWl9OVUxMKSAqL1xuICB0aGlzLmV4dHJhX2xlbiAgPSAwOyAvLyBBY3R1YWxseSwgd2UgZG9uJ3QgbmVlZCBpdCBpbiBKUyxcbiAgICAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGxlYXZlIGZvciBmZXcgY29kZSBtb2RpZmljYXRpb25zXG5cbiAgLy9cbiAgLy8gU2V0dXAgbGltaXRzIGlzIG5vdCBuZWNlc3NhcnkgYmVjYXVzZSBpbiBqcyB3ZSBzaG91bGQgbm90IHByZWFsbG9jYXRlIG1lbW9yeVxuICAvLyBmb3IgaW5mbGF0ZSB1c2UgY29uc3RhbnQgbGltaXQgaW4gNjU1MzYgYnl0ZXNcbiAgLy9cblxuICAvKiBzcGFjZSBhdCBleHRyYSAob25seSB3aGVuIHJlYWRpbmcgaGVhZGVyKSAqL1xuICAvLyB0aGlzLmV4dHJhX21heCAgPSAwO1xuICAvKiBwb2ludGVyIHRvIHplcm8tdGVybWluYXRlZCBmaWxlIG5hbWUgb3IgWl9OVUxMICovXG4gIHRoaXMubmFtZSAgICAgICA9ICcnO1xuICAvKiBzcGFjZSBhdCBuYW1lIChvbmx5IHdoZW4gcmVhZGluZyBoZWFkZXIpICovXG4gIC8vIHRoaXMubmFtZV9tYXggICA9IDA7XG4gIC8qIHBvaW50ZXIgdG8gemVyby10ZXJtaW5hdGVkIGNvbW1lbnQgb3IgWl9OVUxMICovXG4gIHRoaXMuY29tbWVudCAgICA9ICcnO1xuICAvKiBzcGFjZSBhdCBjb21tZW50IChvbmx5IHdoZW4gcmVhZGluZyBoZWFkZXIpICovXG4gIC8vIHRoaXMuY29tbV9tYXggICA9IDA7XG4gIC8qIHRydWUgaWYgdGhlcmUgd2FzIG9yIHdpbGwgYmUgYSBoZWFkZXIgY3JjICovXG4gIHRoaXMuaGNyYyAgICAgICA9IDA7XG4gIC8qIHRydWUgd2hlbiBkb25lIHJlYWRpbmcgZ3ppcCBoZWFkZXIgKG5vdCB1c2VkIHdoZW4gd3JpdGluZyBhIGd6aXAgZmlsZSkgKi9cbiAgdGhpcy5kb25lICAgICAgID0gZmFsc2U7XG59XG5cbnZhciBnemhlYWRlciA9IEdaaGVhZGVyO1xuXG5jb25zdCB0b1N0cmluZyQxID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmNvbnN0IHtcbiAgWl9OT19GTFVTSDogWl9OT19GTFVTSCQyLCBaX0ZJTklTSDogWl9GSU5JU0gkMyxcbiAgWl9PSzogWl9PSyQzLCBaX1NUUkVBTV9FTkQ6IFpfU1RSRUFNX0VORCQzLCBaX05FRURfRElDVDogWl9ORUVEX0RJQ1QkMSwgWl9TVFJFQU1fRVJST1I6IFpfU1RSRUFNX0VSUk9SJDIsIFpfREFUQV9FUlJPUjogWl9EQVRBX0VSUk9SJDIsIFpfTUVNX0VSUk9SOiBaX01FTV9FUlJPUiQxXG59ID0gY29uc3RhbnRzO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cbi8qKlxuICogY2xhc3MgSW5mbGF0ZVxuICpcbiAqIEdlbmVyaWMgSlMtc3R5bGUgd3JhcHBlciBmb3IgemxpYiBjYWxscy4gSWYgeW91IGRvbid0IG5lZWRcbiAqIHN0cmVhbWluZyBiZWhhdmlvdXIgLSB1c2UgbW9yZSBzaW1wbGUgZnVuY3Rpb25zOiBbW2luZmxhdGVdXVxuICogYW5kIFtbaW5mbGF0ZVJhd11dLlxuICoqL1xuXG4vKiBpbnRlcm5hbFxuICogaW5mbGF0ZS5jaHVua3MgLT4gQXJyYXlcbiAqXG4gKiBDaHVua3Mgb2Ygb3V0cHV0IGRhdGEsIGlmIFtbSW5mbGF0ZSNvbkRhdGFdXSBub3Qgb3ZlcnJpZGRlbi5cbiAqKi9cblxuLyoqXG4gKiBJbmZsYXRlLnJlc3VsdCAtPiBVaW50OEFycmF5fFN0cmluZ1xuICpcbiAqIFVuY29tcHJlc3NlZCByZXN1bHQsIGdlbmVyYXRlZCBieSBkZWZhdWx0IFtbSW5mbGF0ZSNvbkRhdGFdXVxuICogYW5kIFtbSW5mbGF0ZSNvbkVuZF1dIGhhbmRsZXJzLiBGaWxsZWQgYWZ0ZXIgeW91IHB1c2ggbGFzdCBjaHVua1xuICogKGNhbGwgW1tJbmZsYXRlI3B1c2hdXSB3aXRoIGBaX0ZJTklTSGAgLyBgdHJ1ZWAgcGFyYW0pLlxuICoqL1xuXG4vKipcbiAqIEluZmxhdGUuZXJyIC0+IE51bWJlclxuICpcbiAqIEVycm9yIGNvZGUgYWZ0ZXIgaW5mbGF0ZSBmaW5pc2hlZC4gMCAoWl9PSykgb24gc3VjY2Vzcy5cbiAqIFNob3VsZCBiZSBjaGVja2VkIGlmIGJyb2tlbiBkYXRhIHBvc3NpYmxlLlxuICoqL1xuXG4vKipcbiAqIEluZmxhdGUubXNnIC0+IFN0cmluZ1xuICpcbiAqIEVycm9yIG1lc3NhZ2UsIGlmIFtbSW5mbGF0ZS5lcnJdXSAhPSAwXG4gKiovXG5cblxuLyoqXG4gKiBuZXcgSW5mbGF0ZShvcHRpb25zKVxuICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGluZmxhdGUgb3B0aW9ucy5cbiAqXG4gKiBDcmVhdGVzIG5ldyBpbmZsYXRvciBpbnN0YW5jZSB3aXRoIHNwZWNpZmllZCBwYXJhbXMuIFRocm93cyBleGNlcHRpb25cbiAqIG9uIGJhZCBwYXJhbXMuIFN1cHBvcnRlZCBvcHRpb25zOlxuICpcbiAqIC0gYHdpbmRvd0JpdHNgXG4gKiAtIGBkaWN0aW9uYXJ5YFxuICpcbiAqIFtodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWRdKGh0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZClcbiAqIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHRoZXNlLlxuICpcbiAqIEFkZGl0aW9uYWwgb3B0aW9ucywgZm9yIGludGVybmFsIG5lZWRzOlxuICpcbiAqIC0gYGNodW5rU2l6ZWAgLSBzaXplIG9mIGdlbmVyYXRlZCBkYXRhIGNodW5rcyAoMTZLIGJ5IGRlZmF1bHQpXG4gKiAtIGByYXdgIChCb29sZWFuKSAtIGRvIHJhdyBpbmZsYXRlXG4gKiAtIGB0b2AgKFN0cmluZykgLSBpZiBlcXVhbCB0byAnc3RyaW5nJywgdGhlbiByZXN1bHQgd2lsbCBiZSBjb252ZXJ0ZWRcbiAqICAgZnJvbSB1dGY4IHRvIHV0ZjE2IChqYXZhc2NyaXB0KSBzdHJpbmcuIFdoZW4gc3RyaW5nIG91dHB1dCByZXF1ZXN0ZWQsXG4gKiAgIGNodW5rIGxlbmd0aCBjYW4gZGlmZmVyIGZyb20gYGNodW5rU2l6ZWAsIGRlcGVuZGluZyBvbiBjb250ZW50LlxuICpcbiAqIEJ5IGRlZmF1bHQsIHdoZW4gbm8gb3B0aW9ucyBzZXQsIGF1dG9kZXRlY3QgZGVmbGF0ZS9nemlwIGRhdGEgZm9ybWF0IHZpYVxuICogd3JhcHBlciBoZWFkZXIuXG4gKlxuICogIyMjIyMgRXhhbXBsZTpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBwYWtvID0gcmVxdWlyZSgncGFrbycpXG4gKiBjb25zdCBjaHVuazEgPSBuZXcgVWludDhBcnJheShbMSwyLDMsNCw1LDYsNyw4LDldKVxuICogY29uc3QgY2h1bmsyID0gbmV3IFVpbnQ4QXJyYXkoWzEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5XSk7XG4gKlxuICogY29uc3QgaW5mbGF0ZSA9IG5ldyBwYWtvLkluZmxhdGUoeyBsZXZlbDogM30pO1xuICpcbiAqIGluZmxhdGUucHVzaChjaHVuazEsIGZhbHNlKTtcbiAqIGluZmxhdGUucHVzaChjaHVuazIsIHRydWUpOyAgLy8gdHJ1ZSAtPiBsYXN0IGNodW5rXG4gKlxuICogaWYgKGluZmxhdGUuZXJyKSB7IHRocm93IG5ldyBFcnJvcihpbmZsYXRlLmVycik7IH1cbiAqXG4gKiBjb25zb2xlLmxvZyhpbmZsYXRlLnJlc3VsdCk7XG4gKiBgYGBcbiAqKi9cbmZ1bmN0aW9uIEluZmxhdGUob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBjb21tb24uYXNzaWduKHtcbiAgICBjaHVua1NpemU6IDEwMjQgKiA2NCxcbiAgICB3aW5kb3dCaXRzOiAxNSxcbiAgICB0bzogJydcbiAgfSwgb3B0aW9ucyB8fCB7fSk7XG5cbiAgY29uc3Qgb3B0ID0gdGhpcy5vcHRpb25zO1xuXG4gIC8vIEZvcmNlIHdpbmRvdyBzaXplIGZvciBgcmF3YCBkYXRhLCBpZiBub3Qgc2V0IGRpcmVjdGx5LFxuICAvLyBiZWNhdXNlIHdlIGhhdmUgbm8gaGVhZGVyIGZvciBhdXRvZGV0ZWN0LlxuICBpZiAob3B0LnJhdyAmJiAob3B0LndpbmRvd0JpdHMgPj0gMCkgJiYgKG9wdC53aW5kb3dCaXRzIDwgMTYpKSB7XG4gICAgb3B0LndpbmRvd0JpdHMgPSAtb3B0LndpbmRvd0JpdHM7XG4gICAgaWYgKG9wdC53aW5kb3dCaXRzID09PSAwKSB7IG9wdC53aW5kb3dCaXRzID0gLTE1OyB9XG4gIH1cblxuICAvLyBJZiBgd2luZG93Qml0c2Agbm90IGRlZmluZWQgKGFuZCBtb2RlIG5vdCByYXcpIC0gc2V0IGF1dG9kZXRlY3QgZmxhZyBmb3IgZ3ppcC9kZWZsYXRlXG4gIGlmICgob3B0LndpbmRvd0JpdHMgPj0gMCkgJiYgKG9wdC53aW5kb3dCaXRzIDwgMTYpICYmXG4gICAgICAhKG9wdGlvbnMgJiYgb3B0aW9ucy53aW5kb3dCaXRzKSkge1xuICAgIG9wdC53aW5kb3dCaXRzICs9IDMyO1xuICB9XG5cbiAgLy8gR3ppcCBoZWFkZXIgaGFzIG5vIGluZm8gYWJvdXQgd2luZG93cyBzaXplLCB3ZSBjYW4gZG8gYXV0b2RldGVjdCBvbmx5XG4gIC8vIGZvciBkZWZsYXRlLiBTbywgaWYgd2luZG93IHNpemUgbm90IHNldCwgZm9yY2UgaXQgdG8gbWF4IHdoZW4gZ3ppcCBwb3NzaWJsZVxuICBpZiAoKG9wdC53aW5kb3dCaXRzID4gMTUpICYmIChvcHQud2luZG93Qml0cyA8IDQ4KSkge1xuICAgIC8vIGJpdCAzICgxNikgLT4gZ3ppcHBlZCBkYXRhXG4gICAgLy8gYml0IDQgKDMyKSAtPiBhdXRvZGV0ZWN0IGd6aXAvZGVmbGF0ZVxuICAgIGlmICgob3B0LndpbmRvd0JpdHMgJiAxNSkgPT09IDApIHtcbiAgICAgIG9wdC53aW5kb3dCaXRzIHw9IDE1O1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuZXJyICAgID0gMDsgICAgICAvLyBlcnJvciBjb2RlLCBpZiBoYXBwZW5zICgwID0gWl9PSylcbiAgdGhpcy5tc2cgICAgPSAnJzsgICAgIC8vIGVycm9yIG1lc3NhZ2VcbiAgdGhpcy5lbmRlZCAgPSBmYWxzZTsgIC8vIHVzZWQgdG8gYXZvaWQgbXVsdGlwbGUgb25FbmQoKSBjYWxsc1xuICB0aGlzLmNodW5rcyA9IFtdOyAgICAgLy8gY2h1bmtzIG9mIGNvbXByZXNzZWQgZGF0YVxuXG4gIHRoaXMuc3RybSAgID0gbmV3IHpzdHJlYW0oKTtcbiAgdGhpcy5zdHJtLmF2YWlsX291dCA9IDA7XG5cbiAgbGV0IHN0YXR1cyAgPSBpbmZsYXRlXzEuaW5mbGF0ZUluaXQyKFxuICAgIHRoaXMuc3RybSxcbiAgICBvcHQud2luZG93Qml0c1xuICApO1xuXG4gIGlmIChzdGF0dXMgIT09IFpfT0skMykge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlc1tzdGF0dXNdKTtcbiAgfVxuXG4gIHRoaXMuaGVhZGVyID0gbmV3IGd6aGVhZGVyKCk7XG5cbiAgaW5mbGF0ZV8xLmluZmxhdGVHZXRIZWFkZXIodGhpcy5zdHJtLCB0aGlzLmhlYWRlcik7XG5cbiAgLy8gU2V0dXAgZGljdGlvbmFyeVxuICBpZiAob3B0LmRpY3Rpb25hcnkpIHtcbiAgICAvLyBDb252ZXJ0IGRhdGEgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBvcHQuZGljdGlvbmFyeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG9wdC5kaWN0aW9uYXJ5ID0gc3RyaW5ncy5zdHJpbmcyYnVmKG9wdC5kaWN0aW9uYXJ5KTtcbiAgICB9IGVsc2UgaWYgKHRvU3RyaW5nJDEuY2FsbChvcHQuZGljdGlvbmFyeSkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXScpIHtcbiAgICAgIG9wdC5kaWN0aW9uYXJ5ID0gbmV3IFVpbnQ4QXJyYXkob3B0LmRpY3Rpb25hcnkpO1xuICAgIH1cbiAgICBpZiAob3B0LnJhdykgeyAvL0luIHJhdyBtb2RlIHdlIG5lZWQgdG8gc2V0IHRoZSBkaWN0aW9uYXJ5IGVhcmx5XG4gICAgICBzdGF0dXMgPSBpbmZsYXRlXzEuaW5mbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLCBvcHQuZGljdGlvbmFyeSk7XG4gICAgICBpZiAoc3RhdHVzICE9PSBaX09LJDMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2VzW3N0YXR1c10pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEluZmxhdGUjcHVzaChkYXRhWywgZmx1c2hfbW9kZV0pIC0+IEJvb2xlYW5cbiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheUJ1ZmZlcik6IGlucHV0IGRhdGFcbiAqIC0gZmx1c2hfbW9kZSAoTnVtYmVyfEJvb2xlYW4pOiAwLi42IGZvciBjb3JyZXNwb25kaW5nIFpfTk9fRkxVU0guLlpfVFJFRVxuICogICBmbHVzaCBtb2Rlcy4gU2VlIGNvbnN0YW50cy4gU2tpcHBlZCBvciBgZmFsc2VgIG1lYW5zIFpfTk9fRkxVU0gsXG4gKiAgIGB0cnVlYCBtZWFucyBaX0ZJTklTSC5cbiAqXG4gKiBTZW5kcyBpbnB1dCBkYXRhIHRvIGluZmxhdGUgcGlwZSwgZ2VuZXJhdGluZyBbW0luZmxhdGUjb25EYXRhXV0gY2FsbHMgd2l0aFxuICogbmV3IG91dHB1dCBjaHVua3MuIFJldHVybnMgYHRydWVgIG9uIHN1Y2Nlc3MuIElmIGVuZCBvZiBzdHJlYW0gZGV0ZWN0ZWQsXG4gKiBbW0luZmxhdGUjb25FbmRdXSB3aWxsIGJlIGNhbGxlZC5cbiAqXG4gKiBgZmx1c2hfbW9kZWAgaXMgbm90IG5lZWRlZCBmb3Igbm9ybWFsIG9wZXJhdGlvbiwgYmVjYXVzZSBlbmQgb2Ygc3RyZWFtXG4gKiBkZXRlY3RlZCBhdXRvbWF0aWNhbGx5LiBZb3UgbWF5IHRyeSB0byB1c2UgaXQgZm9yIGFkdmFuY2VkIHRoaW5ncywgYnV0XG4gKiB0aGlzIGZ1bmN0aW9uYWxpdHkgd2FzIG5vdCB0ZXN0ZWQuXG4gKlxuICogT24gZmFpbCBjYWxsIFtbSW5mbGF0ZSNvbkVuZF1dIHdpdGggZXJyb3IgY29kZSBhbmQgcmV0dXJuIGZhbHNlLlxuICpcbiAqICMjIyMjIEV4YW1wbGVcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBwdXNoKGNodW5rLCBmYWxzZSk7IC8vIHB1c2ggb25lIG9mIGRhdGEgY2h1bmtzXG4gKiAuLi5cbiAqIHB1c2goY2h1bmssIHRydWUpOyAgLy8gcHVzaCBsYXN0IGNodW5rXG4gKiBgYGBcbiAqKi9cbkluZmxhdGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoZGF0YSwgZmx1c2hfbW9kZSkge1xuICBjb25zdCBzdHJtID0gdGhpcy5zdHJtO1xuICBjb25zdCBjaHVua1NpemUgPSB0aGlzLm9wdGlvbnMuY2h1bmtTaXplO1xuICBjb25zdCBkaWN0aW9uYXJ5ID0gdGhpcy5vcHRpb25zLmRpY3Rpb25hcnk7XG4gIGxldCBzdGF0dXMsIF9mbHVzaF9tb2RlLCBsYXN0X2F2YWlsX291dDtcblxuICBpZiAodGhpcy5lbmRlZCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChmbHVzaF9tb2RlID09PSB+fmZsdXNoX21vZGUpIF9mbHVzaF9tb2RlID0gZmx1c2hfbW9kZTtcbiAgZWxzZSBfZmx1c2hfbW9kZSA9IGZsdXNoX21vZGUgPT09IHRydWUgPyBaX0ZJTklTSCQzIDogWl9OT19GTFVTSCQyO1xuXG4gIC8vIENvbnZlcnQgZGF0YSBpZiBuZWVkZWRcbiAgaWYgKHRvU3RyaW5nJDEuY2FsbChkYXRhKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJykge1xuICAgIHN0cm0uaW5wdXQgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHJtLmlucHV0ID0gZGF0YTtcbiAgfVxuXG4gIHN0cm0ubmV4dF9pbiA9IDA7XG4gIHN0cm0uYXZhaWxfaW4gPSBzdHJtLmlucHV0Lmxlbmd0aDtcblxuICBmb3IgKDs7KSB7XG4gICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICBzdHJtLm91dHB1dCA9IG5ldyBVaW50OEFycmF5KGNodW5rU2l6ZSk7XG4gICAgICBzdHJtLm5leHRfb3V0ID0gMDtcbiAgICAgIHN0cm0uYXZhaWxfb3V0ID0gY2h1bmtTaXplO1xuICAgIH1cblxuICAgIHN0YXR1cyA9IGluZmxhdGVfMS5pbmZsYXRlKHN0cm0sIF9mbHVzaF9tb2RlKTtcblxuICAgIGlmIChzdGF0dXMgPT09IFpfTkVFRF9ESUNUJDEgJiYgZGljdGlvbmFyeSkge1xuICAgICAgc3RhdHVzID0gaW5mbGF0ZV8xLmluZmxhdGVTZXREaWN0aW9uYXJ5KHN0cm0sIGRpY3Rpb25hcnkpO1xuXG4gICAgICBpZiAoc3RhdHVzID09PSBaX09LJDMpIHtcbiAgICAgICAgc3RhdHVzID0gaW5mbGF0ZV8xLmluZmxhdGUoc3RybSwgX2ZsdXNoX21vZGUpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IFpfREFUQV9FUlJPUiQyKSB7XG4gICAgICAgIC8vIFJlcGxhY2UgY29kZSB3aXRoIG1vcmUgdmVyYm9zZVxuICAgICAgICBzdGF0dXMgPSBaX05FRURfRElDVCQxO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNraXAgc255YyBtYXJrZXJzIGlmIG1vcmUgZGF0YSBmb2xsb3dzIGFuZCBub3QgcmF3IG1vZGVcbiAgICB3aGlsZSAoc3RybS5hdmFpbF9pbiA+IDAgJiZcbiAgICAgICAgICAgc3RhdHVzID09PSBaX1NUUkVBTV9FTkQkMyAmJlxuICAgICAgICAgICBzdHJtLnN0YXRlLndyYXAgPiAwICYmXG4gICAgICAgICAgIGRhdGFbc3RybS5uZXh0X2luXSAhPT0gMClcbiAgICB7XG4gICAgICBpbmZsYXRlXzEuaW5mbGF0ZVJlc2V0KHN0cm0pO1xuICAgICAgc3RhdHVzID0gaW5mbGF0ZV8xLmluZmxhdGUoc3RybSwgX2ZsdXNoX21vZGUpO1xuICAgIH1cblxuICAgIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgICBjYXNlIFpfU1RSRUFNX0VSUk9SJDI6XG4gICAgICBjYXNlIFpfREFUQV9FUlJPUiQyOlxuICAgICAgY2FzZSBaX05FRURfRElDVCQxOlxuICAgICAgY2FzZSBaX01FTV9FUlJPUiQxOlxuICAgICAgICB0aGlzLm9uRW5kKHN0YXR1cyk7XG4gICAgICAgIHRoaXMuZW5kZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gUmVtZW1iZXIgcmVhbCBgYXZhaWxfb3V0YCB2YWx1ZSwgYmVjYXVzZSB3ZSBtYXkgcGF0Y2ggb3V0IGJ1ZmZlciBjb250ZW50XG4gICAgLy8gdG8gYWxpZ24gdXRmOCBzdHJpbmdzIGJvdW5kYXJpZXMuXG4gICAgbGFzdF9hdmFpbF9vdXQgPSBzdHJtLmF2YWlsX291dDtcblxuICAgIGlmIChzdHJtLm5leHRfb3V0KSB7XG4gICAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDAgfHwgc3RhdHVzID09PSBaX1NUUkVBTV9FTkQkMykge1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudG8gPT09ICdzdHJpbmcnKSB7XG5cbiAgICAgICAgICBsZXQgbmV4dF9vdXRfdXRmOCA9IHN0cmluZ3MudXRmOGJvcmRlcihzdHJtLm91dHB1dCwgc3RybS5uZXh0X291dCk7XG5cbiAgICAgICAgICBsZXQgdGFpbCA9IHN0cm0ubmV4dF9vdXQgLSBuZXh0X291dF91dGY4O1xuICAgICAgICAgIGxldCB1dGY4c3RyID0gc3RyaW5ncy5idWYyc3RyaW5nKHN0cm0ub3V0cHV0LCBuZXh0X291dF91dGY4KTtcblxuICAgICAgICAgIC8vIG1vdmUgdGFpbCAmIHJlYWxpZ24gY291bnRlcnNcbiAgICAgICAgICBzdHJtLm5leHRfb3V0ID0gdGFpbDtcbiAgICAgICAgICBzdHJtLmF2YWlsX291dCA9IGNodW5rU2l6ZSAtIHRhaWw7XG4gICAgICAgICAgaWYgKHRhaWwpIHN0cm0ub3V0cHV0LnNldChzdHJtLm91dHB1dC5zdWJhcnJheShuZXh0X291dF91dGY4LCBuZXh0X291dF91dGY4ICsgdGFpbCksIDApO1xuXG4gICAgICAgICAgdGhpcy5vbkRhdGEodXRmOHN0cik7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm9uRGF0YShzdHJtLm91dHB1dC5sZW5ndGggPT09IHN0cm0ubmV4dF9vdXQgPyBzdHJtLm91dHB1dCA6IHN0cm0ub3V0cHV0LnN1YmFycmF5KDAsIHN0cm0ubmV4dF9vdXQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE11c3QgcmVwZWF0IGl0ZXJhdGlvbiBpZiBvdXQgYnVmZmVyIGlzIGZ1bGxcbiAgICBpZiAoc3RhdHVzID09PSBaX09LJDMgJiYgbGFzdF9hdmFpbF9vdXQgPT09IDApIGNvbnRpbnVlO1xuXG4gICAgLy8gRmluYWxpemUgaWYgZW5kIG9mIHN0cmVhbSByZWFjaGVkLlxuICAgIGlmIChzdGF0dXMgPT09IFpfU1RSRUFNX0VORCQzKSB7XG4gICAgICBzdGF0dXMgPSBpbmZsYXRlXzEuaW5mbGF0ZUVuZCh0aGlzLnN0cm0pO1xuICAgICAgdGhpcy5vbkVuZChzdGF0dXMpO1xuICAgICAgdGhpcy5lbmRlZCA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoc3RybS5hdmFpbF9pbiA9PT0gMCkgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiBJbmZsYXRlI29uRGF0YShjaHVuaykgLT4gVm9pZFxuICogLSBjaHVuayAoVWludDhBcnJheXxTdHJpbmcpOiBvdXRwdXQgZGF0YS4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCxcbiAqICAgZWFjaCBjaHVuayB3aWxsIGJlIHN0cmluZy5cbiAqXG4gKiBCeSBkZWZhdWx0LCBzdG9yZXMgZGF0YSBibG9ja3MgaW4gYGNodW5rc1tdYCBwcm9wZXJ0eSBhbmQgZ2x1ZVxuICogdGhvc2UgaW4gYG9uRW5kYC4gT3ZlcnJpZGUgdGhpcyBoYW5kbGVyLCBpZiB5b3UgbmVlZCBhbm90aGVyIGJlaGF2aW91ci5cbiAqKi9cbkluZmxhdGUucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICB0aGlzLmNodW5rcy5wdXNoKGNodW5rKTtcbn07XG5cblxuLyoqXG4gKiBJbmZsYXRlI29uRW5kKHN0YXR1cykgLT4gVm9pZFxuICogLSBzdGF0dXMgKE51bWJlcik6IGluZmxhdGUgc3RhdHVzLiAwIChaX09LKSBvbiBzdWNjZXNzLFxuICogICBvdGhlciBpZiBub3QuXG4gKlxuICogQ2FsbGVkIGVpdGhlciBhZnRlciB5b3UgdGVsbCBpbmZsYXRlIHRoYXQgdGhlIGlucHV0IHN0cmVhbSBpc1xuICogY29tcGxldGUgKFpfRklOSVNIKS4gQnkgZGVmYXVsdCAtIGpvaW4gY29sbGVjdGVkIGNodW5rcyxcbiAqIGZyZWUgbWVtb3J5IGFuZCBmaWxsIGByZXN1bHRzYCAvIGBlcnJgIHByb3BlcnRpZXMuXG4gKiovXG5JbmZsYXRlLnByb3RvdHlwZS5vbkVuZCA9IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgLy8gT24gc3VjY2VzcyAtIGpvaW5cbiAgaWYgKHN0YXR1cyA9PT0gWl9PSyQzKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy50byA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMucmVzdWx0ID0gdGhpcy5jaHVua3Muam9pbignJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVzdWx0ID0gY29tbW9uLmZsYXR0ZW5DaHVua3ModGhpcy5jaHVua3MpO1xuICAgIH1cbiAgfVxuICB0aGlzLmNodW5rcyA9IFtdO1xuICB0aGlzLmVyciA9IHN0YXR1cztcbiAgdGhpcy5tc2cgPSB0aGlzLnN0cm0ubXNnO1xufTtcblxuXG4vKipcbiAqIGluZmxhdGUoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5fFN0cmluZ1xuICogLSBkYXRhIChVaW50OEFycmF5KTogaW5wdXQgZGF0YSB0byBkZWNvbXByZXNzLlxuICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGluZmxhdGUgb3B0aW9ucy5cbiAqXG4gKiBEZWNvbXByZXNzIGBkYXRhYCB3aXRoIGluZmxhdGUvdW5nemlwIGFuZCBgb3B0aW9uc2AuIEF1dG9kZXRlY3RcbiAqIGZvcm1hdCB2aWEgd3JhcHBlciBoZWFkZXIgYnkgZGVmYXVsdC4gVGhhdCdzIHdoeSB3ZSBkb24ndCBwcm92aWRlXG4gKiBzZXBhcmF0ZSBgdW5nemlwYCBtZXRob2QuXG4gKlxuICogU3VwcG9ydGVkIG9wdGlvbnMgYXJlOlxuICpcbiAqIC0gd2luZG93Qml0c1xuICpcbiAqIFtodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWRdKGh0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZClcbiAqIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIFN1Z2FyIChvcHRpb25zKTpcbiAqXG4gKiAtIGByYXdgIChCb29sZWFuKSAtIHNheSB0aGF0IHdlIHdvcmsgd2l0aCByYXcgc3RyZWFtLCBpZiB5b3UgZG9uJ3Qgd2lzaCB0byBzcGVjaWZ5XG4gKiAgIG5lZ2F0aXZlIHdpbmRvd0JpdHMgaW1wbGljaXRseS5cbiAqIC0gYHRvYCAoU3RyaW5nKSAtIGlmIGVxdWFsIHRvICdzdHJpbmcnLCB0aGVuIHJlc3VsdCB3aWxsIGJlIGNvbnZlcnRlZFxuICogICBmcm9tIHV0ZjggdG8gdXRmMTYgKGphdmFzY3JpcHQpIHN0cmluZy4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCxcbiAqICAgY2h1bmsgbGVuZ3RoIGNhbiBkaWZmZXIgZnJvbSBgY2h1bmtTaXplYCwgZGVwZW5kaW5nIG9uIGNvbnRlbnQuXG4gKlxuICpcbiAqICMjIyMjIEV4YW1wbGU6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgcGFrbyA9IHJlcXVpcmUoJ3Bha28nKTtcbiAqIGNvbnN0IGlucHV0ID0gcGFrby5kZWZsYXRlKG5ldyBVaW50OEFycmF5KFsxLDIsMyw0LDUsNiw3LDgsOV0pKTtcbiAqIGxldCBvdXRwdXQ7XG4gKlxuICogdHJ5IHtcbiAqICAgb3V0cHV0ID0gcGFrby5pbmZsYXRlKGlucHV0KTtcbiAqIH0gY2F0Y2ggKGVycilcbiAqICAgY29uc29sZS5sb2coZXJyKTtcbiAqIH1cbiAqIGBgYFxuICoqL1xuZnVuY3Rpb24gaW5mbGF0ZSQxKGlucHV0LCBvcHRpb25zKSB7XG4gIGNvbnN0IGluZmxhdG9yID0gbmV3IEluZmxhdGUob3B0aW9ucyk7XG5cbiAgaW5mbGF0b3IucHVzaChpbnB1dCk7XG5cbiAgLy8gVGhhdCB3aWxsIG5ldmVyIGhhcHBlbnMsIGlmIHlvdSBkb24ndCBjaGVhdCB3aXRoIG9wdGlvbnMgOilcbiAgaWYgKGluZmxhdG9yLmVycikgdGhyb3cgaW5mbGF0b3IubXNnIHx8IG1lc3NhZ2VzW2luZmxhdG9yLmVycl07XG5cbiAgcmV0dXJuIGluZmxhdG9yLnJlc3VsdDtcbn1cblxuXG4vKipcbiAqIGluZmxhdGVSYXcoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5fFN0cmluZ1xuICogLSBkYXRhIChVaW50OEFycmF5KTogaW5wdXQgZGF0YSB0byBkZWNvbXByZXNzLlxuICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGluZmxhdGUgb3B0aW9ucy5cbiAqXG4gKiBUaGUgc2FtZSBhcyBbW2luZmxhdGVdXSwgYnV0IGNyZWF0ZXMgcmF3IGRhdGEsIHdpdGhvdXQgd3JhcHBlclxuICogKGhlYWRlciBhbmQgYWRsZXIzMiBjcmMpLlxuICoqL1xuZnVuY3Rpb24gaW5mbGF0ZVJhdyhpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5yYXcgPSB0cnVlO1xuICByZXR1cm4gaW5mbGF0ZSQxKGlucHV0LCBvcHRpb25zKTtcbn1cblxuXG4vKipcbiAqIHVuZ3ppcChkYXRhWywgb3B0aW9uc10pIC0+IFVpbnQ4QXJyYXl8U3RyaW5nXG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXkpOiBpbnB1dCBkYXRhIHRvIGRlY29tcHJlc3MuXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgaW5mbGF0ZSBvcHRpb25zLlxuICpcbiAqIEp1c3Qgc2hvcnRjdXQgdG8gW1tpbmZsYXRlXV0sIGJlY2F1c2UgaXQgYXV0b2RldGVjdHMgZm9ybWF0XG4gKiBieSBoZWFkZXIuY29udGVudC4gRG9uZSBmb3IgY29udmVuaWVuY2UuXG4gKiovXG5cblxudmFyIEluZmxhdGVfMSA9IEluZmxhdGU7XG52YXIgaW5mbGF0ZV8yJDEgPSBpbmZsYXRlJDE7XG52YXIgaW5mbGF0ZVJhd18xID0gaW5mbGF0ZVJhdztcbnZhciB1bmd6aXAgPSBpbmZsYXRlJDE7XG52YXIgY29uc3RhbnRzJDIgPSBjb25zdGFudHM7XG5cbnZhciBpbmZsYXRlXzEkMSA9IHtcblx0SW5mbGF0ZTogSW5mbGF0ZV8xLFxuXHRpbmZsYXRlOiBpbmZsYXRlXzIkMSxcblx0aW5mbGF0ZVJhdzogaW5mbGF0ZVJhd18xLFxuXHR1bmd6aXA6IHVuZ3ppcCxcblx0Y29uc3RhbnRzOiBjb25zdGFudHMkMlxufTtcblxuY29uc3QgeyBEZWZsYXRlOiBEZWZsYXRlJDEsIGRlZmxhdGU6IGRlZmxhdGUkMiwgZGVmbGF0ZVJhdzogZGVmbGF0ZVJhdyQxLCBnemlwOiBnemlwJDEgfSA9IGRlZmxhdGVfMSQxO1xuXG5jb25zdCB7IEluZmxhdGU6IEluZmxhdGUkMSwgaW5mbGF0ZTogaW5mbGF0ZSQyLCBpbmZsYXRlUmF3OiBpbmZsYXRlUmF3JDEsIHVuZ3ppcDogdW5nemlwJDEgfSA9IGluZmxhdGVfMSQxO1xuXG5cblxudmFyIERlZmxhdGVfMSQxID0gRGVmbGF0ZSQxO1xudmFyIGRlZmxhdGVfMSQyID0gZGVmbGF0ZSQyO1xudmFyIGRlZmxhdGVSYXdfMSQxID0gZGVmbGF0ZVJhdyQxO1xudmFyIGd6aXBfMSQxID0gZ3ppcCQxO1xudmFyIEluZmxhdGVfMSQxID0gSW5mbGF0ZSQxO1xudmFyIGluZmxhdGVfMSQyID0gaW5mbGF0ZSQyO1xudmFyIGluZmxhdGVSYXdfMSQxID0gaW5mbGF0ZVJhdyQxO1xudmFyIHVuZ3ppcF8xID0gdW5nemlwJDE7XG52YXIgY29uc3RhbnRzXzEgPSBjb25zdGFudHM7XG5cbnZhciBwYWtvID0ge1xuXHREZWZsYXRlOiBEZWZsYXRlXzEkMSxcblx0ZGVmbGF0ZTogZGVmbGF0ZV8xJDIsXG5cdGRlZmxhdGVSYXc6IGRlZmxhdGVSYXdfMSQxLFxuXHRnemlwOiBnemlwXzEkMSxcblx0SW5mbGF0ZTogSW5mbGF0ZV8xJDEsXG5cdGluZmxhdGU6IGluZmxhdGVfMSQyLFxuXHRpbmZsYXRlUmF3OiBpbmZsYXRlUmF3XzEkMSxcblx0dW5nemlwOiB1bmd6aXBfMSxcblx0Y29uc3RhbnRzOiBjb25zdGFudHNfMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcGFrbztcbmV4cG9ydCB7IERlZmxhdGVfMSQxIGFzIERlZmxhdGUsIEluZmxhdGVfMSQxIGFzIEluZmxhdGUsIGNvbnN0YW50c18xIGFzIGNvbnN0YW50cywgZGVmbGF0ZV8xJDIgYXMgZGVmbGF0ZSwgZGVmbGF0ZVJhd18xJDEgYXMgZGVmbGF0ZVJhdywgZ3ppcF8xJDEgYXMgZ3ppcCwgaW5mbGF0ZV8xJDIgYXMgaW5mbGF0ZSwgaW5mbGF0ZVJhd18xJDEgYXMgaW5mbGF0ZVJhdywgdW5nemlwXzEgYXMgdW5nemlwIH07XG4iLCAiLyoqXG4gKiAgYmFzZTY0LnRzXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1DbGF1c2UgTGljZW5zZS5cbiAqICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqXG4gKiAgUmVmZXJlbmNlczpcbiAqICAgIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0XG4gKlxuICogQGF1dGhvciBEYW4gS29nYWkgKGh0dHBzOi8vZ2l0aHViLmNvbS9kYW5rb2dhaSlcbiAqL1xuY29uc3QgdmVyc2lvbiA9ICczLjYuMCc7XG4vKipcbiAqIEBkZXByZWNhdGVkIHVzZSBsb3dlcmNhc2UgYHZlcnNpb25gLlxuICovXG5jb25zdCBWRVJTSU9OID0gdmVyc2lvbjtcbmNvbnN0IF9oYXNhdG9iID0gdHlwZW9mIGF0b2IgPT09ICdmdW5jdGlvbic7XG5jb25zdCBfaGFzYnRvYSA9IHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nO1xuY29uc3QgX2hhc0J1ZmZlciA9IHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbic7XG5jb25zdCBfVEQgPSB0eXBlb2YgVGV4dERlY29kZXIgPT09ICdmdW5jdGlvbicgPyBuZXcgVGV4dERlY29kZXIoKSA6IHVuZGVmaW5lZDtcbmNvbnN0IF9URSA9IHR5cGVvZiBUZXh0RW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBUZXh0RW5jb2RlcigpIDogdW5kZWZpbmVkO1xuY29uc3QgYjY0Y2ggPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xuY29uc3QgYjY0Y2hzID0gWy4uLmI2NGNoXTtcbmNvbnN0IGI2NHRhYiA9ICgoYSkgPT4ge1xuICAgIGxldCB0YWIgPSB7fTtcbiAgICBhLmZvckVhY2goKGMsIGkpID0+IHRhYltjXSA9IGkpO1xuICAgIHJldHVybiB0YWI7XG59KShiNjRjaHMpO1xuY29uc3QgYjY0cmUgPSAvXig/OltBLVphLXpcXGQrXFwvXXs0fSkqPyg/OltBLVphLXpcXGQrXFwvXXsyfSg/Oj09KT98W0EtWmEtelxcZCtcXC9dezN9PT8pPyQvO1xuY29uc3QgX2Zyb21DQyA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYmluZChTdHJpbmcpO1xuY29uc3QgX1U4QWZyb20gPSB0eXBlb2YgVWludDhBcnJheS5mcm9tID09PSAnZnVuY3Rpb24nXG4gICAgPyBVaW50OEFycmF5LmZyb20uYmluZChVaW50OEFycmF5KVxuICAgIDogKGl0LCBmbiA9ICh4KSA9PiB4KSA9PiBuZXcgVWludDhBcnJheShBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChpdCwgMCkubWFwKGZuKSk7XG5jb25zdCBfbWtVcmlTYWZlID0gKHNyYykgPT4gc3JjXG4gICAgLnJlcGxhY2UoL1srXFwvXS9nLCAobTApID0+IG0wID09ICcrJyA/ICctJyA6ICdfJylcbiAgICAucmVwbGFjZSgvPSskL20sICcnKTtcbmNvbnN0IF90aWR5QjY0ID0gKHMpID0+IHMucmVwbGFjZSgvW15BLVphLXowLTlcXCtcXC9dL2csICcnKTtcbi8qKlxuICogcG9seWZpbGwgdmVyc2lvbiBvZiBgYnRvYWBcbiAqL1xuY29uc3QgYnRvYVBvbHlmaWxsID0gKGJpbikgPT4ge1xuICAgIC8vIGNvbnNvbGUubG9nKCdwb2x5ZmlsbGVkJyk7XG4gICAgbGV0IHUzMiwgYzAsIGMxLCBjMiwgYXNjID0gJyc7XG4gICAgY29uc3QgcGFkID0gYmluLmxlbmd0aCAlIDM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW4ubGVuZ3RoOykge1xuICAgICAgICBpZiAoKGMwID0gYmluLmNoYXJDb2RlQXQoaSsrKSkgPiAyNTUgfHxcbiAgICAgICAgICAgIChjMSA9IGJpbi5jaGFyQ29kZUF0KGkrKykpID4gMjU1IHx8XG4gICAgICAgICAgICAoYzIgPSBiaW4uY2hhckNvZGVBdChpKyspKSA+IDI1NSlcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgY2hhcmFjdGVyIGZvdW5kJyk7XG4gICAgICAgIHUzMiA9IChjMCA8PCAxNikgfCAoYzEgPDwgOCkgfCBjMjtcbiAgICAgICAgYXNjICs9IGI2NGNoc1t1MzIgPj4gMTggJiA2M11cbiAgICAgICAgICAgICsgYjY0Y2hzW3UzMiA+PiAxMiAmIDYzXVxuICAgICAgICAgICAgKyBiNjRjaHNbdTMyID4+IDYgJiA2M11cbiAgICAgICAgICAgICsgYjY0Y2hzW3UzMiAmIDYzXTtcbiAgICB9XG4gICAgcmV0dXJuIHBhZCA/IGFzYy5zbGljZSgwLCBwYWQgLSAzKSArIFwiPT09XCIuc3Vic3RyaW5nKHBhZCkgOiBhc2M7XG59O1xuLyoqXG4gKiBkb2VzIHdoYXQgYHdpbmRvdy5idG9hYCBvZiB3ZWIgYnJvd3NlcnMgZG8uXG4gKiBAcGFyYW0ge1N0cmluZ30gYmluIGJpbmFyeSBzdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEJhc2U2NC1lbmNvZGVkIHN0cmluZ1xuICovXG5jb25zdCBfYnRvYSA9IF9oYXNidG9hID8gKGJpbikgPT4gYnRvYShiaW4pXG4gICAgOiBfaGFzQnVmZmVyID8gKGJpbikgPT4gQnVmZmVyLmZyb20oYmluLCAnYmluYXJ5JykudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAgICAgIDogYnRvYVBvbHlmaWxsO1xuY29uc3QgX2Zyb21VaW50OEFycmF5ID0gX2hhc0J1ZmZlclxuICAgID8gKHU4YSkgPT4gQnVmZmVyLmZyb20odThhKS50b1N0cmluZygnYmFzZTY0JylcbiAgICA6ICh1OGEpID0+IHtcbiAgICAgICAgLy8gY2YuIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEyNzEwMDAxL2hvdy10by1jb252ZXJ0LXVpbnQ4LWFycmF5LXRvLWJhc2U2NC1lbmNvZGVkLXN0cmluZy8xMjcxMzMyNiMxMjcxMzMyNlxuICAgICAgICBjb25zdCBtYXhhcmdzID0gMHgxMDAwO1xuICAgICAgICBsZXQgc3RycyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHU4YS5sZW5ndGg7IGkgPCBsOyBpICs9IG1heGFyZ3MpIHtcbiAgICAgICAgICAgIHN0cnMucHVzaChfZnJvbUNDLmFwcGx5KG51bGwsIHU4YS5zdWJhcnJheShpLCBpICsgbWF4YXJncykpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX2J0b2Eoc3Rycy5qb2luKCcnKSk7XG4gICAgfTtcbi8qKlxuICogY29udmVydHMgYSBVaW50OEFycmF5IHRvIGEgQmFzZTY0IHN0cmluZy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VybHNhZmVdIFVSTC1hbmQtZmlsZW5hbWUtc2FmZSBhIGxhIFJGQzQ2NDggXHUwMEE3NVxuICogQHJldHVybnMge3N0cmluZ30gQmFzZTY0IHN0cmluZ1xuICovXG5jb25zdCBmcm9tVWludDhBcnJheSA9ICh1OGEsIHVybHNhZmUgPSBmYWxzZSkgPT4gdXJsc2FmZSA/IF9ta1VyaVNhZmUoX2Zyb21VaW50OEFycmF5KHU4YSkpIDogX2Zyb21VaW50OEFycmF5KHU4YSk7XG4vLyBUaGlzIHRyaWNrIGlzIGZvdW5kIGJyb2tlbiBodHRwczovL2dpdGh1Yi5jb20vZGFua29nYWkvanMtYmFzZTY0L2lzc3Vlcy8xMzBcbi8vIGNvbnN0IHV0b2IgPSAoc3JjOiBzdHJpbmcpID0+IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzcmMpKTtcbi8vIHJldmVydGluZyBnb29kIG9sZCBmYXRpb25lZCByZWdleHBcbmNvbnN0IGNiX3V0b2IgPSAoYykgPT4ge1xuICAgIGlmIChjLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgdmFyIGNjID0gYy5jaGFyQ29kZUF0KDApO1xuICAgICAgICByZXR1cm4gY2MgPCAweDgwID8gY1xuICAgICAgICAgICAgOiBjYyA8IDB4ODAwID8gKF9mcm9tQ0MoMHhjMCB8IChjYyA+Pj4gNikpXG4gICAgICAgICAgICAgICAgKyBfZnJvbUNDKDB4ODAgfCAoY2MgJiAweDNmKSkpXG4gICAgICAgICAgICAgICAgOiAoX2Zyb21DQygweGUwIHwgKChjYyA+Pj4gMTIpICYgMHgwZikpXG4gICAgICAgICAgICAgICAgICAgICsgX2Zyb21DQygweDgwIHwgKChjYyA+Pj4gNikgJiAweDNmKSlcbiAgICAgICAgICAgICAgICAgICAgKyBfZnJvbUNDKDB4ODAgfCAoY2MgJiAweDNmKSkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGNjID0gMHgxMDAwMFxuICAgICAgICAgICAgKyAoYy5jaGFyQ29kZUF0KDApIC0gMHhEODAwKSAqIDB4NDAwXG4gICAgICAgICAgICArIChjLmNoYXJDb2RlQXQoMSkgLSAweERDMDApO1xuICAgICAgICByZXR1cm4gKF9mcm9tQ0MoMHhmMCB8ICgoY2MgPj4+IDE4KSAmIDB4MDcpKVxuICAgICAgICAgICAgKyBfZnJvbUNDKDB4ODAgfCAoKGNjID4+PiAxMikgJiAweDNmKSlcbiAgICAgICAgICAgICsgX2Zyb21DQygweDgwIHwgKChjYyA+Pj4gNikgJiAweDNmKSlcbiAgICAgICAgICAgICsgX2Zyb21DQygweDgwIHwgKGNjICYgMHgzZikpKTtcbiAgICB9XG59O1xuY29uc3QgcmVfdXRvYiA9IC9bXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZGXXxbXlxceDAwLVxceDdGXS9nO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBzaG91bGQgaGF2ZSBiZWVuIGludGVybmFsIHVzZSBvbmx5LlxuICogQHBhcmFtIHtzdHJpbmd9IHNyYyBVVEYtOCBzdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFVURi0xNiBzdHJpbmdcbiAqL1xuY29uc3QgdXRvYiA9ICh1KSA9PiB1LnJlcGxhY2UocmVfdXRvYiwgY2JfdXRvYik7XG4vL1xuY29uc3QgX2VuY29kZSA9IF9oYXNCdWZmZXJcbiAgICA/IChzKSA9PiBCdWZmZXIuZnJvbShzLCAndXRmOCcpLnRvU3RyaW5nKCdiYXNlNjQnKVxuICAgIDogX1RFXG4gICAgICAgID8gKHMpID0+IF9mcm9tVWludDhBcnJheShfVEUuZW5jb2RlKHMpKVxuICAgICAgICA6IChzKSA9PiBfYnRvYSh1dG9iKHMpKTtcbi8qKlxuICogY29udmVydHMgYSBVVEYtOC1lbmNvZGVkIHN0cmluZyB0byBhIEJhc2U2NCBzdHJpbmcuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFt1cmxzYWZlXSBpZiBgdHJ1ZWAgbWFrZSB0aGUgcmVzdWx0IFVSTC1zYWZlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBCYXNlNjQgc3RyaW5nXG4gKi9cbmNvbnN0IGVuY29kZSA9IChzcmMsIHVybHNhZmUgPSBmYWxzZSkgPT4gdXJsc2FmZVxuICAgID8gX21rVXJpU2FmZShfZW5jb2RlKHNyYykpXG4gICAgOiBfZW5jb2RlKHNyYyk7XG4vKipcbiAqIGNvbnZlcnRzIGEgVVRGLTgtZW5jb2RlZCBzdHJpbmcgdG8gVVJMLXNhZmUgQmFzZTY0IFJGQzQ2NDggXHUwMEE3NS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEJhc2U2NCBzdHJpbmdcbiAqL1xuY29uc3QgZW5jb2RlVVJJID0gKHNyYykgPT4gZW5jb2RlKHNyYywgdHJ1ZSk7XG4vLyBUaGlzIHRyaWNrIGlzIGZvdW5kIGJyb2tlbiBodHRwczovL2dpdGh1Yi5jb20vZGFua29nYWkvanMtYmFzZTY0L2lzc3Vlcy8xMzBcbi8vIGNvbnN0IGJ0b3UgPSAoc3JjOiBzdHJpbmcpID0+IGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoc3JjKSk7XG4vLyByZXZlcnRpbmcgZ29vZCBvbGQgZmF0aW9uZWQgcmVnZXhwXG5jb25zdCByZV9idG91ID0gL1tcXHhDMC1cXHhERl1bXFx4ODAtXFx4QkZdfFtcXHhFMC1cXHhFRl1bXFx4ODAtXFx4QkZdezJ9fFtcXHhGMC1cXHhGN11bXFx4ODAtXFx4QkZdezN9L2c7XG5jb25zdCBjYl9idG91ID0gKGNjY2MpID0+IHtcbiAgICBzd2l0Y2ggKGNjY2MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHZhciBjcCA9ICgoMHgwNyAmIGNjY2MuY2hhckNvZGVBdCgwKSkgPDwgMTgpXG4gICAgICAgICAgICAgICAgfCAoKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMSkpIDw8IDEyKVxuICAgICAgICAgICAgICAgIHwgKCgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDIpKSA8PCA2KVxuICAgICAgICAgICAgICAgIHwgKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMykpLCBvZmZzZXQgPSBjcCAtIDB4MTAwMDA7XG4gICAgICAgICAgICByZXR1cm4gKF9mcm9tQ0MoKG9mZnNldCA+Pj4gMTApICsgMHhEODAwKVxuICAgICAgICAgICAgICAgICsgX2Zyb21DQygob2Zmc2V0ICYgMHgzRkYpICsgMHhEQzAwKSk7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHJldHVybiBfZnJvbUNDKCgoMHgwZiAmIGNjY2MuY2hhckNvZGVBdCgwKSkgPDwgMTIpXG4gICAgICAgICAgICAgICAgfCAoKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMSkpIDw8IDYpXG4gICAgICAgICAgICAgICAgfCAoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgyKSkpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIF9mcm9tQ0MoKCgweDFmICYgY2NjYy5jaGFyQ29kZUF0KDApKSA8PCA2KVxuICAgICAgICAgICAgICAgIHwgKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMSkpKTtcbiAgICB9XG59O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBzaG91bGQgaGF2ZSBiZWVuIGludGVybmFsIHVzZSBvbmx5LlxuICogQHBhcmFtIHtzdHJpbmd9IHNyYyBVVEYtMTYgc3RyaW5nXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBVVEYtOCBzdHJpbmdcbiAqL1xuY29uc3QgYnRvdSA9IChiKSA9PiBiLnJlcGxhY2UocmVfYnRvdSwgY2JfYnRvdSk7XG4vKipcbiAqIHBvbHlmaWxsIHZlcnNpb24gb2YgYGF0b2JgXG4gKi9cbmNvbnN0IGF0b2JQb2x5ZmlsbCA9IChhc2MpID0+IHtcbiAgICAvLyBjb25zb2xlLmxvZygncG9seWZpbGxlZCcpO1xuICAgIGFzYyA9IGFzYy5yZXBsYWNlKC9cXHMrL2csICcnKTtcbiAgICBpZiAoIWI2NHJlLnRlc3QoYXNjKSlcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWFsZm9ybWVkIGJhc2U2NC4nKTtcbiAgICBhc2MgKz0gJz09Jy5zbGljZSgyIC0gKGFzYy5sZW5ndGggJiAzKSk7XG4gICAgbGV0IHUyNCwgYmluID0gJycsIHIxLCByMjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFzYy5sZW5ndGg7KSB7XG4gICAgICAgIHUyNCA9IGI2NHRhYlthc2MuY2hhckF0KGkrKyldIDw8IDE4XG4gICAgICAgICAgICB8IGI2NHRhYlthc2MuY2hhckF0KGkrKyldIDw8IDEyXG4gICAgICAgICAgICB8IChyMSA9IGI2NHRhYlthc2MuY2hhckF0KGkrKyldKSA8PCA2XG4gICAgICAgICAgICB8IChyMiA9IGI2NHRhYlthc2MuY2hhckF0KGkrKyldKTtcbiAgICAgICAgYmluICs9IHIxID09PSA2NCA/IF9mcm9tQ0ModTI0ID4+IDE2ICYgMjU1KVxuICAgICAgICAgICAgOiByMiA9PT0gNjQgPyBfZnJvbUNDKHUyNCA+PiAxNiAmIDI1NSwgdTI0ID4+IDggJiAyNTUpXG4gICAgICAgICAgICAgICAgOiBfZnJvbUNDKHUyNCA+PiAxNiAmIDI1NSwgdTI0ID4+IDggJiAyNTUsIHUyNCAmIDI1NSk7XG4gICAgfVxuICAgIHJldHVybiBiaW47XG59O1xuLyoqXG4gKiBkb2VzIHdoYXQgYHdpbmRvdy5hdG9iYCBvZiB3ZWIgYnJvd3NlcnMgZG8uXG4gKiBAcGFyYW0ge1N0cmluZ30gYXNjIEJhc2U2NC1lbmNvZGVkIHN0cmluZ1xuICogQHJldHVybnMge3N0cmluZ30gYmluYXJ5IHN0cmluZ1xuICovXG5jb25zdCBfYXRvYiA9IF9oYXNhdG9iID8gKGFzYykgPT4gYXRvYihfdGlkeUI2NChhc2MpKVxuICAgIDogX2hhc0J1ZmZlciA/IChhc2MpID0+IEJ1ZmZlci5mcm9tKGFzYywgJ2Jhc2U2NCcpLnRvU3RyaW5nKCdiaW5hcnknKVxuICAgICAgICA6IGF0b2JQb2x5ZmlsbDtcbi8vXG5jb25zdCBfdG9VaW50OEFycmF5ID0gX2hhc0J1ZmZlclxuICAgID8gKGEpID0+IF9VOEFmcm9tKEJ1ZmZlci5mcm9tKGEsICdiYXNlNjQnKSlcbiAgICA6IChhKSA9PiBfVThBZnJvbShfYXRvYihhKSwgYyA9PiBjLmNoYXJDb2RlQXQoMCkpO1xuLyoqXG4gKiBjb252ZXJ0cyBhIEJhc2U2NCBzdHJpbmcgdG8gYSBVaW50OEFycmF5LlxuICovXG5jb25zdCB0b1VpbnQ4QXJyYXkgPSAoYSkgPT4gX3RvVWludDhBcnJheShfdW5VUkkoYSkpO1xuLy9cbmNvbnN0IF9kZWNvZGUgPSBfaGFzQnVmZmVyXG4gICAgPyAoYSkgPT4gQnVmZmVyLmZyb20oYSwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCd1dGY4JylcbiAgICA6IF9URFxuICAgICAgICA/IChhKSA9PiBfVEQuZGVjb2RlKF90b1VpbnQ4QXJyYXkoYSkpXG4gICAgICAgIDogKGEpID0+IGJ0b3UoX2F0b2IoYSkpO1xuY29uc3QgX3VuVVJJID0gKGEpID0+IF90aWR5QjY0KGEucmVwbGFjZSgvWy1fXS9nLCAobTApID0+IG0wID09ICctJyA/ICcrJyA6ICcvJykpO1xuLyoqXG4gKiBjb252ZXJ0cyBhIEJhc2U2NCBzdHJpbmcgdG8gYSBVVEYtOCBzdHJpbmcuXG4gKiBAcGFyYW0ge1N0cmluZ30gc3JjIEJhc2U2NCBzdHJpbmcuICBCb3RoIG5vcm1hbCBhbmQgVVJMLXNhZmUgYXJlIHN1cHBvcnRlZFxuICogQHJldHVybnMge3N0cmluZ30gVVRGLTggc3RyaW5nXG4gKi9cbmNvbnN0IGRlY29kZSA9IChzcmMpID0+IF9kZWNvZGUoX3VuVVJJKHNyYykpO1xuLyoqXG4gKiBjaGVjayBpZiBhIHZhbHVlIGlzIGEgdmFsaWQgQmFzZTY0IHN0cmluZ1xuICogQHBhcmFtIHtTdHJpbmd9IHNyYyBhIHZhbHVlIHRvIGNoZWNrXG4gICovXG5jb25zdCBpc1ZhbGlkID0gKHNyYykgPT4ge1xuICAgIGlmICh0eXBlb2Ygc3JjICE9PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IHMgPSBzcmMucmVwbGFjZSgvXFxzKy9nLCAnJykucmVwbGFjZSgvPSskLywgJycpO1xuICAgIHJldHVybiAhL1teXFxzMC05YS16QS1aXFwrL10vLnRlc3QocykgfHwgIS9bXlxcczAtOWEtekEtWlxcLV9dLy50ZXN0KHMpO1xufTtcbi8vXG5jb25zdCBfbm9FbnVtID0gKHYpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdiwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWVcbiAgICB9O1xufTtcbi8qKlxuICogZXh0ZW5kIFN0cmluZy5wcm90b3R5cGUgd2l0aCByZWxldmFudCBtZXRob2RzXG4gKi9cbmNvbnN0IGV4dGVuZFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBfYWRkID0gKG5hbWUsIGJvZHkpID0+IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCBuYW1lLCBfbm9FbnVtKGJvZHkpKTtcbiAgICBfYWRkKCdmcm9tQmFzZTY0JywgZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlKHRoaXMpOyB9KTtcbiAgICBfYWRkKCd0b0Jhc2U2NCcsIGZ1bmN0aW9uICh1cmxzYWZlKSB7IHJldHVybiBlbmNvZGUodGhpcywgdXJsc2FmZSk7IH0pO1xuICAgIF9hZGQoJ3RvQmFzZTY0VVJJJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5jb2RlKHRoaXMsIHRydWUpOyB9KTtcbiAgICBfYWRkKCd0b0Jhc2U2NFVSTCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY29kZSh0aGlzLCB0cnVlKTsgfSk7XG4gICAgX2FkZCgndG9VaW50OEFycmF5JywgZnVuY3Rpb24gKCkgeyByZXR1cm4gdG9VaW50OEFycmF5KHRoaXMpOyB9KTtcbn07XG4vKipcbiAqIGV4dGVuZCBVaW50OEFycmF5LnByb3RvdHlwZSB3aXRoIHJlbGV2YW50IG1ldGhvZHNcbiAqL1xuY29uc3QgZXh0ZW5kVWludDhBcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBfYWRkID0gKG5hbWUsIGJvZHkpID0+IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShVaW50OEFycmF5LnByb3RvdHlwZSwgbmFtZSwgX25vRW51bShib2R5KSk7XG4gICAgX2FkZCgndG9CYXNlNjQnLCBmdW5jdGlvbiAodXJsc2FmZSkgeyByZXR1cm4gZnJvbVVpbnQ4QXJyYXkodGhpcywgdXJsc2FmZSk7IH0pO1xuICAgIF9hZGQoJ3RvQmFzZTY0VVJJJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gZnJvbVVpbnQ4QXJyYXkodGhpcywgdHJ1ZSk7IH0pO1xuICAgIF9hZGQoJ3RvQmFzZTY0VVJMJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gZnJvbVVpbnQ4QXJyYXkodGhpcywgdHJ1ZSk7IH0pO1xufTtcbi8qKlxuICogZXh0ZW5kIEJ1aWx0aW4gcHJvdG90eXBlcyB3aXRoIHJlbGV2YW50IG1ldGhvZHNcbiAqL1xuY29uc3QgZXh0ZW5kQnVpbHRpbnMgPSAoKSA9PiB7XG4gICAgZXh0ZW5kU3RyaW5nKCk7XG4gICAgZXh0ZW5kVWludDhBcnJheSgpO1xufTtcbmNvbnN0IGdCYXNlNjQgPSB7XG4gICAgdmVyc2lvbjogdmVyc2lvbixcbiAgICBWRVJTSU9OOiBWRVJTSU9OLFxuICAgIGF0b2I6IF9hdG9iLFxuICAgIGF0b2JQb2x5ZmlsbDogYXRvYlBvbHlmaWxsLFxuICAgIGJ0b2E6IF9idG9hLFxuICAgIGJ0b2FQb2x5ZmlsbDogYnRvYVBvbHlmaWxsLFxuICAgIGZyb21CYXNlNjQ6IGRlY29kZSxcbiAgICB0b0Jhc2U2NDogZW5jb2RlLFxuICAgIGVuY29kZTogZW5jb2RlLFxuICAgIGVuY29kZVVSSTogZW5jb2RlVVJJLFxuICAgIGVuY29kZVVSTDogZW5jb2RlVVJJLFxuICAgIHV0b2I6IHV0b2IsXG4gICAgYnRvdTogYnRvdSxcbiAgICBkZWNvZGU6IGRlY29kZSxcbiAgICBpc1ZhbGlkOiBpc1ZhbGlkLFxuICAgIGZyb21VaW50OEFycmF5OiBmcm9tVWludDhBcnJheSxcbiAgICB0b1VpbnQ4QXJyYXk6IHRvVWludDhBcnJheSxcbiAgICBleHRlbmRTdHJpbmc6IGV4dGVuZFN0cmluZyxcbiAgICBleHRlbmRVaW50OEFycmF5OiBleHRlbmRVaW50OEFycmF5LFxuICAgIGV4dGVuZEJ1aWx0aW5zOiBleHRlbmRCdWlsdGlucyxcbn07XG4vLyBtYWtlY2pzOkNVVCAvL1xuZXhwb3J0IHsgdmVyc2lvbiB9O1xuZXhwb3J0IHsgVkVSU0lPTiB9O1xuZXhwb3J0IHsgX2F0b2IgYXMgYXRvYiB9O1xuZXhwb3J0IHsgYXRvYlBvbHlmaWxsIH07XG5leHBvcnQgeyBfYnRvYSBhcyBidG9hIH07XG5leHBvcnQgeyBidG9hUG9seWZpbGwgfTtcbmV4cG9ydCB7IGRlY29kZSBhcyBmcm9tQmFzZTY0IH07XG5leHBvcnQgeyBlbmNvZGUgYXMgdG9CYXNlNjQgfTtcbmV4cG9ydCB7IHV0b2IgfTtcbmV4cG9ydCB7IGVuY29kZSB9O1xuZXhwb3J0IHsgZW5jb2RlVVJJIH07XG5leHBvcnQgeyBlbmNvZGVVUkkgYXMgZW5jb2RlVVJMIH07XG5leHBvcnQgeyBidG91IH07XG5leHBvcnQgeyBkZWNvZGUgfTtcbmV4cG9ydCB7IGlzVmFsaWQgfTtcbmV4cG9ydCB7IGZyb21VaW50OEFycmF5IH07XG5leHBvcnQgeyB0b1VpbnQ4QXJyYXkgfTtcbmV4cG9ydCB7IGV4dGVuZFN0cmluZyB9O1xuZXhwb3J0IHsgZXh0ZW5kVWludDhBcnJheSB9O1xuZXhwb3J0IHsgZXh0ZW5kQnVpbHRpbnMgfTtcbi8vIGFuZCBmaW5hbGx5LFxuZXhwb3J0IHsgZ0Jhc2U2NCBhcyBCYXNlNjQgfTtcbiIsICIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHhtbEJlYXV0aWZpZXIgZnJvbSAneG1sLWJlYXV0aWZpZXInO1xuaW1wb3J0IHtCYXNlNjR9IGZyb20gJ2pzLWJhc2U2NCc7XG5cbmltcG9ydCB7XG4gIERhdGFJbnNwZWN0b3IsXG4gIExheW91dCxcbiAgUGFuZWwsXG4gIHN0eWxlZCxcbiAgdGhlbWUsXG4gIENvZGVCbG9jayxcbn0gZnJvbSAnZmxpcHBlci1wbHVnaW4nO1xuaW1wb3J0IHtTZWxlY3QsIFR5cG9ncmFwaHl9IGZyb20gJ2FudGQnO1xuXG5pbXBvcnQge1xuICBib2R5QXNCaW5hcnksXG4gIGJvZHlBc1N0cmluZyxcbiAgZm9ybWF0Qnl0ZXMsXG4gIGdldEhlYWRlclZhbHVlLFxuICBxdWVyeVRvT2JqLFxufSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7UmVxdWVzdCwgSGVhZGVyLCBJbnNpZ2h0cywgUmV0cnlJbnNpZ2h0c30gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge0JvZHlPcHRpb25zfSBmcm9tICcuL2luZGV4JztcbmltcG9ydCB7UHJvdG9idWZEZWZpbml0aW9uc1JlcG9zaXRvcnl9IGZyb20gJy4vUHJvdG9idWZEZWZpbml0aW9uc1JlcG9zaXRvcnknO1xuaW1wb3J0IHtLZXlWYWx1ZUl0ZW0sIEtleVZhbHVlVGFibGV9IGZyb20gJy4vS2V5VmFsdWVUYWJsZSc7XG5pbXBvcnQge0NvcHlPdXRsaW5lZH0gZnJvbSAnQGFudC1kZXNpZ24vaWNvbnMnO1xuXG5jb25zdCB7VGV4dH0gPSBUeXBvZ3JhcGh5O1xuXG50eXBlIFJlcXVlc3REZXRhaWxzUHJvcHMgPSB7XG4gIHJlcXVlc3Q6IFJlcXVlc3Q7XG4gIGJvZHlGb3JtYXQ6IHN0cmluZztcbiAgb25TZWxlY3RGb3JtYXQ6IChib2R5Rm9ybWF0OiBzdHJpbmcpID0+IHZvaWQ7XG4gIG9uQ29weVRleHQodGVzdDogc3RyaW5nKTogdm9pZDtcbn07XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXF1ZXN0RGV0YWlscyBleHRlbmRzIENvbXBvbmVudDxSZXF1ZXN0RGV0YWlsc1Byb3BzPiB7XG4gIHVybENvbHVtbnMgPSAodXJsOiBVUkwpID0+IHtcbiAgICByZXR1cm4gW1xuICAgICAge1xuICAgICAgICBrZXk6ICdGdWxsIFVSTCcsXG4gICAgICAgIHZhbHVlOiB1cmwuaHJlZixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ0hvc3QnLFxuICAgICAgICB2YWx1ZTogdXJsLmhvc3QsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdQYXRoJyxcbiAgICAgICAgdmFsdWU6IHVybC5wYXRobmFtZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ1F1ZXJ5IFN0cmluZycsXG4gICAgICAgIHZhbHVlOiB1cmwuc2VhcmNoLFxuICAgICAgfSxcbiAgICBdO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7cmVxdWVzdCwgYm9keUZvcm1hdCwgb25TZWxlY3RGb3JtYXQsIG9uQ29weVRleHR9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcblxuICAgIGNvbnN0IGZvcm1hdHRlZFRleHQgPSBib2R5Rm9ybWF0ID09ICdmb3JtYXR0ZWQnO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxQYW5lbCBrZXk9XCJyZXF1ZXN0XCIgdGl0bGU9eydSZXF1ZXN0J30+XG4gICAgICAgICAgPEtleVZhbHVlVGFibGUgaXRlbXM9e3RoaXMudXJsQ29sdW1ucyh1cmwpfSAvPlxuICAgICAgICA8L1BhbmVsPlxuXG4gICAgICAgIHt1cmwuc2VhcmNoID8gKFxuICAgICAgICAgIDxQYW5lbCB0aXRsZT17J1JlcXVlc3QgUXVlcnkgUGFyYW1ldGVycyd9PlxuICAgICAgICAgICAgPFF1ZXJ5SW5zcGVjdG9yIHF1ZXJ5UGFyYW1zPXt1cmwuc2VhcmNoUGFyYW1zfSAvPlxuICAgICAgICAgIDwvUGFuZWw+XG4gICAgICAgICkgOiBudWxsfVxuXG4gICAgICAgIHtyZXF1ZXN0LnJlcXVlc3RIZWFkZXJzLmxlbmd0aCA+IDAgPyAoXG4gICAgICAgICAgPFBhbmVsIGtleT1cImhlYWRlcnNcIiB0aXRsZT17J1JlcXVlc3QgSGVhZGVycyd9PlxuICAgICAgICAgICAgPEhlYWRlckluc3BlY3RvciBoZWFkZXJzPXtyZXF1ZXN0LnJlcXVlc3RIZWFkZXJzfSAvPlxuICAgICAgICAgIDwvUGFuZWw+XG4gICAgICAgICkgOiBudWxsfVxuXG4gICAgICAgIHtyZXF1ZXN0LnJlcXVlc3REYXRhICE9IG51bGwgPyAoXG4gICAgICAgICAgPFBhbmVsXG4gICAgICAgICAgICBrZXk9XCJyZXF1ZXN0RGF0YVwiXG4gICAgICAgICAgICB0aXRsZT17J1JlcXVlc3QgQm9keSd9XG4gICAgICAgICAgICBleHRyYUFjdGlvbnM9e1xuICAgICAgICAgICAgICB0eXBlb2YgcmVxdWVzdC5yZXF1ZXN0RGF0YSA9PT0gJ3N0cmluZycgPyAoXG4gICAgICAgICAgICAgICAgPENvcHlPdXRsaW5lZFxuICAgICAgICAgICAgICAgICAgdGl0bGU9XCJDb3B5IHJlcXVlc3QgYm9keVwiXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBvbkNvcHlUZXh0KHJlcXVlc3QucmVxdWVzdERhdGEgYXMgc3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKSA6IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhZD5cbiAgICAgICAgICAgIDxSZXF1ZXN0Qm9keUluc3BlY3RvclxuICAgICAgICAgICAgICBmb3JtYXR0ZWRUZXh0PXtmb3JtYXR0ZWRUZXh0fVxuICAgICAgICAgICAgICByZXF1ZXN0PXtyZXF1ZXN0fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L1BhbmVsPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgICAge3JlcXVlc3Quc3RhdHVzID8gKFxuICAgICAgICAgIDw+XG4gICAgICAgICAgICB7cmVxdWVzdC5yZXNwb25zZUhlYWRlcnM/Lmxlbmd0aCA/IChcbiAgICAgICAgICAgICAgPFBhbmVsXG4gICAgICAgICAgICAgICAga2V5PXsncmVzcG9uc2VoZWFkZXJzJ31cbiAgICAgICAgICAgICAgICB0aXRsZT17YFJlc3BvbnNlIEhlYWRlcnMke1xuICAgICAgICAgICAgICAgICAgcmVxdWVzdC5yZXNwb25zZUlzTW9jayA/ICcgKE1vY2tlZCknIDogJydcbiAgICAgICAgICAgICAgICB9YH0+XG4gICAgICAgICAgICAgICAgPEhlYWRlckluc3BlY3RvciBoZWFkZXJzPXtyZXF1ZXN0LnJlc3BvbnNlSGVhZGVyc30gLz5cbiAgICAgICAgICAgICAgPC9QYW5lbD5cbiAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgPFBhbmVsXG4gICAgICAgICAgICAgIGtleT17J3Jlc3BvbnNlYm9keSd9XG4gICAgICAgICAgICAgIHRpdGxlPXtgUmVzcG9uc2UgQm9keSR7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5yZXNwb25zZUlzTW9jayA/ICcgKE1vY2tlZCknIDogJydcbiAgICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICAgIGV4dHJhQWN0aW9ucz17XG4gICAgICAgICAgICAgICAgdHlwZW9mIHJlcXVlc3QucmVzcG9uc2VEYXRhID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgIHJlcXVlc3QucmVzcG9uc2VEYXRhID8gKFxuICAgICAgICAgICAgICAgICAgPENvcHlPdXRsaW5lZFxuICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIkNvcHkgcmVzcG9uc2UgYm9keVwiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICBvbkNvcHlUZXh0KHJlcXVlc3QucmVzcG9uc2VEYXRhIGFzIHN0cmluZyk7XG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICkgOiBudWxsXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcGFkPlxuICAgICAgICAgICAgICA8UmVzcG9uc2VCb2R5SW5zcGVjdG9yXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVkVGV4dD17Zm9ybWF0dGVkVGV4dH1cbiAgICAgICAgICAgICAgICByZXF1ZXN0PXtyZXF1ZXN0fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9QYW5lbD5cbiAgICAgICAgICA8Lz5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDxQYW5lbCBrZXk9XCJvcHRpb25zXCIgdGl0bGU9eydPcHRpb25zJ30gY29sbGFwc2VkIHBhZD5cbiAgICAgICAgICA8VGV4dD5Cb2R5IGZvcm1hdHRpbmc6PC9UZXh0PlxuICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgIHZhbHVlPXtib2R5Rm9ybWF0fVxuICAgICAgICAgICAgb25DaGFuZ2U9e29uU2VsZWN0Rm9ybWF0fVxuICAgICAgICAgICAgb3B0aW9ucz17Qm9keU9wdGlvbnN9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9QYW5lbD5cbiAgICAgICAge3JlcXVlc3QuaW5zaWdodHMgPyAoXG4gICAgICAgICAgPFBhbmVsIGtleT1cImluc2lnaHRzXCIgdGl0bGU9eydJbnNpZ2h0cyd9IGNvbGxhcHNlZD5cbiAgICAgICAgICAgIDxJbnNpZ2h0c0luc3BlY3RvciBpbnNpZ2h0cz17cmVxdWVzdC5pbnNpZ2h0c30gLz5cbiAgICAgICAgICA8L1BhbmVsPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvPlxuICAgICk7XG4gIH1cbn1cblxuY2xhc3MgUXVlcnlJbnNwZWN0b3IgZXh0ZW5kcyBDb21wb25lbnQ8e3F1ZXJ5UGFyYW1zOiBVUkxTZWFyY2hQYXJhbXN9PiB7XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCByb3dzOiBLZXlWYWx1ZUl0ZW1bXSA9IFtdO1xuICAgIHRoaXMucHJvcHMucXVlcnlQYXJhbXMuZm9yRWFjaCgodmFsdWU6IHN0cmluZywga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIHJvd3MucHVzaCh7XG4gICAgICAgIGtleSxcbiAgICAgICAgdmFsdWUsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcm93cy5sZW5ndGggPiAwID8gPEtleVZhbHVlVGFibGUgaXRlbXM9e3Jvd3N9IC8+IDogbnVsbDtcbiAgfVxufVxuXG50eXBlIEhlYWRlckluc3BlY3RvclByb3BzID0ge1xuICBoZWFkZXJzOiBBcnJheTxIZWFkZXI+O1xufTtcblxudHlwZSBIZWFkZXJJbnNwZWN0b3JTdGF0ZSA9IHtcbiAgY29tcHV0ZWRIZWFkZXJzOiBPYmplY3Q7XG59O1xuXG5jbGFzcyBIZWFkZXJJbnNwZWN0b3IgZXh0ZW5kcyBDb21wb25lbnQ8XG4gIEhlYWRlckluc3BlY3RvclByb3BzLFxuICBIZWFkZXJJbnNwZWN0b3JTdGF0ZVxuPiB7XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBjb21wdXRlZEhlYWRlcnM6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSB0aGlzLnByb3BzLmhlYWRlcnMucmVkdWNlKFxuICAgICAgKHN1bSwgaGVhZGVyKSA9PiB7XG4gICAgICAgIHJldHVybiBzdW0uc2V0KGhlYWRlci5rZXksIGhlYWRlci52YWx1ZSk7XG4gICAgICB9LFxuICAgICAgbmV3IE1hcCgpLFxuICAgICk7XG5cbiAgICBjb25zdCByb3dzID0gQXJyYXkuZnJvbShjb21wdXRlZEhlYWRlcnMuZW50cmllcygpKVxuICAgICAgLnNvcnQoKGEsIGIpID0+IChhWzBdIDwgYlswXSA/IC0xIDogYVswXSA9PSBiWzBdID8gMCA6IDEpKVxuICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiAoe2tleSwgdmFsdWV9KSk7XG4gICAgcmV0dXJuIHJvd3MubGVuZ3RoID4gMCA/IChcbiAgICAgIDxLZXlWYWx1ZVRhYmxlIGl0ZW1zPXt0aGlzLnByb3BzLmhlYWRlcnN9IC8+XG4gICAgKSA6IG51bGw7XG4gIH1cbn1cblxudHlwZSBCb2R5Rm9ybWF0dGVyID0ge1xuICBmb3JtYXRSZXF1ZXN0PzogKHJlcXVlc3Q6IFJlcXVlc3QpID0+IGFueTtcbiAgZm9ybWF0UmVzcG9uc2U/OiAocmVxdWVzdDogUmVxdWVzdCkgPT4gYW55O1xufTtcblxuY2xhc3MgUmVxdWVzdEJvZHlJbnNwZWN0b3IgZXh0ZW5kcyBDb21wb25lbnQ8e1xuICByZXF1ZXN0OiBSZXF1ZXN0O1xuICBmb3JtYXR0ZWRUZXh0OiBib29sZWFuO1xufT4ge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge3JlcXVlc3QsIGZvcm1hdHRlZFRleHR9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAocmVxdWVzdC5yZXF1ZXN0RGF0YSA9PSBudWxsIHx8IHJlcXVlc3QucmVxdWVzdERhdGEgPT09ICcnKSB7XG4gICAgICByZXR1cm4gPEVtcHR5IC8+O1xuICAgIH1cbiAgICBjb25zdCBib2R5Rm9ybWF0dGVycyA9IGZvcm1hdHRlZFRleHQgPyBUZXh0Qm9keUZvcm1hdHRlcnMgOiBCb2R5Rm9ybWF0dGVycztcbiAgICBmb3IgKGNvbnN0IGZvcm1hdHRlciBvZiBib2R5Rm9ybWF0dGVycykge1xuICAgICAgaWYgKGZvcm1hdHRlci5mb3JtYXRSZXF1ZXN0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gZm9ybWF0dGVyLmZvcm1hdFJlcXVlc3QocmVxdWVzdCk7XG4gICAgICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPExheW91dC5Db250YWluZXIgZ2FwPlxuICAgICAgICAgICAgICAgIHtjb21wb25lbnR9XG4gICAgICAgICAgICAgICAgPEZvcm1hdHRlZEJ5PlxuICAgICAgICAgICAgICAgICAgRm9ybWF0dGVkIGJ5IHtmb3JtYXR0ZXIuY29uc3RydWN0b3IubmFtZX1cbiAgICAgICAgICAgICAgICA8L0Zvcm1hdHRlZEJ5PlxuICAgICAgICAgICAgICA8L0xheW91dC5Db250YWluZXI+XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIGBCb2R5Rm9ybWF0dGVyIGV4Y2VwdGlvbiBmcm9tICR7Zm9ybWF0dGVyLmNvbnN0cnVjdG9yLm5hbWV9YCxcbiAgICAgICAgICAgIGUubWVzc2FnZSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZW5kZXJSYXdCb2R5KHJlcXVlc3QsICdyZXF1ZXN0Jyk7XG4gIH1cbn1cblxuY2xhc3MgUmVzcG9uc2VCb2R5SW5zcGVjdG9yIGV4dGVuZHMgQ29tcG9uZW50PHtcbiAgcmVxdWVzdDogUmVxdWVzdDtcbiAgZm9ybWF0dGVkVGV4dDogYm9vbGVhbjtcbn0+IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtyZXF1ZXN0LCBmb3JtYXR0ZWRUZXh0fSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKHJlcXVlc3QucmVzcG9uc2VEYXRhID09IG51bGwgfHwgcmVxdWVzdC5yZXNwb25zZURhdGEgPT09ICcnKSB7XG4gICAgICByZXR1cm4gPEVtcHR5IC8+O1xuICAgIH1cbiAgICBjb25zdCBib2R5Rm9ybWF0dGVycyA9IGZvcm1hdHRlZFRleHQgPyBUZXh0Qm9keUZvcm1hdHRlcnMgOiBCb2R5Rm9ybWF0dGVycztcbiAgICBmb3IgKGNvbnN0IGZvcm1hdHRlciBvZiBib2R5Rm9ybWF0dGVycykge1xuICAgICAgaWYgKGZvcm1hdHRlci5mb3JtYXRSZXNwb25zZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGZvcm1hdHRlci5mb3JtYXRSZXNwb25zZShyZXF1ZXN0KTtcbiAgICAgICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8TGF5b3V0LkNvbnRhaW5lciBnYXA+XG4gICAgICAgICAgICAgICAge2NvbXBvbmVudH1cbiAgICAgICAgICAgICAgICA8Rm9ybWF0dGVkQnk+XG4gICAgICAgICAgICAgICAgICBGb3JtYXR0ZWQgYnkge2Zvcm1hdHRlci5jb25zdHJ1Y3Rvci5uYW1lfVxuICAgICAgICAgICAgICAgIDwvRm9ybWF0dGVkQnk+XG4gICAgICAgICAgICAgIDwvTGF5b3V0LkNvbnRhaW5lcj5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgYEJvZHlGb3JtYXR0ZXIgZXhjZXB0aW9uIGZyb20gJHtmb3JtYXR0ZXIuY29uc3RydWN0b3IubmFtZX1gLFxuICAgICAgICAgICAgZS5tZXNzYWdlLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlbmRlclJhd0JvZHkocmVxdWVzdCwgJ3Jlc3BvbnNlJyk7XG4gIH1cbn1cblxuY29uc3QgRm9ybWF0dGVkQnkgPSBzdHlsZWQoVGV4dCkoe1xuICBtYXJnaW5Ub3A6IDgsXG4gIGZvbnRTaXplOiAnMC43ZW0nLFxuICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICBkaXNwbGF5OiAnYmxvY2snLFxuICBjb2xvcjogdGhlbWUuZGlzYWJsZWRDb2xvcixcbn0pO1xuXG5jb25zdCBFbXB0eSA9ICgpID0+IChcbiAgPExheW91dC5Db250YWluZXIgcGFkPlxuICAgIDxUZXh0PihlbXB0eSk8L1RleHQ+XG4gIDwvTGF5b3V0LkNvbnRhaW5lcj5cbik7XG5cbmZ1bmN0aW9uIHJlbmRlclJhd0JvZHkocmVxdWVzdDogUmVxdWVzdCwgbW9kZTogJ3JlcXVlc3QnIHwgJ3Jlc3BvbnNlJykge1xuICBjb25zdCBkYXRhID0gbW9kZSA9PT0gJ3JlcXVlc3QnID8gcmVxdWVzdC5yZXF1ZXN0RGF0YSA6IHJlcXVlc3QucmVzcG9uc2VEYXRhO1xuICByZXR1cm4gKFxuICAgIDxMYXlvdXQuQ29udGFpbmVyIGdhcD5cbiAgICAgIDxDb2RlQmxvY2s+e2JvZHlBc1N0cmluZyhkYXRhKX08L0NvZGVCbG9jaz5cbiAgICA8L0xheW91dC5Db250YWluZXI+XG4gICk7XG59XG5cbnR5cGUgSW1hZ2VXaXRoU2l6ZVByb3BzID0ge1xuICBzcmM6IHN0cmluZztcbn07XG5cbnR5cGUgSW1hZ2VXaXRoU2l6ZVN0YXRlID0ge1xuICB3aWR0aDogbnVtYmVyO1xuICBoZWlnaHQ6IG51bWJlcjtcbn07XG5cbmNsYXNzIEltYWdlV2l0aFNpemUgZXh0ZW5kcyBDb21wb25lbnQ8SW1hZ2VXaXRoU2l6ZVByb3BzLCBJbWFnZVdpdGhTaXplU3RhdGU+IHtcbiAgc3RhdGljIEltYWdlID0gc3R5bGVkLmltZyh7XG4gICAgb2JqZWN0Rml0OiAnc2NhbGUtZG93bicsXG4gICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICBtYXJnaW5Cb3R0b206IDEwLFxuICB9KTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogSW1hZ2VXaXRoU2l6ZVByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMCxcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWFnZS5zcmMgPSB0aGlzLnByb3BzLnNyYztcbiAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICBpbWFnZS53aWR0aDtcbiAgICAgIGltYWdlLmhlaWdodDtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICB3aWR0aDogaW1hZ2Uud2lkdGgsXG4gICAgICAgIGhlaWdodDogaW1hZ2UuaGVpZ2h0LFxuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPExheW91dC5Db250YWluZXIgY2VudGVyPlxuICAgICAgICA8SW1hZ2VXaXRoU2l6ZS5JbWFnZSBzcmM9e3RoaXMucHJvcHMuc3JjfSAvPlxuICAgICAgICA8VGV4dCB0eXBlPVwic2Vjb25kYXJ5XCI+XG4gICAgICAgICAge3RoaXMuc3RhdGUud2lkdGh9IHgge3RoaXMuc3RhdGUuaGVpZ2h0fVxuICAgICAgICA8L1RleHQ+XG4gICAgICA8L0xheW91dC5Db250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5jbGFzcyBJbWFnZUZvcm1hdHRlciB7XG4gIGZvcm1hdFJlc3BvbnNlKHJlcXVlc3Q6IFJlcXVlc3QpIHtcbiAgICBpZiAoXG4gICAgICBnZXRIZWFkZXJWYWx1ZShyZXF1ZXN0LnJlc3BvbnNlSGVhZGVycywgJ2NvbnRlbnQtdHlwZScpLnN0YXJ0c1dpdGgoXG4gICAgICAgICdpbWFnZS8nLFxuICAgICAgKVxuICAgICkge1xuICAgICAgaWYgKHJlcXVlc3QucmVzcG9uc2VEYXRhKSB7XG4gICAgICAgIGNvbnN0IHNyYyA9IGBkYXRhOiR7Z2V0SGVhZGVyVmFsdWUoXG4gICAgICAgICAgcmVxdWVzdC5yZXNwb25zZUhlYWRlcnMsXG4gICAgICAgICAgJ2NvbnRlbnQtdHlwZScsXG4gICAgICAgICl9O2Jhc2U2NCwke0Jhc2U2NC5mcm9tVWludDhBcnJheShcbiAgICAgICAgICAvLyBUT0RPOiBGaXggdGhpcyB0aGUgbmV4dCB0aW1lIHRoZSBmaWxlIGlzIGVkaXRlZC5cbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgIGJvZHlBc0JpbmFyeShyZXF1ZXN0LnJlc3BvbnNlRGF0YSkhLFxuICAgICAgICApfWA7XG4gICAgICAgIHJldHVybiA8SW1hZ2VXaXRoU2l6ZSBzcmM9e3NyY30gLz47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBmYWxsYmFjayB0byB1c2luZyB0aGUgcmVxdWVzdCB1cmxcbiAgICAgICAgcmV0dXJuIDxJbWFnZVdpdGhTaXplIHNyYz17cmVxdWVzdC51cmx9IC8+O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBWaWRlb0Zvcm1hdHRlciB7XG4gIHN0YXRpYyBWaWRlbyA9IHN0eWxlZC52aWRlbyh7XG4gICAgbWF4V2lkdGg6IDUwMCxcbiAgICBtYXhIZWlnaHQ6IDUwMCxcbiAgfSk7XG5cbiAgZm9ybWF0UmVzcG9uc2UgPSAocmVxdWVzdDogUmVxdWVzdCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gZ2V0SGVhZGVyVmFsdWUocmVxdWVzdC5yZXNwb25zZUhlYWRlcnMsICdjb250ZW50LXR5cGUnKTtcbiAgICBpZiAoY29udGVudFR5cGUuc3RhcnRzV2l0aCgndmlkZW8vJykpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxMYXlvdXQuQ29udGFpbmVyIGNlbnRlcj5cbiAgICAgICAgICA8VmlkZW9Gb3JtYXR0ZXIuVmlkZW8gY29udHJvbHM+XG4gICAgICAgICAgICA8c291cmNlIHNyYz17cmVxdWVzdC51cmx9IHR5cGU9e2NvbnRlbnRUeXBlfSAvPlxuICAgICAgICAgIDwvVmlkZW9Gb3JtYXR0ZXIuVmlkZW8+XG4gICAgICAgIDwvTGF5b3V0LkNvbnRhaW5lcj5cbiAgICAgICk7XG4gICAgfVxuICB9O1xufVxuXG5jbGFzcyBKU09OVGV4dCBleHRlbmRzIENvbXBvbmVudDx7Y2hpbGRyZW46IGFueX0+IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGpzb25PYmplY3QgPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIHJldHVybiAoXG4gICAgICA8Q29kZUJsb2NrPlxuICAgICAgICB7SlNPTi5zdHJpbmdpZnkoanNvbk9iamVjdCwgbnVsbCwgMil9XG4gICAgICAgIHsnXFxuJ31cbiAgICAgIDwvQ29kZUJsb2NrPlxuICAgICk7XG4gIH1cbn1cblxuY2xhc3MgWE1MVGV4dCBleHRlbmRzIENvbXBvbmVudDx7Ym9keTogYW55fT4ge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeG1sUHJldHR5ID0geG1sQmVhdXRpZmllcih0aGlzLnByb3BzLmJvZHkpO1xuICAgIHJldHVybiAoXG4gICAgICA8Q29kZUJsb2NrPlxuICAgICAgICB7eG1sUHJldHR5fVxuICAgICAgICB7J1xcbid9XG4gICAgICA8L0NvZGVCbG9jaz5cbiAgICApO1xuICB9XG59XG5cbmNsYXNzIEpTT05UZXh0Rm9ybWF0dGVyIHtcbiAgZm9ybWF0UmVxdWVzdChyZXF1ZXN0OiBSZXF1ZXN0KSB7XG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0KFxuICAgICAgYm9keUFzU3RyaW5nKHJlcXVlc3QucmVxdWVzdERhdGEpLFxuICAgICAgZ2V0SGVhZGVyVmFsdWUocmVxdWVzdC5yZXF1ZXN0SGVhZGVycywgJ2NvbnRlbnQtdHlwZScpLFxuICAgICk7XG4gIH1cblxuICBmb3JtYXRSZXNwb25zZShyZXF1ZXN0OiBSZXF1ZXN0KSB7XG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0KFxuICAgICAgYm9keUFzU3RyaW5nKHJlcXVlc3QucmVzcG9uc2VEYXRhKSxcbiAgICAgIGdldEhlYWRlclZhbHVlKHJlcXVlc3QucmVzcG9uc2VIZWFkZXJzLCAnY29udGVudC10eXBlJyksXG4gICAgKTtcbiAgfVxuXG4gIGZvcm1hdChib2R5OiBzdHJpbmcsIGNvbnRlbnRUeXBlOiBzdHJpbmcpIHtcbiAgICBpZiAoXG4gICAgICBjb250ZW50VHlwZS5zdGFydHNXaXRoKCdhcHBsaWNhdGlvbi9qc29uJykgfHxcbiAgICAgIGNvbnRlbnRUeXBlLnN0YXJ0c1dpdGgoJ2FwcGxpY2F0aW9uL2hhbCtqc29uJykgfHxcbiAgICAgIGNvbnRlbnRUeXBlLnN0YXJ0c1dpdGgoJ3RleHQvamF2YXNjcmlwdCcpIHx8XG4gICAgICBjb250ZW50VHlwZS5zdGFydHNXaXRoKCdhcHBsaWNhdGlvbi94LWZiLWZsYXRidWZmZXInKVxuICAgICkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoYm9keSk7XG4gICAgICAgIHJldHVybiA8SlNPTlRleHQ+e2RhdGF9PC9KU09OVGV4dD47XG4gICAgICB9IGNhdGNoIChTeW50YXhFcnJvcikge1xuICAgICAgICAvLyBNdWx0aXBsZSB0b3AgbGV2ZWwgSlNPTiByb290cywgbWFwIHRoZW0gb25lIGJ5IG9uZVxuICAgICAgICByZXR1cm4gYm9keVxuICAgICAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgICAgICAubWFwKChqc29uKSA9PiBKU09OLnBhcnNlKGpzb24pKVxuICAgICAgICAgIC5tYXAoKGRhdGEsIGlkeCkgPT4gPEpTT05UZXh0IGtleT17aWR4fT57ZGF0YX08L0pTT05UZXh0Pik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmNsYXNzIFhNTFRleHRGb3JtYXR0ZXIge1xuICBmb3JtYXRSZXF1ZXN0KHJlcXVlc3Q6IFJlcXVlc3QpIHtcbiAgICByZXR1cm4gdGhpcy5mb3JtYXQoXG4gICAgICBib2R5QXNTdHJpbmcocmVxdWVzdC5yZXF1ZXN0RGF0YSksXG4gICAgICBnZXRIZWFkZXJWYWx1ZShyZXF1ZXN0LnJlcXVlc3RIZWFkZXJzLCAnY29udGVudC10eXBlJyksXG4gICAgKTtcbiAgfVxuXG4gIGZvcm1hdFJlc3BvbnNlKHJlcXVlc3Q6IFJlcXVlc3QpIHtcbiAgICByZXR1cm4gdGhpcy5mb3JtYXQoXG4gICAgICBib2R5QXNTdHJpbmcocmVxdWVzdC5yZXNwb25zZURhdGEpLFxuICAgICAgZ2V0SGVhZGVyVmFsdWUocmVxdWVzdC5yZXNwb25zZUhlYWRlcnMsICdjb250ZW50LXR5cGUnKSxcbiAgICApO1xuICB9XG5cbiAgZm9ybWF0KGJvZHk6IHN0cmluZywgY29udGVudFR5cGU6IHN0cmluZykge1xuICAgIGlmIChcbiAgICAgIGNvbnRlbnRUeXBlLnN0YXJ0c1dpdGgoJ3RleHQvaHRtbCcpIHx8XG4gICAgICBjb250ZW50VHlwZS5zdGFydHNXaXRoKCd0ZXh0L3htbCcpIHx8XG4gICAgICBjb250ZW50VHlwZS5zdGFydHNXaXRoKCdhcHBsaWNhdGlvbi94bWwnKVxuICAgICkge1xuICAgICAgcmV0dXJuIDxYTUxUZXh0IGJvZHk9e2JvZHl9IC8+O1xuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBKU09ORm9ybWF0dGVyIHtcbiAgZm9ybWF0UmVxdWVzdChyZXF1ZXN0OiBSZXF1ZXN0KSB7XG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0KFxuICAgICAgYm9keUFzU3RyaW5nKHJlcXVlc3QucmVxdWVzdERhdGEpLFxuICAgICAgZ2V0SGVhZGVyVmFsdWUocmVxdWVzdC5yZXF1ZXN0SGVhZGVycywgJ2NvbnRlbnQtdHlwZScpLFxuICAgICk7XG4gIH1cblxuICBmb3JtYXRSZXNwb25zZShyZXF1ZXN0OiBSZXF1ZXN0KSB7XG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0KFxuICAgICAgYm9keUFzU3RyaW5nKHJlcXVlc3QucmVzcG9uc2VEYXRhKSxcbiAgICAgIGdldEhlYWRlclZhbHVlKHJlcXVlc3QucmVzcG9uc2VIZWFkZXJzLCAnY29udGVudC10eXBlJyksXG4gICAgKTtcbiAgfVxuXG4gIGZvcm1hdChib2R5OiBzdHJpbmcsIGNvbnRlbnRUeXBlOiBzdHJpbmcpIHtcbiAgICBpZiAoXG4gICAgICBjb250ZW50VHlwZS5zdGFydHNXaXRoKCdhcHBsaWNhdGlvbi9qc29uJykgfHxcbiAgICAgIGNvbnRlbnRUeXBlLnN0YXJ0c1dpdGgoJ2FwcGxpY2F0aW9uL2hhbCtqc29uJykgfHxcbiAgICAgIGNvbnRlbnRUeXBlLnN0YXJ0c1dpdGgoJ3RleHQvamF2YXNjcmlwdCcpIHx8XG4gICAgICBjb250ZW50VHlwZS5zdGFydHNXaXRoKCdhcHBsaWNhdGlvbi94LWZiLWZsYXRidWZmZXInKVxuICAgICkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoYm9keSk7XG4gICAgICAgIHJldHVybiA8RGF0YUluc3BlY3RvciBjb2xsYXBzZWQgZXhwYW5kUm9vdCBkYXRhPXtkYXRhfSAvPjtcbiAgICAgIH0gY2F0Y2ggKFN5bnRheEVycm9yKSB7XG4gICAgICAgIC8vIE11bHRpcGxlIHRvcCBsZXZlbCBKU09OIHJvb3RzLCBtYXAgdGhlbSBvbmUgYnkgb25lXG4gICAgICAgIGNvbnN0IHJvb3RzID0gYm9keS5zcGxpdCgnXFxuJyk7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPERhdGFJbnNwZWN0b3JcbiAgICAgICAgICAgIGNvbGxhcHNlZFxuICAgICAgICAgICAgZXhwYW5kUm9vdFxuICAgICAgICAgICAgZGF0YT17cm9vdHMubWFwKChqc29uKSA9PiBKU09OLnBhcnNlKGpzb24pKX1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBMb2dFdmVudEZvcm1hdHRlciB7XG4gIGZvcm1hdFJlcXVlc3QocmVxdWVzdDogUmVxdWVzdCkge1xuICAgIGlmIChyZXF1ZXN0LnVybC5pbmRleE9mKCdsb2dnaW5nX2NsaWVudF9ldmVudCcpID4gMCkge1xuICAgICAgY29uc3QgZGF0YSA9IHF1ZXJ5VG9PYmooYm9keUFzU3RyaW5nKHJlcXVlc3QucmVxdWVzdERhdGEpKTtcbiAgICAgIGlmICh0eXBlb2YgZGF0YS5tZXNzYWdlID09PSAnc3RyaW5nJykge1xuICAgICAgICBkYXRhLm1lc3NhZ2UgPSBKU09OLnBhcnNlKGRhdGEubWVzc2FnZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gPERhdGFJbnNwZWN0b3IgZXhwYW5kUm9vdCBkYXRhPXtkYXRhfSAvPjtcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgR3JhcGhRTEJhdGNoRm9ybWF0dGVyIHtcbiAgZm9ybWF0UmVxdWVzdChyZXF1ZXN0OiBSZXF1ZXN0KSB7XG4gICAgaWYgKHJlcXVlc3QudXJsLmluZGV4T2YoJ2dyYXBocWxiYXRjaCcpID4gMCkge1xuICAgICAgY29uc3QgZGF0YSA9IHF1ZXJ5VG9PYmooYm9keUFzU3RyaW5nKHJlcXVlc3QucmVxdWVzdERhdGEpKTtcbiAgICAgIGlmICh0eXBlb2YgZGF0YS5xdWVyaWVzID09PSAnc3RyaW5nJykge1xuICAgICAgICBkYXRhLnF1ZXJpZXMgPSBKU09OLnBhcnNlKGRhdGEucXVlcmllcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gPERhdGFJbnNwZWN0b3IgZXhwYW5kUm9vdCBkYXRhPXtkYXRhfSAvPjtcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgR3JhcGhRTEZvcm1hdHRlciB7XG4gIHBhcnNlZFNlcnZlclRpbWVGb3JGaXJzdEZsdXNoKGRhdGE6IGFueSkge1xuICAgIGNvbnN0IGZpcnN0UmVzcG9uc2UgPVxuICAgICAgQXJyYXkuaXNBcnJheShkYXRhKSAmJiBkYXRhLmxlbmd0aCA+IDAgPyBkYXRhWzBdIDogZGF0YTtcbiAgICBpZiAoIWZpcnN0UmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGV4dGVuc2lvbnMgPSBmaXJzdFJlc3BvbnNlWydleHRlbnNpb25zJ107XG4gICAgaWYgKCFleHRlbnNpb25zKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3Qgc2VydmVyTWV0YWRhdGEgPSBleHRlbnNpb25zWydzZXJ2ZXJfbWV0YWRhdGEnXTtcbiAgICBpZiAoIXNlcnZlck1ldGFkYXRhKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgcmVxdWVzdFN0YXJ0TXMgPSBzZXJ2ZXJNZXRhZGF0YVsncmVxdWVzdF9zdGFydF90aW1lX21zJ107XG4gICAgY29uc3QgdGltZUF0Rmx1c2hNcyA9IHNlcnZlck1ldGFkYXRhWyd0aW1lX2F0X2ZsdXNoX21zJ107XG4gICAgcmV0dXJuIChcbiAgICAgIDxUZXh0IHR5cGU9XCJzZWNvbmRhcnlcIj5cbiAgICAgICAge2BTZXJ2ZXIgd2FsbCB0aW1lIGZvciBpbml0aWFsIHJlc3BvbnNlIChtcyk6ICR7XG4gICAgICAgICAgdGltZUF0Rmx1c2hNcyAtIHJlcXVlc3RTdGFydE1zXG4gICAgICAgIH1gfVxuICAgICAgPC9UZXh0PlxuICAgICk7XG4gIH1cbiAgZm9ybWF0UmVxdWVzdChyZXF1ZXN0OiBSZXF1ZXN0KSB7XG4gICAgaWYgKHJlcXVlc3QudXJsLmluZGV4T2YoJ2dyYXBocWwnKSA+IDApIHtcbiAgICAgIGNvbnN0IGRlY29kZWQgPSByZXF1ZXN0LnJlcXVlc3REYXRhO1xuICAgICAgaWYgKCFkZWNvZGVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBjb25zdCBkYXRhID0gcXVlcnlUb09iaihib2R5QXNTdHJpbmcoZGVjb2RlZCkpO1xuICAgICAgaWYgKHR5cGVvZiBkYXRhLnZhcmlhYmxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZGF0YS52YXJpYWJsZXMgPSBKU09OLnBhcnNlKGRhdGEudmFyaWFibGVzKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgZGF0YS5xdWVyeV9wYXJhbXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGRhdGEucXVlcnlfcGFyYW1zID0gSlNPTi5wYXJzZShkYXRhLnF1ZXJ5X3BhcmFtcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gPERhdGFJbnNwZWN0b3IgZXhwYW5kUm9vdCBkYXRhPXtkYXRhfSAvPjtcbiAgICB9XG4gIH1cblxuICBmb3JtYXRSZXNwb25zZShyZXF1ZXN0OiBSZXF1ZXN0KSB7XG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0KFxuICAgICAgLy8gVE9ETzogRml4IHRoaXMgdGhlIG5leHQgdGltZSB0aGUgZmlsZSBpcyBlZGl0ZWQuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgYm9keUFzU3RyaW5nKHJlcXVlc3QucmVzcG9uc2VEYXRhISksXG4gICAgICBnZXRIZWFkZXJWYWx1ZShyZXF1ZXN0LnJlc3BvbnNlSGVhZGVycywgJ2NvbnRlbnQtdHlwZScpLFxuICAgICk7XG4gIH1cblxuICBmb3JtYXQgPSAoYm9keTogc3RyaW5nLCBjb250ZW50VHlwZTogc3RyaW5nKSA9PiB7XG4gICAgaWYgKFxuICAgICAgY29udGVudFR5cGUuc3RhcnRzV2l0aCgnYXBwbGljYXRpb24vanNvbicpIHx8XG4gICAgICBjb250ZW50VHlwZS5zdGFydHNXaXRoKCdhcHBsaWNhdGlvbi9oYWwranNvbicpIHx8XG4gICAgICBjb250ZW50VHlwZS5zdGFydHNXaXRoKCd0ZXh0L2phdmFzY3JpcHQnKSB8fFxuICAgICAgY29udGVudFR5cGUuc3RhcnRzV2l0aCgndGV4dC9odG1sJykgfHxcbiAgICAgIGNvbnRlbnRUeXBlLnN0YXJ0c1dpdGgoJ2FwcGxpY2F0aW9uL3gtZmItZmxhdGJ1ZmZlcicpXG4gICAgKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShib2R5KTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAge3RoaXMucGFyc2VkU2VydmVyVGltZUZvckZpcnN0Rmx1c2goZGF0YSl9XG4gICAgICAgICAgICA8RGF0YUluc3BlY3RvciBjb2xsYXBzZWQgZXhwYW5kUm9vdCBkYXRhPXtkYXRhfSAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoU3ludGF4RXJyb3IpIHtcbiAgICAgICAgLy8gTXVsdGlwbGUgdG9wIGxldmVsIEpTT04gcm9vdHMsIG1hcCB0aGVtIG9uZSBieSBvbmVcbiAgICAgICAgY29uc3QgcGFyc2VkUmVzcG9uc2VzID0gYm9keVxuICAgICAgICAgIC5yZXBsYWNlKC99ey9nLCAnfVxcclxcbnsnKVxuICAgICAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgICAgICAuZmlsdGVyKChqc29uKSA9PiBqc29uLmxlbmd0aCA+IDApXG4gICAgICAgICAgLm1hcCgoanNvbikgPT4gSlNPTi5wYXJzZShqc29uKSk7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIHt0aGlzLnBhcnNlZFNlcnZlclRpbWVGb3JGaXJzdEZsdXNoKHBhcnNlZFJlc3BvbnNlcyl9XG4gICAgICAgICAgICA8RGF0YUluc3BlY3RvciBjb2xsYXBzZWQgZXhwYW5kUm9vdCBkYXRhPXtwYXJzZWRSZXNwb25zZXN9IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5jbGFzcyBGb3JtVXJsZW5jb2RlZEZvcm1hdHRlciB7XG4gIGZvcm1hdFJlcXVlc3QgPSAocmVxdWVzdDogUmVxdWVzdCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gZ2V0SGVhZGVyVmFsdWUocmVxdWVzdC5yZXF1ZXN0SGVhZGVycywgJ2NvbnRlbnQtdHlwZScpO1xuICAgIGlmIChjb250ZW50VHlwZS5zdGFydHNXaXRoKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKSkge1xuICAgICAgY29uc3QgZGVjb2RlZCA9IHJlcXVlc3QucmVxdWVzdERhdGE7XG4gICAgICBpZiAoIWRlY29kZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxEYXRhSW5zcGVjdG9yIGV4cGFuZFJvb3QgZGF0YT17cXVlcnlUb09iaihib2R5QXNTdHJpbmcoZGVjb2RlZCkpfSAvPlxuICAgICAgKTtcbiAgICB9XG4gIH07XG59XG5cbmNsYXNzIEJpbmFyeUZvcm1hdHRlciB7XG4gIGZvcm1hdFJlcXVlc3QocmVxdWVzdDogUmVxdWVzdCkge1xuICAgIGlmIChcbiAgICAgIGdldEhlYWRlclZhbHVlKHJlcXVlc3QucmVxdWVzdEhlYWRlcnMsICdjb250ZW50LXR5cGUnKSA9PT1cbiAgICAgICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nXG4gICAgKSB7XG4gICAgICByZXR1cm4gJyhiaW5hcnkgZGF0YSknOyAvLyB3ZSBjb3VsZCBvZmZlciBhIGRvd25sb2FkIGJ1dHRvbiBoZXJlP1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZm9ybWF0UmVzcG9uc2UocmVxdWVzdDogUmVxdWVzdCkge1xuICAgIGlmIChcbiAgICAgIGdldEhlYWRlclZhbHVlKHJlcXVlc3QucmVzcG9uc2VIZWFkZXJzLCAnY29udGVudC10eXBlJykgPT09XG4gICAgICAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJ1xuICAgICkge1xuICAgICAgcmV0dXJuICcoYmluYXJ5IGRhdGEpJzsgLy8gd2UgY291bGQgb2ZmZXIgYSBkb3dubG9hZCBidXR0b24gaGVyZT9cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5jbGFzcyBQcm90b2J1ZkZvcm1hdHRlciB7XG4gIHByaXZhdGUgcHJvdG9idWZEZWZpbml0aW9uUmVwb3NpdG9yeSA9XG4gICAgUHJvdG9idWZEZWZpbml0aW9uc1JlcG9zaXRvcnkuZ2V0SW5zdGFuY2UoKTtcblxuICBmb3JtYXRSZXF1ZXN0KHJlcXVlc3Q6IFJlcXVlc3QpIHtcbiAgICBpZiAoXG4gICAgICBnZXRIZWFkZXJWYWx1ZShyZXF1ZXN0LnJlcXVlc3RIZWFkZXJzLCAnY29udGVudC10eXBlJykgPT09XG4gICAgICAnYXBwbGljYXRpb24veC1wcm90b2J1ZidcbiAgICApIHtcbiAgICAgIGNvbnN0IHByb3RvYnVmRGVmaW5pdGlvbiA9XG4gICAgICAgIHRoaXMucHJvdG9idWZEZWZpbml0aW9uUmVwb3NpdG9yeS5nZXRSZXF1ZXN0VHlwZShcbiAgICAgICAgICByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgICByZXF1ZXN0LnVybCxcbiAgICAgICAgKTtcbiAgICAgIGlmIChwcm90b2J1ZkRlZmluaXRpb24gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPFRleHQ+XG4gICAgICAgICAgICBDb3VsZCBub3QgbG9jYXRlIHByb3RvYnVmIGRlZmluaXRpb24gZm9yIHJlcXVlc3QgYm9keSBvZnsnICd9XG4gICAgICAgICAgICB7cmVxdWVzdC51cmx9XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVxdWVzdC5yZXF1ZXN0RGF0YSkge1xuICAgICAgICBjb25zdCBkYXRhID0gcHJvdG9idWZEZWZpbml0aW9uLmRlY29kZShcbiAgICAgICAgICAvLyBUT0RPOiBGaXggdGhpcyB0aGUgbmV4dCB0aW1lIHRoZSBmaWxlIGlzIGVkaXRlZC5cbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgIGJvZHlBc0JpbmFyeShyZXF1ZXN0LnJlcXVlc3REYXRhKSEsXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiA8SlNPTlRleHQ+e2RhdGEudG9KU09OKCl9PC9KU09OVGV4dD47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxUZXh0PkNvdWxkIG5vdCBsb2NhdGUgcmVxdWVzdCBib2R5IGRhdGEgZm9yIHtyZXF1ZXN0LnVybH08L1RleHQ+XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBmb3JtYXRSZXNwb25zZShyZXF1ZXN0OiBSZXF1ZXN0KSB7XG4gICAgaWYgKFxuICAgICAgZ2V0SGVhZGVyVmFsdWUocmVxdWVzdC5yZXNwb25zZUhlYWRlcnMsICdjb250ZW50LXR5cGUnKSA9PT1cbiAgICAgICAgJ2FwcGxpY2F0aW9uL3gtcHJvdG9idWYnIHx8XG4gICAgICByZXF1ZXN0LnVybC5lbmRzV2l0aCgnLnByb3RvJylcbiAgICApIHtcbiAgICAgIGNvbnN0IHByb3RvYnVmRGVmaW5pdGlvbiA9XG4gICAgICAgIHRoaXMucHJvdG9idWZEZWZpbml0aW9uUmVwb3NpdG9yeS5nZXRSZXNwb25zZVR5cGUoXG4gICAgICAgICAgcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgcmVxdWVzdC51cmwsXG4gICAgICAgICk7XG4gICAgICBpZiAocHJvdG9idWZEZWZpbml0aW9uID09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxUZXh0PlxuICAgICAgICAgICAgQ291bGQgbm90IGxvY2F0ZSBwcm90b2J1ZiBkZWZpbml0aW9uIGZvciByZXNwb25zZSBib2R5IG9meycgJ31cbiAgICAgICAgICAgIHtyZXF1ZXN0LnVybH1cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXF1ZXN0LnJlc3BvbnNlRGF0YSkge1xuICAgICAgICBjb25zdCBkYXRhID0gcHJvdG9idWZEZWZpbml0aW9uLmRlY29kZShcbiAgICAgICAgICAvLyBUT0RPOiBGaXggdGhpcyB0aGUgbmV4dCB0aW1lIHRoZSBmaWxlIGlzIGVkaXRlZC5cbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgIGJvZHlBc0JpbmFyeShyZXF1ZXN0LnJlc3BvbnNlRGF0YSkhLFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gPEpTT05UZXh0PntkYXRhLnRvSlNPTigpfTwvSlNPTlRleHQ+O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8VGV4dD5Db3VsZCBub3QgbG9jYXRlIHJlc3BvbnNlIGJvZHkgZGF0YSBmb3Ige3JlcXVlc3QudXJsfTwvVGV4dD5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5jb25zdCBCb2R5Rm9ybWF0dGVyczogQXJyYXk8Qm9keUZvcm1hdHRlcj4gPSBbXG4gIG5ldyBJbWFnZUZvcm1hdHRlcigpLFxuICBuZXcgVmlkZW9Gb3JtYXR0ZXIoKSxcbiAgbmV3IExvZ0V2ZW50Rm9ybWF0dGVyKCksXG4gIG5ldyBHcmFwaFFMQmF0Y2hGb3JtYXR0ZXIoKSxcbiAgbmV3IEdyYXBoUUxGb3JtYXR0ZXIoKSxcbiAgbmV3IEpTT05Gb3JtYXR0ZXIoKSxcbiAgbmV3IEZvcm1VcmxlbmNvZGVkRm9ybWF0dGVyKCksXG4gIG5ldyBYTUxUZXh0Rm9ybWF0dGVyKCksXG4gIG5ldyBQcm90b2J1ZkZvcm1hdHRlcigpLFxuICBuZXcgQmluYXJ5Rm9ybWF0dGVyKCksXG5dO1xuXG5jb25zdCBUZXh0Qm9keUZvcm1hdHRlcnM6IEFycmF5PEJvZHlGb3JtYXR0ZXI+ID0gW25ldyBKU09OVGV4dEZvcm1hdHRlcigpXTtcblxuY2xhc3MgSW5zaWdodHNJbnNwZWN0b3IgZXh0ZW5kcyBDb21wb25lbnQ8e2luc2lnaHRzOiBJbnNpZ2h0c30+IHtcbiAgZm9ybWF0VGltZSh2YWx1ZTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dmFsdWV9IG1zYDtcbiAgfVxuXG4gIGZvcm1hdFNwZWVkKHZhbHVlOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHtmb3JtYXRCeXRlcyh2YWx1ZSl9L3NlY2A7XG4gIH1cblxuICBmb3JtYXRSZXRyaWVzID0gKHJldHJ5OiBSZXRyeUluc2lnaHRzKTogc3RyaW5nID0+IHtcbiAgICBjb25zdCB0aW1lc1dvcmQgPSByZXRyeS5saW1pdCA9PT0gMSA/ICd0aW1lJyA6ICd0aW1lcyc7XG5cbiAgICByZXR1cm4gYCR7dGhpcy5mb3JtYXRUaW1lKHJldHJ5LnRpbWVTcGVudCl9ICgke1xuICAgICAgcmV0cnkuY291bnRcbiAgICB9ICR7dGltZXNXb3JkfSBvdXQgb2YgJHtyZXRyeS5saW1pdH0pYDtcbiAgfTtcblxuICBidWlsZFJvdzxUPihcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgdmFsdWU6IFQgfCBudWxsIHwgdW5kZWZpbmVkLFxuICAgIGZvcm1hdHRlcjogKHZhbHVlOiBUKSA9PiBzdHJpbmcsXG4gICk6IGFueSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gICAgICA/IHtcbiAgICAgICAgICBrZXk6IG5hbWUsXG4gICAgICAgICAgdmFsdWU6IGZvcm1hdHRlcih2YWx1ZSksXG4gICAgICAgIH1cbiAgICAgIDogbnVsbDtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBpbnNpZ2h0cyA9IHRoaXMucHJvcHMuaW5zaWdodHM7XG4gICAgY29uc3Qge2J1aWxkUm93LCBmb3JtYXRUaW1lLCBmb3JtYXRTcGVlZCwgZm9ybWF0UmV0cmllc30gPSB0aGlzO1xuXG4gICAgY29uc3Qgcm93cyA9IFtcbiAgICAgIGJ1aWxkUm93KCdSZXRyaWVzJywgaW5zaWdodHMucmV0cmllcywgZm9ybWF0UmV0cmllcyksXG4gICAgICBidWlsZFJvdygnRE5TIGxvb2t1cCB0aW1lJywgaW5zaWdodHMuZG5zTG9va3VwVGltZSwgZm9ybWF0VGltZSksXG4gICAgICBidWlsZFJvdygnQ29ubmVjdCB0aW1lJywgaW5zaWdodHMuY29ubmVjdFRpbWUsIGZvcm1hdFRpbWUpLFxuICAgICAgYnVpbGRSb3coJ1NTTCBoYW5kc2hha2UgdGltZScsIGluc2lnaHRzLnNzbEhhbmRzaGFrZVRpbWUsIGZvcm1hdFRpbWUpLFxuICAgICAgYnVpbGRSb3coJ1ByZXRyYW5zZmVyIHRpbWUnLCBpbnNpZ2h0cy5wcmVUcmFuc2ZlclRpbWUsIGZvcm1hdFRpbWUpLFxuICAgICAgYnVpbGRSb3coJ1JlZGlyZWN0IHRpbWUnLCBpbnNpZ2h0cy5yZWRpcmVjdHNUaW1lLCBmb3JtYXRUaW1lKSxcbiAgICAgIGJ1aWxkUm93KCdGaXJzdCBieXRlIHdhaXQgdGltZScsIGluc2lnaHRzLnRpbWVUb0ZpcnN0Qnl0ZSwgZm9ybWF0VGltZSksXG4gICAgICBidWlsZFJvdygnRGF0YSB0cmFuc2ZlciB0aW1lJywgaW5zaWdodHMudHJhbnNmZXJUaW1lLCBmb3JtYXRUaW1lKSxcbiAgICAgIGJ1aWxkUm93KCdQb3N0IHByb2Nlc3NpbmcgdGltZScsIGluc2lnaHRzLnBvc3RQcm9jZXNzaW5nVGltZSwgZm9ybWF0VGltZSksXG4gICAgICBidWlsZFJvdygnQnl0ZXMgdHJhbnNmZXJlZCcsIGluc2lnaHRzLmJ5dGVzVHJhbnNmZXJlZCwgZm9ybWF0Qnl0ZXMpLFxuICAgICAgYnVpbGRSb3coJ1RyYW5zZmVyIHNwZWVkJywgaW5zaWdodHMudHJhbnNmZXJTcGVlZCwgZm9ybWF0U3BlZWQpLFxuICAgIF0uZmlsdGVyKChyKSA9PiByICE9IG51bGwpO1xuXG4gICAgcmV0dXJuIHJvd3MubGVuZ3RoID4gMCA/IDxLZXlWYWx1ZVRhYmxlIGl0ZW1zPXtyb3dzfSAvPiA6IG51bGw7XG4gIH1cbn1cbiIsICIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7RGF0YVRhYmxlLCBEYXRhVGFibGVDb2x1bW59IGZyb20gJ2ZsaXBwZXItcGx1Z2luJztcbmltcG9ydCB7dXNlQ2FsbGJhY2t9IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IHR5cGUgS2V5VmFsdWVJdGVtID0ge1xuICBrZXk6IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZztcbn07XG5cbmNvbnN0IGNvbHVtbnM6IERhdGFUYWJsZUNvbHVtbjxLZXlWYWx1ZUl0ZW0+W10gPSBbXG4gIHtcbiAgICBrZXk6ICdrZXknLFxuICAgIHdpZHRoOiAxNjAsXG4gICAgdGl0bGU6ICdLZXknLFxuICB9LFxuICB7XG4gICAga2V5OiAndmFsdWUnLFxuICAgIHRpdGxlOiAnVmFsdWUnLFxuICAgIHdyYXA6IHRydWUsXG4gIH0sXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gS2V5VmFsdWVUYWJsZSh7aXRlbXN9OiB7aXRlbXM6IEtleVZhbHVlSXRlbVtdfSkge1xuICBjb25zdCBoYW5kbGVDb3B5Um93cyA9IHVzZUNhbGxiYWNrKChyb3dzOiBLZXlWYWx1ZUl0ZW1bXSkgPT4ge1xuICAgIHJldHVybiByb3dzLm1hcCgoe2tleSwgdmFsdWV9KSA9PiBgJHtrZXl9OiAke3ZhbHVlfWApLmpvaW4oJ1xcbicpO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RGF0YVRhYmxlPEtleVZhbHVlSXRlbT5cbiAgICAgIGNvbHVtbnM9e2NvbHVtbnN9XG4gICAgICByZWNvcmRzPXtpdGVtc31cbiAgICAgIGVuYWJsZVNlYXJjaGJhcj17ZmFsc2V9XG4gICAgICBzY3JvbGxhYmxlPXtmYWxzZX1cbiAgICAgIGVuYWJsZUhvcml6b250YWxTY3JvbGw9e2ZhbHNlfVxuICAgICAgb25Db3B5Um93cz17aGFuZGxlQ29weVJvd3N9XG4gICAgLz5cbiAgKTtcbn1cbiIsICIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlIHtQYXJ0aWFsUmVzcG9uc2UsIFJlc3BvbnNlSW5mb30gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge0Jhc2U2NH0gZnJvbSAnanMtYmFzZTY0JztcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlQ2h1bmtzSWZSZXNwb25zZUlzQ29tcGxldGUoXG4gIHBhcnRpYWxSZXNwb25zZUVudHJ5OiBQYXJ0aWFsUmVzcG9uc2UgfCB1bmRlZmluZWQsXG4pOiBSZXNwb25zZUluZm8gfCB1bmRlZmluZWQge1xuICBjb25zdCBudW1DaHVua3MgPSBwYXJ0aWFsUmVzcG9uc2VFbnRyeT8uaW5pdGlhbFJlc3BvbnNlPy50b3RhbENodW5rcztcbiAgaWYgKFxuICAgICFudW1DaHVua3MgfHxcbiAgICAhcGFydGlhbFJlc3BvbnNlRW50cnk/LmluaXRpYWxSZXNwb25zZSB8fFxuICAgIE9iamVjdC5rZXlzKHBhcnRpYWxSZXNwb25zZUVudHJ5LmZvbGxvd3VwQ2h1bmtzKS5sZW5ndGggKyAxIDwgbnVtQ2h1bmtzXG4gICkge1xuICAgIC8vIFBhcnRpYWwgcmVzcG9uc2Ugbm90IHlldCBjb21wbGV0ZSwgZG8gbm90aGluZy5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBQYXJ0aWFsIHJlc3BvbnNlIGhhcyBhbGwgcmVxdWlyZWQgY2h1bmtzLCBjb252ZXJ0IGl0IHRvIGEgZnVsbCBSZXNwb25zZS5cbiAgY29uc3QgcmVzcG9uc2U6IFJlc3BvbnNlSW5mbyA9IHBhcnRpYWxSZXNwb25zZUVudHJ5LmluaXRpYWxSZXNwb25zZTtcbiAgY29uc3QgYWxsQ2h1bmtzOiBzdHJpbmdbXSA9XG4gICAgcmVzcG9uc2UuZGF0YSAhPSBudWxsXG4gICAgICA/IFtcbiAgICAgICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgICAgIC4uLk9iamVjdC5lbnRyaWVzKHBhcnRpYWxSZXNwb25zZUVudHJ5LmZvbGxvd3VwQ2h1bmtzKVxuICAgICAgICAgICAgLy8gSXQncyBpbXBvcnRhbnQgdG8gcGFyc2VJbnQgaGVyZSBvciBpdCBzb3J0cyBsZXhpY29ncmFwaGljYWxseVxuICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IHBhcnNlSW50KGFbMF0sIDEwKSAtIHBhcnNlSW50KGJbMF0sIDEwKSlcbiAgICAgICAgICAgIC5tYXAoKFtfaywgdl06IFtzdHJpbmcsIHN0cmluZ10pID0+IHYpLFxuICAgICAgICBdXG4gICAgICA6IFtdO1xuICBjb25zdCBkYXRhID0gY29tYmluZUJhc2U2NENodW5rcyhhbGxDaHVua3MpO1xuXG4gIHJldHVybiB7XG4gICAgLi4ucmVzcG9uc2UsXG4gICAgLy8gQ3VycmVudGx5IGRhdGEgaXMgYWx3YXlzIGRlY29kZWQgYXQgcmVuZGVyIHRpbWUsIHNvIHJlLWVuY29kZSBpdCB0byBtYXRjaCB0aGUgc2luZ2xlIHJlc3BvbnNlIGZvcm1hdC5cbiAgICBkYXRhLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZUJhc2U2NENodW5rcyhjaHVua3M6IHN0cmluZ1tdKTogc3RyaW5nIHtcbiAgY29uc3QgYnl0ZUFycmF5ID0gY2h1bmtzLm1hcCgoYjY0Q2h1bmspID0+IHtcbiAgICByZXR1cm4gQmFzZTY0LnRvVWludDhBcnJheShiNjRDaHVuayk7XG4gIH0pO1xuICBjb25zdCBzaXplID0gYnl0ZUFycmF5XG4gICAgLm1hcCgoYikgPT4gYi5ieXRlTGVuZ3RoKVxuICAgIC5yZWR1Y2UoKHByZXYsIGN1cnIpID0+IHByZXYgKyBjdXJyLCAwKTtcblxuICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheShzaXplKTtcbiAgbGV0IG9mZnNldCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZUFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgYnVmZmVyLnNldChieXRlQXJyYXlbaV0sIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IGJ5dGVBcnJheVtpXS5ieXRlTGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIEJhc2U2NC5mcm9tVWludDhBcnJheShidWZmZXIpO1xufVxuIiwgIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IFJlYWN0LCB7XG4gIHVzZUNvbnRleHQsXG4gIHVzZVN0YXRlLFxuICB1c2VNZW1vLFxuICB1c2VFZmZlY3QsXG4gIHVzZUNhbGxiYWNrLFxufSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge01vY2tSZXNwb25zZURldGFpbHN9IGZyb20gJy4vTW9ja1Jlc3BvbnNlRGV0YWlscyc7XG5pbXBvcnQge05ldHdvcmtSb3V0ZUNvbnRleHQsIFJvdXRlfSBmcm9tICcuL05ldHdvcmtSb3V0ZU1hbmFnZXInO1xuaW1wb3J0IHtSZXF1ZXN0SWR9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7Q2hlY2tib3gsIE1vZGFsLCBUb29sdGlwLCBCdXR0b24sIFR5cG9ncmFwaHl9IGZyb20gJ2FudGQnO1xuaW1wb3J0IHtcbiAgTlVYLFxuICBMYXlvdXQsXG4gIERhdGFMaXN0LFxuICBUb29sYmFyLFxuICBjcmVhdGVTdGF0ZSxcbiAgdXNlVmFsdWUsXG59IGZyb20gJ2ZsaXBwZXItcGx1Z2luJztcbmltcG9ydCB7Q2xvc2VDaXJjbGVPdXRsaW5lZCwgV2FybmluZ091dGxpbmVkfSBmcm9tICdAYW50LWRlc2lnbi9pY29ucyc7XG5cbmNvbnN0IHtUZXh0fSA9IFR5cG9ncmFwaHk7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIHJvdXRlczoge1tpZDogc3RyaW5nXTogUm91dGV9O1xufTtcblxudHlwZSBSb3V0ZUl0ZW0gPSB7XG4gIGlkOiBzdHJpbmc7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIHJvdXRlOiBSb3V0ZTtcbiAgaXNEdXBsaWNhdGU6IGJvb2xlYW47XG59O1xuXG4vLyByZXR1cm4gaWRzIHRoYXQgaGF2ZSB0aGUgc2FtZSBwYWlyIG9mIHJlcXVlc3RVcmwgYW5kIG1ldGhvZDsgdGhpcyB3aWxsIHJldHVybiBvbmx5IHRoZSBkdXBsaWNhdGVcbmZ1bmN0aW9uIF9kdXBsaWNhdGVJZHMocm91dGVzOiB7W2lkOiBzdHJpbmddOiBSb3V0ZX0pOiBBcnJheTxSZXF1ZXN0SWQ+IHtcbiAgY29uc3QgaWRTZXQ6IHtbaWQ6IHN0cmluZ106IHtbbWV0aG9kOiBzdHJpbmddOiBib29sZWFufX0gPSB7fTtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHJvdXRlcykucmVkdWNlKChhY2M6IEFycmF5PFJlcXVlc3RJZD4sIFtpZCwgcm91dGVdKSA9PiB7XG4gICAgaWYgKGlkU2V0Lmhhc093blByb3BlcnR5KHJvdXRlLnJlcXVlc3RVcmwpKSB7XG4gICAgICBpZiAoaWRTZXRbcm91dGUucmVxdWVzdFVybF0uaGFzT3duUHJvcGVydHkocm91dGUucmVxdWVzdE1ldGhvZCkpIHtcbiAgICAgICAgcmV0dXJuIGFjYy5jb25jYXQoaWQpO1xuICAgICAgfVxuICAgICAgaWRTZXRbcm91dGUucmVxdWVzdFVybF0gPSB7XG4gICAgICAgIC4uLmlkU2V0W3JvdXRlLnJlcXVlc3RVcmxdLFxuICAgICAgICBbcm91dGUucmVxdWVzdE1ldGhvZF06IHRydWUsXG4gICAgICB9O1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9IGVsc2Uge1xuICAgICAgaWRTZXRbcm91dGUucmVxdWVzdFVybF0gPSB7W3JvdXRlLnJlcXVlc3RNZXRob2RdOiB0cnVlfTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICB9LCBbXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBNYW5hZ2VNb2NrUmVzcG9uc2VQYW5lbChwcm9wczogUHJvcHMpIHtcbiAgY29uc3QgbmV0d29ya1JvdXRlTWFuYWdlciA9IHVzZUNvbnRleHQoTmV0d29ya1JvdXRlQ29udGV4dCk7XG4gIGNvbnN0IFtzZWxlY3RlZElkQXRvbV0gPSB1c2VTdGF0ZSgoKSA9PiBjcmVhdGVTdGF0ZTxSZXF1ZXN0SWQgfCB1bmRlZmluZWQ+KCkpO1xuICBjb25zdCBzZWxlY3RlZElkID0gdXNlVmFsdWUoc2VsZWN0ZWRJZEF0b20pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2VsZWN0ZWRJZEF0b20udXBkYXRlKChzZWxlY3RlZElkKSA9PiB7XG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocHJvcHMucm91dGVzKTtcbiAgICAgIGxldCByZXR1cm5WYWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgICAgLy8gc2VsZWN0SWQgaXMgdW5kZWZpbmVkIHdoZW4gdGhlcmUgYXJlIG5vIHJvd3Mgb3IgaXQgaXMgdGhlIGZpcnN0IHRpbWUgcm93cyBhcmUgc2hvd25cbiAgICAgIGlmIChzZWxlY3RlZElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgLy8gdGhlcmUgYXJlIG5vIHJvd3NcbiAgICAgICAgICByZXR1cm5WYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBmaXJzdCB0aW1lIHJvd3MgYXJlIHNob3duXG4gICAgICAgICAgcmV0dXJuVmFsdWUgPSBrZXlzWzBdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoa2V5cy5pbmNsdWRlcyhzZWxlY3RlZElkKSkge1xuICAgICAgICAgIHJldHVyblZhbHVlID0gc2VsZWN0ZWRJZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBzZWxlY3RlZElkIHJvdyB2YWx1ZSBub3QgaW4gcm91dGVzIHNvIGRlZmF1bHQgdG8gZmlyc3QgbGluZVxuICAgICAgICAgIHJldHVyblZhbHVlID0ga2V5c1swXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICAgIH0pO1xuICB9LCBbcHJvcHMucm91dGVzLCBzZWxlY3RlZElkQXRvbV0pO1xuICBjb25zdCBkdXBsaWNhdGVkSWRzID0gdXNlTWVtbyhcbiAgICAoKSA9PiBfZHVwbGljYXRlSWRzKHByb3BzLnJvdXRlcyksXG4gICAgW3Byb3BzLnJvdXRlc10sXG4gICk7XG5cbiAgY29uc3QgaXRlbXM6IFJvdXRlSXRlbVtdID0gT2JqZWN0LmVudHJpZXMocHJvcHMucm91dGVzKS5tYXAoXG4gICAgKFtpZCwgcm91dGVdKSA9PiAoe1xuICAgICAgaWQsXG4gICAgICByb3V0ZSxcbiAgICAgIHRpdGxlOiByb3V0ZS5yZXF1ZXN0VXJsLFxuICAgICAgaXNEdXBsaWNhdGU6IGR1cGxpY2F0ZWRJZHMuaW5jbHVkZXMoaWQpLFxuICAgIH0pLFxuICApO1xuXG4gIGNvbnN0IGhhbmRsZURlbGV0ZSA9IHVzZUNhbGxiYWNrKFxuICAgIChpZDogc3RyaW5nKSA9PiB7XG4gICAgICBNb2RhbC5jb25maXJtKHtcbiAgICAgICAgdGl0bGU6ICdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgaXRlbT8nLFxuICAgICAgICBpY29uOiAnJyxcbiAgICAgICAgb25PaygpIHtcbiAgICAgICAgICBuZXR3b3JrUm91dGVNYW5hZ2VyLnJlbW92ZVJvdXRlKGlkKTtcbiAgICAgICAgICBzZWxlY3RlZElkQXRvbS5zZXQodW5kZWZpbmVkKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25DYW5jZWwoKSB7fSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW25ldHdvcmtSb3V0ZU1hbmFnZXIsIHNlbGVjdGVkSWRBdG9tXSxcbiAgKTtcbiAgY29uc3QgaGFuZGxlVG9nZ2xlID0gdXNlQ2FsbGJhY2soXG4gICAgKGlkOiBzdHJpbmcpID0+IHtcbiAgICAgIG5ldHdvcmtSb3V0ZU1hbmFnZXIuZW5hYmxlUm91dGUoaWQpO1xuICAgIH0sXG4gICAgW25ldHdvcmtSb3V0ZU1hbmFnZXJdLFxuICApO1xuXG4gIGNvbnN0IGhhbmRsZVJlbmRlciA9IHVzZUNhbGxiYWNrKFxuICAgIChpdGVtOiBSb3V0ZUl0ZW0pID0+IChcbiAgICAgIDxSb3V0ZUVudHJ5IGl0ZW09e2l0ZW19IG9uRGVsZXRlPXtoYW5kbGVEZWxldGV9IG9uVG9nZ2xlPXtoYW5kbGVUb2dnbGV9IC8+XG4gICAgKSxcbiAgICBbaGFuZGxlRGVsZXRlLCBoYW5kbGVUb2dnbGVdLFxuICApO1xuXG4gIGNvbnN0IGhhbmRsZVNlbGVjdCA9IHVzZUNhbGxiYWNrKFxuICAgIChpZDogc3RyaW5nKSA9PiB7XG4gICAgICBpZiAoaWQpIHtcbiAgICAgICAgc2VsZWN0ZWRJZEF0b20uc2V0KGlkKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtzZWxlY3RlZElkQXRvbV0sXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8TGF5b3V0LkxlZnQgcmVzaXphYmxlIHN0eWxlPXt7bWluSGVpZ2h0OiA0MDB9fT5cbiAgICAgIDxMYXlvdXQuVG9wPlxuICAgICAgICA8VG9vbGJhcj5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IG5ld0lkID0gbmV0d29ya1JvdXRlTWFuYWdlci5hZGRSb3V0ZSgpO1xuICAgICAgICAgICAgICBzZWxlY3RlZElkQXRvbS5zZXQobmV3SWQpO1xuICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICBBZGQgUm91dGVcbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8TlVYXG4gICAgICAgICAgICB0aXRsZT1cIkl0IGlzIG5vdyBwb3NzaWJsZSB0byBzZWxlY3QgY2FsbHMgZnJvbSB0aGUgbmV0d29yayBjYWxsIGxpc3QgYW5kIGNvbnZlcnQgdGhlbSBpbnRvIG1vY2sgcm91dGVzLlwiXG4gICAgICAgICAgICBwbGFjZW1lbnQ9XCJib3R0b21cIj5cbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIG5ldHdvcmtSb3V0ZU1hbmFnZXIuY29weVNlbGVjdGVkQ2FsbHMoKTtcbiAgICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgIENvcHkgU2VsZWN0ZWQgQ2FsbHNcbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvTlVYPlxuICAgICAgICAgIDxCdXR0b24gb25DbGljaz17bmV0d29ya1JvdXRlTWFuYWdlci5pbXBvcnRSb3V0ZXN9PkltcG9ydDwvQnV0dG9uPlxuICAgICAgICAgIDxCdXR0b24gb25DbGljaz17bmV0d29ya1JvdXRlTWFuYWdlci5leHBvcnRSb3V0ZXN9PkV4cG9ydDwvQnV0dG9uPlxuICAgICAgICAgIDxCdXR0b24gb25DbGljaz17bmV0d29ya1JvdXRlTWFuYWdlci5jbGVhclJvdXRlc30+Q2xlYXI8L0J1dHRvbj5cbiAgICAgICAgPC9Ub29sYmFyPlxuICAgICAgICA8RGF0YUxpc3RcbiAgICAgICAgICBpdGVtcz17aXRlbXN9XG4gICAgICAgICAgc2VsZWN0aW9uPXtzZWxlY3RlZElkfVxuICAgICAgICAgIG9uUmVuZGVySXRlbT17aGFuZGxlUmVuZGVyfVxuICAgICAgICAgIG9uU2VsZWN0PXtoYW5kbGVTZWxlY3R9XG4gICAgICAgICAgc2Nyb2xsYWJsZVxuICAgICAgICAvPlxuICAgICAgPC9MYXlvdXQuVG9wPlxuICAgICAgPExheW91dC5Db250YWluZXIgZ2FwIHBhZD5cbiAgICAgICAge3NlbGVjdGVkSWQgJiYgcHJvcHMucm91dGVzLmhhc093blByb3BlcnR5KHNlbGVjdGVkSWQpICYmIChcbiAgICAgICAgICA8TW9ja1Jlc3BvbnNlRGV0YWlsc1xuICAgICAgICAgICAgaWQ9e3NlbGVjdGVkSWR9XG4gICAgICAgICAgICByb3V0ZT17cHJvcHMucm91dGVzW3NlbGVjdGVkSWRdfVxuICAgICAgICAgICAgaXNEdXBsaWNhdGVkPXtkdXBsaWNhdGVkSWRzLmluY2x1ZGVzKHNlbGVjdGVkSWQpfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L0xheW91dC5Db250YWluZXI+XG4gICAgPC9MYXlvdXQuTGVmdD5cbiAgKTtcbn1cblxuY29uc3QgUm91dGVFbnRyeSA9ICh7XG4gIGl0ZW0sXG4gIG9uVG9nZ2xlLFxuICBvbkRlbGV0ZSxcbn06IHtcbiAgaXRlbTogUm91dGVJdGVtO1xuICBvblRvZ2dsZShpZDogc3RyaW5nKTogdm9pZDtcbiAgb25EZWxldGUoaWQ6IHN0cmluZyk6IHZvaWQ7XG59KSA9PiB7XG4gIGNvbnN0IHRpcCA9IGl0ZW0ucm91dGUuZW5hYmxlZFxuICAgID8gJ1VuLWNoZWNrIHRvIGRpc2FibGUgbW9jayByb3V0ZSdcbiAgICA6ICdDaGVjayB0byBlbmFibGUgbW9jayByb3V0ZSc7XG4gIHJldHVybiAoXG4gICAgPExheW91dC5Ib3Jpem9udGFsIGdhcCBjZW50ZXI+XG4gICAgICA8VG9vbHRpcCB0aXRsZT17dGlwfSBtb3VzZUVudGVyRGVsYXk9ezEuMX0+XG4gICAgICAgIDxDaGVja2JveFxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uVG9nZ2xlKGl0ZW0uaWQpfVxuICAgICAgICAgIGNoZWNrZWQ9e2l0ZW0ucm91dGUuZW5hYmxlZH0+PC9DaGVja2JveD5cbiAgICAgIDwvVG9vbHRpcD5cbiAgICAgIHtpdGVtLnJvdXRlLnJlcXVlc3RVcmwubGVuZ3RoID09PSAwID8gKFxuICAgICAgICA8VGV4dCBlbGxpcHNpcz51bnRpdGxlZDwvVGV4dD5cbiAgICAgICkgOiAoXG4gICAgICAgIDxUZXh0IGVsbGlwc2lzPntpdGVtLnJvdXRlLnJlcXVlc3RVcmx9PC9UZXh0PlxuICAgICAgKX1cbiAgICAgIDxUb29sdGlwIHRpdGxlPVwiQ2xpY2sgdG8gZGVsZXRlIG1vY2sgcm91dGVcIiBtb3VzZUVudGVyRGVsYXk9ezEuMX0+XG4gICAgICAgIDxMYXlvdXQuSG9yaXpvbnRhbCBvbkNsaWNrPXsoKSA9PiBvbkRlbGV0ZShpdGVtLmlkKX0+XG4gICAgICAgICAgPENsb3NlQ2lyY2xlT3V0bGluZWQgLz5cbiAgICAgICAgPC9MYXlvdXQuSG9yaXpvbnRhbD5cbiAgICAgIDwvVG9vbHRpcD5cbiAgICAgIHtpdGVtLmlzRHVwbGljYXRlICYmIDxXYXJuaW5nT3V0bGluZWQgLz59XG4gICAgPC9MYXlvdXQuSG9yaXpvbnRhbD5cbiAgKTtcbn07XG4iLCAiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgUmVhY3QsIHt1c2VDb250ZXh0LCB1c2VTdGF0ZX0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgTmV0d29ya1JvdXRlQ29udGV4dCxcbiAgTmV0d29ya1JvdXRlTWFuYWdlcixcbiAgUm91dGUsXG59IGZyb20gJy4vTmV0d29ya1JvdXRlTWFuYWdlcic7XG5pbXBvcnQge1JlcXVlc3RJZH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHtCdXR0b24sIElucHV0LCBTZWxlY3R9IGZyb20gJ2FudGQnO1xuaW1wb3J0IHtMYXlvdXQsIHByb2R1Y2UsIFRhYnMsIFRhYiwgdGhlbWV9IGZyb20gJ2ZsaXBwZXItcGx1Z2luJztcbmltcG9ydCB7Q2xvc2VDaXJjbGVPdXRsaW5lZCwgV2FybmluZ091dGxpbmVkfSBmcm9tICdAYW50LWRlc2lnbi9pY29ucyc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIGlkOiBSZXF1ZXN0SWQ7XG4gIHJvdXRlOiBSb3V0ZTtcbiAgaXNEdXBsaWNhdGVkOiBib29sZWFuO1xufTtcblxuZnVuY3Rpb24gSGVhZGVySW5wdXQocHJvcHM6IHtcbiAgaW5pdGlhbFZhbHVlOiBzdHJpbmc7XG4gIG9uVXBkYXRlOiAobmV3VmFsdWU6IHN0cmluZykgPT4gdm9pZDtcbiAgc3R5bGU/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzO1xufSkge1xuICBjb25zdCBbdmFsdWUsIHNldFZhbHVlXSA9IHVzZVN0YXRlKHByb3BzLmluaXRpYWxWYWx1ZSk7XG4gIHJldHVybiAoXG4gICAgPElucHV0XG4gICAgICB0eXBlPVwidGV4dFwiXG4gICAgICBwbGFjZWhvbGRlcj1cIk5hbWVcIlxuICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgb25DaGFuZ2U9eyhldmVudCkgPT4ge1xuICAgICAgICBzZXRWYWx1ZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgICBwcm9wcy5vblVwZGF0ZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgfX1cbiAgICAgIHN0eWxlPXtwcm9wcy5zdHlsZX1cbiAgICAvPlxuICApO1xufVxuXG5mdW5jdGlvbiBSZXNwb25zZUhlYWRlcnMoe1xuICByb3V0ZUlkLFxuICByb3V0ZSxcbiAgbmV0d29ya1JvdXRlTWFuYWdlcixcbn06IHtcbiAgcm91dGVJZDogc3RyaW5nO1xuICByb3V0ZTogUm91dGU7XG4gIG5ldHdvcmtSb3V0ZU1hbmFnZXI6IE5ldHdvcmtSb3V0ZU1hbmFnZXI7XG59KSB7XG4gIHJldHVybiAoXG4gICAgPExheW91dC5Db250YWluZXIgZ2FwIHN0eWxlPXt7cGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjZS5zbWFsbH19PlxuICAgICAge09iamVjdC5lbnRyaWVzKHJvdXRlLnJlc3BvbnNlSGVhZGVycykubWFwKChbaWQsIGhlYWRlcl0pID0+IChcbiAgICAgICAgPExheW91dC5Ib3Jpem9udGFsIGNlbnRlciBnYXAga2V5PXtpZH0+XG4gICAgICAgICAgPEhlYWRlcklucHV0XG4gICAgICAgICAgICBpbml0aWFsVmFsdWU9e2hlYWRlci5rZXl9XG4gICAgICAgICAgICBvblVwZGF0ZT17KG5ld1ZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgbmV3SGVhZGVycyA9IHByb2R1Y2UoXG4gICAgICAgICAgICAgICAgcm91dGUucmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICAgICAgICAgIChkcmFmdEhlYWRlcnMpID0+IHtcbiAgICAgICAgICAgICAgICAgIGRyYWZ0SGVhZGVyc1tpZF0ua2V5ID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgbmV0d29ya1JvdXRlTWFuYWdlci5tb2RpZnlSb3V0ZShyb3V0ZUlkLCB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiBuZXdIZWFkZXJzLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBzdHlsZT17e3dpZHRoOiAzMDB9fVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPEhlYWRlcklucHV0XG4gICAgICAgICAgICBpbml0aWFsVmFsdWU9e2hlYWRlci52YWx1ZX1cbiAgICAgICAgICAgIG9uVXBkYXRlPXsobmV3VmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBuZXdIZWFkZXJzID0gcHJvZHVjZShcbiAgICAgICAgICAgICAgICByb3V0ZS5yZXNwb25zZUhlYWRlcnMsXG4gICAgICAgICAgICAgICAgKGRyYWZ0SGVhZGVycykgPT4ge1xuICAgICAgICAgICAgICAgICAgZHJhZnRIZWFkZXJzW2lkXS52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIG5ldHdvcmtSb3V0ZU1hbmFnZXIubW9kaWZ5Um91dGUocm91dGVJZCwge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlSGVhZGVyczogbmV3SGVhZGVycyxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPExheW91dC5Db250YWluZXJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgbmV3SGVhZGVycyA9IHByb2R1Y2UoXG4gICAgICAgICAgICAgICAgcm91dGUucmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICAgICAgICAgIChkcmFmdEhlYWRlcnMpID0+IHtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZSBkcmFmdEhlYWRlcnNbaWRdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIG5ldHdvcmtSb3V0ZU1hbmFnZXIubW9kaWZ5Um91dGUocm91dGVJZCwge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlSGVhZGVyczogbmV3SGVhZGVycyxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9fT5cbiAgICAgICAgICAgIDxDbG9zZUNpcmNsZU91dGxpbmVkIC8+XG4gICAgICAgICAgPC9MYXlvdXQuQ29udGFpbmVyPlxuICAgICAgICA8L0xheW91dC5Ib3Jpem9udGFsPlxuICAgICAgKSl9XG4gICAgPC9MYXlvdXQuQ29udGFpbmVyPlxuICApO1xufVxuXG5jb25zdCBodHRwTWV0aG9kcyA9IFtcbiAgJ0dFVCcsXG4gICdQT1NUJyxcbiAgJ1BBVENIJyxcbiAgJ0hFQUQnLFxuICAnUFVUJyxcbiAgJ0RFTEVURScsXG4gICdUUkFDRScsXG4gICdPUFRJT05TJyxcbiAgJ0NPTk5FQ1QnLFxuXS5tYXAoKHYpID0+ICh7dmFsdWU6IHYsIGxhYmVsOiB2fSkpO1xuXG5leHBvcnQgZnVuY3Rpb24gTW9ja1Jlc3BvbnNlRGV0YWlscyh7aWQsIHJvdXRlLCBpc0R1cGxpY2F0ZWR9OiBQcm9wcykge1xuICBjb25zdCBuZXR3b3JrUm91dGVNYW5hZ2VyID0gdXNlQ29udGV4dChOZXR3b3JrUm91dGVDb250ZXh0KTtcbiAgY29uc3QgW25leHRIZWFkZXJJZCwgc2V0TmV4dEhlYWRlcklkXSA9IHVzZVN0YXRlKDApO1xuXG4gIGNvbnN0IHtyZXF1ZXN0VXJsLCByZXF1ZXN0TWV0aG9kLCByZXNwb25zZURhdGEsIHJlc3BvbnNlU3RhdHVzfSA9IHJvdXRlO1xuXG4gIGxldCBmb3JtYXR0ZWRSZXNwb25zZSA9ICcnO1xuICB0cnkge1xuICAgIGZvcm1hdHRlZFJlc3BvbnNlID0gSlNPTi5zdHJpbmdpZnkoSlNPTi5wYXJzZShyZXNwb25zZURhdGEpLCBudWxsLCAyKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGZvcm1hdHRlZFJlc3BvbnNlID0gcmVzcG9uc2VEYXRhO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8TGF5b3V0LkNvbnRhaW5lciBnYXA+XG4gICAgICA8TGF5b3V0Lkhvcml6b250YWwgZ2FwPlxuICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgdmFsdWU9e3JlcXVlc3RNZXRob2R9XG4gICAgICAgICAgb3B0aW9ucz17aHR0cE1ldGhvZHN9XG4gICAgICAgICAgb25DaGFuZ2U9eyh0ZXh0KSA9PlxuICAgICAgICAgICAgbmV0d29ya1JvdXRlTWFuYWdlci5tb2RpZnlSb3V0ZShpZCwge3JlcXVlc3RNZXRob2Q6IHRleHR9KVxuICAgICAgICAgIH1cbiAgICAgICAgLz5cbiAgICAgICAgPElucHV0XG4gICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVVJMXCJcbiAgICAgICAgICB2YWx1ZT17cmVxdWVzdFVybH1cbiAgICAgICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PlxuICAgICAgICAgICAgbmV0d29ya1JvdXRlTWFuYWdlci5tb2RpZnlSb3V0ZShpZCwge1xuICAgICAgICAgICAgICByZXF1ZXN0VXJsOiBldmVudC50YXJnZXQudmFsdWUsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBzdHlsZT17e2ZsZXg6IDF9fVxuICAgICAgICAvPlxuICAgICAgICA8SW5wdXRcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJTVEFUVVNcIlxuICAgICAgICAgIHZhbHVlPXtyZXNwb25zZVN0YXR1c31cbiAgICAgICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PlxuICAgICAgICAgICAgbmV0d29ya1JvdXRlTWFuYWdlci5tb2RpZnlSb3V0ZShpZCwge1xuICAgICAgICAgICAgICByZXNwb25zZVN0YXR1czogZXZlbnQudGFyZ2V0LnZhbHVlLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgc3R5bGU9e3t3aWR0aDogMTAwfX1cbiAgICAgICAgLz5cbiAgICAgIDwvTGF5b3V0Lkhvcml6b250YWw+XG4gICAgICB7aXNEdXBsaWNhdGVkICYmIChcbiAgICAgICAgPExheW91dC5Ib3Jpem9udGFsIGdhcD5cbiAgICAgICAgICA8V2FybmluZ091dGxpbmVkIC8+XG4gICAgICAgICAgUm91dGUgaXMgZHVwbGljYXRlZCAoU2FtZSBVUkwgYW5kIE1ldGhvZClcbiAgICAgICAgPC9MYXlvdXQuSG9yaXpvbnRhbD5cbiAgICAgICl9XG4gICAgICA8TGF5b3V0LkNvbnRhaW5lciBoZWlnaHQ9ezUwMH0+XG4gICAgICAgIDxUYWJzIGdyb3c+XG4gICAgICAgICAgPFRhYiB0YWI9eydEYXRhJ30+XG4gICAgICAgICAgICA8SW5wdXQuVGV4dEFyZWFcbiAgICAgICAgICAgICAgd3JhcD1cInNvZnRcIlxuICAgICAgICAgICAgICBhdXRvQ29tcGxldGU9XCJvZmZcIlxuICAgICAgICAgICAgICBzcGVsbENoZWNrPXtmYWxzZX1cbiAgICAgICAgICAgICAgdmFsdWU9e2Zvcm1hdHRlZFJlc3BvbnNlfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PlxuICAgICAgICAgICAgICAgIG5ldHdvcmtSb3V0ZU1hbmFnZXIubW9kaWZ5Um91dGUoaWQsIHtcbiAgICAgICAgICAgICAgICAgIHJlc3BvbnNlRGF0YTogZXZlbnQudGFyZ2V0LnZhbHVlLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc3R5bGU9e3tmbGV4OiAxfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9UYWI+XG4gICAgICAgICAgPFRhYiB0YWI9eydIZWFkZXJzJ30+XG4gICAgICAgICAgICA8TGF5b3V0LlRvcCBnYXA+XG4gICAgICAgICAgICAgIDxMYXlvdXQuSG9yaXpvbnRhbD5cbiAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0hlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgLi4ucm91dGUucmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICAgIFtuZXh0SGVhZGVySWQudG9TdHJpbmcoKV06IHtrZXk6ICcnLCB2YWx1ZTogJyd9LFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBzZXROZXh0SGVhZGVySWQobmV4dEhlYWRlcklkICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIG5ldHdvcmtSb3V0ZU1hbmFnZXIubW9kaWZ5Um91dGUoaWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZUhlYWRlcnM6IG5ld0hlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgICAgICBBZGQgSGVhZGVyXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgIDwvTGF5b3V0Lkhvcml6b250YWw+XG4gICAgICAgICAgICAgIDxMYXlvdXQuU2Nyb2xsQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDxSZXNwb25zZUhlYWRlcnNcbiAgICAgICAgICAgICAgICAgIHJvdXRlSWQ9e2lkfVxuICAgICAgICAgICAgICAgICAgcm91dGU9e3JvdXRlfVxuICAgICAgICAgICAgICAgICAgbmV0d29ya1JvdXRlTWFuYWdlcj17bmV0d29ya1JvdXRlTWFuYWdlcn1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L0xheW91dC5TY3JvbGxDb250YWluZXI+XG4gICAgICAgICAgICA8L0xheW91dC5Ub3A+XG4gICAgICAgICAgPC9UYWI+XG4gICAgICAgIDwvVGFicz5cbiAgICAgIDwvTGF5b3V0LkNvbnRhaW5lcj5cbiAgICA8L0xheW91dC5Db250YWluZXI+XG4gICk7XG59XG4iLCAiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQge0F0b20sIERhdGFUYWJsZU1hbmFnZXIsIGdldEZsaXBwZXJMaWJ9IGZyb20gJ2ZsaXBwZXItcGx1Z2luJztcbmltcG9ydCB7Y3JlYXRlQ29udGV4dH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtIZWFkZXIsIFJlcXVlc3R9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IHR5cGUgUm91dGUgPSB7XG4gIHJlcXVlc3RVcmw6IHN0cmluZztcbiAgcmVxdWVzdE1ldGhvZDogc3RyaW5nO1xuICByZXNwb25zZURhdGE6IHN0cmluZztcbiAgcmVzcG9uc2VIZWFkZXJzOiB7W2lkOiBzdHJpbmddOiBIZWFkZXJ9O1xuICByZXNwb25zZVN0YXR1czogc3RyaW5nO1xuICBlbmFibGVkOiBib29sZWFuO1xufTtcblxuZXhwb3J0IHR5cGUgTW9ja1JvdXRlID0ge1xuICByZXF1ZXN0VXJsOiBzdHJpbmc7XG4gIG1ldGhvZDogc3RyaW5nO1xuICBkYXRhOiBzdHJpbmc7XG4gIGhlYWRlcnM6IEhlYWRlcltdO1xuICBzdGF0dXM6IHN0cmluZztcbiAgZW5hYmxlZDogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmV0d29ya1JvdXRlTWFuYWdlciB7XG4gIGFkZFJvdXRlKCk6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgbW9kaWZ5Um91dGUoaWQ6IHN0cmluZywgcm91dGVDaGFuZ2U6IFBhcnRpYWw8Um91dGU+KTogdm9pZDtcbiAgcmVtb3ZlUm91dGUoaWQ6IHN0cmluZyk6IHZvaWQ7XG4gIGVuYWJsZVJvdXRlKGlkOiBzdHJpbmcpOiB2b2lkO1xuICBjb3B5U2VsZWN0ZWRDYWxscygpOiB2b2lkO1xuICBpbXBvcnRSb3V0ZXMoKTogdm9pZDtcbiAgZXhwb3J0Um91dGVzKCk6IHZvaWQ7XG4gIGNsZWFyUm91dGVzKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBudWxsTmV0d29ya1JvdXRlTWFuYWdlcjogTmV0d29ya1JvdXRlTWFuYWdlciA9IHtcbiAgYWRkUm91dGUoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gJyc7XG4gIH0sXG4gIG1vZGlmeVJvdXRlKF9pZDogc3RyaW5nLCBfcm91dGVDaGFuZ2U6IFBhcnRpYWw8Um91dGU+KSB7fSxcbiAgcmVtb3ZlUm91dGUoX2lkOiBzdHJpbmcpIHt9LFxuICBlbmFibGVSb3V0ZShfaWQ6IHN0cmluZykge30sXG4gIGNvcHlTZWxlY3RlZENhbGxzKCkge30sXG4gIGltcG9ydFJvdXRlcygpIHt9LFxuICBleHBvcnRSb3V0ZXMoKSB7fSxcbiAgY2xlYXJSb3V0ZXMoKSB7fSxcbn07XG5cbmV4cG9ydCBjb25zdCBOZXR3b3JrUm91dGVDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxOZXR3b3JrUm91dGVNYW5hZ2VyPihcbiAgbnVsbE5ldHdvcmtSb3V0ZU1hbmFnZXIsXG4pO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTmV0d29ya01hbmFnZXIoXG4gIG5leHRSb3V0ZUlkOiBBdG9tPG51bWJlcj4sXG4gIHJvdXRlczogQXRvbTx7W2lkOiBzdHJpbmddOiBhbnl9PixcbiAgaW5mb3JtQ2xpZW50TW9ja0NoYW5nZTogKHJvdXRlczoge1tpZDogc3RyaW5nXTogYW55fSkgPT4gUHJvbWlzZTx2b2lkPixcbiAgdGFibGVNYW5hZ2VyUmVmOiBSZWFjdC5SZWZPYmplY3Q8RGF0YVRhYmxlTWFuYWdlcjxSZXF1ZXN0PiB8IHVuZGVmaW5lZD4sXG4pOiBOZXR3b3JrUm91dGVNYW5hZ2VyIHtcbiAgcmV0dXJuIHtcbiAgICBhZGRSb3V0ZSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgY29uc3QgbmV3TmV4dFJvdXRlSWQgPSBuZXh0Um91dGVJZC5nZXQoKTtcbiAgICAgIHJvdXRlcy51cGRhdGUoKGRyYWZ0KSA9PiB7XG4gICAgICAgIGRyYWZ0W25ld05leHRSb3V0ZUlkLnRvU3RyaW5nKCldID0ge1xuICAgICAgICAgIHJlcXVlc3RVcmw6ICcnLFxuICAgICAgICAgIHJlcXVlc3RNZXRob2Q6ICdHRVQnLFxuICAgICAgICAgIHJlc3BvbnNlRGF0YTogJycsXG4gICAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7fSxcbiAgICAgICAgICByZXNwb25zZVN0YXR1czogJzIwMCcsXG4gICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgbmV4dFJvdXRlSWQuc2V0KG5ld05leHRSb3V0ZUlkICsgMSk7XG4gICAgICByZXR1cm4gU3RyaW5nKG5ld05leHRSb3V0ZUlkKTtcbiAgICB9LFxuICAgIG1vZGlmeVJvdXRlKGlkOiBzdHJpbmcsIHJvdXRlQ2hhbmdlOiBQYXJ0aWFsPFJvdXRlPikge1xuICAgICAgaWYgKCFyb3V0ZXMuZ2V0KCkuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJvdXRlcy51cGRhdGUoKGRyYWZ0KSA9PiB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZHJhZnRbaWRdLCByb3V0ZUNoYW5nZSk7XG4gICAgICB9KTtcbiAgICAgIGluZm9ybUNsaWVudE1vY2tDaGFuZ2Uocm91dGVzLmdldCgpKTtcbiAgICB9LFxuICAgIHJlbW92ZVJvdXRlKGlkOiBzdHJpbmcpIHtcbiAgICAgIGlmIChyb3V0ZXMuZ2V0KCkuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgIHJvdXRlcy51cGRhdGUoKGRyYWZ0KSA9PiB7XG4gICAgICAgICAgZGVsZXRlIGRyYWZ0W2lkXTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpbmZvcm1DbGllbnRNb2NrQ2hhbmdlKHJvdXRlcy5nZXQoKSk7XG4gICAgfSxcbiAgICBlbmFibGVSb3V0ZShpZDogc3RyaW5nKSB7XG4gICAgICBpZiAocm91dGVzLmdldCgpLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgICByb3V0ZXMudXBkYXRlKChkcmFmdCkgPT4ge1xuICAgICAgICAgIGRyYWZ0W2lkXS5lbmFibGVkID0gIWRyYWZ0W2lkXS5lbmFibGVkO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGluZm9ybUNsaWVudE1vY2tDaGFuZ2Uocm91dGVzLmdldCgpKTtcbiAgICB9LFxuICAgIGNvcHlTZWxlY3RlZENhbGxzKCkge1xuICAgICAgdGFibGVNYW5hZ2VyUmVmLmN1cnJlbnQ/LmdldFNlbGVjdGVkSXRlbXMoKS5mb3JFYWNoKChyZXF1ZXN0KSA9PiB7XG4gICAgICAgIC8vIGNvbnZlcnQgaGVhZGVyc1xuICAgICAgICBjb25zdCBoZWFkZXJzOiB7W2lkOiBzdHJpbmddOiBIZWFkZXJ9ID0ge307XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VIZWFkZXJzPy5mb3JFYWNoKChlKSA9PiB7XG4gICAgICAgICAgaGVhZGVyc1tlLmtleV0gPSBlO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBubyBuZWVkIHRvIGNvbnZlcnQgZGF0YSwgYWxyZWFkeSBjb252ZXJ0ZWQgd2hlbiByZWFsIGNhbGwgd2FzIGNyZWF0ZWRcbiAgICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID1cbiAgICAgICAgICByZXF1ZXN0ICYmIHJlcXVlc3QucmVzcG9uc2VEYXRhID8gcmVxdWVzdC5yZXNwb25zZURhdGEgOiAnJztcblxuICAgICAgICBjb25zdCBuZXdOZXh0Um91dGVJZCA9IG5leHRSb3V0ZUlkLmdldCgpO1xuICAgICAgICByb3V0ZXMudXBkYXRlKChkcmFmdCkgPT4ge1xuICAgICAgICAgIGRyYWZ0W25ld05leHRSb3V0ZUlkLnRvU3RyaW5nKCldID0ge1xuICAgICAgICAgICAgcmVxdWVzdFVybDogcmVxdWVzdC51cmwsXG4gICAgICAgICAgICByZXF1ZXN0TWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgICAgIHJlc3BvbnNlRGF0YTogcmVzcG9uc2VEYXRhIGFzIHN0cmluZyxcbiAgICAgICAgICAgIHJlc3BvbnNlSGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgIHJlc3BvbnNlU3RhdHVzOiByZXF1ZXN0LnN0YXR1cz8udG9TdHJpbmcoKSA/PyAnJyxcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIG5leHRSb3V0ZUlkLnNldChuZXdOZXh0Um91dGVJZCArIDEpO1xuICAgICAgfSk7XG5cbiAgICAgIGluZm9ybUNsaWVudE1vY2tDaGFuZ2Uocm91dGVzLmdldCgpKTtcbiAgICB9LFxuICAgIGltcG9ydFJvdXRlcygpIHtcbiAgICAgIGdldEZsaXBwZXJMaWIoKVxuICAgICAgICAuaW1wb3J0RmlsZSh7XG4gICAgICAgICAgZXh0ZW5zaW9uczogWycuanNvbiddLFxuICAgICAgICB9KVxuICAgICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgICAgaWYgKHJlcy5lbmNvZGluZyAhPT0gJ3V0Zi04JyB8fCB0eXBlb2YgcmVzLmRhdGEgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGltcG9ydGVkUm91dGVzID0gSlNPTi5wYXJzZShyZXMuZGF0YSk7XG4gICAgICAgICAgICBpbXBvcnRlZFJvdXRlcz8uZm9yRWFjaCgoaW1wb3J0ZWRSb3V0ZTogUm91dGUpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGltcG9ydGVkUm91dGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld05leHRSb3V0ZUlkID0gbmV4dFJvdXRlSWQuZ2V0KCk7XG4gICAgICAgICAgICAgICAgcm91dGVzLnVwZGF0ZSgoZHJhZnQpID0+IHtcbiAgICAgICAgICAgICAgICAgIGRyYWZ0W25ld05leHRSb3V0ZUlkLnRvU3RyaW5nKCldID0ge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VXJsOiBpbXBvcnRlZFJvdXRlLnJlcXVlc3RVcmwsXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RNZXRob2Q6IGltcG9ydGVkUm91dGUucmVxdWVzdE1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VEYXRhOiBpbXBvcnRlZFJvdXRlLnJlc3BvbnNlRGF0YSBhcyBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlSGVhZGVyczogaW1wb3J0ZWRSb3V0ZS5yZXNwb25zZUhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlU3RhdHVzOiBpbXBvcnRlZFJvdXRlLnJlc3BvbnNlU3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBuZXh0Um91dGVJZC5zZXQobmV3TmV4dFJvdXRlSWQgKyAxKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpbmZvcm1DbGllbnRNb2NrQ2hhbmdlKHJvdXRlcy5nZXQoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGUpID0+XG4gICAgICAgICAgY29uc29sZS5lcnJvcignW25ldHdvcmtdIGltcG9ydFJvdXRlcyBkaWFsb2d1ZSBmYWlsZWQ6JywgZSksXG4gICAgICAgICk7XG4gICAgfSxcbiAgICBleHBvcnRSb3V0ZXMoKSB7XG4gICAgICBnZXRGbGlwcGVyTGliKClcbiAgICAgICAgLmV4cG9ydEZpbGUoSlNPTi5zdHJpbmdpZnkoT2JqZWN0LnZhbHVlcyhyb3V0ZXMuZ2V0KCkpLCBudWxsLCAyKSwge1xuICAgICAgICAgIGRlZmF1bHRQYXRoOiAnTmV0d29ya1BsdWdpblJvdXRlc0V4cG9ydC5qc29uJyxcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlKSA9PlxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tuZXR3b3JrXSBleHBvcnRSb3V0ZXMgc2F2aW5nIGZhaWxlZDonLCBlKSxcbiAgICAgICAgKTtcbiAgICB9LFxuICAgIGNsZWFyUm91dGVzKCkge1xuICAgICAgcm91dGVzLnNldCh7fSk7XG4gICAgICBpbmZvcm1DbGllbnRNb2NrQ2hhbmdlKHJvdXRlcy5nZXQoKSk7XG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVNb2NrUm91dGVzKHJvdXRlczoge1tpZDogc3RyaW5nXTogUm91dGV9KSB7XG4gIGNvbnN0IGV4aXN0ZWRJZFNldDoge1tpZDogc3RyaW5nXToge1ttZXRob2Q6IHN0cmluZ106IGJvb2xlYW59fSA9IHt9O1xuICBjb25zdCBmaWx0ZXJlZFJvdXRlczoge1tpZDogc3RyaW5nXTogUm91dGV9ID0gT2JqZWN0LmVudHJpZXMocm91dGVzKS5yZWR1Y2UoXG4gICAgKGFjY1JvdXRlcywgW2lkLCByb3V0ZV0pID0+IHtcbiAgICAgIGlmIChleGlzdGVkSWRTZXQuaGFzT3duUHJvcGVydHkocm91dGUucmVxdWVzdFVybCkpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGV4aXN0ZWRJZFNldFtyb3V0ZS5yZXF1ZXN0VXJsXS5oYXNPd25Qcm9wZXJ0eShyb3V0ZS5yZXF1ZXN0TWV0aG9kKVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gYWNjUm91dGVzO1xuICAgICAgICB9XG4gICAgICAgIGV4aXN0ZWRJZFNldFtyb3V0ZS5yZXF1ZXN0VXJsXSA9IHtcbiAgICAgICAgICAuLi5leGlzdGVkSWRTZXRbcm91dGUucmVxdWVzdFVybF0sXG4gICAgICAgICAgW3JvdXRlLnJlcXVlc3RNZXRob2RdOiB0cnVlLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7W2lkXTogcm91dGV9LCBhY2NSb3V0ZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhpc3RlZElkU2V0W3JvdXRlLnJlcXVlc3RVcmxdID0ge1xuICAgICAgICAgIFtyb3V0ZS5yZXF1ZXN0TWV0aG9kXTogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1tpZF06IHJvdXRlfSwgYWNjUm91dGVzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHt9LFxuICApO1xuICByZXR1cm4gZmlsdGVyZWRSb3V0ZXM7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUEsK0RBQUFBLFVBQUFDLFNBQUE7QUFBQTtBQUNBLElBQUFBLFFBQU8sVUFBVTtBQW1CakIsYUFBUyxVQUFVLElBQUksS0FBbUI7QUFDdEMsVUFBSSxTQUFVLElBQUksTUFBTSxVQUFVLFNBQVMsQ0FBQyxHQUN4QyxTQUFVLEdBQ1YsUUFBVSxHQUNWLFVBQVU7QUFDZCxhQUFPLFFBQVEsVUFBVTtBQUNyQixlQUFPLFlBQVksVUFBVTtBQUNqQyxhQUFPLElBQUksUUFBUSxTQUFTLFNBQVMsU0FBUyxRQUFRO0FBQ2xELGVBQU8sVUFBVSxTQUFTLFNBQVNDLE1BQW1CO0FBQ2xELGNBQUksU0FBUztBQUNULHNCQUFVO0FBQ1YsZ0JBQUlBO0FBQ0EscUJBQU9BLElBQUc7QUFBQSxpQkFDVDtBQUNELGtCQUFJQyxVQUFTLElBQUksTUFBTSxVQUFVLFNBQVMsQ0FBQyxHQUN2Q0MsVUFBUztBQUNiLHFCQUFPQSxVQUFTRCxRQUFPO0FBQ25CLGdCQUFBQSxRQUFPQyxhQUFZLFVBQVVBO0FBQ2pDLHNCQUFRLE1BQU0sTUFBTUQsT0FBTTtBQUFBLFlBQzlCO0FBQUEsVUFDSjtBQUFBLFFBQ0o7QUFDQSxZQUFJO0FBQ0EsYUFBRyxNQUFNLE9BQU8sTUFBTSxNQUFNO0FBQUEsUUFDaEMsU0FBU0QsTUFBUDtBQUNFLGNBQUksU0FBUztBQUNULHNCQUFVO0FBQ1YsbUJB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LE1BQUk7QUFBQSxNQUM1RDtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQzVEO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFDNUQ7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUM1RDtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQzVEO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFLO0FBQUEsTUFFN0Q7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUM3QztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQzdDO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFDN0M7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUU3QztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQzdDO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFDN0M7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUM3QztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BRzdDO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFDN0M7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUM3QztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQzdDO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFDN0M7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUM3QztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQzdDO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFDN0M7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUU3QztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQzdDO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFDN0M7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUM3QztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQzdDO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFFN0M7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUM3QztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQzdDO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFFN0M7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUM3QztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQzdDO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFDN0M7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUM3QztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQzdDO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFDN0M7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUM3QztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQzdDO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFDN0M7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUM3QztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQzdDO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFDN0M7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUM3QztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQzdDO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFDN0M7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUU1QztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQzlDO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFDNUQ7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUM1RDtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQzVEO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFDNUQ7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUM1RDtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQzVEO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFDNUQ7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUM1RDtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQzVEO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFDNUQ7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUM1RDtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQzVEO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFDNUQ7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUM1RDtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BRTNEO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBRztBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFDNUQ7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUM1RDtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQzVEO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFDM0Q7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFHO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUM1RDtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQzVEO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFDNUQ7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUMzRDtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUc7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQzVEO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFDNUQ7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUM1RDtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQzNEO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBRztBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFDNUQ7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUM1RDtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQzVEO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFFM0Q7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUM1RDtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQzVEO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUc7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFDNUQ7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUM1RDtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQzVEO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFDNUQ7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUM1RDtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQzVEO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFDNUQ7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUM1RDtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQzVEO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFDNUQ7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUM1RDtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQzVEO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFDNUQ7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUFJO0FBQUEsTUFBSTtBQUFBLE1BQUk7QUFBQSxNQUU1RDtBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQzdDO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFDN0M7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUM3QztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQzdDO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFDN0M7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUM3QztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQzdDO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFDN0M7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUM3QztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQzdDO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFDN0M7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUM3QztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQUc7QUFBQSxNQUFHO0FBQUEsTUFBRztBQUFBLE1BQzdDO0FBQUEsTUFBRztBQUFBLE1B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QUEsSUFDUCxtQkFBbUIsRUFBQyxNQUFNLFFBQU87QUFBQSxFQUNuQztBQUFBLEVBQ0E7QUFBQSxJQUNFLEtBQUs7QUFBQSxJQUNMLE9BQU87QUFBQSxJQUNQLE9BQU87QUFBQSxJQUNQLFlBQVk7QUFBQSxJQUNaLE9BQU87QUFBQSxJQUNQLG1CQUFtQixFQUFDLE1BQU0sUUFBTztBQUFBLEVBQ25DO0FBQUEsRUFDQTtBQUFBLElBQ0UsS0FBSztBQUFBLElBQ0wsT0FBTztBQUFBLElBQ1AsT0FBTztBQUFBLElBQ1AsWUFBWTtBQUFBLElBQ1osT0FBTztBQUFBLElBQ1AsbUJBQW1CLEVBQUMsTUFBTSxRQUFPO0FBQUEsRUFDbkM7QUFDRjtBQUVBLElBQU0sZUFBZTtBQUFBLEVBQ25CLE9BQU8sNkJBQU07QUFDZjtBQUVBLElBQU0sYUFBYTtBQUFBLEVBQ2pCLE9BQU8sNkJBQU07QUFDZjtBQUVBLFNBQVMsWUFBWSxLQUFjO0FBQ2pDLFNBQU8sSUFBSSxpQkFDUCxlQUNBLElBQUksVUFDRixJQUFJLFdBQVcsU0FDZixTQUFTLElBQUksUUFBUSxFQUFFLEtBQUssT0FDNUIsU0FBUyxJQUFJLFFBQVEsRUFBRSxJQUFJLE1BQzNCLGFBQ0E7QUFDUjsiLAogICJuYW1lcyI6IFsiZXhwb3J0cyIsICJtb2R1bGUiLCAiZXJyIiwgInBhcmFtcyIsICJvZmZzZXQiLCAiZXhwb3J0cyIsICJlbmNvZGUiLCAiaSIsICJkZWNvZGUiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiZXhwb3J0cyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJzaXplIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInplcm8iLCAiZXhwb3J0cyIsICJCdWZmZXIiLCAibWVzc2FnZSIsICJ0b1N0cmluZyIsICJpIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImNyZWF0ZSIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjcmVhdGVfYXJyYXkiLCAiY3JlYXRlIiwgImJ1ZmZlciIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJzZWxmIiwgImVyciIsICJleHBvcnRzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImV4cG9ydHMiLCAicHJvdG9idWYiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAidG9TdHJpbmciLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiaW5xdWlyZSIsICJlcnIiLCAiZXhwb3J0cyIsICJpc0Fic29sdXRlIiwgInBhdGgiLCAibm9ybWFsaXplIiwgImV4cG9ydHMiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiVHlwZSIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJUeXBlIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInNlbGYiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9zZXJ2aWNlIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImVuY29kZSIsICJtZXNzYWdlIiwgImRlY29kZSIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJmaWVsZCIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJleHBvcnRzIiwgImV4cG9ydHMiLCAibWVzc2FnZSIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJUeXBlIiwgIm1lc3NhZ2UiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiVHlwZSIsICJjb21tb24iLCAiU1lOQyIsICJzZWxmIiwgImVyciIsICJmaWxlbmFtZSIsICJyZXNvbHZlZCIsICJpIiwgInNvdXJjZSIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJUeXBlIiwgImRzdCIsICJwYXRoIiwgInZhbHVlIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIm9wdCIsICJ0b1N0cmluZyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJwcm90b2J1ZiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJUeXBlIiwgInRva2VuIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImNvbW1vbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJwcm90b2J1ZiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJleHBvcnRzIiwgImxlbiIsICJpIiwgImxlbjIiLCAiZXhwb3J0cyIsICJleHBvcnRzIiwgIkJ1ZmZlciIsICJ0b1N0cmluZyIsICJpIiwgImJ5dGVMZW5ndGgiLCAiZXhwb3J0cyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJleHBvcnRzIiwgImV4cG9ydHMiLCAiZXhwb3J0cyIsICJleHBvcnRzIiwgImV4cG9ydHMiLCAiZXhwb3J0cyIsICJleHBvcnRzIiwgInRyZWVzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInNwbGl0T25UYWdzIiwgImlzVGFnIiwgImlzWE1MRGVjbGFyYXRpb24iLCAiaXNDbG9zaW5nVGFnIiwgImlzU2VsZkNsb3NpbmdUYWciLCAiaXNPcGVuaW5nVGFnIiwgIkNvbXBvbmVudCIsICJpbXBvcnRfcmVhY3QiLCAiaW1wb3J0X2FudGQiLCAiaW1wb3J0X2ZsaXBwZXJfcGx1Z2luIiwgInByb3RvYnVmIiwgInJhbmsiLCAiZGVjb21wcmVzcyIsICJpbXBvcnRfcmVhY3QiLCAiaW1wb3J0X2ZsaXBwZXJfcGx1Z2luIiwgIlJlYWN0IiwgInhtbEJlYXV0aWZpZXIiLCAiaW1wb3J0X2ljb25zIiwgImltcG9ydF9yZWFjdCIsICJpbXBvcnRfcmVhY3QiLCAiaW1wb3J0X2ZsaXBwZXJfcGx1Z2luIiwgImltcG9ydF9yZWFjdCIsICJpbXBvcnRfYW50ZCIsICJpbXBvcnRfZmxpcHBlcl9wbHVnaW4iLCAiaW1wb3J0X2ljb25zIiwgIlJlYWN0IiwgImltcG9ydF9hbnRkIiwgImltcG9ydF9mbGlwcGVyX3BsdWdpbiIsICJpbXBvcnRfaWNvbnMiLCAiVGV4dCIsICJzZWxlY3RlZElkIiwgIlJlYWN0IiwgImNvbHVtbnMiLCAibWVzc2FnZSIsICJyb3V0ZXMiLCAiUmVhY3QiLCAiQ29tcG9uZW50Il0KfQo=
